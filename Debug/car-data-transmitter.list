
car-data-transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b60  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  08007d00  08007d00  00008d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008290  08008290  0000a070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008290  08008290  00009290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008298  08008298  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008298  08008298  00009298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800829c  0800829c  0000929c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080082a0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d7c  20000070  08008310  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dec  08008310  0000adec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ddd  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000425a  00000000  00000000  00021e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  000260d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001140  00000000  00000000  00027770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019722  00000000  00000000  000288b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3d8  00000000  00000000  00041fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a258e  00000000  00000000  0005c3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe938  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006348  00000000  00000000  000fe97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00104cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ce8 	.word	0x08007ce8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007ce8 	.word	0x08007ce8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <CLI_HandleResponse>:
    eHandlerCode_MissingParameter,
    eHandlerCode_Last
} eHandlerCode_t;


static void CLI_HandleResponse (uint8_t *response_buffer, size_t buffer_size, eHandlerCode_t error_code) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	4613      	mov	r3, r2
 80005b8:	71fb      	strb	r3, [r7, #7]
    if ((response_buffer == NULL) || (buffer_size == 0) || (error_code < eHandlerCode_First) || (error_code >= eHandlerCode_Last)) {
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d033      	beq.n	8000628 <CLI_HandleResponse+0x7c>
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d030      	beq.n	8000628 <CLI_HandleResponse+0x7c>
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d82d      	bhi.n	8000628 <CLI_HandleResponse+0x7c>
        return;
    }
    switch (error_code) {
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b04      	cmp	r3, #4
 80005d0:	d82c      	bhi.n	800062c <CLI_HandleResponse+0x80>
 80005d2:	a201      	add	r2, pc, #4	@ (adr r2, 80005d8 <CLI_HandleResponse+0x2c>)
 80005d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d8:	080005ed 	.word	0x080005ed
 80005dc:	080005f9 	.word	0x080005f9
 80005e0:	08000605 	.word	0x08000605
 80005e4:	08000611 	.word	0x08000611
 80005e8:	0800061d 	.word	0x0800061d
        case eHandlerCode_Internal: {
            snprintf((char*)response_buffer, buffer_size, "Internal Error\r");
 80005ec:	4a11      	ldr	r2, [pc, #68]	@ (8000634 <CLI_HandleResponse+0x88>)
 80005ee:	68b9      	ldr	r1, [r7, #8]
 80005f0:	68f8      	ldr	r0, [r7, #12]
 80005f2:	f006 ff15 	bl	8007420 <sniprintf>
            break;
 80005f6:	e01a      	b.n	800062e <CLI_HandleResponse+0x82>
        }
        case eHandlerCode_InvalidInput: {
            snprintf((char*)response_buffer, buffer_size, "Invalid Input\r");
 80005f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000638 <CLI_HandleResponse+0x8c>)
 80005fa:	68b9      	ldr	r1, [r7, #8]
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f006 ff0f 	bl	8007420 <sniprintf>
            break;
 8000602:	e014      	b.n	800062e <CLI_HandleResponse+0x82>
        }
        case eHandlerCode_ParameterOutOfRange: {
            snprintf((char*)response_buffer, buffer_size, "Invalid input: parameter out of range.\r");
 8000604:	4a0d      	ldr	r2, [pc, #52]	@ (800063c <CLI_HandleResponse+0x90>)
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f006 ff09 	bl	8007420 <sniprintf>
            break;
 800060e:	e00e      	b.n	800062e <CLI_HandleResponse+0x82>
        }
        case eHandlerCode_TaskQueueFull: {
            snprintf((char*)response_buffer, buffer_size, "Timeout: task queue is full.\r");
 8000610:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <CLI_HandleResponse+0x94>)
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	68f8      	ldr	r0, [r7, #12]
 8000616:	f006 ff03 	bl	8007420 <sniprintf>
            break;
 800061a:	e008      	b.n	800062e <CLI_HandleResponse+0x82>
        }
        case eHandlerCode_MissingParameter: {
            snprintf((char*)response_buffer, buffer_size, "Invalid input: missing parameter\r");
 800061c:	4a09      	ldr	r2, [pc, #36]	@ (8000644 <CLI_HandleResponse+0x98>)
 800061e:	68b9      	ldr	r1, [r7, #8]
 8000620:	68f8      	ldr	r0, [r7, #12]
 8000622:	f006 fefd 	bl	8007420 <sniprintf>
            break;
 8000626:	e002      	b.n	800062e <CLI_HandleResponse+0x82>
        return;
 8000628:	bf00      	nop
 800062a:	e000      	b.n	800062e <CLI_HandleResponse+0x82>
        }
        default: {
        	break;
 800062c:	bf00      	nop
        }
    }
}
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	08007d00 	.word	0x08007d00
 8000638:	08007d10 	.word	0x08007d10
 800063c:	08007d20 	.word	0x08007d20
 8000640:	08007d48 	.word	0x08007d48
 8000644:	08007d68 	.word	0x08007d68

08000648 <CLI_StartTCPHandler>:


bool CLI_StartTCPHandler(sCommandParams_t *cmd_params) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b090      	sub	sp, #64	@ 0x40
 800064c:	af02      	add	r7, sp, #8
 800064e:	6078      	str	r0, [r7, #4]
    if (CMD_API_CheckParams(cmd_params) == false) {
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f9a3 	bl	800099c <CMD_API_CheckParams>
 8000656:	4603      	mov	r3, r0
 8000658:	f083 0301 	eor.w	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <CLI_StartTCPHandler+0x1e>
        return false;
 8000662:	2300      	movs	r3, #0
 8000664:	e0ac      	b.n	80007c0 <CLI_StartTCPHandler+0x178>
    }

    char *params = (char*)cmd_params->params;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	637b      	str	r3, [r7, #52]	@ 0x34

    const char *command_delimiter = ",";
 800066c:	4b56      	ldr	r3, [pc, #344]	@ (80007c8 <CLI_StartTCPHandler+0x180>)
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
	char *saveptr = NULL;
 8000670:	2300      	movs	r3, #0
 8000672:	623b      	str	r3, [r7, #32]
	char *token = NULL;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	@ 0x2c
	token = strtok_r((char*)params, command_delimiter, &saveptr);
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	461a      	mov	r2, r3
 800067e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000680:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000682:	f006 ff65 	bl	8007550 <strtok_r>
 8000686:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (token == NULL) {
 8000688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800068a:	2b00      	cmp	r3, #0
 800068c:	d109      	bne.n	80006a2 <CLI_StartTCPHandler+0x5a>
        CLI_HandleResponse(cmd_params->reply, cmd_params->reply_length, eHandlerCode_MissingParameter);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6898      	ldr	r0, [r3, #8]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	2204      	movs	r2, #4
 8000698:	4619      	mov	r1, r3
 800069a:	f7ff ff87 	bl	80005ac <CLI_HandleResponse>
        return false;
 800069e:	2300      	movs	r3, #0
 80006a0:	e08e      	b.n	80007c0 <CLI_StartTCPHandler+0x178>
    }

    char ip[16] = {0};
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
    strncpy(ip, token, sizeof(token) - 1);
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	2203      	movs	r2, #3
 80006b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80006b8:	4618      	mov	r0, r3
 80006ba:	f006 ff0e 	bl	80074da <strncpy>

	token = strtok_r((char*)params, command_delimiter, &saveptr);
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	461a      	mov	r2, r3
 80006c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80006c6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80006c8:	f006 ff42 	bl	8007550 <strtok_r>
 80006cc:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (token == NULL) {
 80006ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d109      	bne.n	80006e8 <CLI_StartTCPHandler+0xa0>
        CLI_HandleResponse(cmd_params->reply, cmd_params->reply_length, eHandlerCode_MissingParameter);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6898      	ldr	r0, [r3, #8]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	2204      	movs	r2, #4
 80006de:	4619      	mov	r1, r3
 80006e0:	f7ff ff64 	bl	80005ac <CLI_HandleResponse>
        return false;
 80006e4:	2300      	movs	r3, #0
 80006e6:	e06b      	b.n	80007c0 <CLI_StartTCPHandler+0x178>
    }

    uint16_t port = atoi(token);
 80006e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80006ea:	f006 fd37 	bl	800715c <atoi>
 80006ee:	4603      	mov	r3, r0
 80006f0:	857b      	strh	r3, [r7, #42]	@ 0x2a

	token = strtok_r((char*)params, command_delimiter, &saveptr);
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	461a      	mov	r2, r3
 80006f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80006fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80006fc:	f006 ff28 	bl	8007550 <strtok_r>
 8000700:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (token == NULL) {
 8000702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000704:	2b00      	cmp	r3, #0
 8000706:	d109      	bne.n	800071c <CLI_StartTCPHandler+0xd4>
        CLI_HandleResponse(cmd_params->reply, cmd_params->reply_length, eHandlerCode_MissingParameter);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6898      	ldr	r0, [r3, #8]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	2204      	movs	r2, #4
 8000712:	4619      	mov	r1, r3
 8000714:	f7ff ff4a 	bl	80005ac <CLI_HandleResponse>
        return false;
 8000718:	2300      	movs	r3, #0
 800071a:	e051      	b.n	80007c0 <CLI_StartTCPHandler+0x178>
    }

    uint16_t socket = atoi(token);
 800071c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800071e:	f006 fd1d 	bl	800715c <atoi>
 8000722:	4603      	mov	r3, r0
 8000724:	853b      	strh	r3, [r7, #40]	@ 0x28

    sNetworkAppConnParams_t *tcp_params = (sNetworkAppConnParams_t*)HEAP_API_Malloc(sizeof(sNetworkAppConnParams_t));
 8000726:	2214      	movs	r2, #20
 8000728:	2101      	movs	r1, #1
 800072a:	2000      	movs	r0, #0
 800072c:	f000 f96c 	bl	8000a08 <HEAP_API_Alloc>
 8000730:	6278      	str	r0, [r7, #36]	@ 0x24
    if (tcp_params == NULL) {
 8000732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000734:	2b00      	cmp	r3, #0
 8000736:	d109      	bne.n	800074c <CLI_StartTCPHandler+0x104>
    	CLI_HandleResponse(cmd_params->reply, cmd_params->reply_length, eHandlerCode_Internal);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6898      	ldr	r0, [r3, #8]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	f7ff ff32 	bl	80005ac <CLI_HandleResponse>
        return false;
 8000748:	2300      	movs	r3, #0
 800074a:	e039      	b.n	80007c0 <CLI_StartTCPHandler+0x178>
    }

    strncpy((char*)tcp_params->ip, ip, sizeof(tcp_params->ip) - 1);
 800074c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074e:	f107 0110 	add.w	r1, r7, #16
 8000752:	220f      	movs	r2, #15
 8000754:	4618      	mov	r0, r3
 8000756:	f006 fec0 	bl	80074da <strncpy>
    tcp_params->ip[sizeof(tcp_params->ip) - 1] = '\0';
 800075a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075c:	2200      	movs	r2, #0
 800075e:	73da      	strb	r2, [r3, #15]
    tcp_params->port = port;
 8000760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000762:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000764:	821a      	strh	r2, [r3, #16]
    tcp_params->socket = socket;
 8000766:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000768:	b2da      	uxtb	r2, r3
 800076a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076c:	749a      	strb	r2, [r3, #18]

    sDataSendingTask_t tcp_task;
    tcp_task.task = eDataSendingTask_Start;
 800076e:	2300      	movs	r3, #0
 8000770:	723b      	strb	r3, [r7, #8]
    tcp_task.params = tcp_params;
 8000772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000774:	60fb      	str	r3, [r7, #12]
    if (DataSending_APP_AddTask(&tcp_task) == false) {
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fcf0 	bl	8001160 <DataSending_APP_AddTask>
 8000780:	4603      	mov	r3, r0
 8000782:	f083 0301 	eor.w	r3, r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d00c      	beq.n	80007a6 <CLI_StartTCPHandler+0x15e>
    	CLI_HandleResponse(cmd_params->reply, cmd_params->reply_length, eHandlerCode_TaskQueueFull);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6898      	ldr	r0, [r3, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	2203      	movs	r2, #3
 8000796:	4619      	mov	r1, r3
 8000798:	f7ff ff08 	bl	80005ac <CLI_HandleResponse>
        HEAP_API_Free(tcp_params);
 800079c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800079e:	f000 f977 	bl	8000a90 <HEAP_API_Free>
        return false;
 80007a2:	2300      	movs	r3, #0
 80007a4:	e00c      	b.n	80007c0 <CLI_StartTCPHandler+0x178>
    }

    snprintf((char*)cmd_params->reply, cmd_params->reply_length, "Starting TCP connection to %s:%u\r", ip, port);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6898      	ldr	r0, [r3, #8]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68d9      	ldr	r1, [r3, #12]
 80007ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80007b0:	f107 0210 	add.w	r2, r7, #16
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	4613      	mov	r3, r2
 80007b8:	4a04      	ldr	r2, [pc, #16]	@ (80007cc <CLI_StartTCPHandler+0x184>)
 80007ba:	f006 fe31 	bl	8007420 <sniprintf>
    return true;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3738      	adds	r7, #56	@ 0x38
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	08007d8c 	.word	0x08007d8c
 80007cc:	08007d90 	.word	0x08007d90

080007d0 <CLI_StopTCPHandler>:

bool CLI_StopTCPHandler(sCommandParams_t *cmd_params) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	sDataSendingTask_t params = {0};
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
	params.task = eDataSendingTask_Stop;
 80007e2:	2301      	movs	r3, #1
 80007e4:	723b      	strb	r3, [r7, #8]
	params.params = NULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]

    if (DataSending_APP_AddTask(&params) == false) {
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fcb6 	bl	8001160 <DataSending_APP_AddTask>
 80007f4:	4603      	mov	r3, r0
 80007f6:	f083 0301 	eor.w	r3, r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d009      	beq.n	8000814 <CLI_StopTCPHandler+0x44>
    	CLI_HandleResponse(cmd_params->reply, cmd_params->reply_length, eHandlerCode_TaskQueueFull);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6898      	ldr	r0, [r3, #8]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	2203      	movs	r2, #3
 800080a:	4619      	mov	r1, r3
 800080c:	f7ff fece 	bl	80005ac <CLI_HandleResponse>
        return false;
 8000810:	2300      	movs	r3, #0
 8000812:	e008      	b.n	8000826 <CLI_StopTCPHandler+0x56>
    }

    snprintf((char*)cmd_params->reply, cmd_params->reply_length, "Stoping TCP connection\r");
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6898      	ldr	r0, [r3, #8]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	4a04      	ldr	r2, [pc, #16]	@ (8000830 <CLI_StopTCPHandler+0x60>)
 800081e:	4619      	mov	r1, r3
 8000820:	f006 fdfe 	bl	8007420 <sniprintf>
    return true;
 8000824:	2301      	movs	r3, #1
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	08007db4 	.word	0x08007db4

08000834 <CMD_API_FindSeperator>:
 *********************************************************************************************************************/
int CMD_API_FindSeperator (uint8_t *message, uint8_t seperator);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
int CMD_API_FindSeperator (uint8_t *message, uint8_t seperator) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
    char *delimiter_pos = strchr((char*)message, seperator);
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	4619      	mov	r1, r3
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f006 fe29 	bl	800749c <strchr>
 800084a:	60f8      	str	r0, [r7, #12]

    if (delimiter_pos == NULL) {
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d102      	bne.n	8000858 <CMD_API_FindSeperator+0x24>
        return NO_SEPERATOR;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	e009      	b.n	800086c <CMD_API_FindSeperator+0x38>
    } else if ((uint8_t*)delimiter_pos == message) {
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	429a      	cmp	r2, r3
 800085e:	d101      	bne.n	8000864 <CMD_API_FindSeperator+0x30>
        return EMPTY_MESSAGE;
 8000860:	2300      	movs	r3, #0
 8000862:	e003      	b.n	800086c <CMD_API_FindSeperator+0x38>
    }

    return (uint8_t*)delimiter_pos - message + 1;
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	3301      	adds	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <CMD_API_Process>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool CMD_API_Process (sMessage_t *received_message, sCmdLauncherParams_t *cmd_params) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
    if ((received_message->message == NULL) || (received_message->message_length <= 0)) {
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d003      	beq.n	800088e <CMD_API_Process+0x1a>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d101      	bne.n	8000892 <CMD_API_Process+0x1e>
        return false;
 800088e:	2300      	movs	r3, #0
 8000890:	e077      	b.n	8000982 <CMD_API_Process+0x10e>
    }

    for (size_t cmd = 0; cmd < cmd_params->command_table_size; cmd++) {
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
 8000896:	e066      	b.n	8000966 <CMD_API_Process+0xf2>
        const sCommandDesc_t *command = &cmd_params->command_table[cmd];
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800089e:	011b      	lsls	r3, r3, #4
 80008a0:	4413      	add	r3, r2
 80008a2:	623b      	str	r3, [r7, #32]
        int seperator_pos = CMD_API_FindSeperator(received_message->message, *command->separator);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	6a3b      	ldr	r3, [r7, #32]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4610      	mov	r0, r2
 80008b2:	f7ff ffbf 	bl	8000834 <CMD_API_FindSeperator>
 80008b6:	61f8      	str	r0, [r7, #28]

		if (seperator_pos == NO_SEPERATOR) {
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008be:	d109      	bne.n	80008d4 <CMD_API_Process+0x60>
			snprintf((char*)cmd_params->reply, cmd_params->reply_size, "No seperator was found\r\n");
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	6898      	ldr	r0, [r3, #8]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	4a30      	ldr	r2, [pc, #192]	@ (800098c <CMD_API_Process+0x118>)
 80008ca:	4619      	mov	r1, r3
 80008cc:	f006 fda8 	bl	8007420 <sniprintf>
			return false;
 80008d0:	2300      	movs	r3, #0
 80008d2:	e056      	b.n	8000982 <CMD_API_Process+0x10e>
		} else if (seperator_pos == EMPTY_MESSAGE) {
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d109      	bne.n	80008ee <CMD_API_Process+0x7a>
			snprintf((char*)cmd_params->reply, cmd_params->reply_size, "An empty message was received\r\n");
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	6898      	ldr	r0, [r3, #8]
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	4a2b      	ldr	r2, [pc, #172]	@ (8000990 <CMD_API_Process+0x11c>)
 80008e4:	4619      	mov	r1, r3
 80008e6:	f006 fd9b 	bl	8007420 <sniprintf>
			return false;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e049      	b.n	8000982 <CMD_API_Process+0x10e>
		}

        if ((command->command_name_size + 1 == seperator_pos) && (strncmp((char*)command->command_name, (char*)received_message->message, command->command_name_size) == 0)) {
 80008ee:	6a3b      	ldr	r3, [r7, #32]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d132      	bne.n	8000960 <CMD_API_Process+0xec>
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	6818      	ldr	r0, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6819      	ldr	r1, [r3, #0]
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	461a      	mov	r2, r3
 8000908:	f006 fdd5 	bl	80074b6 <strncmp>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d126      	bne.n	8000960 <CMD_API_Process+0xec>
            if (command->function == NULL) {
 8000912:	6a3b      	ldr	r3, [r7, #32]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d109      	bne.n	800092e <CMD_API_Process+0xba>
                snprintf((char*)cmd_params->reply, cmd_params->reply_size, "Command does not have a function\r\n");
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	6898      	ldr	r0, [r3, #8]
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	4a1c      	ldr	r2, [pc, #112]	@ (8000994 <CMD_API_Process+0x120>)
 8000924:	4619      	mov	r1, r3
 8000926:	f006 fd7b 	bl	8007420 <sniprintf>
                return false;
 800092a:	2300      	movs	r3, #0
 800092c:	e029      	b.n	8000982 <CMD_API_Process+0x10e>
            }

            sCommandParams_t params = {
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
                .params = received_message->message + seperator_pos,
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	4413      	add	r3, r2
            sCommandParams_t params = {
 8000944:	60fb      	str	r3, [r7, #12]
                .params_length = received_message->message_length - seperator_pos,
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	1ad3      	subs	r3, r2, r3
            sCommandParams_t params = {
 800094e:	613b      	str	r3, [r7, #16]
            };

            command->function(&params);
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	f107 020c 	add.w	r2, r7, #12
 8000958:	4610      	mov	r0, r2
 800095a:	4798      	blx	r3
            return true;
 800095c:	2301      	movs	r3, #1
 800095e:	e010      	b.n	8000982 <CMD_API_Process+0x10e>
    for (size_t cmd = 0; cmd < cmd_params->command_table_size; cmd++) {
 8000960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000962:	3301      	adds	r3, #1
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800096c:	429a      	cmp	r2, r3
 800096e:	d393      	bcc.n	8000898 <CMD_API_Process+0x24>
        }
    }

    snprintf((char*)cmd_params->reply, cmd_params->reply_size, "Such command does not exist\r\n");
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	6898      	ldr	r0, [r3, #8]
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	4a07      	ldr	r2, [pc, #28]	@ (8000998 <CMD_API_Process+0x124>)
 800097a:	4619      	mov	r1, r3
 800097c:	f006 fd50 	bl	8007420 <sniprintf>
    return false;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3728      	adds	r7, #40	@ 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	08007dcc 	.word	0x08007dcc
 8000990:	08007de8 	.word	0x08007de8
 8000994:	08007e08 	.word	0x08007e08
 8000998:	08007e2c 	.word	0x08007e2c

0800099c <CMD_API_CheckParams>:

bool CMD_API_CheckParams (sCommandParams_t *cmd_params) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	if (cmd_params == NULL) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <CMD_API_CheckParams+0x12>
		return false;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e00a      	b.n	80009c4 <CMD_API_CheckParams+0x28>
	}

	if ((cmd_params->params == NULL) || (cmd_params->params_length == 0)) {
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d003      	beq.n	80009be <CMD_API_CheckParams+0x22>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <CMD_API_CheckParams+0x26>
		return false;
 80009be:	2300      	movs	r3, #0
 80009c0:	e000      	b.n	80009c4 <CMD_API_CheckParams+0x28>
	}

	return true;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <HEAP_API_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool HEAP_API_Init (void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
    if (heap_mutex != NULL) {
 80009d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <HEAP_API_Init+0x30>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HEAP_API_Init+0x10>
        return false;
 80009dc:	2300      	movs	r3, #0
 80009de:	e00c      	b.n	80009fa <HEAP_API_Init+0x2a>
    }

    heap_mutex = osMutexNew(&g_static_uart_mutex_attr);
 80009e0:	4808      	ldr	r0, [pc, #32]	@ (8000a04 <HEAP_API_Init+0x34>)
 80009e2:	f003 f8ab 	bl	8003b3c <osMutexNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a05      	ldr	r2, [pc, #20]	@ (8000a00 <HEAP_API_Init+0x30>)
 80009ea:	6013      	str	r3, [r2, #0]
    if (heap_mutex == NULL) {
 80009ec:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <HEAP_API_Init+0x30>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <HEAP_API_Init+0x28>
        return false;
 80009f4:	2300      	movs	r3, #0
 80009f6:	e000      	b.n	80009fa <HEAP_API_Init+0x2a>
    }

    return true;
 80009f8:	2301      	movs	r3, #1
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000008c 	.word	0x2000008c
 8000a04:	08007eec 	.word	0x08007eec

08000a08 <HEAP_API_Alloc>:

void *HEAP_API_Alloc (bool is_calloc, size_t number, size_t size) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	73fb      	strb	r3, [r7, #15]
    if ((number <= 0) || (size <= 0)) {
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d002      	beq.n	8000a22 <HEAP_API_Alloc+0x1a>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <HEAP_API_Alloc+0x1e>
        return NULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e02e      	b.n	8000a84 <HEAP_API_Alloc+0x7c>
    }

    if (heap_mutex == NULL) {
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <HEAP_API_Alloc+0x84>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d101      	bne.n	8000a32 <HEAP_API_Alloc+0x2a>
        return NULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e028      	b.n	8000a84 <HEAP_API_Alloc+0x7c>
    }

    if (osMutexAcquire(heap_mutex, osWaitForever) != osOK) {
 8000a32:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <HEAP_API_Alloc+0x84>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 f904 	bl	8003c48 <osMutexAcquire>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HEAP_API_Alloc+0x42>
        return NULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e01c      	b.n	8000a84 <HEAP_API_Alloc+0x7c>
    }

    void *ptr = is_calloc ? calloc(number, size) : malloc(number * size);
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d005      	beq.n	8000a5c <HEAP_API_Alloc+0x54>
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	68b8      	ldr	r0, [r7, #8]
 8000a54:	f006 fb86 	bl	8007164 <calloc>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	e007      	b.n	8000a6c <HEAP_API_Alloc+0x64>
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	fb02 f303 	mul.w	r3, r2, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f006 fb99 	bl	800719c <malloc>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	617b      	str	r3, [r7, #20]

    if (osMutexRelease(heap_mutex) != osOK){
 8000a6e:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <HEAP_API_Alloc+0x84>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 f933 	bl	8003cde <osMutexRelease>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HEAP_API_Alloc+0x7a>
        return NULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HEAP_API_Alloc+0x7c>
    }

    return ptr;
 8000a82:	697b      	ldr	r3, [r7, #20]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000008c 	.word	0x2000008c

08000a90 <HEAP_API_Free>:

void HEAP_API_Free (void *memory_pointer) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
    if (memory_pointer == NULL) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d018      	beq.n	8000ad0 <HEAP_API_Free+0x40>
        return;
    }

    if (heap_mutex == NULL) {
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <HEAP_API_Free+0x50>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d016      	beq.n	8000ad4 <HEAP_API_Free+0x44>
        return;
    }

    if (osMutexAcquire(heap_mutex, osWaitForever) != osOK) {
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <HEAP_API_Free+0x50>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f04f 31ff 	mov.w	r1, #4294967295
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 f8ca 	bl	8003c48 <osMutexAcquire>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10e      	bne.n	8000ad8 <HEAP_API_Free+0x48>
        return;
    }

    free(memory_pointer);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f006 fb76 	bl	80071ac <free>

    if (osMutexRelease(heap_mutex) != osOK) {
 8000ac0:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <HEAP_API_Free+0x50>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f003 f90a 	bl	8003cde <osMutexRelease>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	e004      	b.n	8000ada <HEAP_API_Free+0x4a>
        return;
 8000ad0:	bf00      	nop
 8000ad2:	e002      	b.n	8000ada <HEAP_API_Free+0x4a>
        return;
 8000ad4:	bf00      	nop
 8000ad6:	e000      	b.n	8000ada <HEAP_API_Free+0x4a>
        return;
 8000ad8:	bf00      	nop
        return;
    }
}
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000008c 	.word	0x2000008c

08000ae4 <UART_API_Task>:
static void UART_API_Task (void *argument);
static bool UART_API_IsDelimiterReceived (sUartApiTaskData_t *task_data);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void UART_API_Task (void *argument) {
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b089      	sub	sp, #36	@ 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
    while (1) {
        for (eUartApiPort_t port = eUartApiPort_First; port < eUartApiPort_Last; port++) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	77fb      	strb	r3, [r7, #31]
 8000af0:	e1cf      	b.n	8000e92 <UART_API_Task+0x3ae>
            if (g_dynamic_uart_api_lut[port].is_initialized == false) {
 8000af2:	7ffa      	ldrb	r2, [r7, #31]
 8000af4:	49b9      	ldr	r1, [pc, #740]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000af6:	4613      	mov	r3, r2
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	1a9b      	subs	r3, r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	440b      	add	r3, r1
 8000b00:	3315      	adds	r3, #21
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f083 0301 	eor.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f040 81b5 	bne.w	8000e7a <UART_API_Task+0x396>
                continue;
            }

            switch (g_dynamic_uart_api_lut[port].state) {
 8000b10:	7ffa      	ldrb	r2, [r7, #31]
 8000b12:	49b2      	ldr	r1, [pc, #712]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000b14:	4613      	mov	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	1a9b      	subs	r3, r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	3314      	adds	r3, #20
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	f000 8177 	beq.w	8000e16 <UART_API_Task+0x332>
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	f300 81a8 	bgt.w	8000e7e <UART_API_Task+0x39a>
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <UART_API_Task+0x56>
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	f000 8157 	beq.w	8000de6 <UART_API_Task+0x302>

                    g_dynamic_uart_api_lut[port].state = eUartApiState_Initialize;
                    break;
                }
                default: {
                    break;
 8000b38:	e1a1      	b.n	8000e7e <UART_API_Task+0x39a>
                    g_dynamic_uart_api_lut[port].buffer = HEAP_API_Calloc(g_static_uart_api_lut[port].buffer_size, sizeof(char));
 8000b3a:	7ffa      	ldrb	r2, [r7, #31]
 8000b3c:	49a8      	ldr	r1, [pc, #672]	@ (8000de0 <UART_API_Task+0x2fc>)
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	011b      	lsls	r3, r3, #4
 8000b46:	440b      	add	r3, r1
 8000b48:	3304      	adds	r3, #4
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	7ffc      	ldrb	r4, [r7, #31]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4619      	mov	r1, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	f7ff ff58 	bl	8000a08 <HEAP_API_Alloc>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	49a0      	ldr	r1, [pc, #640]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000b5c:	4623      	mov	r3, r4
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	1b1b      	subs	r3, r3, r4
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	440b      	add	r3, r1
 8000b66:	3304      	adds	r3, #4
 8000b68:	601a      	str	r2, [r3, #0]
                    if (g_dynamic_uart_api_lut[port].buffer == NULL) {
 8000b6a:	7ffa      	ldrb	r2, [r7, #31]
 8000b6c:	499b      	ldr	r1, [pc, #620]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000b6e:	4613      	mov	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	1a9b      	subs	r3, r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	440b      	add	r3, r1
 8000b78:	3304      	adds	r3, #4
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f000 8180 	beq.w	8000e82 <UART_API_Task+0x39e>
                    g_dynamic_uart_api_lut[port].index = 0;
 8000b82:	7ffa      	ldrb	r2, [r7, #31]
 8000b84:	4995      	ldr	r1, [pc, #596]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000b86:	4613      	mov	r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	1a9b      	subs	r3, r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	440b      	add	r3, r1
 8000b90:	3308      	adds	r3, #8
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
                    g_dynamic_uart_api_lut[port].state = eUartApiState_Collect;
 8000b96:	7ffa      	ldrb	r2, [r7, #31]
 8000b98:	4990      	ldr	r1, [pc, #576]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	1a9b      	subs	r3, r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	3314      	adds	r3, #20
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
                    while (UART_Driver_Read(port, &symbol) == true) {
 8000baa:	e11c      	b.n	8000de6 <UART_API_Task+0x302>
                        g_dynamic_uart_api_lut[port].buffer[g_dynamic_uart_api_lut[port].index] = symbol;
 8000bac:	7ffa      	ldrb	r2, [r7, #31]
 8000bae:	498b      	ldr	r1, [pc, #556]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	1a9b      	subs	r3, r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	440b      	add	r3, r1
 8000bba:	3304      	adds	r3, #4
 8000bbc:	6819      	ldr	r1, [r3, #0]
 8000bbe:	7ffa      	ldrb	r2, [r7, #31]
 8000bc0:	4886      	ldr	r0, [pc, #536]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4403      	add	r3, r0
 8000bcc:	3308      	adds	r3, #8
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	440b      	add	r3, r1
 8000bd2:	7dfa      	ldrb	r2, [r7, #23]
 8000bd4:	701a      	strb	r2, [r3, #0]
                        g_dynamic_uart_api_lut[port].index++;
 8000bd6:	7ffa      	ldrb	r2, [r7, #31]
 8000bd8:	4980      	ldr	r1, [pc, #512]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000bda:	4613      	mov	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	1a9b      	subs	r3, r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	3308      	adds	r3, #8
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	1c59      	adds	r1, r3, #1
 8000bea:	487c      	ldr	r0, [pc, #496]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000bec:	4613      	mov	r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	1a9b      	subs	r3, r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4403      	add	r3, r0
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	6019      	str	r1, [r3, #0]
                        if (g_dynamic_uart_api_lut[port].index >= g_static_uart_api_lut[port].buffer_size) {
 8000bfa:	7ffa      	ldrb	r2, [r7, #31]
 8000bfc:	4977      	ldr	r1, [pc, #476]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000bfe:	4613      	mov	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	440b      	add	r3, r1
 8000c08:	3308      	adds	r3, #8
 8000c0a:	6819      	ldr	r1, [r3, #0]
 8000c0c:	7ffa      	ldrb	r2, [r7, #31]
 8000c0e:	4874      	ldr	r0, [pc, #464]	@ (8000de0 <UART_API_Task+0x2fc>)
 8000c10:	4613      	mov	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	4413      	add	r3, r2
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	4403      	add	r3, r0
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d320      	bcc.n	8000c64 <UART_API_Task+0x180>
                            memset(g_dynamic_uart_api_lut[port].buffer, 0, g_static_uart_api_lut[port].buffer_size);
 8000c22:	7ffa      	ldrb	r2, [r7, #31]
 8000c24:	496d      	ldr	r1, [pc, #436]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000c26:	4613      	mov	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	1a9b      	subs	r3, r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	440b      	add	r3, r1
 8000c30:	3304      	adds	r3, #4
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	7ffa      	ldrb	r2, [r7, #31]
 8000c36:	496a      	ldr	r1, [pc, #424]	@ (8000de0 <UART_API_Task+0x2fc>)
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	440b      	add	r3, r1
 8000c42:	3304      	adds	r3, #4
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	2100      	movs	r1, #0
 8000c4a:	f006 fc1f 	bl	800748c <memset>
                            g_dynamic_uart_api_lut[port].index = 0;
 8000c4e:	7ffa      	ldrb	r2, [r7, #31]
 8000c50:	4962      	ldr	r1, [pc, #392]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
                            break;
 8000c62:	e0cd      	b.n	8000e00 <UART_API_Task+0x31c>
                        if (g_dynamic_uart_api_lut[port].index == 1 && symbol == '>') {
 8000c64:	7ffa      	ldrb	r2, [r7, #31]
 8000c66:	495d      	ldr	r1, [pc, #372]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	1a9b      	subs	r3, r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	440b      	add	r3, r1
 8000c72:	3308      	adds	r3, #8
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d103      	bne.n	8000c82 <UART_API_Task+0x19e>
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
 8000c7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8000c7e:	f000 80b1 	beq.w	8000de4 <UART_API_Task+0x300>
                        if (g_dynamic_uart_api_lut[port].index == 2 && g_dynamic_uart_api_lut[port].buffer[0] == '>' && symbol == ' ') {
 8000c82:	7ffa      	ldrb	r2, [r7, #31]
 8000c84:	4955      	ldr	r1, [pc, #340]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000c86:	4613      	mov	r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	1a9b      	subs	r3, r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	440b      	add	r3, r1
 8000c90:	3308      	adds	r3, #8
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d140      	bne.n	8000d1a <UART_API_Task+0x236>
 8000c98:	7ffa      	ldrb	r2, [r7, #31]
 8000c9a:	4950      	ldr	r1, [pc, #320]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	1a9b      	subs	r3, r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b3e      	cmp	r3, #62	@ 0x3e
 8000cae:	d134      	bne.n	8000d1a <UART_API_Task+0x236>
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
 8000cb2:	2b20      	cmp	r3, #32
 8000cb4:	d131      	bne.n	8000d1a <UART_API_Task+0x236>
                        	g_dynamic_uart_api_lut[port].index--;
 8000cb6:	7ffa      	ldrb	r2, [r7, #31]
 8000cb8:	4948      	ldr	r1, [pc, #288]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	1e59      	subs	r1, r3, #1
 8000cca:	4844      	ldr	r0, [pc, #272]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000ccc:	4613      	mov	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	1a9b      	subs	r3, r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4403      	add	r3, r0
 8000cd6:	3308      	adds	r3, #8
 8000cd8:	6019      	str	r1, [r3, #0]
                        	g_dynamic_uart_api_lut[port].buffer[g_dynamic_uart_api_lut[port].index] = '\0';
 8000cda:	7ffa      	ldrb	r2, [r7, #31]
 8000cdc:	493f      	ldr	r1, [pc, #252]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3304      	adds	r3, #4
 8000cea:	6819      	ldr	r1, [r3, #0]
 8000cec:	7ffa      	ldrb	r2, [r7, #31]
 8000cee:	483b      	ldr	r0, [pc, #236]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	1a9b      	subs	r3, r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4403      	add	r3, r0
 8000cfa:	3308      	adds	r3, #8
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	440b      	add	r3, r1
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
                        	g_dynamic_uart_api_lut[port].state = eUartApiState_Flush;
 8000d04:	7ffa      	ldrb	r2, [r7, #31]
 8000d06:	4935      	ldr	r1, [pc, #212]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000d08:	4613      	mov	r3, r2
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	3314      	adds	r3, #20
 8000d14:	2202      	movs	r2, #2
 8000d16:	701a      	strb	r2, [r3, #0]
                            break;
 8000d18:	e072      	b.n	8000e00 <UART_API_Task+0x31c>
                        if (symbol != g_dynamic_uart_api_lut[port].delimiter[g_dynamic_uart_api_lut[port].delimiter_length - 1]) {
 8000d1a:	7ffa      	ldrb	r2, [r7, #31]
 8000d1c:	492f      	ldr	r1, [pc, #188]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000d1e:	4613      	mov	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	1a9b      	subs	r3, r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	440b      	add	r3, r1
 8000d28:	330c      	adds	r3, #12
 8000d2a:	6819      	ldr	r1, [r3, #0]
 8000d2c:	7ffa      	ldrb	r2, [r7, #31]
 8000d2e:	482b      	ldr	r0, [pc, #172]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000d30:	4613      	mov	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	1a9b      	subs	r3, r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4403      	add	r3, r0
 8000d3a:	3310      	adds	r3, #16
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	440b      	add	r3, r1
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d159      	bne.n	8000dfe <UART_API_Task+0x31a>
                        if (UART_API_IsDelimiterReceived(&g_dynamic_uart_api_lut[port]) == true) {
 8000d4a:	7ffa      	ldrb	r2, [r7, #31]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	1a9b      	subs	r3, r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4a21      	ldr	r2, [pc, #132]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000d56:	4413      	add	r3, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 f8a1 	bl	8000ea0 <UART_API_IsDelimiterReceived>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d040      	beq.n	8000de6 <UART_API_Task+0x302>
                        	g_dynamic_uart_api_lut[port].index -= g_dynamic_uart_api_lut[port].delimiter_length;
 8000d64:	7ffa      	ldrb	r2, [r7, #31]
 8000d66:	491d      	ldr	r1, [pc, #116]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	1a9b      	subs	r3, r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	3308      	adds	r3, #8
 8000d74:	6819      	ldr	r1, [r3, #0]
 8000d76:	7ffa      	ldrb	r2, [r7, #31]
 8000d78:	4818      	ldr	r0, [pc, #96]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	1a9b      	subs	r3, r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4403      	add	r3, r0
 8000d84:	3310      	adds	r3, #16
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	7ffa      	ldrb	r2, [r7, #31]
 8000d8a:	1ac9      	subs	r1, r1, r3
 8000d8c:	4813      	ldr	r0, [pc, #76]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000d8e:	4613      	mov	r3, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	1a9b      	subs	r3, r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4403      	add	r3, r0
 8000d98:	3308      	adds	r3, #8
 8000d9a:	6019      	str	r1, [r3, #0]
                        	g_dynamic_uart_api_lut[port].buffer[g_dynamic_uart_api_lut[port].index] = '\0';
 8000d9c:	7ffa      	ldrb	r2, [r7, #31]
 8000d9e:	490f      	ldr	r1, [pc, #60]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000da0:	4613      	mov	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	1a9b      	subs	r3, r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	3304      	adds	r3, #4
 8000dac:	6819      	ldr	r1, [r3, #0]
 8000dae:	7ffa      	ldrb	r2, [r7, #31]
 8000db0:	480a      	ldr	r0, [pc, #40]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000db2:	4613      	mov	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4403      	add	r3, r0
 8000dbc:	3308      	adds	r3, #8
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	440b      	add	r3, r1
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
                            g_dynamic_uart_api_lut[port].state = eUartApiState_Flush;
 8000dc6:	7ffa      	ldrb	r2, [r7, #31]
 8000dc8:	4904      	ldr	r1, [pc, #16]	@ (8000ddc <UART_API_Task+0x2f8>)
 8000dca:	4613      	mov	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	3314      	adds	r3, #20
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	701a      	strb	r2, [r3, #0]
                            break;
 8000dda:	e011      	b.n	8000e00 <UART_API_Task+0x31c>
 8000ddc:	20000094 	.word	0x20000094
 8000de0:	08007f20 	.word	0x08007f20
                            continue;
 8000de4:	bf00      	nop
                    while (UART_Driver_Read(port, &symbol) == true) {
 8000de6:	f107 0217 	add.w	r2, r7, #23
 8000dea:	7ffb      	ldrb	r3, [r7, #31]
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fe06 	bl	8001a00 <UART_Driver_Read>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f47f aed8 	bne.w	8000bac <UART_API_Task+0xc8>
 8000dfc:	e000      	b.n	8000e00 <UART_API_Task+0x31c>
                            break;
 8000dfe:	bf00      	nop
                    if (g_dynamic_uart_api_lut[port].state != eUartApiState_Flush) {
 8000e00:	7ffa      	ldrb	r2, [r7, #31]
 8000e02:	4926      	ldr	r1, [pc, #152]	@ (8000e9c <UART_API_Task+0x3b8>)
 8000e04:	4613      	mov	r3, r2
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	1a9b      	subs	r3, r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	3314      	adds	r3, #20
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d137      	bne.n	8000e86 <UART_API_Task+0x3a2>
                    sMessage_t message = {.message = g_dynamic_uart_api_lut[port].buffer, .message_length = g_dynamic_uart_api_lut[port].index};
 8000e16:	7ffa      	ldrb	r2, [r7, #31]
 8000e18:	4920      	ldr	r1, [pc, #128]	@ (8000e9c <UART_API_Task+0x3b8>)
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	1a9b      	subs	r3, r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	3304      	adds	r3, #4
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	7ffa      	ldrb	r2, [r7, #31]
 8000e2c:	491b      	ldr	r1, [pc, #108]	@ (8000e9c <UART_API_Task+0x3b8>)
 8000e2e:	4613      	mov	r3, r2
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	1a9b      	subs	r3, r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	440b      	add	r3, r1
 8000e38:	3308      	adds	r3, #8
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	613b      	str	r3, [r7, #16]
                    osStatus_t status = osMessageQueuePut(g_dynamic_uart_api_lut[port].message_queue_id, &message, MESSAGE_PRIORITY, osWaitForever);
 8000e3e:	7ffa      	ldrb	r2, [r7, #31]
 8000e40:	4916      	ldr	r1, [pc, #88]	@ (8000e9c <UART_API_Task+0x3b8>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	6818      	ldr	r0, [r3, #0]
 8000e4e:	f107 010c 	add.w	r1, r7, #12
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	2200      	movs	r2, #0
 8000e58:	f002 fff2 	bl	8003e40 <osMessageQueuePut>
 8000e5c:	61b8      	str	r0, [r7, #24]
                    if (status != osOK) {
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d112      	bne.n	8000e8a <UART_API_Task+0x3a6>
                    g_dynamic_uart_api_lut[port].state = eUartApiState_Initialize;
 8000e64:	7ffa      	ldrb	r2, [r7, #31]
 8000e66:	490d      	ldr	r1, [pc, #52]	@ (8000e9c <UART_API_Task+0x3b8>)
 8000e68:	4613      	mov	r3, r2
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	1a9b      	subs	r3, r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	440b      	add	r3, r1
 8000e72:	3314      	adds	r3, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
                    break;
 8000e78:	e008      	b.n	8000e8c <UART_API_Task+0x3a8>
                continue;
 8000e7a:	bf00      	nop
 8000e7c:	e006      	b.n	8000e8c <UART_API_Task+0x3a8>
                    break;
 8000e7e:	bf00      	nop
 8000e80:	e004      	b.n	8000e8c <UART_API_Task+0x3a8>
                        continue;
 8000e82:	bf00      	nop
 8000e84:	e002      	b.n	8000e8c <UART_API_Task+0x3a8>
                        break;
 8000e86:	bf00      	nop
 8000e88:	e000      	b.n	8000e8c <UART_API_Task+0x3a8>
                        break;
 8000e8a:	bf00      	nop
        for (eUartApiPort_t port = eUartApiPort_First; port < eUartApiPort_Last; port++) {
 8000e8c:	7ffb      	ldrb	r3, [r7, #31]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	77fb      	strb	r3, [r7, #31]
 8000e92:	7ffb      	ldrb	r3, [r7, #31]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	f67f ae2c 	bls.w	8000af2 <UART_API_Task+0xe>
 8000e9a:	e627      	b.n	8000aec <UART_API_Task+0x8>
 8000e9c:	20000094 	.word	0x20000094

08000ea0 <UART_API_IsDelimiterReceived>:

        }
    }
}

static bool UART_API_IsDelimiterReceived (sUartApiTaskData_t *task_data) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
    if ((task_data->buffer == NULL) || (task_data->index < task_data->delimiter_length) || (task_data->delimiter == NULL) || (task_data->delimiter_length <= 0)) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00d      	beq.n	8000ecc <UART_API_IsDelimiterReceived+0x2c>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d307      	bcc.n	8000ecc <UART_API_IsDelimiterReceived+0x2c>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <UART_API_IsDelimiterReceived+0x2c>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <UART_API_IsDelimiterReceived+0x30>
        return false;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e016      	b.n	8000efe <UART_API_IsDelimiterReceived+0x5e>
    }

    const char *start_index = (char*)task_data->buffer + task_data->index - task_data->delimiter_length;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6899      	ldr	r1, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	1acb      	subs	r3, r1, r3
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]

    return strncmp(start_index, (char*)task_data->delimiter, task_data->delimiter_length) == 0;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68d9      	ldr	r1, [r3, #12]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f006 fae2 	bl	80074b6 <strncmp>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bf0c      	ite	eq
 8000ef8:	2301      	moveq	r3, #1
 8000efa:	2300      	movne	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <UART_API_Init>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool UART_API_Init (eUartApiPort_t port, uint32_t baudrate, const char *delimiter, size_t delimiter_length) {
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	4603      	mov	r3, r0
 8000f16:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartApiPort_First) || (port >= eUartApiPort_Last)) {
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <UART_API_Init+0x1a>
        return false;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e0a6      	b.n	8001070 <UART_API_Init+0x168>
    }

    if (UART_Driver_Init(port, baudrate) == false) {
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fc5c 	bl	80017e4 <UART_Driver_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f083 0301 	eor.w	r3, r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <UART_API_Init+0x34>
        return false;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e099      	b.n	8001070 <UART_API_Init+0x168>
    }

    if (delimiter_length <= 0) {
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <UART_API_Init+0x3e>
        return false;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e094      	b.n	8001070 <UART_API_Init+0x168>
    }

    g_dynamic_uart_api_lut[port].delimiter = HEAP_API_Calloc(delimiter_length, sizeof(char));
 8000f46:	7bfc      	ldrb	r4, [r7, #15]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	6839      	ldr	r1, [r7, #0]
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff fd5b 	bl	8000a08 <HEAP_API_Alloc>
 8000f52:	4602      	mov	r2, r0
 8000f54:	4948      	ldr	r1, [pc, #288]	@ (8001078 <UART_API_Init+0x170>)
 8000f56:	4623      	mov	r3, r4
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	1b1b      	subs	r3, r3, r4
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	440b      	add	r3, r1
 8000f60:	330c      	adds	r3, #12
 8000f62:	601a      	str	r2, [r3, #0]
    if (g_dynamic_uart_api_lut[port].delimiter == NULL) {
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	4944      	ldr	r1, [pc, #272]	@ (8001078 <UART_API_Init+0x170>)
 8000f68:	4613      	mov	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	330c      	adds	r3, #12
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <UART_API_Init+0x76>
            return false;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e078      	b.n	8001070 <UART_API_Init+0x168>
    }
	memcpy(g_dynamic_uart_api_lut[port].delimiter, delimiter, delimiter_length);
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	493d      	ldr	r1, [pc, #244]	@ (8001078 <UART_API_Init+0x170>)
 8000f82:	4613      	mov	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	330c      	adds	r3, #12
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f006 fb1b 	bl	80075d0 <memcpy>

    g_dynamic_uart_api_lut[port].delimiter_length = delimiter_length;
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	4936      	ldr	r1, [pc, #216]	@ (8001078 <UART_API_Init+0x170>)
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	3310      	adds	r3, #16
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	601a      	str	r2, [r3, #0]

    g_dynamic_uart_api_lut[port].message_queue_id = osMessageQueueNew(MESSAGE_QUEUE_SIZE, sizeof(sMessage_t), &g_static_uart_api_lut[port].queue_attributes);
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	3308      	adds	r3, #8
 8000fba:	4a30      	ldr	r2, [pc, #192]	@ (800107c <UART_API_Init+0x174>)
 8000fbc:	4413      	add	r3, r2
 8000fbe:	7bfc      	ldrb	r4, [r7, #15]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	2108      	movs	r1, #8
 8000fc4:	2008      	movs	r0, #8
 8000fc6:	f002 fec7 	bl	8003d58 <osMessageQueueNew>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	492a      	ldr	r1, [pc, #168]	@ (8001078 <UART_API_Init+0x170>)
 8000fce:	4623      	mov	r3, r4
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	1b1b      	subs	r3, r3, r4
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	601a      	str	r2, [r3, #0]
    if (g_dynamic_uart_api_lut[port].message_queue_id == NULL) {
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	4926      	ldr	r1, [pc, #152]	@ (8001078 <UART_API_Init+0x170>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	1a9b      	subs	r3, r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <UART_API_Init+0xea>
        return false;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e03e      	b.n	8001070 <UART_API_Init+0x168>
    }

    g_dynamic_uart_api_lut[port].mutex_id = osMutexNew(&g_static_uart_api_lut[port].mutex_attributes);
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	3320      	adds	r3, #32
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800107c <UART_API_Init+0x174>)
 8001000:	4413      	add	r3, r2
 8001002:	7bfc      	ldrb	r4, [r7, #15]
 8001004:	4618      	mov	r0, r3
 8001006:	f002 fd99 	bl	8003b3c <osMutexNew>
 800100a:	4602      	mov	r2, r0
 800100c:	491a      	ldr	r1, [pc, #104]	@ (8001078 <UART_API_Init+0x170>)
 800100e:	4623      	mov	r3, r4
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	1b1b      	subs	r3, r3, r4
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	3318      	adds	r3, #24
 800101a:	601a      	str	r2, [r3, #0]
    if (g_dynamic_uart_api_lut[port].mutex_id == NULL) {
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	4916      	ldr	r1, [pc, #88]	@ (8001078 <UART_API_Init+0x170>)
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	3318      	adds	r3, #24
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <UART_API_Init+0x12e>
        return false;
 8001032:	2300      	movs	r3, #0
 8001034:	e01c      	b.n	8001070 <UART_API_Init+0x168>
    }

    if (g_uart_api_task_handle == NULL) {
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <UART_API_Init+0x178>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10d      	bne.n	800105a <UART_API_Init+0x152>
        g_uart_api_task_handle = osThreadNew(UART_API_Task, NULL, &g_uart_api_task_attr);
 800103e:	4a11      	ldr	r2, [pc, #68]	@ (8001084 <UART_API_Init+0x17c>)
 8001040:	2100      	movs	r1, #0
 8001042:	4811      	ldr	r0, [pc, #68]	@ (8001088 <UART_API_Init+0x180>)
 8001044:	f002 fce8 	bl	8003a18 <osThreadNew>
 8001048:	4603      	mov	r3, r0
 800104a:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <UART_API_Init+0x178>)
 800104c:	6013      	str	r3, [r2, #0]
        if (g_uart_api_task_handle == NULL) {
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <UART_API_Init+0x178>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <UART_API_Init+0x152>
            return false;
 8001056:	2300      	movs	r3, #0
 8001058:	e00a      	b.n	8001070 <UART_API_Init+0x168>
        }
    }

    g_dynamic_uart_api_lut[port].is_initialized = true;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	4906      	ldr	r1, [pc, #24]	@ (8001078 <UART_API_Init+0x170>)
 800105e:	4613      	mov	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	3315      	adds	r3, #21
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
    return true;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	20000094 	.word	0x20000094
 800107c:	08007f20 	.word	0x08007f20
 8001080:	20000090 	.word	0x20000090
 8001084:	08007efc 	.word	0x08007efc
 8001088:	08000ae5 	.word	0x08000ae5

0800108c <UART_API_Receive>:

    return true;
}


bool UART_API_Receive (eUartApiPort_t port, sMessage_t *message, uint32_t wait_time) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartApiPort_First) || (port >= eUartApiPort_Last) || (message == NULL) || (wait_time <= 0)) {
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d805      	bhi.n	80010ac <UART_API_Receive+0x20>
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <UART_API_Receive+0x20>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <UART_API_Receive+0x24>
        return false;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e013      	b.n	80010d8 <UART_API_Receive+0x4c>
    }

    osStatus_t status = osMessageQueueGet(g_dynamic_uart_api_lut[port].message_queue_id, message, MESSAGE_PRIORITY, wait_time);
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	490b      	ldr	r1, [pc, #44]	@ (80010e0 <UART_API_Receive+0x54>)
 80010b4:	4613      	mov	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	1a9b      	subs	r3, r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	f002 ff1b 	bl	8003f00 <osMessageQueueGet>
 80010ca:	6178      	str	r0, [r7, #20]
    if (status != osOK) {
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <UART_API_Receive+0x4a>
        return false;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <UART_API_Receive+0x4c>
    }

    return true;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000094 	.word	0x20000094

080010e4 <CLI_APP_Init>:
    .reply_size = CLI_RESPONSE_BUFFER_SIZE
};

static void CLI_APP_Task (void *arguments);

bool CLI_APP_Init (void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
    if (cli_app_thread == NULL) {
 80010e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <CLI_APP_Init+0x30>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10d      	bne.n	800110c <CLI_APP_Init+0x28>
    	cli_app_thread = osThreadNew(CLI_APP_Task, CLI_APP_THREAD_NO_ARGS, &cli_app_thread_attr);
 80010f0:	4a09      	ldr	r2, [pc, #36]	@ (8001118 <CLI_APP_Init+0x34>)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4809      	ldr	r0, [pc, #36]	@ (800111c <CLI_APP_Init+0x38>)
 80010f6:	f002 fc8f 	bl	8003a18 <osThreadNew>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <CLI_APP_Init+0x30>)
 80010fe:	6013      	str	r3, [r2, #0]
    	if (cli_app_thread == NULL) {
 8001100:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <CLI_APP_Init+0x30>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <CLI_APP_Init+0x28>
			return false;
 8001108:	2300      	movs	r3, #0
 800110a:	e000      	b.n	800110e <CLI_APP_Init+0x2a>
		}
    }

    return true;
 800110c:	2301      	movs	r3, #1
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200000e8 	.word	0x200000e8
 8001118:	08007fd0 	.word	0x08007fd0
 800111c:	08001121 	.word	0x08001121

08001120 <CLI_APP_Task>:


static void CLI_APP_Task (void *arguments) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    while (1) {
        if (UART_API_Receive(CLI_UART_PORT, &received_message, osWaitForever) == false) {
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	490a      	ldr	r1, [pc, #40]	@ (8001158 <CLI_APP_Task+0x38>)
 800112e:	2001      	movs	r0, #1
 8001130:	f7ff ffac 	bl	800108c <UART_API_Receive>
 8001134:	4603      	mov	r3, r0
 8001136:	f083 0301 	eor.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d109      	bne.n	8001154 <CLI_APP_Task+0x34>
            continue;
        }
        if (CMD_API_Process(&received_message, &command_parser) == false) {
 8001140:	4906      	ldr	r1, [pc, #24]	@ (800115c <CLI_APP_Task+0x3c>)
 8001142:	4805      	ldr	r0, [pc, #20]	@ (8001158 <CLI_APP_Task+0x38>)
 8001144:	f7ff fb96 	bl	8000874 <CMD_API_Process>
            //debug_err
        }

        HEAP_API_Free(received_message.message);
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <CLI_APP_Task+0x38>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fc9f 	bl	8000a90 <HEAP_API_Free>
 8001152:	e7e9      	b.n	8001128 <CLI_APP_Task+0x8>
            continue;
 8001154:	bf00      	nop
        if (UART_API_Receive(CLI_UART_PORT, &received_message, osWaitForever) == false) {
 8001156:	e7e7      	b.n	8001128 <CLI_APP_Task+0x8>
 8001158:	200002ec 	.word	0x200002ec
 800115c:	20000000 	.word	0x20000000

08001160 <DataSending_APP_AddTask>:
	}

	return true;
}

bool DataSending_APP_AddTask (sDataSendingTask_t *task) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	if ((task->params == NULL) || (task->task < eDataSendingTask_First) || (task->task >= eDataSendingTask_Last)) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <DataSending_APP_AddTask+0x18>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d901      	bls.n	800117c <DataSending_APP_AddTask+0x1c>
		return false;
 8001178:	2300      	movs	r3, #0
 800117a:	e012      	b.n	80011a2 <DataSending_APP_AddTask+0x42>
	}

	if (data_sending_mq == NULL) {
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <DataSending_APP_AddTask+0x4c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <DataSending_APP_AddTask+0x28>
		return false;
 8001184:	2300      	movs	r3, #0
 8001186:	e00c      	b.n	80011a2 <DataSending_APP_AddTask+0x42>
	}

	if (osMessageQueuePut(data_sending_mq, task, MESSAGE_PRIORITY, DATA_SENDING_APP_MQ_TIMEOUT) != osOK) {
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <DataSending_APP_AddTask+0x4c>)
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	23fa      	movs	r3, #250	@ 0xfa
 800118e:	2200      	movs	r2, #0
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	f002 fe55 	bl	8003e40 <osMessageQueuePut>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <DataSending_APP_AddTask+0x40>
		return false;
 800119c:	2300      	movs	r3, #0
 800119e:	e000      	b.n	80011a2 <DataSending_APP_AddTask+0x42>
	}

	return true;
 80011a0:	2301      	movs	r3, #1
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200002f4 	.word	0x200002f4

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b4:	f000 fd88 	bl	8001cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b8:	f000 f836 	bl	8001228 <SystemClock_Config>
//  MX_I2C1_Init();
//  MX_USART1_UART_Init();
//  MX_USART6_UART_Init();
//  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  if (HEAP_API_Init() == false) {
 80011bc:	f7ff fc08 	bl	80009d0 <HEAP_API_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f083 0301 	eor.w	r3, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <main+0x20>
	  Error_Handler();
 80011cc:	f000 f8aa 	bl	8001324 <Error_Handler>
  }
  if (GPIO_Driver_Init() == false) {
 80011d0:	f000 f8d6 	bl	8001380 <GPIO_Driver_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f083 0301 	eor.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <main+0x34>
	  Error_Handler();
 80011e0:	f000 f8a0 	bl	8001324 <Error_Handler>
//  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011e4:	f002 fbce 	bl	8003984 <osKernelInitialize>
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
/* add threads, ... */
	if (UART_API_Init(eUartApiPort_Usart2, 115200, "\r\n", 2) == false) {
 80011e8:	2302      	movs	r3, #2
 80011ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001224 <main+0x74>)
 80011ec:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff fe89 	bl	8000f08 <UART_API_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f083 0301 	eor.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <main+0x56>
		Error_Handler();
 8001202:	f000 f88f 	bl	8001324 <Error_Handler>
	}
	if (CLI_APP_Init() == false) {
 8001206:	f7ff ff6d 	bl	80010e4 <CLI_APP_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	f083 0301 	eor.w	r3, r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <main+0x6a>
		Error_Handler();
 8001216:	f000 f885 	bl	8001324 <Error_Handler>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800121a:	f002 fbd7 	bl	80039cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800121e:	bf00      	nop
 8001220:	e7fd      	b.n	800121e <main+0x6e>
 8001222:	bf00      	nop
 8001224:	08007ed0 	.word	0x08007ed0

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	@ 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	@ 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f006 f928 	bl	800748c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b29      	ldr	r3, [pc, #164]	@ (80012f8 <SystemClock_Config+0xd0>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	4a28      	ldr	r2, [pc, #160]	@ (80012f8 <SystemClock_Config+0xd0>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	@ 0x40
 800125c:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <SystemClock_Config+0xd0>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <SystemClock_Config+0xd4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001274:	4a21      	ldr	r2, [pc, #132]	@ (80012fc <SystemClock_Config+0xd4>)
 8001276:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <SystemClock_Config+0xd4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001288:	2302      	movs	r3, #2
 800128a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001294:	2302      	movs	r3, #2
 8001296:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001298:	2300      	movs	r3, #0
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800129c:	2310      	movs	r3, #16
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012a6:	2304      	movs	r3, #4
 80012a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012aa:	2307      	movs	r3, #7
 80012ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fe2c 	bl	8001f10 <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012be:	f000 f831 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c6:	2302      	movs	r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 f88e 	bl	8002400 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ea:	f000 f81b 	bl	8001324 <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	@ 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001312:	f000 fcfb 	bl	8001d0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40000400 	.word	0x40000400

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <Error_Handler+0x8>

08001330 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	041a      	lsls	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800135a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800135c:	4907      	ldr	r1, [pc, #28]	@ (800137c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4313      	orrs	r3, r2
 8001362:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001366:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4013      	ands	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40023800 	.word	0x40023800

08001380 <GPIO_Driver_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool GPIO_Driver_Init (void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
    LL_GPIO_InitTypeDef gpio_init_struct = {0};
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	615a      	str	r2, [r3, #20]
    bool is_init_successful = true;
 8001396:	2301      	movs	r3, #1
 8001398:	77fb      	strb	r3, [r7, #31]

    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 800139a:	2300      	movs	r3, #0
 800139c:	77bb      	strb	r3, [r7, #30]
 800139e:	e053      	b.n	8001448 <GPIO_Driver_Init+0xc8>
        LL_AHB1_GRP1_EnableClock(g_static_gpio_lut[pin].clock);
 80013a0:	7fbb      	ldrb	r3, [r7, #30]
 80013a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001458 <GPIO_Driver_Init+0xd8>)
 80013a4:	015b      	lsls	r3, r3, #5
 80013a6:	4413      	add	r3, r2
 80013a8:	3318      	adds	r3, #24
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ffcf 	bl	8001350 <LL_AHB1_GRP1_EnableClock>
        LL_GPIO_ResetOutputPin(g_static_gpio_lut[pin].port, g_static_gpio_lut[pin].pin);
 80013b2:	7fbb      	ldrb	r3, [r7, #30]
 80013b4:	4a28      	ldr	r2, [pc, #160]	@ (8001458 <GPIO_Driver_Init+0xd8>)
 80013b6:	015b      	lsls	r3, r3, #5
 80013b8:	4413      	add	r3, r2
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	7fbb      	ldrb	r3, [r7, #30]
 80013be:	4926      	ldr	r1, [pc, #152]	@ (8001458 <GPIO_Driver_Init+0xd8>)
 80013c0:	015b      	lsls	r3, r3, #5
 80013c2:	440b      	add	r3, r1
 80013c4:	3304      	adds	r3, #4
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4610      	mov	r0, r2
 80013cc:	f7ff ffb0 	bl	8001330 <LL_GPIO_ResetOutputPin>

        gpio_init_struct.Pin = g_static_gpio_lut[pin].pin;
 80013d0:	7fbb      	ldrb	r3, [r7, #30]
 80013d2:	4a21      	ldr	r2, [pc, #132]	@ (8001458 <GPIO_Driver_Init+0xd8>)
 80013d4:	015b      	lsls	r3, r3, #5
 80013d6:	4413      	add	r3, r2
 80013d8:	3304      	adds	r3, #4
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	607b      	str	r3, [r7, #4]
        gpio_init_struct.Mode = g_static_gpio_lut[pin].mode;
 80013de:	7fbb      	ldrb	r3, [r7, #30]
 80013e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001458 <GPIO_Driver_Init+0xd8>)
 80013e2:	015b      	lsls	r3, r3, #5
 80013e4:	4413      	add	r3, r2
 80013e6:	3308      	adds	r3, #8
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	60bb      	str	r3, [r7, #8]
        gpio_init_struct.Speed = g_static_gpio_lut[pin].speed;
 80013ec:	7fbb      	ldrb	r3, [r7, #30]
 80013ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001458 <GPIO_Driver_Init+0xd8>)
 80013f0:	015b      	lsls	r3, r3, #5
 80013f2:	4413      	add	r3, r2
 80013f4:	330c      	adds	r3, #12
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
        gpio_init_struct.OutputType = g_static_gpio_lut[pin].output;
 80013fa:	7fbb      	ldrb	r3, [r7, #30]
 80013fc:	4a16      	ldr	r2, [pc, #88]	@ (8001458 <GPIO_Driver_Init+0xd8>)
 80013fe:	015b      	lsls	r3, r3, #5
 8001400:	4413      	add	r3, r2
 8001402:	3310      	adds	r3, #16
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	613b      	str	r3, [r7, #16]
        gpio_init_struct.Pull = g_static_gpio_lut[pin].pull;
 8001408:	7fbb      	ldrb	r3, [r7, #30]
 800140a:	4a13      	ldr	r2, [pc, #76]	@ (8001458 <GPIO_Driver_Init+0xd8>)
 800140c:	015b      	lsls	r3, r3, #5
 800140e:	4413      	add	r3, r2
 8001410:	3314      	adds	r3, #20
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	617b      	str	r3, [r7, #20]
        gpio_init_struct.Alternate = g_static_gpio_lut[pin].alternate;
 8001416:	7fbb      	ldrb	r3, [r7, #30]
 8001418:	4a0f      	ldr	r2, [pc, #60]	@ (8001458 <GPIO_Driver_Init+0xd8>)
 800141a:	015b      	lsls	r3, r3, #5
 800141c:	4413      	add	r3, r2
 800141e:	331c      	adds	r3, #28
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	61bb      	str	r3, [r7, #24]

        if (LL_GPIO_Init(g_static_gpio_lut[pin].port, &gpio_init_struct) != SUCCESS) {
 8001424:	7fbb      	ldrb	r3, [r7, #30]
 8001426:	4a0c      	ldr	r2, [pc, #48]	@ (8001458 <GPIO_Driver_Init+0xd8>)
 8001428:	015b      	lsls	r3, r3, #5
 800142a:	4413      	add	r3, r2
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	1d3a      	adds	r2, r7, #4
 8001430:	4611      	mov	r1, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fddb 	bl	8002fee <LL_GPIO_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <GPIO_Driver_Init+0xc2>
            is_init_successful = false;
 800143e:	2300      	movs	r3, #0
 8001440:	77fb      	strb	r3, [r7, #31]
    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 8001442:	7fbb      	ldrb	r3, [r7, #30]
 8001444:	3301      	adds	r3, #1
 8001446:	77bb      	strb	r3, [r7, #30]
 8001448:	7fbb      	ldrb	r3, [r7, #30]
 800144a:	2b05      	cmp	r3, #5
 800144c:	d9a8      	bls.n	80013a0 <GPIO_Driver_Init+0x20>
        }
    }

    return is_init_successful;
 800144e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	08007ff4 	.word	0x08007ff4

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4907      	ldr	r1, [pc, #28]	@ (80014b0 <__NVIC_EnableIRQ+0x38>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	@ (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	@ (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	@ 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	@ 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	60da      	str	r2, [r3, #12]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(const USART_TypeDef *USARTx)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800159e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015a2:	bf0c      	ite	eq
 80015a4:	2301      	moveq	r3, #1
 80015a6:	2300      	movne	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	615a      	str	r2, [r3, #20]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0320 	and.w	r3, r3, #32
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	@ 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	330c      	adds	r3, #12
 8001614:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	e853 3f00 	ldrex	r3, [r3]
 800161c:	60bb      	str	r3, [r7, #8]
   return(result);
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f043 0320 	orr.w	r3, r3, #32
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	330c      	adds	r3, #12
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	61ba      	str	r2, [r7, #24]
 800162e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001630:	6979      	ldr	r1, [r7, #20]
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	e841 2300 	strex	r3, r2, [r1]
 8001638:	613b      	str	r3, [r7, #16]
   return(result);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1e7      	bne.n	8001610 <LL_USART_EnableIT_RXNE+0x8>
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b20      	cmp	r3, #32
 8001660:	bf0c      	ite	eq
 8001662:	2301      	moveq	r3, #1
 8001664:	2300      	movne	r3, #0
 8001666:	b2db      	uxtb	r3, r3
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	b2db      	uxtb	r3, r3
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	605a      	str	r2, [r3, #4]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80016b4:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016b8:	4907      	ldr	r1, [pc, #28]	@ (80016d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4313      	orrs	r3, r2
 80016be:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4013      	ands	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40023800 	.word	0x40023800

080016dc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016e4:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016e8:	4907      	ldr	r1, [pc, #28]	@ (8001708 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4013      	ands	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	40023800 	.word	0x40023800

0800170c <UART_Driver_IRQReceive>:
 *********************************************************************************************************************/
static void UART_Driver_IRQReceive (eUartPort_t port);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void UART_Driver_IRQReceive (eUartPort_t port) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
    if ((port < eUartPort_First) || (port >= eUartPort_Last)) {
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d840      	bhi.n	800179e <UART_Driver_IRQReceive+0x92>
        return;
    }

    if (g_static_uart_rb[port] != NULL) {
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	4a23      	ldr	r2, [pc, #140]	@ (80017ac <UART_Driver_IRQReceive+0xa0>)
 8001720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03c      	beq.n	80017a2 <UART_Driver_IRQReceive+0x96>
        if ((LL_USART_IsActiveFlag_RXNE(g_static_uart_lut[port].port)) && (LL_USART_IsEnabledIT_RXNE(g_static_uart_lut[port].port))) {
 8001728:	79fa      	ldrb	r2, [r7, #7]
 800172a:	4921      	ldr	r1, [pc, #132]	@ (80017b0 <UART_Driver_IRQReceive+0xa4>)
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	440b      	add	r3, r1
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff52 	bl	80015e2 <LL_USART_IsActiveFlag_RXNE>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d02e      	beq.n	80017a2 <UART_Driver_IRQReceive+0x96>
 8001744:	79fa      	ldrb	r2, [r7, #7]
 8001746:	491a      	ldr	r1, [pc, #104]	@ (80017b0 <UART_Driver_IRQReceive+0xa4>)
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	440b      	add	r3, r1
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff7a 	bl	800164e <LL_USART_IsEnabledIT_RXNE>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <UART_Driver_IRQReceive+0x96>
            uint8_t data = LL_USART_ReceiveData8(g_static_uart_lut[port].port);
 8001760:	79fa      	ldrb	r2, [r7, #7]
 8001762:	4913      	ldr	r1, [pc, #76]	@ (80017b0 <UART_Driver_IRQReceive+0xa4>)
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	440b      	add	r3, r1
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff7f 	bl	8001674 <LL_USART_ReceiveData8>
 8001776:	4603      	mov	r3, r0
 8001778:	73fb      	strb	r3, [r7, #15]
            RingBufferEnqueue(g_static_uart_rb[port], data);
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4a0b      	ldr	r2, [pc, #44]	@ (80017ac <UART_Driver_IRQReceive+0xa0>)
 800177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f005 fc7a 	bl	8007080 <RingBufferEnqueue>
            if (port == eUartPort_Usart2) {
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <UART_Driver_IRQReceive+0x96>
            	LL_USART_TransmitData8(USART2, data);
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	4619      	mov	r1, r3
 8001796:	4807      	ldr	r0, [pc, #28]	@ (80017b4 <UART_Driver_IRQReceive+0xa8>)
 8001798:	f7ff ff79 	bl	800168e <LL_USART_TransmitData8>
            }
        }
    }

    return;
 800179c:	e001      	b.n	80017a2 <UART_Driver_IRQReceive+0x96>
        return;
 800179e:	bf00      	nop
 80017a0:	e000      	b.n	80017a4 <UART_Driver_IRQReceive+0x98>
    return;
 80017a2:	bf00      	nop
}
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200002f8 	.word	0x200002f8
 80017b0:	080080b4 	.word	0x080080b4
 80017b4:	40004400 	.word	0x40004400

080017b8 <USART1_IRQHandler>:

void USART1_IRQHandler (void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
    UART_Driver_IRQReceive(eUartPort_Usart1);
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff ffa5 	bl	800170c <UART_Driver_IRQReceive>
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <USART2_IRQHandler>:

void USART2_IRQHandler (void) {
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
    UART_Driver_IRQReceive(eUartPort_Usart2);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff ff9e 	bl	800170c <UART_Driver_IRQReceive>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <USART6_IRQHandler>:

void USART6_IRQHandler (void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	UART_Driver_IRQReceive(eUartPort_Usart6);
 80017d8:	2002      	movs	r0, #2
 80017da:	f7ff ff97 	bl	800170c <UART_Driver_IRQReceive>
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <UART_Driver_Init>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool UART_Driver_Init (eUartPort_t port, uint32_t baudrate) {
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b08b      	sub	sp, #44	@ 0x2c
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
    if ((port < eUartPort_First) || (port >= eUartPort_Last)) {
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <UART_Driver_Init+0x16>
        return false;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e0fa      	b.n	80019f0 <UART_Driver_Init+0x20c>
    }

    LL_USART_InitTypeDef usart_init_struct = {0};
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	619a      	str	r2, [r3, #24]

    g_static_uart_lut[port].enable_clock(g_static_uart_lut[port].clock);
 800180e:	79fa      	ldrb	r2, [r7, #7]
 8001810:	4979      	ldr	r1, [pc, #484]	@ (80019f8 <UART_Driver_Init+0x214>)
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	440b      	add	r3, r1
 800181c:	3328      	adds	r3, #40	@ 0x28
 800181e:	6819      	ldr	r1, [r3, #0]
 8001820:	79fa      	ldrb	r2, [r7, #7]
 8001822:	4875      	ldr	r0, [pc, #468]	@ (80019f8 <UART_Driver_Init+0x214>)
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	4403      	add	r3, r0
 800182e:	332c      	adds	r3, #44	@ 0x2c
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	4788      	blx	r1

    usart_init_struct.BaudRate = (baudrate == 0) ? g_static_uart_lut[port].baud_rate : baudrate;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <UART_Driver_Init+0x6c>
 800183c:	79fa      	ldrb	r2, [r7, #7]
 800183e:	496e      	ldr	r1, [pc, #440]	@ (80019f8 <UART_Driver_Init+0x214>)
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	440b      	add	r3, r1
 800184a:	3304      	adds	r3, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	e000      	b.n	8001852 <UART_Driver_Init+0x6e>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	60fb      	str	r3, [r7, #12]
    usart_init_struct.DataWidth = g_static_uart_lut[port].data_width;
 8001854:	79fa      	ldrb	r2, [r7, #7]
 8001856:	4968      	ldr	r1, [pc, #416]	@ (80019f8 <UART_Driver_Init+0x214>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	440b      	add	r3, r1
 8001862:	3308      	adds	r3, #8
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
    usart_init_struct.StopBits = g_static_uart_lut[port].stop_bits;
 8001868:	79fa      	ldrb	r2, [r7, #7]
 800186a:	4963      	ldr	r1, [pc, #396]	@ (80019f8 <UART_Driver_Init+0x214>)
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	440b      	add	r3, r1
 8001876:	330c      	adds	r3, #12
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	617b      	str	r3, [r7, #20]
    usart_init_struct.Parity = g_static_uart_lut[port].parity;
 800187c:	79fa      	ldrb	r2, [r7, #7]
 800187e:	495e      	ldr	r1, [pc, #376]	@ (80019f8 <UART_Driver_Init+0x214>)
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	440b      	add	r3, r1
 800188a:	3310      	adds	r3, #16
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	61bb      	str	r3, [r7, #24]
    usart_init_struct.TransferDirection = g_static_uart_lut[port].transfer_direction;
 8001890:	79fa      	ldrb	r2, [r7, #7]
 8001892:	4959      	ldr	r1, [pc, #356]	@ (80019f8 <UART_Driver_Init+0x214>)
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	440b      	add	r3, r1
 800189e:	3314      	adds	r3, #20
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	61fb      	str	r3, [r7, #28]
    usart_init_struct.HardwareFlowControl = g_static_uart_lut[port].hardware_flow_control;
 80018a4:	79fa      	ldrb	r2, [r7, #7]
 80018a6:	4954      	ldr	r1, [pc, #336]	@ (80019f8 <UART_Driver_Init+0x214>)
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	440b      	add	r3, r1
 80018b2:	3318      	adds	r3, #24
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	623b      	str	r3, [r7, #32]
    usart_init_struct.OverSampling = g_static_uart_lut[port].over_sampling;
 80018b8:	79fa      	ldrb	r2, [r7, #7]
 80018ba:	494f      	ldr	r1, [pc, #316]	@ (80019f8 <UART_Driver_Init+0x214>)
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	440b      	add	r3, r1
 80018c6:	331c      	adds	r3, #28
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24

    NVIC_SetPriority(g_static_uart_lut[port].irqn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 80018cc:	79fa      	ldrb	r2, [r7, #7]
 80018ce:	494a      	ldr	r1, [pc, #296]	@ (80019f8 <UART_Driver_Init+0x214>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	440b      	add	r3, r1
 80018da:	3324      	adds	r3, #36	@ 0x24
 80018dc:	f993 4000 	ldrsb.w	r4, [r3]
 80018e0:	f7ff fdbc 	bl	800145c <__NVIC_GetPriorityGrouping>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2200      	movs	r2, #0
 80018e8:	2105      	movs	r1, #5
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fe0c 	bl	8001508 <NVIC_EncodePriority>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4619      	mov	r1, r3
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7ff fddd 	bl	80014b4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(g_static_uart_lut[port].irqn);
 80018fa:	79fa      	ldrb	r2, [r7, #7]
 80018fc:	493e      	ldr	r1, [pc, #248]	@ (80019f8 <UART_Driver_Init+0x214>)
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	440b      	add	r3, r1
 8001908:	3324      	adds	r3, #36	@ 0x24
 800190a:	f993 3000 	ldrsb.w	r3, [r3]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fdb2 	bl	8001478 <__NVIC_EnableIRQ>

    if (LL_USART_Init(g_static_uart_lut[port].port, &usart_init_struct) != SUCCESS) {
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	4938      	ldr	r1, [pc, #224]	@ (80019f8 <UART_Driver_Init+0x214>)
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	440b      	add	r3, r1
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f107 020c 	add.w	r2, r7, #12
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f001 ff82 	bl	8003834 <LL_USART_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <UART_Driver_Init+0x156>
        return false;
 8001936:	2300      	movs	r3, #0
 8001938:	e05a      	b.n	80019f0 <UART_Driver_Init+0x20c>
    }
    LL_USART_ConfigAsyncMode(g_static_uart_lut[port].port);
 800193a:	79fa      	ldrb	r2, [r7, #7]
 800193c:	492e      	ldr	r1, [pc, #184]	@ (80019f8 <UART_Driver_Init+0x214>)
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	440b      	add	r3, r1
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fe33 	bl	80015b6 <LL_USART_ConfigAsyncMode>
    LL_USART_EnableIT_RXNE(g_static_uart_lut[port].port);
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	4929      	ldr	r1, [pc, #164]	@ (80019f8 <UART_Driver_Init+0x214>)
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	440b      	add	r3, r1
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fe51 	bl	8001608 <LL_USART_EnableIT_RXNE>
    LL_USART_Enable(g_static_uart_lut[port].port);
 8001966:	79fa      	ldrb	r2, [r7, #7]
 8001968:	4923      	ldr	r1, [pc, #140]	@ (80019f8 <UART_Driver_Init+0x214>)
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	440b      	add	r3, r1
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fdf9 	bl	800156e <LL_USART_Enable>

    if (LL_USART_IsEnabledIT_RXNE(g_static_uart_lut[port].port) == 0) {
 800197c:	79fa      	ldrb	r2, [r7, #7]
 800197e:	491e      	ldr	r1, [pc, #120]	@ (80019f8 <UART_Driver_Init+0x214>)
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	440b      	add	r3, r1
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fe5e 	bl	800164e <LL_USART_IsEnabledIT_RXNE>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <UART_Driver_Init+0x1b8>
        return false;
 8001998:	2300      	movs	r3, #0
 800199a:	e029      	b.n	80019f0 <UART_Driver_Init+0x20c>
    }

    g_static_uart_rb[port] = RingBufferInit(g_static_uart_lut[port].ringbuffer_capacity);
 800199c:	79fa      	ldrb	r2, [r7, #7]
 800199e:	4916      	ldr	r1, [pc, #88]	@ (80019f8 <UART_Driver_Init+0x214>)
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	440b      	add	r3, r1
 80019aa:	3320      	adds	r3, #32
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	79fc      	ldrb	r4, [r7, #7]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f005 fb01 	bl	8006fb8 <RingBufferInit>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a10      	ldr	r2, [pc, #64]	@ (80019fc <UART_Driver_Init+0x218>)
 80019ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (g_static_uart_rb[port] == NULL) {
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	4a0e      	ldr	r2, [pc, #56]	@ (80019fc <UART_Driver_Init+0x218>)
 80019c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <UART_Driver_Init+0x1ea>
        return false;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e010      	b.n	80019f0 <UART_Driver_Init+0x20c>
    }

    if (LL_USART_IsEnabled(g_static_uart_lut[port].port) == 0) {
 80019ce:	79fa      	ldrb	r2, [r7, #7]
 80019d0:	4909      	ldr	r1, [pc, #36]	@ (80019f8 <UART_Driver_Init+0x214>)
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	440b      	add	r3, r1
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fdd5 	bl	800158e <LL_USART_IsEnabled>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <UART_Driver_Init+0x20a>
        return false;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <UART_Driver_Init+0x20c>
    }

    return true;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	372c      	adds	r7, #44	@ 0x2c
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	080080b4 	.word	0x080080b4
 80019fc:	200002f8 	.word	0x200002f8

08001a00 <UART_Driver_Read>:

    return true;
}


bool UART_Driver_Read (eUartPort_t port, uint8_t *data) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
    if ((port < eUartPort_First) || (port >= eUartPort_Last) || (g_static_uart_rb[port] == NULL) || (data == NULL)) {
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d808      	bhi.n	8001a24 <UART_Driver_Read+0x24>
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	4a0b      	ldr	r2, [pc, #44]	@ (8001a44 <UART_Driver_Read+0x44>)
 8001a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <UART_Driver_Read+0x24>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <UART_Driver_Read+0x28>
        return false;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e008      	b.n	8001a3a <UART_Driver_Read+0x3a>
    }

    return RingBufferDequeue(g_static_uart_rb[port], data);
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	4a06      	ldr	r2, [pc, #24]	@ (8001a44 <UART_Driver_Read+0x44>)
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f005 fb64 	bl	8007100 <RingBufferDequeue>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200002f8 	.word	0x200002f8

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <HAL_MspInit+0x54>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	4a11      	ldr	r2, [pc, #68]	@ (8001a9c <HAL_MspInit+0x54>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <HAL_MspInit+0x54>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <HAL_MspInit+0x54>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <HAL_MspInit+0x54>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7a:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <HAL_MspInit+0x54>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	210f      	movs	r1, #15
 8001a8a:	f06f 0001 	mvn.w	r0, #1
 8001a8e:	f000 fa15 	bl	8001ebc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08e      	sub	sp, #56	@ 0x38
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	4b33      	ldr	r3, [pc, #204]	@ (8001b84 <HAL_InitTick+0xe4>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	4a32      	ldr	r2, [pc, #200]	@ (8001b84 <HAL_InitTick+0xe4>)
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac0:	4b30      	ldr	r3, [pc, #192]	@ (8001b84 <HAL_InitTick+0xe4>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001acc:	f107 0210 	add.w	r2, r7, #16
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fe9e 	bl	8002818 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d103      	bne.n	8001aee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ae6:	f000 fe83 	bl	80027f0 <HAL_RCC_GetPCLK1Freq>
 8001aea:	6378      	str	r0, [r7, #52]	@ 0x34
 8001aec:	e004      	b.n	8001af8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001aee:	f000 fe7f 	bl	80027f0 <HAL_RCC_GetPCLK1Freq>
 8001af2:	4603      	mov	r3, r0
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001afa:	4a23      	ldr	r2, [pc, #140]	@ (8001b88 <HAL_InitTick+0xe8>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	0c9b      	lsrs	r3, r3, #18
 8001b02:	3b01      	subs	r3, #1
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001b06:	4b21      	ldr	r3, [pc, #132]	@ (8001b8c <HAL_InitTick+0xec>)
 8001b08:	4a21      	ldr	r2, [pc, #132]	@ (8001b90 <HAL_InitTick+0xf0>)
 8001b0a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <HAL_InitTick+0xec>)
 8001b0e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b12:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001b14:	4a1d      	ldr	r2, [pc, #116]	@ (8001b8c <HAL_InitTick+0xec>)
 8001b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b18:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b8c <HAL_InitTick+0xec>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <HAL_InitTick+0xec>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b26:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_InitTick+0xec>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001b2c:	4817      	ldr	r0, [pc, #92]	@ (8001b8c <HAL_InitTick+0xec>)
 8001b2e:	f000 fea5 	bl	800287c <HAL_TIM_Base_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001b38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d11b      	bne.n	8001b78 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001b40:	4812      	ldr	r0, [pc, #72]	@ (8001b8c <HAL_InitTick+0xec>)
 8001b42:	f000 fef5 	bl	8002930 <HAL_TIM_Base_Start_IT>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d111      	bne.n	8001b78 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b54:	201d      	movs	r0, #29
 8001b56:	f000 f9cd 	bl	8001ef4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b0f      	cmp	r3, #15
 8001b5e:	d808      	bhi.n	8001b72 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001b60:	2200      	movs	r2, #0
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	201d      	movs	r0, #29
 8001b66:	f000 f9a9 	bl	8001ebc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <HAL_InitTick+0xf4>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e002      	b.n	8001b78 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3738      	adds	r7, #56	@ 0x38
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	431bde83 	.word	0x431bde83
 8001b8c:	20000304 	.word	0x20000304
 8001b90:	40000400 	.word	0x40000400
 8001b94:	20000014 	.word	0x20000014

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <NMI_Handler+0x4>

08001ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <MemManage_Handler+0x4>

08001bb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <TIM3_IRQHandler+0x10>)
 8001bd6:	f000 ff0d 	bl	80029f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000304 	.word	0x20000304

08001be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <_sbrk+0x5c>)
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <_sbrk+0x60>)
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <_sbrk+0x64>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <_sbrk+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c14:	f005 fcb0 	bl	8007578 <__errno>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	e009      	b.n	8001c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <_sbrk+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20018000 	.word	0x20018000
 8001c44:	00000400 	.word	0x00000400
 8001c48:	2000034c 	.word	0x2000034c
 8001c4c:	20004df0 	.word	0x20004df0

08001c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <SystemInit+0x20>)
 8001c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5a:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <SystemInit+0x20>)
 8001c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c78:	f7ff ffea 	bl	8001c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c7c:	480c      	ldr	r0, [pc, #48]	@ (8001cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c7e:	490d      	ldr	r1, [pc, #52]	@ (8001cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c80:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c84:	e002      	b.n	8001c8c <LoopCopyDataInit>

08001c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8a:	3304      	adds	r3, #4

08001c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c90:	d3f9      	bcc.n	8001c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c92:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c94:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c98:	e001      	b.n	8001c9e <LoopFillZerobss>

08001c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c9c:	3204      	adds	r2, #4

08001c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca0:	d3fb      	bcc.n	8001c9a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f005 fc6f 	bl	8007584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca6:	f7ff fa83 	bl	80011b0 <main>
  bx  lr    
 8001caa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001cb8:	080082a0 	.word	0x080082a0
  ldr r2, =_sbss
 8001cbc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001cc0:	20004dec 	.word	0x20004dec

08001cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d08 <HAL_Init+0x40>)
 8001cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <HAL_Init+0x40>)
 8001cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	@ (8001d08 <HAL_Init+0x40>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f000 f8d8 	bl	8001ea6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	f7ff fed2 	bl	8001aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfc:	f7ff fea4 	bl	8001a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000018 	.word	0x20000018
 8001d30:	20000350 	.word	0x20000350

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	@ (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000350 	.word	0x20000350

08001d4c <__NVIC_SetPriorityGrouping>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	@ (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	@ (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	@ (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	@ 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	@ 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ff4c 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ece:	f7ff ff61 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001ed2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	68b9      	ldr	r1, [r7, #8]
 8001ed8:	6978      	ldr	r0, [r7, #20]
 8001eda:	f7ff ffb1 	bl	8001e40 <NVIC_EncodePriority>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff80 	bl	8001dec <__NVIC_SetPriority>
}
 8001eec:	bf00      	nop
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff54 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e267      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d075      	beq.n	800201a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f2e:	4b88      	ldr	r3, [pc, #544]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d00c      	beq.n	8001f54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f3a:	4b85      	ldr	r3, [pc, #532]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d112      	bne.n	8001f6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f46:	4b82      	ldr	r3, [pc, #520]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f52:	d10b      	bne.n	8001f6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	4b7e      	ldr	r3, [pc, #504]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d05b      	beq.n	8002018 <HAL_RCC_OscConfig+0x108>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d157      	bne.n	8002018 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e242      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f74:	d106      	bne.n	8001f84 <HAL_RCC_OscConfig+0x74>
 8001f76:	4b76      	ldr	r3, [pc, #472]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a75      	ldr	r2, [pc, #468]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e01d      	b.n	8001fc0 <HAL_RCC_OscConfig+0xb0>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x98>
 8001f8e:	4b70      	ldr	r3, [pc, #448]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a6f      	ldr	r2, [pc, #444]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a6c      	ldr	r2, [pc, #432]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0xb0>
 8001fa8:	4b69      	ldr	r3, [pc, #420]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a68      	ldr	r2, [pc, #416]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	4b66      	ldr	r3, [pc, #408]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a65      	ldr	r2, [pc, #404]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d013      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff feb4 	bl	8001d34 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7ff feb0 	bl	8001d34 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	@ 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e207      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xc0>
 8001fee:	e014      	b.n	800201a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fea0 	bl	8001d34 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7ff fe9c 	bl	8001d34 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	@ 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e1f3      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	4b51      	ldr	r3, [pc, #324]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xe8>
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d063      	beq.n	80020ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002026:	4b4a      	ldr	r3, [pc, #296]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002032:	4b47      	ldr	r3, [pc, #284]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800203a:	2b08      	cmp	r3, #8
 800203c:	d11c      	bne.n	8002078 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203e:	4b44      	ldr	r3, [pc, #272]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d116      	bne.n	8002078 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	4b41      	ldr	r3, [pc, #260]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_RCC_OscConfig+0x152>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e1c7      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002062:	4b3b      	ldr	r3, [pc, #236]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4937      	ldr	r1, [pc, #220]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	e03a      	b.n	80020ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002080:	4b34      	ldr	r3, [pc, #208]	@ (8002154 <HAL_RCC_OscConfig+0x244>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7ff fe55 	bl	8001d34 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208e:	f7ff fe51 	bl	8001d34 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e1a8      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ac:	4b28      	ldr	r3, [pc, #160]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4925      	ldr	r1, [pc, #148]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	600b      	str	r3, [r1, #0]
 80020c0:	e015      	b.n	80020ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c2:	4b24      	ldr	r3, [pc, #144]	@ (8002154 <HAL_RCC_OscConfig+0x244>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7ff fe34 	bl	8001d34 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d0:	f7ff fe30 	bl	8001d34 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e187      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d036      	beq.n	8002168 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d016      	beq.n	8002130 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <HAL_RCC_OscConfig+0x248>)
 8002104:	2201      	movs	r2, #1
 8002106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7ff fe14 	bl	8001d34 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff fe10 	bl	8001d34 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e167      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_RCC_OscConfig+0x240>)
 8002124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x200>
 800212e:	e01b      	b.n	8002168 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <HAL_RCC_OscConfig+0x248>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002136:	f7ff fdfd 	bl	8001d34 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213c:	e00e      	b.n	800215c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213e:	f7ff fdf9 	bl	8001d34 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d907      	bls.n	800215c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e150      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
 8002150:	40023800 	.word	0x40023800
 8002154:	42470000 	.word	0x42470000
 8002158:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	4b88      	ldr	r3, [pc, #544]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ea      	bne.n	800213e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 8097 	beq.w	80022a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217a:	4b81      	ldr	r3, [pc, #516]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10f      	bne.n	80021a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	4b7d      	ldr	r3, [pc, #500]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	4a7c      	ldr	r2, [pc, #496]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	@ 0x40
 8002196:	4b7a      	ldr	r3, [pc, #488]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a6:	4b77      	ldr	r3, [pc, #476]	@ (8002384 <HAL_RCC_OscConfig+0x474>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d118      	bne.n	80021e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b2:	4b74      	ldr	r3, [pc, #464]	@ (8002384 <HAL_RCC_OscConfig+0x474>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a73      	ldr	r2, [pc, #460]	@ (8002384 <HAL_RCC_OscConfig+0x474>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021be:	f7ff fdb9 	bl	8001d34 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c6:	f7ff fdb5 	bl	8001d34 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e10c      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002384 <HAL_RCC_OscConfig+0x474>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x2ea>
 80021ec:	4b64      	ldr	r3, [pc, #400]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f0:	4a63      	ldr	r2, [pc, #396]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f8:	e01c      	b.n	8002234 <HAL_RCC_OscConfig+0x324>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x30c>
 8002202:	4b5f      	ldr	r3, [pc, #380]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002206:	4a5e      	ldr	r2, [pc, #376]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6713      	str	r3, [r2, #112]	@ 0x70
 800220e:	4b5c      	ldr	r3, [pc, #368]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002212:	4a5b      	ldr	r2, [pc, #364]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6713      	str	r3, [r2, #112]	@ 0x70
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0x324>
 800221c:	4b58      	ldr	r3, [pc, #352]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002220:	4a57      	ldr	r2, [pc, #348]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	6713      	str	r3, [r2, #112]	@ 0x70
 8002228:	4b55      	ldr	r3, [pc, #340]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222c:	4a54      	ldr	r2, [pc, #336]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 800222e:	f023 0304 	bic.w	r3, r3, #4
 8002232:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d015      	beq.n	8002268 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223c:	f7ff fd7a 	bl	8001d34 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002242:	e00a      	b.n	800225a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7ff fd76 	bl	8001d34 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0cb      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225a:	4b49      	ldr	r3, [pc, #292]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0ee      	beq.n	8002244 <HAL_RCC_OscConfig+0x334>
 8002266:	e014      	b.n	8002292 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002268:	f7ff fd64 	bl	8001d34 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7ff fd60 	bl	8001d34 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e0b5      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002286:	4b3e      	ldr	r3, [pc, #248]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1ee      	bne.n	8002270 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d105      	bne.n	80022a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002298:	4b39      	ldr	r3, [pc, #228]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	4a38      	ldr	r2, [pc, #224]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 800229e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80a1 	beq.w	80023f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ae:	4b34      	ldr	r3, [pc, #208]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d05c      	beq.n	8002374 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d141      	bne.n	8002346 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b31      	ldr	r3, [pc, #196]	@ (8002388 <HAL_RCC_OscConfig+0x478>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff fd34 	bl	8001d34 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7ff fd30 	bl	8001d34 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e087      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e2:	4b27      	ldr	r3, [pc, #156]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	019b      	lsls	r3, r3, #6
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	3b01      	subs	r3, #1
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002310:	061b      	lsls	r3, r3, #24
 8002312:	491b      	ldr	r1, [pc, #108]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002318:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <HAL_RCC_OscConfig+0x478>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7ff fd09 	bl	8001d34 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002326:	f7ff fd05 	bl	8001d34 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e05c      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002338:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x416>
 8002344:	e054      	b.n	80023f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <HAL_RCC_OscConfig+0x478>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fcf2 	bl	8001d34 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7ff fcee 	bl	8001d34 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e045      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002366:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_RCC_OscConfig+0x470>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x444>
 8002372:	e03d      	b.n	80023f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d107      	bne.n	800238c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e038      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000
 8002388:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_RCC_OscConfig+0x4ec>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d028      	beq.n	80023ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d121      	bne.n	80023ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d11a      	bne.n	80023ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d111      	bne.n	80023ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	3b01      	subs	r3, #1
 80023d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d107      	bne.n	80023ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800

08002400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0cc      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002414:	4b68      	ldr	r3, [pc, #416]	@ (80025b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d90c      	bls.n	800243c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b65      	ldr	r3, [pc, #404]	@ (80025b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b63      	ldr	r3, [pc, #396]	@ (80025b8 <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0b8      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002454:	4b59      	ldr	r3, [pc, #356]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a58      	ldr	r2, [pc, #352]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800245e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800246c:	4b53      	ldr	r3, [pc, #332]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a52      	ldr	r2, [pc, #328]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002476:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002478:	4b50      	ldr	r3, [pc, #320]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	494d      	ldr	r1, [pc, #308]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d044      	beq.n	8002520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	4b47      	ldr	r3, [pc, #284]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d119      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e07f      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d003      	beq.n	80024be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024be:	4b3f      	ldr	r3, [pc, #252]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e06f      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ce:	4b3b      	ldr	r3, [pc, #236]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e067      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024de:	4b37      	ldr	r3, [pc, #220]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f023 0203 	bic.w	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4934      	ldr	r1, [pc, #208]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f0:	f7ff fc20 	bl	8001d34 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	e00a      	b.n	800250e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f8:	f7ff fc1c 	bl	8001d34 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e04f      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	4b2b      	ldr	r3, [pc, #172]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 020c 	and.w	r2, r3, #12
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	429a      	cmp	r2, r3
 800251e:	d1eb      	bne.n	80024f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002520:	4b25      	ldr	r3, [pc, #148]	@ (80025b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d20c      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b22      	ldr	r3, [pc, #136]	@ (80025b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e032      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002554:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4916      	ldr	r1, [pc, #88]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002572:	4b12      	ldr	r3, [pc, #72]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	490e      	ldr	r1, [pc, #56]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002586:	f000 f821 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 800258a:	4602      	mov	r2, r0
 800258c:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	490a      	ldr	r1, [pc, #40]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	5ccb      	ldrb	r3, [r1, r3]
 800259a:	fa22 f303 	lsr.w	r3, r2, r3
 800259e:	4a09      	ldr	r2, [pc, #36]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fa7a 	bl	8001aa0 <HAL_InitTick>

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023c00 	.word	0x40023c00
 80025bc:	40023800 	.word	0x40023800
 80025c0:	08008144 	.word	0x08008144
 80025c4:	20000010 	.word	0x20000010
 80025c8:	20000014 	.word	0x20000014

080025cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d0:	b094      	sub	sp, #80	@ 0x50
 80025d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025e4:	4b79      	ldr	r3, [pc, #484]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x200>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d00d      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x40>
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	f200 80e1 	bhi.w	80027b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x34>
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d003      	beq.n	8002606 <HAL_RCC_GetSysClockFreq+0x3a>
 80025fe:	e0db      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002600:	4b73      	ldr	r3, [pc, #460]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002602:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002604:	e0db      	b.n	80027be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002606:	4b73      	ldr	r3, [pc, #460]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002608:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800260a:	e0d8      	b.n	80027be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800260c:	4b6f      	ldr	r3, [pc, #444]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x200>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002614:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002616:	4b6d      	ldr	r3, [pc, #436]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d063      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002622:	4b6a      	ldr	r3, [pc, #424]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	2200      	movs	r2, #0
 800262a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800262c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800262e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002634:	633b      	str	r3, [r7, #48]	@ 0x30
 8002636:	2300      	movs	r3, #0
 8002638:	637b      	str	r3, [r7, #52]	@ 0x34
 800263a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800263e:	4622      	mov	r2, r4
 8002640:	462b      	mov	r3, r5
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	f04f 0100 	mov.w	r1, #0
 800264a:	0159      	lsls	r1, r3, #5
 800264c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002650:	0150      	lsls	r0, r2, #5
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4621      	mov	r1, r4
 8002658:	1a51      	subs	r1, r2, r1
 800265a:	6139      	str	r1, [r7, #16]
 800265c:	4629      	mov	r1, r5
 800265e:	eb63 0301 	sbc.w	r3, r3, r1
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002670:	4659      	mov	r1, fp
 8002672:	018b      	lsls	r3, r1, #6
 8002674:	4651      	mov	r1, sl
 8002676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800267a:	4651      	mov	r1, sl
 800267c:	018a      	lsls	r2, r1, #6
 800267e:	4651      	mov	r1, sl
 8002680:	ebb2 0801 	subs.w	r8, r2, r1
 8002684:	4659      	mov	r1, fp
 8002686:	eb63 0901 	sbc.w	r9, r3, r1
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800269a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800269e:	4690      	mov	r8, r2
 80026a0:	4699      	mov	r9, r3
 80026a2:	4623      	mov	r3, r4
 80026a4:	eb18 0303 	adds.w	r3, r8, r3
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	462b      	mov	r3, r5
 80026ac:	eb49 0303 	adc.w	r3, r9, r3
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026be:	4629      	mov	r1, r5
 80026c0:	024b      	lsls	r3, r1, #9
 80026c2:	4621      	mov	r1, r4
 80026c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026c8:	4621      	mov	r1, r4
 80026ca:	024a      	lsls	r2, r1, #9
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026d2:	2200      	movs	r2, #0
 80026d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026dc:	f7fd fdd0 	bl	8000280 <__aeabi_uldivmod>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4613      	mov	r3, r2
 80026e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026e8:	e058      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ea:	4b38      	ldr	r3, [pc, #224]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x200>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	099b      	lsrs	r3, r3, #6
 80026f0:	2200      	movs	r2, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	4611      	mov	r1, r2
 80026f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026fa:	623b      	str	r3, [r7, #32]
 80026fc:	2300      	movs	r3, #0
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002700:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002704:	4642      	mov	r2, r8
 8002706:	464b      	mov	r3, r9
 8002708:	f04f 0000 	mov.w	r0, #0
 800270c:	f04f 0100 	mov.w	r1, #0
 8002710:	0159      	lsls	r1, r3, #5
 8002712:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002716:	0150      	lsls	r0, r2, #5
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4641      	mov	r1, r8
 800271e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002722:	4649      	mov	r1, r9
 8002724:	eb63 0b01 	sbc.w	fp, r3, r1
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002734:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002738:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800273c:	ebb2 040a 	subs.w	r4, r2, sl
 8002740:	eb63 050b 	sbc.w	r5, r3, fp
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	00eb      	lsls	r3, r5, #3
 800274e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002752:	00e2      	lsls	r2, r4, #3
 8002754:	4614      	mov	r4, r2
 8002756:	461d      	mov	r5, r3
 8002758:	4643      	mov	r3, r8
 800275a:	18e3      	adds	r3, r4, r3
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	464b      	mov	r3, r9
 8002760:	eb45 0303 	adc.w	r3, r5, r3
 8002764:	607b      	str	r3, [r7, #4]
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002772:	4629      	mov	r1, r5
 8002774:	028b      	lsls	r3, r1, #10
 8002776:	4621      	mov	r1, r4
 8002778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800277c:	4621      	mov	r1, r4
 800277e:	028a      	lsls	r2, r1, #10
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002786:	2200      	movs	r2, #0
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	61fa      	str	r2, [r7, #28]
 800278c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002790:	f7fd fd76 	bl	8000280 <__aeabi_uldivmod>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4613      	mov	r3, r2
 800279a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800279c:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x200>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	0c1b      	lsrs	r3, r3, #16
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	3301      	adds	r3, #1
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80027ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027b6:	e002      	b.n	80027be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b8:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80027ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3750      	adds	r7, #80	@ 0x50
 80027c4:	46bd      	mov	sp, r7
 80027c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	00f42400 	.word	0x00f42400
 80027d4:	007a1200 	.word	0x007a1200

080027d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027dc:	4b03      	ldr	r3, [pc, #12]	@ (80027ec <HAL_RCC_GetHCLKFreq+0x14>)
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000010 	.word	0x20000010

080027f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027f4:	f7ff fff0 	bl	80027d8 <HAL_RCC_GetHCLKFreq>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	0a9b      	lsrs	r3, r3, #10
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	4903      	ldr	r1, [pc, #12]	@ (8002814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002806:	5ccb      	ldrb	r3, [r1, r3]
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	08008154 	.word	0x08008154

08002818 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	220f      	movs	r2, #15
 8002826:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002828:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <HAL_RCC_GetClockConfig+0x5c>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002834:	4b0f      	ldr	r3, [pc, #60]	@ (8002874 <HAL_RCC_GetClockConfig+0x5c>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <HAL_RCC_GetClockConfig+0x5c>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800284c:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <HAL_RCC_GetClockConfig+0x5c>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	08db      	lsrs	r3, r3, #3
 8002852:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800285a:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <HAL_RCC_GetClockConfig+0x60>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0207 	and.w	r2, r3, #7
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	601a      	str	r2, [r3, #0]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	40023c00 	.word	0x40023c00

0800287c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e041      	b.n	8002912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f839 	bl	800291a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f000 f9b2 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d001      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e044      	b.n	80029d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1e      	ldr	r2, [pc, #120]	@ (80029e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d018      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x6c>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002972:	d013      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x6c>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1a      	ldr	r2, [pc, #104]	@ (80029e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00e      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x6c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a19      	ldr	r2, [pc, #100]	@ (80029e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d009      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x6c>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a17      	ldr	r2, [pc, #92]	@ (80029ec <HAL_TIM_Base_Start_IT+0xbc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d004      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x6c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a16      	ldr	r2, [pc, #88]	@ (80029f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d111      	bne.n	80029c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d010      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029be:	e007      	b.n	80029d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40010000 	.word	0x40010000
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800
 80029ec:	40000c00 	.word	0x40000c00
 80029f0:	40014000 	.word	0x40014000

080029f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d020      	beq.n	8002a58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0202 	mvn.w	r2, #2
 8002a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f8d2 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f8c4 	bl	8002bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f8d5 	bl	8002bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d020      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01b      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0204 	mvn.w	r2, #4
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f8ac 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f89e 	bl	8002bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f8af 	bl	8002bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d020      	beq.n	8002af0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01b      	beq.n	8002af0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0208 	mvn.w	r2, #8
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f886 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f878 	bl	8002bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f889 	bl	8002bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d020      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0210 	mvn.w	r2, #16
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2208      	movs	r2, #8
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f860 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f852 	bl	8002bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f863 	bl	8002bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00c      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0201 	mvn.w	r2, #1
 8002b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe fbd0 	bl	8001300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00c      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8e0 	bl	8002d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f834 	bl	8002c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0220 	mvn.w	r2, #32
 8002bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f8b2 	bl	8002d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a37      	ldr	r2, [pc, #220]	@ (8002d14 <TIM_Base_SetConfig+0xf0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00f      	beq.n	8002c5c <TIM_Base_SetConfig+0x38>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c42:	d00b      	beq.n	8002c5c <TIM_Base_SetConfig+0x38>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a34      	ldr	r2, [pc, #208]	@ (8002d18 <TIM_Base_SetConfig+0xf4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d007      	beq.n	8002c5c <TIM_Base_SetConfig+0x38>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a33      	ldr	r2, [pc, #204]	@ (8002d1c <TIM_Base_SetConfig+0xf8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d003      	beq.n	8002c5c <TIM_Base_SetConfig+0x38>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a32      	ldr	r2, [pc, #200]	@ (8002d20 <TIM_Base_SetConfig+0xfc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d108      	bne.n	8002c6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a28      	ldr	r2, [pc, #160]	@ (8002d14 <TIM_Base_SetConfig+0xf0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01b      	beq.n	8002cae <TIM_Base_SetConfig+0x8a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c7c:	d017      	beq.n	8002cae <TIM_Base_SetConfig+0x8a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a25      	ldr	r2, [pc, #148]	@ (8002d18 <TIM_Base_SetConfig+0xf4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <TIM_Base_SetConfig+0x8a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a24      	ldr	r2, [pc, #144]	@ (8002d1c <TIM_Base_SetConfig+0xf8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00f      	beq.n	8002cae <TIM_Base_SetConfig+0x8a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a23      	ldr	r2, [pc, #140]	@ (8002d20 <TIM_Base_SetConfig+0xfc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00b      	beq.n	8002cae <TIM_Base_SetConfig+0x8a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a22      	ldr	r2, [pc, #136]	@ (8002d24 <TIM_Base_SetConfig+0x100>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <TIM_Base_SetConfig+0x8a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a21      	ldr	r2, [pc, #132]	@ (8002d28 <TIM_Base_SetConfig+0x104>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d003      	beq.n	8002cae <TIM_Base_SetConfig+0x8a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a20      	ldr	r2, [pc, #128]	@ (8002d2c <TIM_Base_SetConfig+0x108>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d108      	bne.n	8002cc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8002d14 <TIM_Base_SetConfig+0xf0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d103      	bne.n	8002cee <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f043 0204 	orr.w	r2, r3, #4
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	601a      	str	r2, [r3, #0]
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40010000 	.word	0x40010000
 8002d18:	40000400 	.word	0x40000400
 8002d1c:	40000800 	.word	0x40000800
 8002d20:	40000c00 	.word	0x40000c00
 8002d24:	40014000 	.word	0x40014000
 8002d28:	40014400 	.word	0x40014400
 8002d2c:	40014800 	.word	0x40014800

08002d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_GPIO_SetPinMode>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b08b      	sub	sp, #44	@ 0x2c
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	613b      	str	r3, [r7, #16]
  return result;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002d7e:	2320      	movs	r3, #32
 8002d80:	e003      	b.n	8002d8a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2103      	movs	r1, #3
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	401a      	ands	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	61fb      	str	r3, [r7, #28]
  return result;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002dac:	2320      	movs	r3, #32
 8002dae:	e003      	b.n	8002db8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	601a      	str	r2, [r3, #0]
}
 8002dc6:	bf00      	nop
 8002dc8:	372c      	adds	r7, #44	@ 0x2c
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_GPIO_SetPinOutputType>:
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	43db      	mvns	r3, r3
 8002de6:	401a      	ands	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	431a      	orrs	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	605a      	str	r2, [r3, #4]
}
 8002df6:	bf00      	nop
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_GPIO_SetPinSpeed>:
{
 8002e02:	b480      	push	{r7}
 8002e04:	b08b      	sub	sp, #44	@ 0x2c
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	613b      	str	r3, [r7, #16]
  return result;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002e28:	2320      	movs	r3, #32
 8002e2a:	e003      	b.n	8002e34 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2103      	movs	r1, #3
 8002e38:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	401a      	ands	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	61fb      	str	r3, [r7, #28]
  return result;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002e56:	2320      	movs	r3, #32
 8002e58:	e003      	b.n	8002e62 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	372c      	adds	r7, #44	@ 0x2c
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_GPIO_SetPinPull>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b08b      	sub	sp, #44	@ 0x2c
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	613b      	str	r3, [r7, #16]
  return result;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	e003      	b.n	8002eae <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	2103      	movs	r1, #3
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	401a      	ands	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	61fb      	str	r3, [r7, #28]
  return result;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	e003      	b.n	8002edc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	60da      	str	r2, [r3, #12]
}
 8002eea:	bf00      	nop
 8002eec:	372c      	adds	r7, #44	@ 0x2c
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_GPIO_SetAFPin_0_7>:
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b08b      	sub	sp, #44	@ 0x2c
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	613b      	str	r3, [r7, #16]
  return result;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	e003      	b.n	8002f28 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	210f      	movs	r1, #15
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	401a      	ands	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	61fb      	str	r3, [r7, #28]
  return result;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	e003      	b.n	8002f56 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	621a      	str	r2, [r3, #32]
}
 8002f64:	bf00      	nop
 8002f66:	372c      	adds	r7, #44	@ 0x2c
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <LL_GPIO_SetAFPin_8_15>:
{
 8002f70:	b480      	push	{r7}
 8002f72:	b08b      	sub	sp, #44	@ 0x2c
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	613b      	str	r3, [r7, #16]
  return result;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e003      	b.n	8002fa4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	210f      	movs	r1, #15
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	401a      	ands	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	61fb      	str	r3, [r7, #28]
  return result;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002fc8:	2320      	movs	r3, #32
 8002fca:	e003      	b.n	8002fd4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002fe2:	bf00      	nop
 8002fe4:	372c      	adds	r7, #44	@ 0x2c
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b08a      	sub	sp, #40	@ 0x28
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	617b      	str	r3, [r7, #20]
  return result;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <LL_GPIO_Init+0x2e>
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e003      	b.n	8003024 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003026:	e057      	b.n	80030d8 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	4013      	ands	r3, r2
 8003036:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d049      	beq.n	80030d2 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d003      	beq.n	800304e <LL_GPIO_Init+0x60>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d10d      	bne.n	800306a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	461a      	mov	r2, r3
 8003054:	6a39      	ldr	r1, [r7, #32]
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fed3 	bl	8002e02 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	461a      	mov	r2, r3
 8003062:	6a39      	ldr	r1, [r7, #32]
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff feb4 	bl	8002dd2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	461a      	mov	r2, r3
 8003070:	6a39      	ldr	r1, [r7, #32]
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff ff02 	bl	8002e7c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d121      	bne.n	80030c4 <LL_GPIO_Init+0xd6>
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	60bb      	str	r3, [r7, #8]
  return result;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <LL_GPIO_Init+0xac>
    return 32U;
 8003096:	2320      	movs	r3, #32
 8003098:	e003      	b.n	80030a2 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80030a2:	2b07      	cmp	r3, #7
 80030a4:	d807      	bhi.n	80030b6 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	461a      	mov	r2, r3
 80030ac:	6a39      	ldr	r1, [r7, #32]
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff ff21 	bl	8002ef6 <LL_GPIO_SetAFPin_0_7>
 80030b4:	e006      	b.n	80030c4 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	461a      	mov	r2, r3
 80030bc:	6a39      	ldr	r1, [r7, #32]
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ff56 	bl	8002f70 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	461a      	mov	r2, r3
 80030ca:	6a39      	ldr	r1, [r7, #32]
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fe43 	bl	8002d58 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	3301      	adds	r3, #1
 80030d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	fa22 f303 	lsr.w	r3, r2, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1a0      	bne.n	8003028 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3728      	adds	r7, #40	@ 0x28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030f4:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <LL_RCC_GetSysClkSource+0x18>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 030c 	and.w	r3, r3, #12
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800

0800310c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003110:	4b04      	ldr	r3, [pc, #16]	@ (8003124 <LL_RCC_GetAHBPrescaler+0x18>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800

08003128 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800312c:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <LL_RCC_GetAPB1Prescaler+0x18>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800

08003144 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003148:	4b04      	ldr	r3, [pc, #16]	@ (800315c <LL_RCC_GetAPB2Prescaler+0x18>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003150:	4618      	mov	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800

08003160 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003164:	4b04      	ldr	r3, [pc, #16]	@ (8003178 <LL_RCC_PLL_GetMainSource+0x18>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800

0800317c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003180:	4b04      	ldr	r3, [pc, #16]	@ (8003194 <LL_RCC_PLL_GetN+0x18>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	099b      	lsrs	r3, r3, #6
 8003186:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800318a:	4618      	mov	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40023800 	.word	0x40023800

08003198 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800319c:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <LL_RCC_PLL_GetP+0x18>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800

080031b4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80031b8:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <LL_RCC_PLL_GetDivider+0x18>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800

080031d0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80031d8:	f000 f820 	bl	800321c <RCC_GetSystemClockFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f840 	bl	800326c <RCC_GetHCLKClockFreq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f84e 	bl	8003298 <RCC_GetPCLK1ClockFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f85a 	bl	80032c0 <RCC_GetPCLK2ClockFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	60da      	str	r2, [r3, #12]
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003226:	f7ff ff63 	bl	80030f0 <LL_RCC_GetSysClkSource>
 800322a:	4603      	mov	r3, r0
 800322c:	2b08      	cmp	r3, #8
 800322e:	d00c      	beq.n	800324a <RCC_GetSystemClockFreq+0x2e>
 8003230:	2b08      	cmp	r3, #8
 8003232:	d80f      	bhi.n	8003254 <RCC_GetSystemClockFreq+0x38>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <RCC_GetSystemClockFreq+0x22>
 8003238:	2b04      	cmp	r3, #4
 800323a:	d003      	beq.n	8003244 <RCC_GetSystemClockFreq+0x28>
 800323c:	e00a      	b.n	8003254 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800323e:	4b09      	ldr	r3, [pc, #36]	@ (8003264 <RCC_GetSystemClockFreq+0x48>)
 8003240:	607b      	str	r3, [r7, #4]
      break;
 8003242:	e00a      	b.n	800325a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003244:	4b08      	ldr	r3, [pc, #32]	@ (8003268 <RCC_GetSystemClockFreq+0x4c>)
 8003246:	607b      	str	r3, [r7, #4]
      break;
 8003248:	e007      	b.n	800325a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800324a:	2008      	movs	r0, #8
 800324c:	f000 f84c 	bl	80032e8 <RCC_PLL_GetFreqDomain_SYS>
 8003250:	6078      	str	r0, [r7, #4]
      break;
 8003252:	e002      	b.n	800325a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003254:	4b03      	ldr	r3, [pc, #12]	@ (8003264 <RCC_GetSystemClockFreq+0x48>)
 8003256:	607b      	str	r3, [r7, #4]
      break;
 8003258:	bf00      	nop
  }

  return frequency;
 800325a:	687b      	ldr	r3, [r7, #4]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	00f42400 	.word	0x00f42400
 8003268:	007a1200 	.word	0x007a1200

0800326c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003274:	f7ff ff4a 	bl	800310c <LL_RCC_GetAHBPrescaler>
 8003278:	4603      	mov	r3, r0
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	4a04      	ldr	r2, [pc, #16]	@ (8003294 <RCC_GetHCLKClockFreq+0x28>)
 8003282:	5cd3      	ldrb	r3, [r2, r3]
 8003284:	461a      	mov	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	40d3      	lsrs	r3, r2
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	08008144 	.word	0x08008144

08003298 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80032a0:	f7ff ff42 	bl	8003128 <LL_RCC_GetAPB1Prescaler>
 80032a4:	4603      	mov	r3, r0
 80032a6:	0a9b      	lsrs	r3, r3, #10
 80032a8:	4a04      	ldr	r2, [pc, #16]	@ (80032bc <RCC_GetPCLK1ClockFreq+0x24>)
 80032aa:	5cd3      	ldrb	r3, [r2, r3]
 80032ac:	461a      	mov	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	40d3      	lsrs	r3, r2
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	08008154 	.word	0x08008154

080032c0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80032c8:	f7ff ff3c 	bl	8003144 <LL_RCC_GetAPB2Prescaler>
 80032cc:	4603      	mov	r3, r0
 80032ce:	0b5b      	lsrs	r3, r3, #13
 80032d0:	4a04      	ldr	r2, [pc, #16]	@ (80032e4 <RCC_GetPCLK2ClockFreq+0x24>)
 80032d2:	5cd3      	ldrb	r3, [r2, r3]
 80032d4:	461a      	mov	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	40d3      	lsrs	r3, r2
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	08008154 	.word	0x08008154

080032e8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80032fc:	f7ff ff30 	bl	8003160 <LL_RCC_PLL_GetMainSource>
 8003300:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d004      	beq.n	8003312 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800330e:	d003      	beq.n	8003318 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003310:	e005      	b.n	800331e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003312:	4b12      	ldr	r3, [pc, #72]	@ (800335c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003314:	617b      	str	r3, [r7, #20]
      break;
 8003316:	e005      	b.n	8003324 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003318:	4b11      	ldr	r3, [pc, #68]	@ (8003360 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800331a:	617b      	str	r3, [r7, #20]
      break;
 800331c:	e002      	b.n	8003324 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800331e:	4b0f      	ldr	r3, [pc, #60]	@ (800335c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003320:	617b      	str	r3, [r7, #20]
      break;
 8003322:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b08      	cmp	r3, #8
 8003328:	d113      	bne.n	8003352 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800332a:	f7ff ff43 	bl	80031b4 <LL_RCC_PLL_GetDivider>
 800332e:	4602      	mov	r2, r0
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fbb3 f4f2 	udiv	r4, r3, r2
 8003336:	f7ff ff21 	bl	800317c <LL_RCC_PLL_GetN>
 800333a:	4603      	mov	r3, r0
 800333c:	fb03 f404 	mul.w	r4, r3, r4
 8003340:	f7ff ff2a 	bl	8003198 <LL_RCC_PLL_GetP>
 8003344:	4603      	mov	r3, r0
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	3301      	adds	r3, #1
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003350:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003352:	693b      	ldr	r3, [r7, #16]
}
 8003354:	4618      	mov	r0, r3
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	bd90      	pop	{r4, r7, pc}
 800335c:	00f42400 	.word	0x00f42400
 8003360:	007a1200 	.word	0x007a1200

08003364 <LL_USART_IsEnabled>:
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003378:	bf0c      	ite	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	2300      	movne	r3, #0
 800337e:	b2db      	uxtb	r3, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <LL_USART_SetStopBitsLength>:
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	611a      	str	r2, [r3, #16]
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <LL_USART_SetHWFlowCtrl>:
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	615a      	str	r2, [r3, #20]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LL_USART_SetBaudRate>:
{
 80033d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033dc:	b0c0      	sub	sp, #256	@ 0x100
 80033de:	af00      	add	r7, sp, #0
 80033e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033e4:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80033e8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80033ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f8:	f040 810c 	bne.w	8003614 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80033fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003400:	2200      	movs	r2, #0
 8003402:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003406:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800340a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800340e:	4622      	mov	r2, r4
 8003410:	462b      	mov	r3, r5
 8003412:	1891      	adds	r1, r2, r2
 8003414:	6639      	str	r1, [r7, #96]	@ 0x60
 8003416:	415b      	adcs	r3, r3
 8003418:	667b      	str	r3, [r7, #100]	@ 0x64
 800341a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800341e:	4621      	mov	r1, r4
 8003420:	eb12 0801 	adds.w	r8, r2, r1
 8003424:	4629      	mov	r1, r5
 8003426:	eb43 0901 	adc.w	r9, r3, r1
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800343a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800343e:	4690      	mov	r8, r2
 8003440:	4699      	mov	r9, r3
 8003442:	4623      	mov	r3, r4
 8003444:	eb18 0303 	adds.w	r3, r8, r3
 8003448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800344c:	462b      	mov	r3, r5
 800344e:	eb49 0303 	adc.w	r3, r9, r3
 8003452:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003456:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800345a:	2200      	movs	r2, #0
 800345c:	469a      	mov	sl, r3
 800345e:	4693      	mov	fp, r2
 8003460:	eb1a 030a 	adds.w	r3, sl, sl
 8003464:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003466:	eb4b 030b 	adc.w	r3, fp, fp
 800346a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800346c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003470:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003474:	f7fc ff04 	bl	8000280 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4b64      	ldr	r3, [pc, #400]	@ (8003610 <LL_USART_SetBaudRate+0x238>)
 800347e:	fba3 2302 	umull	r2, r3, r3, r2
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	b29b      	uxth	r3, r3
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	b29c      	uxth	r4, r3
 800348a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800348e:	2200      	movs	r2, #0
 8003490:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003494:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003498:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800349c:	4642      	mov	r2, r8
 800349e:	464b      	mov	r3, r9
 80034a0:	1891      	adds	r1, r2, r2
 80034a2:	6539      	str	r1, [r7, #80]	@ 0x50
 80034a4:	415b      	adcs	r3, r3
 80034a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80034a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034ac:	4641      	mov	r1, r8
 80034ae:	1851      	adds	r1, r2, r1
 80034b0:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034b2:	4649      	mov	r1, r9
 80034b4:	414b      	adcs	r3, r1
 80034b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80034c4:	4659      	mov	r1, fp
 80034c6:	00cb      	lsls	r3, r1, #3
 80034c8:	4651      	mov	r1, sl
 80034ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ce:	4651      	mov	r1, sl
 80034d0:	00ca      	lsls	r2, r1, #3
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	4603      	mov	r3, r0
 80034d8:	4642      	mov	r2, r8
 80034da:	189b      	adds	r3, r3, r2
 80034dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034e0:	464b      	mov	r3, r9
 80034e2:	460a      	mov	r2, r1
 80034e4:	eb42 0303 	adc.w	r3, r2, r3
 80034e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80034f0:	2200      	movs	r2, #0
 80034f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034f6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80034fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80034fe:	460b      	mov	r3, r1
 8003500:	18db      	adds	r3, r3, r3
 8003502:	643b      	str	r3, [r7, #64]	@ 0x40
 8003504:	4613      	mov	r3, r2
 8003506:	eb42 0303 	adc.w	r3, r2, r3
 800350a:	647b      	str	r3, [r7, #68]	@ 0x44
 800350c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003510:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003514:	f7fc feb4 	bl	8000280 <__aeabi_uldivmod>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4611      	mov	r1, r2
 800351e:	4b3c      	ldr	r3, [pc, #240]	@ (8003610 <LL_USART_SetBaudRate+0x238>)
 8003520:	fba3 2301 	umull	r2, r3, r3, r1
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	2264      	movs	r2, #100	@ 0x64
 8003528:	fb02 f303 	mul.w	r3, r2, r3
 800352c:	1acb      	subs	r3, r1, r3
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003534:	4b36      	ldr	r3, [pc, #216]	@ (8003610 <LL_USART_SetBaudRate+0x238>)
 8003536:	fba3 2302 	umull	r2, r3, r3, r2
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	b29b      	uxth	r3, r3
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	b29b      	uxth	r3, r3
 8003542:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003546:	b29b      	uxth	r3, r3
 8003548:	4423      	add	r3, r4
 800354a:	b29c      	uxth	r4, r3
 800354c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003550:	2200      	movs	r2, #0
 8003552:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003556:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800355a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800355e:	4642      	mov	r2, r8
 8003560:	464b      	mov	r3, r9
 8003562:	1891      	adds	r1, r2, r2
 8003564:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003566:	415b      	adcs	r3, r3
 8003568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800356a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800356e:	4641      	mov	r1, r8
 8003570:	1851      	adds	r1, r2, r1
 8003572:	6339      	str	r1, [r7, #48]	@ 0x30
 8003574:	4649      	mov	r1, r9
 8003576:	414b      	adcs	r3, r1
 8003578:	637b      	str	r3, [r7, #52]	@ 0x34
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003586:	4659      	mov	r1, fp
 8003588:	00cb      	lsls	r3, r1, #3
 800358a:	4651      	mov	r1, sl
 800358c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003590:	4651      	mov	r1, sl
 8003592:	00ca      	lsls	r2, r1, #3
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	4603      	mov	r3, r0
 800359a:	4642      	mov	r2, r8
 800359c:	189b      	adds	r3, r3, r2
 800359e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035a2:	464b      	mov	r3, r9
 80035a4:	460a      	mov	r2, r1
 80035a6:	eb42 0303 	adc.w	r3, r2, r3
 80035aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80035ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035b8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80035bc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80035c0:	460b      	mov	r3, r1
 80035c2:	18db      	adds	r3, r3, r3
 80035c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035c6:	4613      	mov	r3, r2
 80035c8:	eb42 0303 	adc.w	r3, r2, r3
 80035cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035d2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80035d6:	f7fc fe53 	bl	8000280 <__aeabi_uldivmod>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <LL_USART_SetBaudRate+0x238>)
 80035e0:	fba3 1302 	umull	r1, r3, r3, r2
 80035e4:	095b      	lsrs	r3, r3, #5
 80035e6:	2164      	movs	r1, #100	@ 0x64
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	3332      	adds	r3, #50	@ 0x32
 80035f2:	4a07      	ldr	r2, [pc, #28]	@ (8003610 <LL_USART_SetBaudRate+0x238>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	b29b      	uxth	r3, r3
 8003602:	4423      	add	r3, r4
 8003604:	b29b      	uxth	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800360c:	609a      	str	r2, [r3, #8]
}
 800360e:	e108      	b.n	8003822 <LL_USART_SetBaudRate+0x44a>
 8003610:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003614:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003618:	2200      	movs	r2, #0
 800361a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800361e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003622:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8003626:	4642      	mov	r2, r8
 8003628:	464b      	mov	r3, r9
 800362a:	1891      	adds	r1, r2, r2
 800362c:	6239      	str	r1, [r7, #32]
 800362e:	415b      	adcs	r3, r3
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
 8003632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003636:	4641      	mov	r1, r8
 8003638:	1854      	adds	r4, r2, r1
 800363a:	4649      	mov	r1, r9
 800363c:	eb43 0501 	adc.w	r5, r3, r1
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	00eb      	lsls	r3, r5, #3
 800364a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800364e:	00e2      	lsls	r2, r4, #3
 8003650:	4614      	mov	r4, r2
 8003652:	461d      	mov	r5, r3
 8003654:	4643      	mov	r3, r8
 8003656:	18e3      	adds	r3, r4, r3
 8003658:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800365c:	464b      	mov	r3, r9
 800365e:	eb45 0303 	adc.w	r3, r5, r3
 8003662:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003666:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800366a:	2200      	movs	r2, #0
 800366c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003670:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003680:	4629      	mov	r1, r5
 8003682:	008b      	lsls	r3, r1, #2
 8003684:	4621      	mov	r1, r4
 8003686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800368a:	4621      	mov	r1, r4
 800368c:	008a      	lsls	r2, r1, #2
 800368e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003692:	f7fc fdf5 	bl	8000280 <__aeabi_uldivmod>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4b65      	ldr	r3, [pc, #404]	@ (8003830 <LL_USART_SetBaudRate+0x458>)
 800369c:	fba3 2302 	umull	r2, r3, r3, r2
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	b29c      	uxth	r4, r3
 80036a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036b6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80036ba:	4642      	mov	r2, r8
 80036bc:	464b      	mov	r3, r9
 80036be:	1891      	adds	r1, r2, r2
 80036c0:	61b9      	str	r1, [r7, #24]
 80036c2:	415b      	adcs	r3, r3
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ca:	4641      	mov	r1, r8
 80036cc:	1851      	adds	r1, r2, r1
 80036ce:	6139      	str	r1, [r7, #16]
 80036d0:	4649      	mov	r1, r9
 80036d2:	414b      	adcs	r3, r1
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036e2:	4659      	mov	r1, fp
 80036e4:	00cb      	lsls	r3, r1, #3
 80036e6:	4651      	mov	r1, sl
 80036e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ec:	4651      	mov	r1, sl
 80036ee:	00ca      	lsls	r2, r1, #3
 80036f0:	4610      	mov	r0, r2
 80036f2:	4619      	mov	r1, r3
 80036f4:	4603      	mov	r3, r0
 80036f6:	4642      	mov	r2, r8
 80036f8:	189b      	adds	r3, r3, r2
 80036fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036fe:	464b      	mov	r3, r9
 8003700:	460a      	mov	r2, r1
 8003702:	eb42 0303 	adc.w	r3, r2, r3
 8003706:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800370a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800370e:	2200      	movs	r2, #0
 8003710:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003714:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003724:	4649      	mov	r1, r9
 8003726:	008b      	lsls	r3, r1, #2
 8003728:	4641      	mov	r1, r8
 800372a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800372e:	4641      	mov	r1, r8
 8003730:	008a      	lsls	r2, r1, #2
 8003732:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003736:	f7fc fda3 	bl	8000280 <__aeabi_uldivmod>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4611      	mov	r1, r2
 8003740:	4b3b      	ldr	r3, [pc, #236]	@ (8003830 <LL_USART_SetBaudRate+0x458>)
 8003742:	fba3 2301 	umull	r2, r3, r3, r1
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	2264      	movs	r2, #100	@ 0x64
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	1acb      	subs	r3, r1, r3
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	3332      	adds	r3, #50	@ 0x32
 8003754:	4a36      	ldr	r2, [pc, #216]	@ (8003830 <LL_USART_SetBaudRate+0x458>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	b29b      	uxth	r3, r3
 800375e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003762:	b29b      	uxth	r3, r3
 8003764:	4423      	add	r3, r4
 8003766:	b29c      	uxth	r4, r3
 8003768:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800376c:	2200      	movs	r2, #0
 800376e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003770:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003772:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003776:	4642      	mov	r2, r8
 8003778:	464b      	mov	r3, r9
 800377a:	1891      	adds	r1, r2, r2
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	415b      	adcs	r3, r3
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003786:	4641      	mov	r1, r8
 8003788:	1851      	adds	r1, r2, r1
 800378a:	6039      	str	r1, [r7, #0]
 800378c:	4649      	mov	r1, r9
 800378e:	414b      	adcs	r3, r1
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800379e:	4659      	mov	r1, fp
 80037a0:	00cb      	lsls	r3, r1, #3
 80037a2:	4651      	mov	r1, sl
 80037a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037a8:	4651      	mov	r1, sl
 80037aa:	00ca      	lsls	r2, r1, #3
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	4603      	mov	r3, r0
 80037b2:	4642      	mov	r2, r8
 80037b4:	189b      	adds	r3, r3, r2
 80037b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80037b8:	464b      	mov	r3, r9
 80037ba:	460a      	mov	r2, r1
 80037bc:	eb42 0303 	adc.w	r3, r2, r3
 80037c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80037c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80037c6:	2200      	movs	r2, #0
 80037c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80037d8:	4649      	mov	r1, r9
 80037da:	008b      	lsls	r3, r1, #2
 80037dc:	4641      	mov	r1, r8
 80037de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e2:	4641      	mov	r1, r8
 80037e4:	008a      	lsls	r2, r1, #2
 80037e6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80037ea:	f7fc fd49 	bl	8000280 <__aeabi_uldivmod>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003830 <LL_USART_SetBaudRate+0x458>)
 80037f4:	fba3 1302 	umull	r1, r3, r3, r2
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	2164      	movs	r1, #100	@ 0x64
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	3332      	adds	r3, #50	@ 0x32
 8003806:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <LL_USART_SetBaudRate+0x458>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	b29b      	uxth	r3, r3
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	b29b      	uxth	r3, r3
 8003816:	4423      	add	r3, r4
 8003818:	b29b      	uxth	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003820:	609a      	str	r2, [r3, #8]
}
 8003822:	bf00      	nop
 8003824:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003828:	46bd      	mov	sp, r7
 800382a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382e:	bf00      	nop
 8003830:	51eb851f 	.word	0x51eb851f

08003834 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff fd8c 	bl	8003364 <LL_USART_IsEnabled>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d149      	bne.n	80038e6 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800385a:	f023 030c 	bic.w	r3, r3, #12
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	6851      	ldr	r1, [r2, #4]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	68d2      	ldr	r2, [r2, #12]
 8003866:	4311      	orrs	r1, r2
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	6912      	ldr	r2, [r2, #16]
 800386c:	4311      	orrs	r1, r2
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	6992      	ldr	r2, [r2, #24]
 8003872:	430a      	orrs	r2, r1
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fd83 	bl	800338c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff fd90 	bl	80033b2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003892:	f107 0308 	add.w	r3, r7, #8
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fc9a 	bl	80031d0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a14      	ldr	r2, [pc, #80]	@ (80038f0 <LL_USART_Init+0xbc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d102      	bne.n	80038aa <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	e00c      	b.n	80038c4 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a11      	ldr	r2, [pc, #68]	@ (80038f4 <LL_USART_Init+0xc0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d102      	bne.n	80038b8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	e005      	b.n	80038c4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a0f      	ldr	r2, [pc, #60]	@ (80038f8 <LL_USART_Init+0xc4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d101      	bne.n	80038c4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80038d2:	2300      	movs	r3, #0
 80038d4:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80038de:	69b9      	ldr	r1, [r7, #24]
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff fd79 	bl	80033d8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80038e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40011000 	.word	0x40011000
 80038f4:	40004400 	.word	0x40004400
 80038f8:	40011400 	.word	0x40011400

080038fc <__NVIC_SetPriority>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	6039      	str	r1, [r7, #0]
 8003906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390c:	2b00      	cmp	r3, #0
 800390e:	db0a      	blt.n	8003926 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	490c      	ldr	r1, [pc, #48]	@ (8003948 <__NVIC_SetPriority+0x4c>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	440b      	add	r3, r1
 8003920:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003924:	e00a      	b.n	800393c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	4908      	ldr	r1, [pc, #32]	@ (800394c <__NVIC_SetPriority+0x50>)
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	3b04      	subs	r3, #4
 8003934:	0112      	lsls	r2, r2, #4
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	440b      	add	r3, r1
 800393a:	761a      	strb	r2, [r3, #24]
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000e100 	.word	0xe000e100
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003954:	4b05      	ldr	r3, [pc, #20]	@ (800396c <SysTick_Handler+0x1c>)
 8003956:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003958:	f002 f9b4 	bl	8005cc4 <xTaskGetSchedulerState>
 800395c:	4603      	mov	r3, r0
 800395e:	2b01      	cmp	r3, #1
 8003960:	d001      	beq.n	8003966 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003962:	f003 f8a9 	bl	8006ab8 <xPortSysTickHandler>
  }
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	e000e010 	.word	0xe000e010

08003970 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003974:	2100      	movs	r1, #0
 8003976:	f06f 0004 	mvn.w	r0, #4
 800397a:	f7ff ffbf 	bl	80038fc <__NVIC_SetPriority>
#endif
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800398a:	f3ef 8305 	mrs	r3, IPSR
 800398e:	603b      	str	r3, [r7, #0]
  return(result);
 8003990:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003996:	f06f 0305 	mvn.w	r3, #5
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	e00c      	b.n	80039b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800399e:	4b0a      	ldr	r3, [pc, #40]	@ (80039c8 <osKernelInitialize+0x44>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d105      	bne.n	80039b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039a6:	4b08      	ldr	r3, [pc, #32]	@ (80039c8 <osKernelInitialize+0x44>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	607b      	str	r3, [r7, #4]
 80039b0:	e002      	b.n	80039b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295
 80039b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039b8:	687b      	ldr	r3, [r7, #4]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000354 	.word	0x20000354

080039cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039d2:	f3ef 8305 	mrs	r3, IPSR
 80039d6:	603b      	str	r3, [r7, #0]
  return(result);
 80039d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80039de:	f06f 0305 	mvn.w	r3, #5
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	e010      	b.n	8003a08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <osKernelStart+0x48>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d109      	bne.n	8003a02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039ee:	f7ff ffbf 	bl	8003970 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039f2:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <osKernelStart+0x48>)
 80039f4:	2202      	movs	r2, #2
 80039f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039f8:	f001 fd06 	bl	8005408 <vTaskStartScheduler>
      stat = osOK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	e002      	b.n	8003a08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a02:	f04f 33ff 	mov.w	r3, #4294967295
 8003a06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a08:	687b      	ldr	r3, [r7, #4]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000354 	.word	0x20000354

08003a18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08e      	sub	sp, #56	@ 0x38
 8003a1c:	af04      	add	r7, sp, #16
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a28:	f3ef 8305 	mrs	r3, IPSR
 8003a2c:	617b      	str	r3, [r7, #20]
  return(result);
 8003a2e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d17e      	bne.n	8003b32 <osThreadNew+0x11a>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d07b      	beq.n	8003b32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a3a:	2380      	movs	r3, #128	@ 0x80
 8003a3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a3e:	2318      	movs	r3, #24
 8003a40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d045      	beq.n	8003ade <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <osThreadNew+0x48>
        name = attr->name;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <osThreadNew+0x6e>
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b38      	cmp	r3, #56	@ 0x38
 8003a78:	d805      	bhi.n	8003a86 <osThreadNew+0x6e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <osThreadNew+0x72>
        return (NULL);
 8003a86:	2300      	movs	r3, #0
 8003a88:	e054      	b.n	8003b34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	089b      	lsrs	r3, r3, #2
 8003a98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00e      	beq.n	8003ac0 <osThreadNew+0xa8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b5b      	cmp	r3, #91	@ 0x5b
 8003aa8:	d90a      	bls.n	8003ac0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d006      	beq.n	8003ac0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <osThreadNew+0xa8>
        mem = 1;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	e010      	b.n	8003ae2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10c      	bne.n	8003ae2 <osThreadNew+0xca>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d108      	bne.n	8003ae2 <osThreadNew+0xca>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d104      	bne.n	8003ae2 <osThreadNew+0xca>
          mem = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	e001      	b.n	8003ae2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d110      	bne.n	8003b0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003af0:	9202      	str	r2, [sp, #8]
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	6a3a      	ldr	r2, [r7, #32]
 8003afc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f001 fadc 	bl	80050bc <xTaskCreateStatic>
 8003b04:	4603      	mov	r3, r0
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	e013      	b.n	8003b32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d110      	bne.n	8003b32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	f107 0310 	add.w	r3, r7, #16
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f001 fb2a 	bl	800517c <xTaskCreate>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d001      	beq.n	8003b32 <osThreadNew+0x11a>
            hTask = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b32:	693b      	ldr	r3, [r7, #16]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3728      	adds	r7, #40	@ 0x28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b48:	f3ef 8305 	mrs	r3, IPSR
 8003b4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b4e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d174      	bne.n	8003c3e <osMutexNew+0x102>
    if (attr != NULL) {
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e001      	b.n	8003b66 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <osMutexNew+0x3a>
      rmtx = 1U;
 8003b70:	2301      	movs	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e001      	b.n	8003b7a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d15c      	bne.n	8003c3e <osMutexNew+0x102>
      mem = -1;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d015      	beq.n	8003bbc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d006      	beq.n	8003ba6 <osMutexNew+0x6a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b4f      	cmp	r3, #79	@ 0x4f
 8003b9e:	d902      	bls.n	8003ba6 <osMutexNew+0x6a>
          mem = 1;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	e00c      	b.n	8003bc0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d108      	bne.n	8003bc0 <osMutexNew+0x84>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d104      	bne.n	8003bc0 <osMutexNew+0x84>
            mem = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	e001      	b.n	8003bc0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d112      	bne.n	8003bec <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	2004      	movs	r0, #4
 8003bd4:	f000 fc51 	bl	800447a <xQueueCreateMutexStatic>
 8003bd8:	61f8      	str	r0, [r7, #28]
 8003bda:	e016      	b.n	8003c0a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4619      	mov	r1, r3
 8003be2:	2001      	movs	r0, #1
 8003be4:	f000 fc49 	bl	800447a <xQueueCreateMutexStatic>
 8003be8:	61f8      	str	r0, [r7, #28]
 8003bea:	e00e      	b.n	8003c0a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10b      	bne.n	8003c0a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d004      	beq.n	8003c02 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003bf8:	2004      	movs	r0, #4
 8003bfa:	f000 fc26 	bl	800444a <xQueueCreateMutex>
 8003bfe:	61f8      	str	r0, [r7, #28]
 8003c00:	e003      	b.n	8003c0a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003c02:	2001      	movs	r0, #1
 8003c04:	f000 fc21 	bl	800444a <xQueueCreateMutex>
 8003c08:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00c      	beq.n	8003c2a <osMutexNew+0xee>
        if (attr != NULL) {
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <osMutexNew+0xe2>
          name = attr->name;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e001      	b.n	8003c22 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003c22:	68f9      	ldr	r1, [r7, #12]
 8003c24:	69f8      	ldr	r0, [r7, #28]
 8003c26:	f001 f9eb 	bl	8005000 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d006      	beq.n	8003c3e <osMutexNew+0x102>
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003c3e:	69fb      	ldr	r3, [r7, #28]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3720      	adds	r7, #32
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c66:	f3ef 8305 	mrs	r3, IPSR
 8003c6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c6c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003c72:	f06f 0305 	mvn.w	r3, #5
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	e02c      	b.n	8003cd4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d103      	bne.n	8003c88 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003c80:	f06f 0303 	mvn.w	r3, #3
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e025      	b.n	8003cd4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d011      	beq.n	8003cb2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003c8e:	6839      	ldr	r1, [r7, #0]
 8003c90:	6938      	ldr	r0, [r7, #16]
 8003c92:	f000 fc42 	bl	800451a <xQueueTakeMutexRecursive>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d01b      	beq.n	8003cd4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003ca2:	f06f 0301 	mvn.w	r3, #1
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	e014      	b.n	8003cd4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003caa:	f06f 0302 	mvn.w	r3, #2
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	e010      	b.n	8003cd4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003cb2:	6839      	ldr	r1, [r7, #0]
 8003cb4:	6938      	ldr	r0, [r7, #16]
 8003cb6:	f000 fee9 	bl	8004a8c <xQueueSemaphoreTake>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d009      	beq.n	8003cd4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003cc6:	f06f 0301 	mvn.w	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e002      	b.n	8003cd4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003cce:	f06f 0302 	mvn.w	r3, #2
 8003cd2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003cd4:	697b      	ldr	r3, [r7, #20]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cfa:	f3ef 8305 	mrs	r3, IPSR
 8003cfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d00:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <osMutexRelease+0x30>
    stat = osErrorISR;
 8003d06:	f06f 0305 	mvn.w	r3, #5
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	e01f      	b.n	8003d4e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d103      	bne.n	8003d1c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003d14:	f06f 0303 	mvn.w	r3, #3
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	e018      	b.n	8003d4e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003d22:	6938      	ldr	r0, [r7, #16]
 8003d24:	f000 fbc4 	bl	80044b0 <xQueueGiveMutexRecursive>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d00f      	beq.n	8003d4e <osMutexRelease+0x70>
        stat = osErrorResource;
 8003d2e:	f06f 0302 	mvn.w	r3, #2
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e00b      	b.n	8003d4e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003d36:	2300      	movs	r3, #0
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	6938      	ldr	r0, [r7, #16]
 8003d3e:	f000 fc23 	bl	8004588 <xQueueGenericSend>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d002      	beq.n	8003d4e <osMutexRelease+0x70>
        stat = osErrorResource;
 8003d48:	f06f 0302 	mvn.w	r3, #2
 8003d4c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003d4e:	697b      	ldr	r3, [r7, #20]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	@ 0x28
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d68:	f3ef 8305 	mrs	r3, IPSR
 8003d6c:	613b      	str	r3, [r7, #16]
  return(result);
 8003d6e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d15f      	bne.n	8003e34 <osMessageQueueNew+0xdc>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d05c      	beq.n	8003e34 <osMessageQueueNew+0xdc>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d059      	beq.n	8003e34 <osMessageQueueNew+0xdc>
    mem = -1;
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295
 8003d84:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d029      	beq.n	8003de0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d012      	beq.n	8003dba <osMessageQueueNew+0x62>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b4f      	cmp	r3, #79	@ 0x4f
 8003d9a:	d90e      	bls.n	8003dba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d302      	bcc.n	8003dba <osMessageQueueNew+0x62>
        mem = 1;
 8003db4:	2301      	movs	r3, #1
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	e014      	b.n	8003de4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d110      	bne.n	8003de4 <osMessageQueueNew+0x8c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10c      	bne.n	8003de4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d108      	bne.n	8003de4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d104      	bne.n	8003de4 <osMessageQueueNew+0x8c>
          mem = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	e001      	b.n	8003de4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d10b      	bne.n	8003e02 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2100      	movs	r1, #0
 8003df4:	9100      	str	r1, [sp, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fa31 	bl	8004260 <xQueueGenericCreateStatic>
 8003dfe:	61f8      	str	r0, [r7, #28]
 8003e00:	e008      	b.n	8003e14 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 faa4 	bl	800435a <xQueueGenericCreate>
 8003e12:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00c      	beq.n	8003e34 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e001      	b.n	8003e2c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003e2c:	6979      	ldr	r1, [r7, #20]
 8003e2e:	69f8      	ldr	r0, [r7, #28]
 8003e30:	f001 f8e6 	bl	8005000 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003e34:	69fb      	ldr	r3, [r7, #28]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e58:	f3ef 8305 	mrs	r3, IPSR
 8003e5c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e5e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d028      	beq.n	8003eb6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <osMessageQueuePut+0x36>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <osMessageQueuePut+0x36>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003e76:	f06f 0303 	mvn.w	r3, #3
 8003e7a:	61fb      	str	r3, [r7, #28]
 8003e7c:	e038      	b.n	8003ef0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003e82:	f107 0210 	add.w	r2, r7, #16
 8003e86:	2300      	movs	r3, #0
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	69b8      	ldr	r0, [r7, #24]
 8003e8c:	f000 fc7e 	bl	800478c <xQueueGenericSendFromISR>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d003      	beq.n	8003e9e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003e96:	f06f 0302 	mvn.w	r3, #2
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	e028      	b.n	8003ef0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d025      	beq.n	8003ef0 <osMessageQueuePut+0xb0>
 8003ea4:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <osMessageQueuePut+0xbc>)
 8003ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	e01c      	b.n	8003ef0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <osMessageQueuePut+0x82>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d103      	bne.n	8003eca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003ec2:	f06f 0303 	mvn.w	r3, #3
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	e012      	b.n	8003ef0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003eca:	2300      	movs	r3, #0
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	69b8      	ldr	r0, [r7, #24]
 8003ed2:	f000 fb59 	bl	8004588 <xQueueGenericSend>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d009      	beq.n	8003ef0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003ee2:	f06f 0301 	mvn.w	r3, #1
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	e002      	b.n	8003ef0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003eea:	f06f 0302 	mvn.w	r3, #2
 8003eee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003ef0:	69fb      	ldr	r3, [r7, #28]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	e000ed04 	.word	0xe000ed04

08003f00 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f16:	f3ef 8305 	mrs	r3, IPSR
 8003f1a:	617b      	str	r3, [r7, #20]
  return(result);
 8003f1c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d028      	beq.n	8003f74 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <osMessageQueueGet+0x34>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <osMessageQueueGet+0x34>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003f34:	f06f 0303 	mvn.w	r3, #3
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	e037      	b.n	8003fac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003f40:	f107 0310 	add.w	r3, r7, #16
 8003f44:	461a      	mov	r2, r3
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	69b8      	ldr	r0, [r7, #24]
 8003f4a:	f000 feaf 	bl	8004cac <xQueueReceiveFromISR>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d003      	beq.n	8003f5c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003f54:	f06f 0302 	mvn.w	r3, #2
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	e027      	b.n	8003fac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d024      	beq.n	8003fac <osMessageQueueGet+0xac>
 8003f62:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <osMessageQueueGet+0xb8>)
 8003f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	e01b      	b.n	8003fac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <osMessageQueueGet+0x80>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d103      	bne.n	8003f88 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003f80:	f06f 0303 	mvn.w	r3, #3
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	e011      	b.n	8003fac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	69b8      	ldr	r0, [r7, #24]
 8003f8e:	f000 fc9b 	bl	80048c8 <xQueueReceive>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d009      	beq.n	8003fac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003f9e:	f06f 0301 	mvn.w	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	e002      	b.n	8003fac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003fa6:	f06f 0302 	mvn.w	r3, #2
 8003faa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003fac:	69fb      	ldr	r3, [r7, #28]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3720      	adds	r7, #32
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	e000ed04 	.word	0xe000ed04

08003fbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a07      	ldr	r2, [pc, #28]	@ (8003fe8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003fcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4a06      	ldr	r2, [pc, #24]	@ (8003fec <vApplicationGetIdleTaskMemory+0x30>)
 8003fd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2280      	movs	r2, #128	@ 0x80
 8003fd8:	601a      	str	r2, [r3, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000358 	.word	0x20000358
 8003fec:	200003b4 	.word	0x200003b4

08003ff0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a07      	ldr	r2, [pc, #28]	@ (800401c <vApplicationGetTimerTaskMemory+0x2c>)
 8004000:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4a06      	ldr	r2, [pc, #24]	@ (8004020 <vApplicationGetTimerTaskMemory+0x30>)
 8004006:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800400e:	601a      	str	r2, [r3, #0]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	200005b4 	.word	0x200005b4
 8004020:	20000610 	.word	0x20000610

08004024 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f103 0208 	add.w	r2, r3, #8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f04f 32ff 	mov.w	r2, #4294967295
 800403c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f103 0208 	add.w	r2, r3, #8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f103 0208 	add.w	r2, r3, #8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	601a      	str	r2, [r3, #0]
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d103      	bne.n	80040e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e00c      	b.n	8004100 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3308      	adds	r3, #8
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	e002      	b.n	80040f4 <vListInsert+0x2e>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d2f6      	bcs.n	80040ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	601a      	str	r2, [r3, #0]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6892      	ldr	r2, [r2, #8]
 800414e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6852      	ldr	r2, [r2, #4]
 8004158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d103      	bne.n	800416c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	1e5a      	subs	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80041b2:	bf00      	nop
 80041b4:	bf00      	nop
 80041b6:	e7fd      	b.n	80041b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80041b8:	f002 fbee 	bl	8006998 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c4:	68f9      	ldr	r1, [r7, #12]
 80041c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	441a      	add	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e8:	3b01      	subs	r3, #1
 80041ea:	68f9      	ldr	r1, [r7, #12]
 80041ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	441a      	add	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	22ff      	movs	r2, #255	@ 0xff
 80041fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	22ff      	movs	r2, #255	@ 0xff
 8004204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d114      	bne.n	8004238 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01a      	beq.n	800424c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3310      	adds	r3, #16
 800421a:	4618      	mov	r0, r3
 800421c:	f001 fb82 	bl	8005924 <xTaskRemoveFromEventList>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d012      	beq.n	800424c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004226:	4b0d      	ldr	r3, [pc, #52]	@ (800425c <xQueueGenericReset+0xd0>)
 8004228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	e009      	b.n	800424c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3310      	adds	r3, #16
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fef1 	bl	8004024 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3324      	adds	r3, #36	@ 0x24
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff feec 	bl	8004024 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800424c:	f002 fbd6 	bl	80069fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004250:	2301      	movs	r3, #1
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	e000ed04 	.word	0xe000ed04

08004260 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08e      	sub	sp, #56	@ 0x38
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10b      	bne.n	800428c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004286:	bf00      	nop
 8004288:	bf00      	nop
 800428a:	e7fd      	b.n	8004288 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10b      	bne.n	80042aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	e7fd      	b.n	80042a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <xQueueGenericCreateStatic+0x56>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <xQueueGenericCreateStatic+0x5a>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <xQueueGenericCreateStatic+0x5c>
 80042ba:	2300      	movs	r3, #0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10b      	bne.n	80042d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	623b      	str	r3, [r7, #32]
}
 80042d2:	bf00      	nop
 80042d4:	bf00      	nop
 80042d6:	e7fd      	b.n	80042d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <xQueueGenericCreateStatic+0x84>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <xQueueGenericCreateStatic+0x88>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <xQueueGenericCreateStatic+0x8a>
 80042e8:	2300      	movs	r3, #0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	61fb      	str	r3, [r7, #28]
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	e7fd      	b.n	8004302 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004306:	2350      	movs	r3, #80	@ 0x50
 8004308:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b50      	cmp	r3, #80	@ 0x50
 800430e:	d00b      	beq.n	8004328 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	61bb      	str	r3, [r7, #24]
}
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004328:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800432e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00d      	beq.n	8004350 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800433c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f840 	bl	80043d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004352:	4618      	mov	r0, r3
 8004354:	3730      	adds	r7, #48	@ 0x30
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800435a:	b580      	push	{r7, lr}
 800435c:	b08a      	sub	sp, #40	@ 0x28
 800435e:	af02      	add	r7, sp, #8
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	4613      	mov	r3, r2
 8004366:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10b      	bne.n	8004386 <xQueueGenericCreate+0x2c>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	613b      	str	r3, [r7, #16]
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	e7fd      	b.n	8004382 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	fb02 f303 	mul.w	r3, r2, r3
 800438e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	3350      	adds	r3, #80	@ 0x50
 8004394:	4618      	mov	r0, r3
 8004396:	f002 fc21 	bl	8006bdc <pvPortMalloc>
 800439a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d011      	beq.n	80043c6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	3350      	adds	r3, #80	@ 0x50
 80043aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043b4:	79fa      	ldrb	r2, [r7, #7]
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	4613      	mov	r3, r2
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f805 	bl	80043d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043c6:	69bb      	ldr	r3, [r7, #24]
	}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e002      	b.n	80043f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043fe:	2101      	movs	r1, #1
 8004400:	69b8      	ldr	r0, [r7, #24]
 8004402:	f7ff fec3 	bl	800418c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00e      	beq.n	8004442 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004436:	2300      	movs	r3, #0
 8004438:	2200      	movs	r2, #0
 800443a:	2100      	movs	r1, #0
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8a3 	bl	8004588 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800444a:	b580      	push	{r7, lr}
 800444c:	b086      	sub	sp, #24
 800444e:	af00      	add	r7, sp, #0
 8004450:	4603      	mov	r3, r0
 8004452:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004454:	2301      	movs	r3, #1
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	461a      	mov	r2, r3
 8004460:	6939      	ldr	r1, [r7, #16]
 8004462:	6978      	ldr	r0, [r7, #20]
 8004464:	f7ff ff79 	bl	800435a <xQueueGenericCreate>
 8004468:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff ffd3 	bl	8004416 <prvInitialiseMutex>

		return xNewQueue;
 8004470:	68fb      	ldr	r3, [r7, #12]
	}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800447a:	b580      	push	{r7, lr}
 800447c:	b088      	sub	sp, #32
 800447e:	af02      	add	r7, sp, #8
 8004480:	4603      	mov	r3, r0
 8004482:	6039      	str	r1, [r7, #0]
 8004484:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004486:	2301      	movs	r3, #1
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	2300      	movs	r3, #0
 800448c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2200      	movs	r2, #0
 8004496:	6939      	ldr	r1, [r7, #16]
 8004498:	6978      	ldr	r0, [r7, #20]
 800449a:	f7ff fee1 	bl	8004260 <xQueueGenericCreateStatic>
 800449e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7ff ffb8 	bl	8004416 <prvInitialiseMutex>

		return xNewQueue;
 80044a6:	68fb      	ldr	r3, [r7, #12]
	}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80044b0:	b590      	push	{r4, r7, lr}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	60fb      	str	r3, [r7, #12]
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	689c      	ldr	r4, [r3, #8]
 80044de:	f001 fbe1 	bl	8005ca4 <xTaskGetCurrentTaskHandle>
 80044e2:	4603      	mov	r3, r0
 80044e4:	429c      	cmp	r4, r3
 80044e6:	d111      	bne.n	800450c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	1e5a      	subs	r2, r3, #1
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d105      	bne.n	8004506 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80044fa:	2300      	movs	r3, #0
 80044fc:	2200      	movs	r2, #0
 80044fe:	2100      	movs	r1, #0
 8004500:	6938      	ldr	r0, [r7, #16]
 8004502:	f000 f841 	bl	8004588 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004506:	2301      	movs	r3, #1
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	e001      	b.n	8004510 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004510:	697b      	ldr	r3, [r7, #20]
	}
 8004512:	4618      	mov	r0, r3
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	bd90      	pop	{r4, r7, pc}

0800451a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800451a:	b590      	push	{r4, r7, lr}
 800451c:	b087      	sub	sp, #28
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10b      	bne.n	8004546 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	60fb      	str	r3, [r7, #12]
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	e7fd      	b.n	8004542 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	689c      	ldr	r4, [r3, #8]
 800454a:	f001 fbab 	bl	8005ca4 <xTaskGetCurrentTaskHandle>
 800454e:	4603      	mov	r3, r0
 8004550:	429c      	cmp	r4, r3
 8004552:	d107      	bne.n	8004564 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800455e:	2301      	movs	r3, #1
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	e00c      	b.n	800457e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004564:	6839      	ldr	r1, [r7, #0]
 8004566:	6938      	ldr	r0, [r7, #16]
 8004568:	f000 fa90 	bl	8004a8c <xQueueSemaphoreTake>
 800456c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d004      	beq.n	800457e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800457e:	697b      	ldr	r3, [r7, #20]
	}
 8004580:	4618      	mov	r0, r3
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	bd90      	pop	{r4, r7, pc}

08004588 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08e      	sub	sp, #56	@ 0x38
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004596:	2300      	movs	r3, #0
 8004598:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800459e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <xQueueGenericSend+0x34>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <xQueueGenericSend+0x42>
 80045c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <xQueueGenericSend+0x46>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <xQueueGenericSend+0x48>
 80045ce:	2300      	movs	r3, #0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <xQueueGenericSend+0x64>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d103      	bne.n	80045fa <xQueueGenericSend+0x72>
 80045f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <xQueueGenericSend+0x76>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <xQueueGenericSend+0x78>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <xQueueGenericSend+0x94>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	623b      	str	r3, [r7, #32]
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	e7fd      	b.n	8004618 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800461c:	f001 fb52 	bl	8005cc4 <xTaskGetSchedulerState>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <xQueueGenericSend+0xa4>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <xQueueGenericSend+0xa8>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <xQueueGenericSend+0xaa>
 8004630:	2300      	movs	r3, #0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <xQueueGenericSend+0xc6>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	61fb      	str	r3, [r7, #28]
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	e7fd      	b.n	800464a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800464e:	f002 f9a3 	bl	8006998 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <xQueueGenericSend+0xdc>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d129      	bne.n	80046b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800466a:	f000 fbb9 	bl	8004de0 <prvCopyDataToQueue>
 800466e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	3324      	adds	r3, #36	@ 0x24
 800467c:	4618      	mov	r0, r3
 800467e:	f001 f951 	bl	8005924 <xTaskRemoveFromEventList>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d013      	beq.n	80046b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004688:	4b3f      	ldr	r3, [pc, #252]	@ (8004788 <xQueueGenericSend+0x200>)
 800468a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	e00a      	b.n	80046b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800469a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046a0:	4b39      	ldr	r3, [pc, #228]	@ (8004788 <xQueueGenericSend+0x200>)
 80046a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046b0:	f002 f9a4 	bl	80069fc <vPortExitCritical>
				return pdPASS;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e063      	b.n	8004780 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046be:	f002 f99d 	bl	80069fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e05c      	b.n	8004780 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046cc:	f107 0314 	add.w	r3, r7, #20
 80046d0:	4618      	mov	r0, r3
 80046d2:	f001 f98b 	bl	80059ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046d6:	2301      	movs	r3, #1
 80046d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046da:	f002 f98f 	bl	80069fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046de:	f000 fefb 	bl	80054d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046e2:	f002 f959 	bl	8006998 <vPortEnterCritical>
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046ec:	b25b      	sxtb	r3, r3
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d103      	bne.n	80046fc <xQueueGenericSend+0x174>
 80046f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004702:	b25b      	sxtb	r3, r3
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004708:	d103      	bne.n	8004712 <xQueueGenericSend+0x18a>
 800470a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004712:	f002 f973 	bl	80069fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004716:	1d3a      	adds	r2, r7, #4
 8004718:	f107 0314 	add.w	r3, r7, #20
 800471c:	4611      	mov	r1, r2
 800471e:	4618      	mov	r0, r3
 8004720:	f001 f97a 	bl	8005a18 <xTaskCheckForTimeOut>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d124      	bne.n	8004774 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800472a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800472c:	f000 fc50 	bl	8004fd0 <prvIsQueueFull>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d018      	beq.n	8004768 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004738:	3310      	adds	r3, #16
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f001 f89e 	bl	8005880 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004744:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004746:	f000 fbdb 	bl	8004f00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800474a:	f000 fed3 	bl	80054f4 <xTaskResumeAll>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	f47f af7c 	bne.w	800464e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004756:	4b0c      	ldr	r3, [pc, #48]	@ (8004788 <xQueueGenericSend+0x200>)
 8004758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	e772      	b.n	800464e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004768:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800476a:	f000 fbc9 	bl	8004f00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800476e:	f000 fec1 	bl	80054f4 <xTaskResumeAll>
 8004772:	e76c      	b.n	800464e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004776:	f000 fbc3 	bl	8004f00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800477a:	f000 febb 	bl	80054f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800477e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004780:	4618      	mov	r0, r3
 8004782:	3738      	adds	r7, #56	@ 0x38
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	e000ed04 	.word	0xe000ed04

0800478c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b090      	sub	sp, #64	@ 0x40
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800479e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10b      	bne.n	80047bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	e7fd      	b.n	80047b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d103      	bne.n	80047ca <xQueueGenericSendFromISR+0x3e>
 80047c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <xQueueGenericSendFromISR+0x42>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <xQueueGenericSendFromISR+0x44>
 80047ce:	2300      	movs	r3, #0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	e7fd      	b.n	80047e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d103      	bne.n	80047fa <xQueueGenericSendFromISR+0x6e>
 80047f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <xQueueGenericSendFromISR+0x72>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <xQueueGenericSendFromISR+0x74>
 80047fe:	2300      	movs	r3, #0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	623b      	str	r3, [r7, #32]
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800481c:	f002 f99c 	bl	8006b58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004820:	f3ef 8211 	mrs	r2, BASEPRI
 8004824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	61fa      	str	r2, [r7, #28]
 8004836:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004838:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800483a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800483c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004844:	429a      	cmp	r2, r3
 8004846:	d302      	bcc.n	800484e <xQueueGenericSendFromISR+0xc2>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d12f      	bne.n	80048ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800484e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004850:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004854:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004864:	f000 fabc 	bl	8004de0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004868:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004870:	d112      	bne.n	8004898 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004876:	2b00      	cmp	r3, #0
 8004878:	d016      	beq.n	80048a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800487a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487c:	3324      	adds	r3, #36	@ 0x24
 800487e:	4618      	mov	r0, r3
 8004880:	f001 f850 	bl	8005924 <xTaskRemoveFromEventList>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00e      	beq.n	80048a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e007      	b.n	80048a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004898:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800489c:	3301      	adds	r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	b25a      	sxtb	r2, r3
 80048a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80048a8:	2301      	movs	r3, #1
 80048aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80048ac:	e001      	b.n	80048b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3740      	adds	r7, #64	@ 0x40
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08c      	sub	sp, #48	@ 0x30
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048d4:	2300      	movs	r3, #0
 80048d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <xQueueReceive+0x32>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	623b      	str	r3, [r7, #32]
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop
 80048f8:	e7fd      	b.n	80048f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d103      	bne.n	8004908 <xQueueReceive+0x40>
 8004900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <xQueueReceive+0x44>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <xQueueReceive+0x46>
 800490c:	2300      	movs	r3, #0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10b      	bne.n	800492a <xQueueReceive+0x62>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	61fb      	str	r3, [r7, #28]
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	e7fd      	b.n	8004926 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800492a:	f001 f9cb 	bl	8005cc4 <xTaskGetSchedulerState>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <xQueueReceive+0x72>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <xQueueReceive+0x76>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <xQueueReceive+0x78>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <xQueueReceive+0x94>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	61bb      	str	r3, [r7, #24]
}
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	e7fd      	b.n	8004958 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800495c:	f002 f81c 	bl	8006998 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004964:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01f      	beq.n	80049ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004970:	f000 faa0 	bl	8004eb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	1e5a      	subs	r2, r3, #1
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00f      	beq.n	80049a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	3310      	adds	r3, #16
 8004988:	4618      	mov	r0, r3
 800498a:	f000 ffcb 	bl	8005924 <xTaskRemoveFromEventList>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004994:	4b3c      	ldr	r3, [pc, #240]	@ (8004a88 <xQueueReceive+0x1c0>)
 8004996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049a4:	f002 f82a 	bl	80069fc <vPortExitCritical>
				return pdPASS;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e069      	b.n	8004a80 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049b2:	f002 f823 	bl	80069fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e062      	b.n	8004a80 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049c0:	f107 0310 	add.w	r3, r7, #16
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 f811 	bl	80059ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049ca:	2301      	movs	r3, #1
 80049cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049ce:	f002 f815 	bl	80069fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049d2:	f000 fd81 	bl	80054d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049d6:	f001 ffdf 	bl	8006998 <vPortEnterCritical>
 80049da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049e0:	b25b      	sxtb	r3, r3
 80049e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e6:	d103      	bne.n	80049f0 <xQueueReceive+0x128>
 80049e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049f6:	b25b      	sxtb	r3, r3
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fc:	d103      	bne.n	8004a06 <xQueueReceive+0x13e>
 80049fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a06:	f001 fff9 	bl	80069fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a0a:	1d3a      	adds	r2, r7, #4
 8004a0c:	f107 0310 	add.w	r3, r7, #16
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f001 f800 	bl	8005a18 <xTaskCheckForTimeOut>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d123      	bne.n	8004a66 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a20:	f000 fac0 	bl	8004fa4 <prvIsQueueEmpty>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d017      	beq.n	8004a5a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2c:	3324      	adds	r3, #36	@ 0x24
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 ff24 	bl	8005880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a3a:	f000 fa61 	bl	8004f00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a3e:	f000 fd59 	bl	80054f4 <xTaskResumeAll>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d189      	bne.n	800495c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004a48:	4b0f      	ldr	r3, [pc, #60]	@ (8004a88 <xQueueReceive+0x1c0>)
 8004a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	e780      	b.n	800495c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a5c:	f000 fa50 	bl	8004f00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a60:	f000 fd48 	bl	80054f4 <xTaskResumeAll>
 8004a64:	e77a      	b.n	800495c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a68:	f000 fa4a 	bl	8004f00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a6c:	f000 fd42 	bl	80054f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a72:	f000 fa97 	bl	8004fa4 <prvIsQueueEmpty>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f43f af6f 	beq.w	800495c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3730      	adds	r7, #48	@ 0x30
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	e000ed04 	.word	0xe000ed04

08004a8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08e      	sub	sp, #56	@ 0x38
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10b      	bne.n	8004ac0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	623b      	str	r3, [r7, #32]
}
 8004aba:	bf00      	nop
 8004abc:	bf00      	nop
 8004abe:	e7fd      	b.n	8004abc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00b      	beq.n	8004ae0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	61fb      	str	r3, [r7, #28]
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	e7fd      	b.n	8004adc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ae0:	f001 f8f0 	bl	8005cc4 <xTaskGetSchedulerState>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <xQueueSemaphoreTake+0x64>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <xQueueSemaphoreTake+0x68>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <xQueueSemaphoreTake+0x6a>
 8004af4:	2300      	movs	r3, #0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10b      	bne.n	8004b12 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	61bb      	str	r3, [r7, #24]
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	e7fd      	b.n	8004b0e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b12:	f001 ff41 	bl	8006998 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d024      	beq.n	8004b6c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b24:	1e5a      	subs	r2, r3, #1
 8004b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b28:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004b32:	f001 fa41 	bl	8005fb8 <pvTaskIncrementMutexHeldCount>
 8004b36:	4602      	mov	r2, r0
 8004b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00f      	beq.n	8004b64 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b46:	3310      	adds	r3, #16
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 feeb 	bl	8005924 <xTaskRemoveFromEventList>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b54:	4b54      	ldr	r3, [pc, #336]	@ (8004ca8 <xQueueSemaphoreTake+0x21c>)
 8004b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b64:	f001 ff4a 	bl	80069fc <vPortExitCritical>
				return pdPASS;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e098      	b.n	8004c9e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d112      	bne.n	8004b98 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	617b      	str	r3, [r7, #20]
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	e7fd      	b.n	8004b8c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b90:	f001 ff34 	bl	80069fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e082      	b.n	8004c9e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b9e:	f107 030c 	add.w	r3, r7, #12
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 ff22 	bl	80059ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bac:	f001 ff26 	bl	80069fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bb0:	f000 fc92 	bl	80054d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bb4:	f001 fef0 	bl	8006998 <vPortEnterCritical>
 8004bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bbe:	b25b      	sxtb	r3, r3
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc4:	d103      	bne.n	8004bce <xQueueSemaphoreTake+0x142>
 8004bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bd4:	b25b      	sxtb	r3, r3
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d103      	bne.n	8004be4 <xQueueSemaphoreTake+0x158>
 8004bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004be4:	f001 ff0a 	bl	80069fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004be8:	463a      	mov	r2, r7
 8004bea:	f107 030c 	add.w	r3, r7, #12
 8004bee:	4611      	mov	r1, r2
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 ff11 	bl	8005a18 <xTaskCheckForTimeOut>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d132      	bne.n	8004c62 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bfe:	f000 f9d1 	bl	8004fa4 <prvIsQueueEmpty>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d026      	beq.n	8004c56 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d109      	bne.n	8004c24 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004c10:	f001 fec2 	bl	8006998 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 f871 	bl	8005d00 <xTaskPriorityInherit>
 8004c1e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004c20:	f001 feec 	bl	80069fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c26:	3324      	adds	r3, #36	@ 0x24
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fe27 	bl	8005880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c34:	f000 f964 	bl	8004f00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c38:	f000 fc5c 	bl	80054f4 <xTaskResumeAll>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f47f af67 	bne.w	8004b12 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004c44:	4b18      	ldr	r3, [pc, #96]	@ (8004ca8 <xQueueSemaphoreTake+0x21c>)
 8004c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	e75d      	b.n	8004b12 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c58:	f000 f952 	bl	8004f00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c5c:	f000 fc4a 	bl	80054f4 <xTaskResumeAll>
 8004c60:	e757      	b.n	8004b12 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c64:	f000 f94c 	bl	8004f00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c68:	f000 fc44 	bl	80054f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c6e:	f000 f999 	bl	8004fa4 <prvIsQueueEmpty>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f43f af4c 	beq.w	8004b12 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00d      	beq.n	8004c9c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004c80:	f001 fe8a 	bl	8006998 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c86:	f000 f893 	bl	8004db0 <prvGetDisinheritPriorityAfterTimeout>
 8004c8a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c92:	4618      	mov	r0, r3
 8004c94:	f001 f90c 	bl	8005eb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c98:	f001 feb0 	bl	80069fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3738      	adds	r7, #56	@ 0x38
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08e      	sub	sp, #56	@ 0x38
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	623b      	str	r3, [r7, #32]
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	e7fd      	b.n	8004cd6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d103      	bne.n	8004ce8 <xQueueReceiveFromISR+0x3c>
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <xQueueReceiveFromISR+0x40>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <xQueueReceiveFromISR+0x42>
 8004cec:	2300      	movs	r3, #0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10b      	bne.n	8004d0a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	61fb      	str	r3, [r7, #28]
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	e7fd      	b.n	8004d06 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d0a:	f001 ff25 	bl	8006b58 <vPortValidateInterruptPriority>
	__asm volatile
 8004d0e:	f3ef 8211 	mrs	r2, BASEPRI
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	61ba      	str	r2, [r7, #24]
 8004d24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004d26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d02f      	beq.n	8004d96 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d44:	f000 f8b6 	bl	8004eb4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4a:	1e5a      	subs	r2, r3, #1
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004d50:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d112      	bne.n	8004d80 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d016      	beq.n	8004d90 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	3310      	adds	r3, #16
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fddc 	bl	8005924 <xTaskRemoveFromEventList>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00e      	beq.n	8004d90 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00b      	beq.n	8004d90 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e007      	b.n	8004d90 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d84:	3301      	adds	r3, #1
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	b25a      	sxtb	r2, r3
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004d90:	2301      	movs	r3, #1
 8004d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d94:	e001      	b.n	8004d9a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f383 8811 	msr	BASEPRI, r3
}
 8004da4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3738      	adds	r7, #56	@ 0x38
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d006      	beq.n	8004dce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	e001      	b.n	8004dd2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
	}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10d      	bne.n	8004e1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d14d      	bne.n	8004ea2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 ffe0 	bl	8005dd0 <xTaskPriorityDisinherit>
 8004e10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	609a      	str	r2, [r3, #8]
 8004e18:	e043      	b.n	8004ea2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d119      	bne.n	8004e54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6858      	ldr	r0, [r3, #4]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	f002 fbd0 	bl	80075d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e38:	441a      	add	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d32b      	bcc.n	8004ea2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	e026      	b.n	8004ea2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68d8      	ldr	r0, [r3, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	f002 fbb6 	bl	80075d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6c:	425b      	negs	r3, r3
 8004e6e:	441a      	add	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d207      	bcs.n	8004e90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e88:	425b      	negs	r3, r3
 8004e8a:	441a      	add	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d105      	bne.n	8004ea2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004eaa:	697b      	ldr	r3, [r7, #20]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d018      	beq.n	8004ef8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	441a      	add	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d303      	bcc.n	8004ee8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68d9      	ldr	r1, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	6838      	ldr	r0, [r7, #0]
 8004ef4:	f002 fb6c 	bl	80075d0 <memcpy>
	}
}
 8004ef8:	bf00      	nop
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f08:	f001 fd46 	bl	8006998 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f14:	e011      	b.n	8004f3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d012      	beq.n	8004f44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3324      	adds	r3, #36	@ 0x24
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fcfe 	bl	8005924 <xTaskRemoveFromEventList>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f2e:	f000 fdd7 	bl	8005ae0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	dce9      	bgt.n	8004f16 <prvUnlockQueue+0x16>
 8004f42:	e000      	b.n	8004f46 <prvUnlockQueue+0x46>
					break;
 8004f44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	22ff      	movs	r2, #255	@ 0xff
 8004f4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f4e:	f001 fd55 	bl	80069fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f52:	f001 fd21 	bl	8006998 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f5e:	e011      	b.n	8004f84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d012      	beq.n	8004f8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3310      	adds	r3, #16
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fcd9 	bl	8005924 <xTaskRemoveFromEventList>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f78:	f000 fdb2 	bl	8005ae0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f7c:	7bbb      	ldrb	r3, [r7, #14]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	dce9      	bgt.n	8004f60 <prvUnlockQueue+0x60>
 8004f8c:	e000      	b.n	8004f90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	22ff      	movs	r2, #255	@ 0xff
 8004f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f98:	f001 fd30 	bl	80069fc <vPortExitCritical>
}
 8004f9c:	bf00      	nop
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fac:	f001 fcf4 	bl	8006998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d102      	bne.n	8004fbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e001      	b.n	8004fc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fc2:	f001 fd1b 	bl	80069fc <vPortExitCritical>

	return xReturn;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fd8:	f001 fcde 	bl	8006998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d102      	bne.n	8004fee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	e001      	b.n	8004ff2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ff2:	f001 fd03 	bl	80069fc <vPortExitCritical>

	return xReturn;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	e014      	b.n	800503a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005010:	4a0f      	ldr	r2, [pc, #60]	@ (8005050 <vQueueAddToRegistry+0x50>)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10b      	bne.n	8005034 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800501c:	490c      	ldr	r1, [pc, #48]	@ (8005050 <vQueueAddToRegistry+0x50>)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005026:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <vQueueAddToRegistry+0x50>)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4413      	add	r3, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005032:	e006      	b.n	8005042 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3301      	adds	r3, #1
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b07      	cmp	r3, #7
 800503e:	d9e7      	bls.n	8005010 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20000a10 	.word	0x20000a10

08005054 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005064:	f001 fc98 	bl	8006998 <vPortEnterCritical>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800506e:	b25b      	sxtb	r3, r3
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005074:	d103      	bne.n	800507e <vQueueWaitForMessageRestricted+0x2a>
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005084:	b25b      	sxtb	r3, r3
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d103      	bne.n	8005094 <vQueueWaitForMessageRestricted+0x40>
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005094:	f001 fcb2 	bl	80069fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	3324      	adds	r3, #36	@ 0x24
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fc0f 	bl	80058cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050ae:	6978      	ldr	r0, [r7, #20]
 80050b0:	f7ff ff26 	bl	8004f00 <prvUnlockQueue>
	}
 80050b4:	bf00      	nop
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08e      	sub	sp, #56	@ 0x38
 80050c0:	af04      	add	r7, sp, #16
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	623b      	str	r3, [r7, #32]
}
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
 80050e6:	e7fd      	b.n	80050e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10b      	bne.n	8005106 <xTaskCreateStatic+0x4a>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	61fb      	str	r3, [r7, #28]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005106:	235c      	movs	r3, #92	@ 0x5c
 8005108:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b5c      	cmp	r3, #92	@ 0x5c
 800510e:	d00b      	beq.n	8005128 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	61bb      	str	r3, [r7, #24]
}
 8005122:	bf00      	nop
 8005124:	bf00      	nop
 8005126:	e7fd      	b.n	8005124 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005128:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01e      	beq.n	800516e <xTaskCreateStatic+0xb2>
 8005130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005132:	2b00      	cmp	r3, #0
 8005134:	d01b      	beq.n	800516e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800513e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	2202      	movs	r2, #2
 8005144:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005148:	2300      	movs	r3, #0
 800514a:	9303      	str	r3, [sp, #12]
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	9302      	str	r3, [sp, #8]
 8005150:	f107 0314 	add.w	r3, r7, #20
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f850 	bl	8005206 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005166:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005168:	f000 f8de 	bl	8005328 <prvAddNewTaskToReadyList>
 800516c:	e001      	b.n	8005172 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005172:	697b      	ldr	r3, [r7, #20]
	}
 8005174:	4618      	mov	r0, r3
 8005176:	3728      	adds	r7, #40	@ 0x28
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08c      	sub	sp, #48	@ 0x30
 8005180:	af04      	add	r7, sp, #16
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	4613      	mov	r3, r2
 800518a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4618      	mov	r0, r3
 8005192:	f001 fd23 	bl	8006bdc <pvPortMalloc>
 8005196:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00e      	beq.n	80051bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800519e:	205c      	movs	r0, #92	@ 0x5c
 80051a0:	f001 fd1c 	bl	8006bdc <pvPortMalloc>
 80051a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80051b2:	e005      	b.n	80051c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051b4:	6978      	ldr	r0, [r7, #20]
 80051b6:	f001 fddf 	bl	8006d78 <vPortFree>
 80051ba:	e001      	b.n	80051c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d017      	beq.n	80051f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	2300      	movs	r3, #0
 80051d2:	9303      	str	r3, [sp, #12]
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	9302      	str	r3, [sp, #8]
 80051d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f80e 	bl	8005206 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ea:	69f8      	ldr	r0, [r7, #28]
 80051ec:	f000 f89c 	bl	8005328 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051f0:	2301      	movs	r3, #1
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	e002      	b.n	80051fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295
 80051fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051fc:	69bb      	ldr	r3, [r7, #24]
	}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b088      	sub	sp, #32
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005216:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	461a      	mov	r2, r3
 800521e:	21a5      	movs	r1, #165	@ 0xa5
 8005220:	f002 f934 	bl	800748c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800522e:	3b01      	subs	r3, #1
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f023 0307 	bic.w	r3, r3, #7
 800523c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00b      	beq.n	8005260 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	617b      	str	r3, [r7, #20]
}
 800525a:	bf00      	nop
 800525c:	bf00      	nop
 800525e:	e7fd      	b.n	800525c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01f      	beq.n	80052a6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	e012      	b.n	8005292 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	7819      	ldrb	r1, [r3, #0]
 8005274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	3334      	adds	r3, #52	@ 0x34
 800527c:	460a      	mov	r2, r1
 800527e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d006      	beq.n	800529a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	3301      	adds	r3, #1
 8005290:	61fb      	str	r3, [r7, #28]
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	2b0f      	cmp	r3, #15
 8005296:	d9e9      	bls.n	800526c <prvInitialiseNewTask+0x66>
 8005298:	e000      	b.n	800529c <prvInitialiseNewTask+0x96>
			{
				break;
 800529a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052a4:	e003      	b.n	80052ae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b0:	2b37      	cmp	r3, #55	@ 0x37
 80052b2:	d901      	bls.n	80052b8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052b4:	2337      	movs	r3, #55	@ 0x37
 80052b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052c2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c6:	2200      	movs	r2, #0
 80052c8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	3304      	adds	r3, #4
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe fec8 	bl	8004064 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	3318      	adds	r3, #24
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fe fec3 	bl	8004064 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f6:	2200      	movs	r2, #0
 80052f8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	68f9      	ldr	r1, [r7, #12]
 8005306:	69b8      	ldr	r0, [r7, #24]
 8005308:	f001 fa18 	bl	800673c <pxPortInitialiseStack>
 800530c:	4602      	mov	r2, r0
 800530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005310:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800531c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800531e:	bf00      	nop
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005330:	f001 fb32 	bl	8006998 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005334:	4b2d      	ldr	r3, [pc, #180]	@ (80053ec <prvAddNewTaskToReadyList+0xc4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3301      	adds	r3, #1
 800533a:	4a2c      	ldr	r2, [pc, #176]	@ (80053ec <prvAddNewTaskToReadyList+0xc4>)
 800533c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800533e:	4b2c      	ldr	r3, [pc, #176]	@ (80053f0 <prvAddNewTaskToReadyList+0xc8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d109      	bne.n	800535a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005346:	4a2a      	ldr	r2, [pc, #168]	@ (80053f0 <prvAddNewTaskToReadyList+0xc8>)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800534c:	4b27      	ldr	r3, [pc, #156]	@ (80053ec <prvAddNewTaskToReadyList+0xc4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d110      	bne.n	8005376 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005354:	f000 fbe8 	bl	8005b28 <prvInitialiseTaskLists>
 8005358:	e00d      	b.n	8005376 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800535a:	4b26      	ldr	r3, [pc, #152]	@ (80053f4 <prvAddNewTaskToReadyList+0xcc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005362:	4b23      	ldr	r3, [pc, #140]	@ (80053f0 <prvAddNewTaskToReadyList+0xc8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536c:	429a      	cmp	r2, r3
 800536e:	d802      	bhi.n	8005376 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005370:	4a1f      	ldr	r2, [pc, #124]	@ (80053f0 <prvAddNewTaskToReadyList+0xc8>)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005376:	4b20      	ldr	r3, [pc, #128]	@ (80053f8 <prvAddNewTaskToReadyList+0xd0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3301      	adds	r3, #1
 800537c:	4a1e      	ldr	r2, [pc, #120]	@ (80053f8 <prvAddNewTaskToReadyList+0xd0>)
 800537e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005380:	4b1d      	ldr	r3, [pc, #116]	@ (80053f8 <prvAddNewTaskToReadyList+0xd0>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538c:	4b1b      	ldr	r3, [pc, #108]	@ (80053fc <prvAddNewTaskToReadyList+0xd4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d903      	bls.n	800539c <prvAddNewTaskToReadyList+0x74>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005398:	4a18      	ldr	r2, [pc, #96]	@ (80053fc <prvAddNewTaskToReadyList+0xd4>)
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4a15      	ldr	r2, [pc, #84]	@ (8005400 <prvAddNewTaskToReadyList+0xd8>)
 80053aa:	441a      	add	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f7fe fe63 	bl	800407e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053b8:	f001 fb20 	bl	80069fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053bc:	4b0d      	ldr	r3, [pc, #52]	@ (80053f4 <prvAddNewTaskToReadyList+0xcc>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00e      	beq.n	80053e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053c4:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <prvAddNewTaskToReadyList+0xc8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d207      	bcs.n	80053e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005404 <prvAddNewTaskToReadyList+0xdc>)
 80053d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000f24 	.word	0x20000f24
 80053f0:	20000a50 	.word	0x20000a50
 80053f4:	20000f30 	.word	0x20000f30
 80053f8:	20000f40 	.word	0x20000f40
 80053fc:	20000f2c 	.word	0x20000f2c
 8005400:	20000a54 	.word	0x20000a54
 8005404:	e000ed04 	.word	0xe000ed04

08005408 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	@ 0x28
 800540c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800540e:	2300      	movs	r3, #0
 8005410:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005412:	2300      	movs	r3, #0
 8005414:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005416:	463a      	mov	r2, r7
 8005418:	1d39      	adds	r1, r7, #4
 800541a:	f107 0308 	add.w	r3, r7, #8
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fdcc 	bl	8003fbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005424:	6839      	ldr	r1, [r7, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	9202      	str	r2, [sp, #8]
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	2300      	movs	r3, #0
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	2300      	movs	r3, #0
 8005434:	460a      	mov	r2, r1
 8005436:	4922      	ldr	r1, [pc, #136]	@ (80054c0 <vTaskStartScheduler+0xb8>)
 8005438:	4822      	ldr	r0, [pc, #136]	@ (80054c4 <vTaskStartScheduler+0xbc>)
 800543a:	f7ff fe3f 	bl	80050bc <xTaskCreateStatic>
 800543e:	4603      	mov	r3, r0
 8005440:	4a21      	ldr	r2, [pc, #132]	@ (80054c8 <vTaskStartScheduler+0xc0>)
 8005442:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005444:	4b20      	ldr	r3, [pc, #128]	@ (80054c8 <vTaskStartScheduler+0xc0>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800544c:	2301      	movs	r3, #1
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	e001      	b.n	8005456 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d102      	bne.n	8005462 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800545c:	f000 fe14 	bl	8006088 <xTimerCreateTimerTask>
 8005460:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d116      	bne.n	8005496 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	613b      	str	r3, [r7, #16]
}
 800547a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800547c:	4b13      	ldr	r3, [pc, #76]	@ (80054cc <vTaskStartScheduler+0xc4>)
 800547e:	f04f 32ff 	mov.w	r2, #4294967295
 8005482:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005484:	4b12      	ldr	r3, [pc, #72]	@ (80054d0 <vTaskStartScheduler+0xc8>)
 8005486:	2201      	movs	r2, #1
 8005488:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800548a:	4b12      	ldr	r3, [pc, #72]	@ (80054d4 <vTaskStartScheduler+0xcc>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005490:	f001 f9de 	bl	8006850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005494:	e00f      	b.n	80054b6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d10b      	bne.n	80054b6 <vTaskStartScheduler+0xae>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	60fb      	str	r3, [r7, #12]
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	e7fd      	b.n	80054b2 <vTaskStartScheduler+0xaa>
}
 80054b6:	bf00      	nop
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	08007ed4 	.word	0x08007ed4
 80054c4:	08005af9 	.word	0x08005af9
 80054c8:	20000f48 	.word	0x20000f48
 80054cc:	20000f44 	.word	0x20000f44
 80054d0:	20000f30 	.word	0x20000f30
 80054d4:	20000f28 	.word	0x20000f28

080054d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054dc:	4b04      	ldr	r3, [pc, #16]	@ (80054f0 <vTaskSuspendAll+0x18>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3301      	adds	r3, #1
 80054e2:	4a03      	ldr	r2, [pc, #12]	@ (80054f0 <vTaskSuspendAll+0x18>)
 80054e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054e6:	bf00      	nop
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	20000f4c 	.word	0x20000f4c

080054f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005502:	4b42      	ldr	r3, [pc, #264]	@ (800560c <xTaskResumeAll+0x118>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10b      	bne.n	8005522 <xTaskResumeAll+0x2e>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	603b      	str	r3, [r7, #0]
}
 800551c:	bf00      	nop
 800551e:	bf00      	nop
 8005520:	e7fd      	b.n	800551e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005522:	f001 fa39 	bl	8006998 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005526:	4b39      	ldr	r3, [pc, #228]	@ (800560c <xTaskResumeAll+0x118>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3b01      	subs	r3, #1
 800552c:	4a37      	ldr	r2, [pc, #220]	@ (800560c <xTaskResumeAll+0x118>)
 800552e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005530:	4b36      	ldr	r3, [pc, #216]	@ (800560c <xTaskResumeAll+0x118>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d162      	bne.n	80055fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005538:	4b35      	ldr	r3, [pc, #212]	@ (8005610 <xTaskResumeAll+0x11c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d05e      	beq.n	80055fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005540:	e02f      	b.n	80055a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005542:	4b34      	ldr	r3, [pc, #208]	@ (8005614 <xTaskResumeAll+0x120>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3318      	adds	r3, #24
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe fdf2 	bl	8004138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3304      	adds	r3, #4
 8005558:	4618      	mov	r0, r3
 800555a:	f7fe fded 	bl	8004138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005562:	4b2d      	ldr	r3, [pc, #180]	@ (8005618 <xTaskResumeAll+0x124>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d903      	bls.n	8005572 <xTaskResumeAll+0x7e>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	4a2a      	ldr	r2, [pc, #168]	@ (8005618 <xTaskResumeAll+0x124>)
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4a27      	ldr	r2, [pc, #156]	@ (800561c <xTaskResumeAll+0x128>)
 8005580:	441a      	add	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3304      	adds	r3, #4
 8005586:	4619      	mov	r1, r3
 8005588:	4610      	mov	r0, r2
 800558a:	f7fe fd78 	bl	800407e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005592:	4b23      	ldr	r3, [pc, #140]	@ (8005620 <xTaskResumeAll+0x12c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005598:	429a      	cmp	r2, r3
 800559a:	d302      	bcc.n	80055a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800559c:	4b21      	ldr	r3, [pc, #132]	@ (8005624 <xTaskResumeAll+0x130>)
 800559e:	2201      	movs	r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005614 <xTaskResumeAll+0x120>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1cb      	bne.n	8005542 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055b0:	f000 fb58 	bl	8005c64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005628 <xTaskResumeAll+0x134>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d010      	beq.n	80055e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055c0:	f000 f846 	bl	8005650 <xTaskIncrementTick>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80055ca:	4b16      	ldr	r3, [pc, #88]	@ (8005624 <xTaskResumeAll+0x130>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f1      	bne.n	80055c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80055dc:	4b12      	ldr	r3, [pc, #72]	@ (8005628 <xTaskResumeAll+0x134>)
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055e2:	4b10      	ldr	r3, [pc, #64]	@ (8005624 <xTaskResumeAll+0x130>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d009      	beq.n	80055fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055ee:	4b0f      	ldr	r3, [pc, #60]	@ (800562c <xTaskResumeAll+0x138>)
 80055f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055fe:	f001 f9fd 	bl	80069fc <vPortExitCritical>

	return xAlreadyYielded;
 8005602:	68bb      	ldr	r3, [r7, #8]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20000f4c 	.word	0x20000f4c
 8005610:	20000f24 	.word	0x20000f24
 8005614:	20000ee4 	.word	0x20000ee4
 8005618:	20000f2c 	.word	0x20000f2c
 800561c:	20000a54 	.word	0x20000a54
 8005620:	20000a50 	.word	0x20000a50
 8005624:	20000f38 	.word	0x20000f38
 8005628:	20000f34 	.word	0x20000f34
 800562c:	e000ed04 	.word	0xe000ed04

08005630 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005636:	4b05      	ldr	r3, [pc, #20]	@ (800564c <xTaskGetTickCount+0x1c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800563c:	687b      	ldr	r3, [r7, #4]
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20000f28 	.word	0x20000f28

08005650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800565a:	4b4f      	ldr	r3, [pc, #316]	@ (8005798 <xTaskIncrementTick+0x148>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f040 8090 	bne.w	8005784 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005664:	4b4d      	ldr	r3, [pc, #308]	@ (800579c <xTaskIncrementTick+0x14c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800566c:	4a4b      	ldr	r2, [pc, #300]	@ (800579c <xTaskIncrementTick+0x14c>)
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d121      	bne.n	80056bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005678:	4b49      	ldr	r3, [pc, #292]	@ (80057a0 <xTaskIncrementTick+0x150>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00b      	beq.n	800569a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	603b      	str	r3, [r7, #0]
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	e7fd      	b.n	8005696 <xTaskIncrementTick+0x46>
 800569a:	4b41      	ldr	r3, [pc, #260]	@ (80057a0 <xTaskIncrementTick+0x150>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	4b40      	ldr	r3, [pc, #256]	@ (80057a4 <xTaskIncrementTick+0x154>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a3e      	ldr	r2, [pc, #248]	@ (80057a0 <xTaskIncrementTick+0x150>)
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	4a3e      	ldr	r2, [pc, #248]	@ (80057a4 <xTaskIncrementTick+0x154>)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4b3e      	ldr	r3, [pc, #248]	@ (80057a8 <xTaskIncrementTick+0x158>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3301      	adds	r3, #1
 80056b4:	4a3c      	ldr	r2, [pc, #240]	@ (80057a8 <xTaskIncrementTick+0x158>)
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	f000 fad4 	bl	8005c64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056bc:	4b3b      	ldr	r3, [pc, #236]	@ (80057ac <xTaskIncrementTick+0x15c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d349      	bcc.n	800575a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056c6:	4b36      	ldr	r3, [pc, #216]	@ (80057a0 <xTaskIncrementTick+0x150>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d0:	4b36      	ldr	r3, [pc, #216]	@ (80057ac <xTaskIncrementTick+0x15c>)
 80056d2:	f04f 32ff 	mov.w	r2, #4294967295
 80056d6:	601a      	str	r2, [r3, #0]
					break;
 80056d8:	e03f      	b.n	800575a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056da:	4b31      	ldr	r3, [pc, #196]	@ (80057a0 <xTaskIncrementTick+0x150>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d203      	bcs.n	80056fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056f2:	4a2e      	ldr	r2, [pc, #184]	@ (80057ac <xTaskIncrementTick+0x15c>)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056f8:	e02f      	b.n	800575a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	3304      	adds	r3, #4
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe fd1a 	bl	8004138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	3318      	adds	r3, #24
 8005710:	4618      	mov	r0, r3
 8005712:	f7fe fd11 	bl	8004138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571a:	4b25      	ldr	r3, [pc, #148]	@ (80057b0 <xTaskIncrementTick+0x160>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d903      	bls.n	800572a <xTaskIncrementTick+0xda>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005726:	4a22      	ldr	r2, [pc, #136]	@ (80057b0 <xTaskIncrementTick+0x160>)
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4a1f      	ldr	r2, [pc, #124]	@ (80057b4 <xTaskIncrementTick+0x164>)
 8005738:	441a      	add	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	3304      	adds	r3, #4
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f7fe fc9c 	bl	800407e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574a:	4b1b      	ldr	r3, [pc, #108]	@ (80057b8 <xTaskIncrementTick+0x168>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	429a      	cmp	r2, r3
 8005752:	d3b8      	bcc.n	80056c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005754:	2301      	movs	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005758:	e7b5      	b.n	80056c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800575a:	4b17      	ldr	r3, [pc, #92]	@ (80057b8 <xTaskIncrementTick+0x168>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005760:	4914      	ldr	r1, [pc, #80]	@ (80057b4 <xTaskIncrementTick+0x164>)
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d901      	bls.n	8005776 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005772:	2301      	movs	r3, #1
 8005774:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005776:	4b11      	ldr	r3, [pc, #68]	@ (80057bc <xTaskIncrementTick+0x16c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800577e:	2301      	movs	r3, #1
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	e004      	b.n	800578e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005784:	4b0e      	ldr	r3, [pc, #56]	@ (80057c0 <xTaskIncrementTick+0x170>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3301      	adds	r3, #1
 800578a:	4a0d      	ldr	r2, [pc, #52]	@ (80057c0 <xTaskIncrementTick+0x170>)
 800578c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800578e:	697b      	ldr	r3, [r7, #20]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000f4c 	.word	0x20000f4c
 800579c:	20000f28 	.word	0x20000f28
 80057a0:	20000edc 	.word	0x20000edc
 80057a4:	20000ee0 	.word	0x20000ee0
 80057a8:	20000f3c 	.word	0x20000f3c
 80057ac:	20000f44 	.word	0x20000f44
 80057b0:	20000f2c 	.word	0x20000f2c
 80057b4:	20000a54 	.word	0x20000a54
 80057b8:	20000a50 	.word	0x20000a50
 80057bc:	20000f38 	.word	0x20000f38
 80057c0:	20000f34 	.word	0x20000f34

080057c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057ca:	4b28      	ldr	r3, [pc, #160]	@ (800586c <vTaskSwitchContext+0xa8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057d2:	4b27      	ldr	r3, [pc, #156]	@ (8005870 <vTaskSwitchContext+0xac>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057d8:	e042      	b.n	8005860 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80057da:	4b25      	ldr	r3, [pc, #148]	@ (8005870 <vTaskSwitchContext+0xac>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e0:	4b24      	ldr	r3, [pc, #144]	@ (8005874 <vTaskSwitchContext+0xb0>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e011      	b.n	800580c <vTaskSwitchContext+0x48>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <vTaskSwitchContext+0x42>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	607b      	str	r3, [r7, #4]
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	e7fd      	b.n	8005802 <vTaskSwitchContext+0x3e>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3b01      	subs	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	491a      	ldr	r1, [pc, #104]	@ (8005878 <vTaskSwitchContext+0xb4>)
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0e3      	beq.n	80057e8 <vTaskSwitchContext+0x24>
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4a13      	ldr	r2, [pc, #76]	@ (8005878 <vTaskSwitchContext+0xb4>)
 800582c:	4413      	add	r3, r2
 800582e:	60bb      	str	r3, [r7, #8]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	3308      	adds	r3, #8
 8005842:	429a      	cmp	r2, r3
 8005844:	d104      	bne.n	8005850 <vTaskSwitchContext+0x8c>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	605a      	str	r2, [r3, #4]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	4a09      	ldr	r2, [pc, #36]	@ (800587c <vTaskSwitchContext+0xb8>)
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	4a06      	ldr	r2, [pc, #24]	@ (8005874 <vTaskSwitchContext+0xb0>)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6013      	str	r3, [r2, #0]
}
 8005860:	bf00      	nop
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	20000f4c 	.word	0x20000f4c
 8005870:	20000f38 	.word	0x20000f38
 8005874:	20000f2c 	.word	0x20000f2c
 8005878:	20000a54 	.word	0x20000a54
 800587c:	20000a50 	.word	0x20000a50

08005880 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10b      	bne.n	80058a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058a8:	4b07      	ldr	r3, [pc, #28]	@ (80058c8 <vTaskPlaceOnEventList+0x48>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3318      	adds	r3, #24
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fe fc08 	bl	80040c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058b6:	2101      	movs	r1, #1
 80058b8:	6838      	ldr	r0, [r7, #0]
 80058ba:	f000 fb91 	bl	8005fe0 <prvAddCurrentTaskToDelayedList>
}
 80058be:	bf00      	nop
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000a50 	.word	0x20000a50

080058cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10b      	bne.n	80058f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	617b      	str	r3, [r7, #20]
}
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	e7fd      	b.n	80058f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005920 <vTaskPlaceOnEventListRestricted+0x54>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3318      	adds	r3, #24
 80058fc:	4619      	mov	r1, r3
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f7fe fbbd 	bl	800407e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	68b8      	ldr	r0, [r7, #8]
 8005914:	f000 fb64 	bl	8005fe0 <prvAddCurrentTaskToDelayedList>
	}
 8005918:	bf00      	nop
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20000a50 	.word	0x20000a50

08005924 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10b      	bne.n	8005952 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	60fb      	str	r3, [r7, #12]
}
 800594c:	bf00      	nop
 800594e:	bf00      	nop
 8005950:	e7fd      	b.n	800594e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	3318      	adds	r3, #24
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fbee 	bl	8004138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800595c:	4b1d      	ldr	r3, [pc, #116]	@ (80059d4 <xTaskRemoveFromEventList+0xb0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d11d      	bne.n	80059a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	3304      	adds	r3, #4
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe fbe5 	bl	8004138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005972:	4b19      	ldr	r3, [pc, #100]	@ (80059d8 <xTaskRemoveFromEventList+0xb4>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d903      	bls.n	8005982 <xTaskRemoveFromEventList+0x5e>
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597e:	4a16      	ldr	r2, [pc, #88]	@ (80059d8 <xTaskRemoveFromEventList+0xb4>)
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4a13      	ldr	r2, [pc, #76]	@ (80059dc <xTaskRemoveFromEventList+0xb8>)
 8005990:	441a      	add	r2, r3
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	3304      	adds	r3, #4
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f7fe fb70 	bl	800407e <vListInsertEnd>
 800599e:	e005      	b.n	80059ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	3318      	adds	r3, #24
 80059a4:	4619      	mov	r1, r3
 80059a6:	480e      	ldr	r0, [pc, #56]	@ (80059e0 <xTaskRemoveFromEventList+0xbc>)
 80059a8:	f7fe fb69 	bl	800407e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b0:	4b0c      	ldr	r3, [pc, #48]	@ (80059e4 <xTaskRemoveFromEventList+0xc0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d905      	bls.n	80059c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059ba:	2301      	movs	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059be:	4b0a      	ldr	r3, [pc, #40]	@ (80059e8 <xTaskRemoveFromEventList+0xc4>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e001      	b.n	80059ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059ca:	697b      	ldr	r3, [r7, #20]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20000f4c 	.word	0x20000f4c
 80059d8:	20000f2c 	.word	0x20000f2c
 80059dc:	20000a54 	.word	0x20000a54
 80059e0:	20000ee4 	.word	0x20000ee4
 80059e4:	20000a50 	.word	0x20000a50
 80059e8:	20000f38 	.word	0x20000f38

080059ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059f4:	4b06      	ldr	r3, [pc, #24]	@ (8005a10 <vTaskInternalSetTimeOutState+0x24>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059fc:	4b05      	ldr	r3, [pc, #20]	@ (8005a14 <vTaskInternalSetTimeOutState+0x28>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	605a      	str	r2, [r3, #4]
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	20000f3c 	.word	0x20000f3c
 8005a14:	20000f28 	.word	0x20000f28

08005a18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10b      	bne.n	8005a40 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	613b      	str	r3, [r7, #16]
}
 8005a3a:	bf00      	nop
 8005a3c:	bf00      	nop
 8005a3e:	e7fd      	b.n	8005a3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	60fb      	str	r3, [r7, #12]
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	e7fd      	b.n	8005a5a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a5e:	f000 ff9b 	bl	8006998 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a62:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad8 <xTaskCheckForTimeOut+0xc0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	d102      	bne.n	8005a82 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61fb      	str	r3, [r7, #28]
 8005a80:	e023      	b.n	8005aca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	4b15      	ldr	r3, [pc, #84]	@ (8005adc <xTaskCheckForTimeOut+0xc4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d007      	beq.n	8005a9e <xTaskCheckForTimeOut+0x86>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d302      	bcc.n	8005a9e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	61fb      	str	r3, [r7, #28]
 8005a9c:	e015      	b.n	8005aca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d20b      	bcs.n	8005ac0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	1ad2      	subs	r2, r2, r3
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff ff99 	bl	80059ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	e004      	b.n	8005aca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005aca:	f000 ff97 	bl	80069fc <vPortExitCritical>

	return xReturn;
 8005ace:	69fb      	ldr	r3, [r7, #28]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3720      	adds	r7, #32
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20000f28 	.word	0x20000f28
 8005adc:	20000f3c 	.word	0x20000f3c

08005ae0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ae4:	4b03      	ldr	r3, [pc, #12]	@ (8005af4 <vTaskMissedYield+0x14>)
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
}
 8005aea:	bf00      	nop
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	20000f38 	.word	0x20000f38

08005af8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b00:	f000 f852 	bl	8005ba8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b04:	4b06      	ldr	r3, [pc, #24]	@ (8005b20 <prvIdleTask+0x28>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d9f9      	bls.n	8005b00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b0c:	4b05      	ldr	r3, [pc, #20]	@ (8005b24 <prvIdleTask+0x2c>)
 8005b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b1c:	e7f0      	b.n	8005b00 <prvIdleTask+0x8>
 8005b1e:	bf00      	nop
 8005b20:	20000a54 	.word	0x20000a54
 8005b24:	e000ed04 	.word	0xe000ed04

08005b28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b2e:	2300      	movs	r3, #0
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	e00c      	b.n	8005b4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4a12      	ldr	r2, [pc, #72]	@ (8005b88 <prvInitialiseTaskLists+0x60>)
 8005b40:	4413      	add	r3, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fa6e 	bl	8004024 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	607b      	str	r3, [r7, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b37      	cmp	r3, #55	@ 0x37
 8005b52:	d9ef      	bls.n	8005b34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b54:	480d      	ldr	r0, [pc, #52]	@ (8005b8c <prvInitialiseTaskLists+0x64>)
 8005b56:	f7fe fa65 	bl	8004024 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b5a:	480d      	ldr	r0, [pc, #52]	@ (8005b90 <prvInitialiseTaskLists+0x68>)
 8005b5c:	f7fe fa62 	bl	8004024 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b60:	480c      	ldr	r0, [pc, #48]	@ (8005b94 <prvInitialiseTaskLists+0x6c>)
 8005b62:	f7fe fa5f 	bl	8004024 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b66:	480c      	ldr	r0, [pc, #48]	@ (8005b98 <prvInitialiseTaskLists+0x70>)
 8005b68:	f7fe fa5c 	bl	8004024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b6c:	480b      	ldr	r0, [pc, #44]	@ (8005b9c <prvInitialiseTaskLists+0x74>)
 8005b6e:	f7fe fa59 	bl	8004024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b72:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <prvInitialiseTaskLists+0x78>)
 8005b74:	4a05      	ldr	r2, [pc, #20]	@ (8005b8c <prvInitialiseTaskLists+0x64>)
 8005b76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b78:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba4 <prvInitialiseTaskLists+0x7c>)
 8005b7a:	4a05      	ldr	r2, [pc, #20]	@ (8005b90 <prvInitialiseTaskLists+0x68>)
 8005b7c:	601a      	str	r2, [r3, #0]
}
 8005b7e:	bf00      	nop
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000a54 	.word	0x20000a54
 8005b8c:	20000eb4 	.word	0x20000eb4
 8005b90:	20000ec8 	.word	0x20000ec8
 8005b94:	20000ee4 	.word	0x20000ee4
 8005b98:	20000ef8 	.word	0x20000ef8
 8005b9c:	20000f10 	.word	0x20000f10
 8005ba0:	20000edc 	.word	0x20000edc
 8005ba4:	20000ee0 	.word	0x20000ee0

08005ba8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bae:	e019      	b.n	8005be4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bb0:	f000 fef2 	bl	8006998 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bb4:	4b10      	ldr	r3, [pc, #64]	@ (8005bf8 <prvCheckTasksWaitingTermination+0x50>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fe fab9 	bl	8004138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bfc <prvCheckTasksWaitingTermination+0x54>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8005bfc <prvCheckTasksWaitingTermination+0x54>)
 8005bce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c00 <prvCheckTasksWaitingTermination+0x58>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8005c00 <prvCheckTasksWaitingTermination+0x58>)
 8005bd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bda:	f000 ff0f 	bl	80069fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f810 	bl	8005c04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005be4:	4b06      	ldr	r3, [pc, #24]	@ (8005c00 <prvCheckTasksWaitingTermination+0x58>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e1      	bne.n	8005bb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000ef8 	.word	0x20000ef8
 8005bfc:	20000f24 	.word	0x20000f24
 8005c00:	20000f0c 	.word	0x20000f0c

08005c04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d108      	bne.n	8005c28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 f8ac 	bl	8006d78 <vPortFree>
				vPortFree( pxTCB );
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 f8a9 	bl	8006d78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c26:	e019      	b.n	8005c5c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d103      	bne.n	8005c3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f001 f8a0 	bl	8006d78 <vPortFree>
	}
 8005c38:	e010      	b.n	8005c5c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d00b      	beq.n	8005c5c <prvDeleteTCB+0x58>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	60fb      	str	r3, [r7, #12]
}
 8005c56:	bf00      	nop
 8005c58:	bf00      	nop
 8005c5a:	e7fd      	b.n	8005c58 <prvDeleteTCB+0x54>
	}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c9c <prvResetNextTaskUnblockTime+0x38>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d104      	bne.n	8005c7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c74:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca0 <prvResetNextTaskUnblockTime+0x3c>)
 8005c76:	f04f 32ff 	mov.w	r2, #4294967295
 8005c7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c7c:	e008      	b.n	8005c90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c7e:	4b07      	ldr	r3, [pc, #28]	@ (8005c9c <prvResetNextTaskUnblockTime+0x38>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	4a04      	ldr	r2, [pc, #16]	@ (8005ca0 <prvResetNextTaskUnblockTime+0x3c>)
 8005c8e:	6013      	str	r3, [r2, #0]
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	20000edc 	.word	0x20000edc
 8005ca0:	20000f44 	.word	0x20000f44

08005ca4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005caa:	4b05      	ldr	r3, [pc, #20]	@ (8005cc0 <xTaskGetCurrentTaskHandle+0x1c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005cb0:	687b      	ldr	r3, [r7, #4]
	}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20000a50 	.word	0x20000a50

08005cc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cca:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf8 <xTaskGetSchedulerState+0x34>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d102      	bne.n	8005cd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	607b      	str	r3, [r7, #4]
 8005cd6:	e008      	b.n	8005cea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cd8:	4b08      	ldr	r3, [pc, #32]	@ (8005cfc <xTaskGetSchedulerState+0x38>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d102      	bne.n	8005ce6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	607b      	str	r3, [r7, #4]
 8005ce4:	e001      	b.n	8005cea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cea:	687b      	ldr	r3, [r7, #4]
	}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	20000f30 	.word	0x20000f30
 8005cfc:	20000f4c 	.word	0x20000f4c

08005d00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d051      	beq.n	8005dba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc4 <xTaskPriorityInherit+0xc4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d241      	bcs.n	8005da8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	db06      	blt.n	8005d3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d2c:	4b25      	ldr	r3, [pc, #148]	@ (8005dc4 <xTaskPriorityInherit+0xc4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d32:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	6959      	ldr	r1, [r3, #20]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc8 <xTaskPriorityInherit+0xc8>)
 8005d4c:	4413      	add	r3, r2
 8005d4e:	4299      	cmp	r1, r3
 8005d50:	d122      	bne.n	8005d98 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe f9ee 	bl	8004138 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d5c:	4b19      	ldr	r3, [pc, #100]	@ (8005dc4 <xTaskPriorityInherit+0xc4>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d6a:	4b18      	ldr	r3, [pc, #96]	@ (8005dcc <xTaskPriorityInherit+0xcc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d903      	bls.n	8005d7a <xTaskPriorityInherit+0x7a>
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d76:	4a15      	ldr	r2, [pc, #84]	@ (8005dcc <xTaskPriorityInherit+0xcc>)
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4a10      	ldr	r2, [pc, #64]	@ (8005dc8 <xTaskPriorityInherit+0xc8>)
 8005d88:	441a      	add	r2, r3
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4610      	mov	r0, r2
 8005d92:	f7fe f974 	bl	800407e <vListInsertEnd>
 8005d96:	e004      	b.n	8005da2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d98:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc4 <xTaskPriorityInherit+0xc4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005da2:	2301      	movs	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	e008      	b.n	8005dba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005dac:	4b05      	ldr	r3, [pc, #20]	@ (8005dc4 <xTaskPriorityInherit+0xc4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d201      	bcs.n	8005dba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005db6:	2301      	movs	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005dba:	68fb      	ldr	r3, [r7, #12]
	}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000a50 	.word	0x20000a50
 8005dc8:	20000a54 	.word	0x20000a54
 8005dcc:	20000f2c 	.word	0x20000f2c

08005dd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d058      	beq.n	8005e98 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005de6:	4b2f      	ldr	r3, [pc, #188]	@ (8005ea4 <xTaskPriorityDisinherit+0xd4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d00b      	beq.n	8005e08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	60fb      	str	r3, [r7, #12]
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60bb      	str	r3, [r7, #8]
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e2c:	1e5a      	subs	r2, r3, #1
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d02c      	beq.n	8005e98 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d128      	bne.n	8005e98 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe f974 	bl	8004138 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e68:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea8 <xTaskPriorityDisinherit+0xd8>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d903      	bls.n	8005e78 <xTaskPriorityDisinherit+0xa8>
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	4a0c      	ldr	r2, [pc, #48]	@ (8005ea8 <xTaskPriorityDisinherit+0xd8>)
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4a09      	ldr	r2, [pc, #36]	@ (8005eac <xTaskPriorityDisinherit+0xdc>)
 8005e86:	441a      	add	r2, r3
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f7fe f8f5 	bl	800407e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e98:	697b      	ldr	r3, [r7, #20]
	}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000a50 	.word	0x20000a50
 8005ea8:	20000f2c 	.word	0x20000f2c
 8005eac:	20000a54 	.word	0x20000a54

08005eb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d06c      	beq.n	8005fa2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10b      	bne.n	8005ee8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	60fb      	str	r3, [r7, #12]
}
 8005ee2:	bf00      	nop
 8005ee4:	bf00      	nop
 8005ee6:	e7fd      	b.n	8005ee4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d902      	bls.n	8005ef8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	61fb      	str	r3, [r7, #28]
 8005ef6:	e002      	b.n	8005efe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005efc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d04c      	beq.n	8005fa2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d147      	bne.n	8005fa2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f12:	4b26      	ldr	r3, [pc, #152]	@ (8005fac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d10b      	bne.n	8005f34 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	60bb      	str	r3, [r7, #8]
}
 8005f2e:	bf00      	nop
 8005f30:	bf00      	nop
 8005f32:	e7fd      	b.n	8005f30 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	db04      	blt.n	8005f52 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	6959      	ldr	r1, [r3, #20]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4a13      	ldr	r2, [pc, #76]	@ (8005fb0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f62:	4413      	add	r3, r2
 8005f64:	4299      	cmp	r1, r3
 8005f66:	d11c      	bne.n	8005fa2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fe f8e3 	bl	8004138 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f76:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d903      	bls.n	8005f86 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f82:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4a07      	ldr	r2, [pc, #28]	@ (8005fb0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f94:	441a      	add	r2, r3
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f7fe f86e 	bl	800407e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fa2:	bf00      	nop
 8005fa4:	3720      	adds	r7, #32
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20000a50 	.word	0x20000a50
 8005fb0:	20000a54 	.word	0x20000a54
 8005fb4:	20000f2c 	.word	0x20000f2c

08005fb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005fbc:	4b07      	ldr	r3, [pc, #28]	@ (8005fdc <pvTaskIncrementMutexHeldCount+0x24>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d004      	beq.n	8005fce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005fc4:	4b05      	ldr	r3, [pc, #20]	@ (8005fdc <pvTaskIncrementMutexHeldCount+0x24>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fca:	3201      	adds	r2, #1
 8005fcc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005fce:	4b03      	ldr	r3, [pc, #12]	@ (8005fdc <pvTaskIncrementMutexHeldCount+0x24>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
	}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	20000a50 	.word	0x20000a50

08005fe0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fea:	4b21      	ldr	r3, [pc, #132]	@ (8006070 <prvAddCurrentTaskToDelayedList+0x90>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ff0:	4b20      	ldr	r3, [pc, #128]	@ (8006074 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fe f89e 	bl	8004138 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006002:	d10a      	bne.n	800601a <prvAddCurrentTaskToDelayedList+0x3a>
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d007      	beq.n	800601a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800600a:	4b1a      	ldr	r3, [pc, #104]	@ (8006074 <prvAddCurrentTaskToDelayedList+0x94>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3304      	adds	r3, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4819      	ldr	r0, [pc, #100]	@ (8006078 <prvAddCurrentTaskToDelayedList+0x98>)
 8006014:	f7fe f833 	bl	800407e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006018:	e026      	b.n	8006068 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4413      	add	r3, r2
 8006020:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006022:	4b14      	ldr	r3, [pc, #80]	@ (8006074 <prvAddCurrentTaskToDelayedList+0x94>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	429a      	cmp	r2, r3
 8006030:	d209      	bcs.n	8006046 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006032:	4b12      	ldr	r3, [pc, #72]	@ (800607c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4b0f      	ldr	r3, [pc, #60]	@ (8006074 <prvAddCurrentTaskToDelayedList+0x94>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3304      	adds	r3, #4
 800603c:	4619      	mov	r1, r3
 800603e:	4610      	mov	r0, r2
 8006040:	f7fe f841 	bl	80040c6 <vListInsert>
}
 8006044:	e010      	b.n	8006068 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006046:	4b0e      	ldr	r3, [pc, #56]	@ (8006080 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	4b0a      	ldr	r3, [pc, #40]	@ (8006074 <prvAddCurrentTaskToDelayedList+0x94>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3304      	adds	r3, #4
 8006050:	4619      	mov	r1, r3
 8006052:	4610      	mov	r0, r2
 8006054:	f7fe f837 	bl	80040c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006058:	4b0a      	ldr	r3, [pc, #40]	@ (8006084 <prvAddCurrentTaskToDelayedList+0xa4>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	429a      	cmp	r2, r3
 8006060:	d202      	bcs.n	8006068 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006062:	4a08      	ldr	r2, [pc, #32]	@ (8006084 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	6013      	str	r3, [r2, #0]
}
 8006068:	bf00      	nop
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20000f28 	.word	0x20000f28
 8006074:	20000a50 	.word	0x20000a50
 8006078:	20000f10 	.word	0x20000f10
 800607c:	20000ee0 	.word	0x20000ee0
 8006080:	20000edc 	.word	0x20000edc
 8006084:	20000f44 	.word	0x20000f44

08006088 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08a      	sub	sp, #40	@ 0x28
 800608c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006092:	f000 fb13 	bl	80066bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006096:	4b1d      	ldr	r3, [pc, #116]	@ (800610c <xTimerCreateTimerTask+0x84>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d021      	beq.n	80060e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060a6:	1d3a      	adds	r2, r7, #4
 80060a8:	f107 0108 	add.w	r1, r7, #8
 80060ac:	f107 030c 	add.w	r3, r7, #12
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fd ff9d 	bl	8003ff0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	9202      	str	r2, [sp, #8]
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	2302      	movs	r3, #2
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	2300      	movs	r3, #0
 80060c6:	460a      	mov	r2, r1
 80060c8:	4911      	ldr	r1, [pc, #68]	@ (8006110 <xTimerCreateTimerTask+0x88>)
 80060ca:	4812      	ldr	r0, [pc, #72]	@ (8006114 <xTimerCreateTimerTask+0x8c>)
 80060cc:	f7fe fff6 	bl	80050bc <xTaskCreateStatic>
 80060d0:	4603      	mov	r3, r0
 80060d2:	4a11      	ldr	r2, [pc, #68]	@ (8006118 <xTimerCreateTimerTask+0x90>)
 80060d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060d6:	4b10      	ldr	r3, [pc, #64]	@ (8006118 <xTimerCreateTimerTask+0x90>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060de:	2301      	movs	r3, #1
 80060e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	613b      	str	r3, [r7, #16]
}
 80060fa:	bf00      	nop
 80060fc:	bf00      	nop
 80060fe:	e7fd      	b.n	80060fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006100:	697b      	ldr	r3, [r7, #20]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000f80 	.word	0x20000f80
 8006110:	08007edc 	.word	0x08007edc
 8006114:	08006255 	.word	0x08006255
 8006118:	20000f84 	.word	0x20000f84

0800611c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08a      	sub	sp, #40	@ 0x28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10b      	bne.n	800614c <xTimerGenericCommand+0x30>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	623b      	str	r3, [r7, #32]
}
 8006146:	bf00      	nop
 8006148:	bf00      	nop
 800614a:	e7fd      	b.n	8006148 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800614c:	4b19      	ldr	r3, [pc, #100]	@ (80061b4 <xTimerGenericCommand+0x98>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d02a      	beq.n	80061aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2b05      	cmp	r3, #5
 8006164:	dc18      	bgt.n	8006198 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006166:	f7ff fdad 	bl	8005cc4 <xTaskGetSchedulerState>
 800616a:	4603      	mov	r3, r0
 800616c:	2b02      	cmp	r3, #2
 800616e:	d109      	bne.n	8006184 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006170:	4b10      	ldr	r3, [pc, #64]	@ (80061b4 <xTimerGenericCommand+0x98>)
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	f107 0110 	add.w	r1, r7, #16
 8006178:	2300      	movs	r3, #0
 800617a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800617c:	f7fe fa04 	bl	8004588 <xQueueGenericSend>
 8006180:	6278      	str	r0, [r7, #36]	@ 0x24
 8006182:	e012      	b.n	80061aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006184:	4b0b      	ldr	r3, [pc, #44]	@ (80061b4 <xTimerGenericCommand+0x98>)
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	f107 0110 	add.w	r1, r7, #16
 800618c:	2300      	movs	r3, #0
 800618e:	2200      	movs	r2, #0
 8006190:	f7fe f9fa 	bl	8004588 <xQueueGenericSend>
 8006194:	6278      	str	r0, [r7, #36]	@ 0x24
 8006196:	e008      	b.n	80061aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006198:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <xTimerGenericCommand+0x98>)
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	f107 0110 	add.w	r1, r7, #16
 80061a0:	2300      	movs	r3, #0
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	f7fe faf2 	bl	800478c <xQueueGenericSendFromISR>
 80061a8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3728      	adds	r7, #40	@ 0x28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20000f80 	.word	0x20000f80

080061b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af02      	add	r7, sp, #8
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c2:	4b23      	ldr	r3, [pc, #140]	@ (8006250 <prvProcessExpiredTimer+0x98>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fd ffb1 	bl	8004138 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d023      	beq.n	800622c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	699a      	ldr	r2, [r3, #24]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	18d1      	adds	r1, r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	6978      	ldr	r0, [r7, #20]
 80061f2:	f000 f8d5 	bl	80063a0 <prvInsertTimerInActiveList>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d020      	beq.n	800623e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061fc:	2300      	movs	r3, #0
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	2300      	movs	r3, #0
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	2100      	movs	r1, #0
 8006206:	6978      	ldr	r0, [r7, #20]
 8006208:	f7ff ff88 	bl	800611c <xTimerGenericCommand>
 800620c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d114      	bne.n	800623e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	60fb      	str	r3, [r7, #12]
}
 8006226:	bf00      	nop
 8006228:	bf00      	nop
 800622a:	e7fd      	b.n	8006228 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006232:	f023 0301 	bic.w	r3, r3, #1
 8006236:	b2da      	uxtb	r2, r3
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	6978      	ldr	r0, [r7, #20]
 8006244:	4798      	blx	r3
}
 8006246:	bf00      	nop
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000f78 	.word	0x20000f78

08006254 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800625c:	f107 0308 	add.w	r3, r7, #8
 8006260:	4618      	mov	r0, r3
 8006262:	f000 f859 	bl	8006318 <prvGetNextExpireTime>
 8006266:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4619      	mov	r1, r3
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f805 	bl	800627c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006272:	f000 f8d7 	bl	8006424 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006276:	bf00      	nop
 8006278:	e7f0      	b.n	800625c <prvTimerTask+0x8>
	...

0800627c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006286:	f7ff f927 	bl	80054d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800628a:	f107 0308 	add.w	r3, r7, #8
 800628e:	4618      	mov	r0, r3
 8006290:	f000 f866 	bl	8006360 <prvSampleTimeNow>
 8006294:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d130      	bne.n	80062fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <prvProcessTimerOrBlockTask+0x3c>
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d806      	bhi.n	80062b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062aa:	f7ff f923 	bl	80054f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062ae:	68f9      	ldr	r1, [r7, #12]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff ff81 	bl	80061b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062b6:	e024      	b.n	8006302 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d008      	beq.n	80062d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062be:	4b13      	ldr	r3, [pc, #76]	@ (800630c <prvProcessTimerOrBlockTask+0x90>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <prvProcessTimerOrBlockTask+0x50>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e000      	b.n	80062ce <prvProcessTimerOrBlockTask+0x52>
 80062cc:	2300      	movs	r3, #0
 80062ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006310 <prvProcessTimerOrBlockTask+0x94>)
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	4619      	mov	r1, r3
 80062de:	f7fe feb9 	bl	8005054 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062e2:	f7ff f907 	bl	80054f4 <xTaskResumeAll>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062ec:	4b09      	ldr	r3, [pc, #36]	@ (8006314 <prvProcessTimerOrBlockTask+0x98>)
 80062ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	f3bf 8f6f 	isb	sy
}
 80062fc:	e001      	b.n	8006302 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062fe:	f7ff f8f9 	bl	80054f4 <xTaskResumeAll>
}
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000f7c 	.word	0x20000f7c
 8006310:	20000f80 	.word	0x20000f80
 8006314:	e000ed04 	.word	0xe000ed04

08006318 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006320:	4b0e      	ldr	r3, [pc, #56]	@ (800635c <prvGetNextExpireTime+0x44>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <prvGetNextExpireTime+0x16>
 800632a:	2201      	movs	r2, #1
 800632c:	e000      	b.n	8006330 <prvGetNextExpireTime+0x18>
 800632e:	2200      	movs	r2, #0
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d105      	bne.n	8006348 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800633c:	4b07      	ldr	r3, [pc, #28]	@ (800635c <prvGetNextExpireTime+0x44>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	e001      	b.n	800634c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800634c:	68fb      	ldr	r3, [r7, #12]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000f78 	.word	0x20000f78

08006360 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006368:	f7ff f962 	bl	8005630 <xTaskGetTickCount>
 800636c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800636e:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <prvSampleTimeNow+0x3c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	429a      	cmp	r2, r3
 8006376:	d205      	bcs.n	8006384 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006378:	f000 f93a 	bl	80065f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e002      	b.n	800638a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800638a:	4a04      	ldr	r2, [pc, #16]	@ (800639c <prvSampleTimeNow+0x3c>)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006390:	68fb      	ldr	r3, [r7, #12]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20000f88 	.word	0x20000f88

080063a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d812      	bhi.n	80063ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	1ad2      	subs	r2, r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063d4:	2301      	movs	r3, #1
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	e01b      	b.n	8006412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063da:	4b10      	ldr	r3, [pc, #64]	@ (800641c <prvInsertTimerInActiveList+0x7c>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f7fd fe6e 	bl	80040c6 <vListInsert>
 80063ea:	e012      	b.n	8006412 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d206      	bcs.n	8006402 <prvInsertTimerInActiveList+0x62>
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d302      	bcc.n	8006402 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063fc:	2301      	movs	r3, #1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	e007      	b.n	8006412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006402:	4b07      	ldr	r3, [pc, #28]	@ (8006420 <prvInsertTimerInActiveList+0x80>)
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3304      	adds	r3, #4
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f7fd fe5a 	bl	80040c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006412:	697b      	ldr	r3, [r7, #20]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20000f7c 	.word	0x20000f7c
 8006420:	20000f78 	.word	0x20000f78

08006424 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08e      	sub	sp, #56	@ 0x38
 8006428:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800642a:	e0ce      	b.n	80065ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	da19      	bge.n	8006466 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006432:	1d3b      	adds	r3, r7, #4
 8006434:	3304      	adds	r3, #4
 8006436:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10b      	bne.n	8006456 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	61fb      	str	r3, [r7, #28]
}
 8006450:	bf00      	nop
 8006452:	bf00      	nop
 8006454:	e7fd      	b.n	8006452 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800645c:	6850      	ldr	r0, [r2, #4]
 800645e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006460:	6892      	ldr	r2, [r2, #8]
 8006462:	4611      	mov	r1, r2
 8006464:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	f2c0 80ae 	blt.w	80065ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d004      	beq.n	8006484 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800647a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647c:	3304      	adds	r3, #4
 800647e:	4618      	mov	r0, r3
 8006480:	f7fd fe5a 	bl	8004138 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006484:	463b      	mov	r3, r7
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff ff6a 	bl	8006360 <prvSampleTimeNow>
 800648c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b09      	cmp	r3, #9
 8006492:	f200 8097 	bhi.w	80065c4 <prvProcessReceivedCommands+0x1a0>
 8006496:	a201      	add	r2, pc, #4	@ (adr r2, 800649c <prvProcessReceivedCommands+0x78>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064c5 	.word	0x080064c5
 80064a4:	080064c5 	.word	0x080064c5
 80064a8:	0800653b 	.word	0x0800653b
 80064ac:	0800654f 	.word	0x0800654f
 80064b0:	0800659b 	.word	0x0800659b
 80064b4:	080064c5 	.word	0x080064c5
 80064b8:	080064c5 	.word	0x080064c5
 80064bc:	0800653b 	.word	0x0800653b
 80064c0:	0800654f 	.word	0x0800654f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064ca:	f043 0301 	orr.w	r3, r3, #1
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	18d1      	adds	r1, r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064e4:	f7ff ff5c 	bl	80063a0 <prvInsertTimerInActiveList>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d06c      	beq.n	80065c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d061      	beq.n	80065c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	441a      	add	r2, r3
 800650c:	2300      	movs	r3, #0
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	2300      	movs	r3, #0
 8006512:	2100      	movs	r1, #0
 8006514:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006516:	f7ff fe01 	bl	800611c <xTimerGenericCommand>
 800651a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d152      	bne.n	80065c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	61bb      	str	r3, [r7, #24]
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop
 8006538:	e7fd      	b.n	8006536 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800653a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006540:	f023 0301 	bic.w	r3, r3, #1
 8006544:	b2da      	uxtb	r2, r3
 8006546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006548:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800654c:	e03d      	b.n	80065ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800654e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006554:	f043 0301 	orr.w	r3, r3, #1
 8006558:	b2da      	uxtb	r2, r3
 800655a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006564:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10b      	bne.n	8006586 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	617b      	str	r3, [r7, #20]
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	e7fd      	b.n	8006582 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	18d1      	adds	r1, r2, r3
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006594:	f7ff ff04 	bl	80063a0 <prvInsertTimerInActiveList>
					break;
 8006598:	e017      	b.n	80065ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800659a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d103      	bne.n	80065b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80065a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065aa:	f000 fbe5 	bl	8006d78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065ae:	e00c      	b.n	80065ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065b6:	f023 0301 	bic.w	r3, r3, #1
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80065c2:	e002      	b.n	80065ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80065c4:	bf00      	nop
 80065c6:	e000      	b.n	80065ca <prvProcessReceivedCommands+0x1a6>
					break;
 80065c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065ca:	4b08      	ldr	r3, [pc, #32]	@ (80065ec <prvProcessReceivedCommands+0x1c8>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	1d39      	adds	r1, r7, #4
 80065d0:	2200      	movs	r2, #0
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe f978 	bl	80048c8 <xQueueReceive>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f47f af26 	bne.w	800642c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	3730      	adds	r7, #48	@ 0x30
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20000f80 	.word	0x20000f80

080065f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065f6:	e049      	b.n	800668c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065f8:	4b2e      	ldr	r3, [pc, #184]	@ (80066b4 <prvSwitchTimerLists+0xc4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006602:	4b2c      	ldr	r3, [pc, #176]	@ (80066b4 <prvSwitchTimerLists+0xc4>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3304      	adds	r3, #4
 8006610:	4618      	mov	r0, r3
 8006612:	f7fd fd91 	bl	8004138 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d02f      	beq.n	800668c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4413      	add	r3, r2
 8006634:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	429a      	cmp	r2, r3
 800663c:	d90e      	bls.n	800665c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800664a:	4b1a      	ldr	r3, [pc, #104]	@ (80066b4 <prvSwitchTimerLists+0xc4>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3304      	adds	r3, #4
 8006652:	4619      	mov	r1, r3
 8006654:	4610      	mov	r0, r2
 8006656:	f7fd fd36 	bl	80040c6 <vListInsert>
 800665a:	e017      	b.n	800668c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800665c:	2300      	movs	r3, #0
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	2300      	movs	r3, #0
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	2100      	movs	r1, #0
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff fd58 	bl	800611c <xTimerGenericCommand>
 800666c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10b      	bne.n	800668c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	603b      	str	r3, [r7, #0]
}
 8006686:	bf00      	nop
 8006688:	bf00      	nop
 800668a:	e7fd      	b.n	8006688 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800668c:	4b09      	ldr	r3, [pc, #36]	@ (80066b4 <prvSwitchTimerLists+0xc4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1b0      	bne.n	80065f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006696:	4b07      	ldr	r3, [pc, #28]	@ (80066b4 <prvSwitchTimerLists+0xc4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <prvSwitchTimerLists+0xc8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a04      	ldr	r2, [pc, #16]	@ (80066b4 <prvSwitchTimerLists+0xc4>)
 80066a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066a4:	4a04      	ldr	r2, [pc, #16]	@ (80066b8 <prvSwitchTimerLists+0xc8>)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	6013      	str	r3, [r2, #0]
}
 80066aa:	bf00      	nop
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20000f78 	.word	0x20000f78
 80066b8:	20000f7c 	.word	0x20000f7c

080066bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066c2:	f000 f969 	bl	8006998 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066c6:	4b15      	ldr	r3, [pc, #84]	@ (800671c <prvCheckForValidListAndQueue+0x60>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d120      	bne.n	8006710 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066ce:	4814      	ldr	r0, [pc, #80]	@ (8006720 <prvCheckForValidListAndQueue+0x64>)
 80066d0:	f7fd fca8 	bl	8004024 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066d4:	4813      	ldr	r0, [pc, #76]	@ (8006724 <prvCheckForValidListAndQueue+0x68>)
 80066d6:	f7fd fca5 	bl	8004024 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066da:	4b13      	ldr	r3, [pc, #76]	@ (8006728 <prvCheckForValidListAndQueue+0x6c>)
 80066dc:	4a10      	ldr	r2, [pc, #64]	@ (8006720 <prvCheckForValidListAndQueue+0x64>)
 80066de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066e0:	4b12      	ldr	r3, [pc, #72]	@ (800672c <prvCheckForValidListAndQueue+0x70>)
 80066e2:	4a10      	ldr	r2, [pc, #64]	@ (8006724 <prvCheckForValidListAndQueue+0x68>)
 80066e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066e6:	2300      	movs	r3, #0
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	4b11      	ldr	r3, [pc, #68]	@ (8006730 <prvCheckForValidListAndQueue+0x74>)
 80066ec:	4a11      	ldr	r2, [pc, #68]	@ (8006734 <prvCheckForValidListAndQueue+0x78>)
 80066ee:	2110      	movs	r1, #16
 80066f0:	200a      	movs	r0, #10
 80066f2:	f7fd fdb5 	bl	8004260 <xQueueGenericCreateStatic>
 80066f6:	4603      	mov	r3, r0
 80066f8:	4a08      	ldr	r2, [pc, #32]	@ (800671c <prvCheckForValidListAndQueue+0x60>)
 80066fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066fc:	4b07      	ldr	r3, [pc, #28]	@ (800671c <prvCheckForValidListAndQueue+0x60>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006704:	4b05      	ldr	r3, [pc, #20]	@ (800671c <prvCheckForValidListAndQueue+0x60>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	490b      	ldr	r1, [pc, #44]	@ (8006738 <prvCheckForValidListAndQueue+0x7c>)
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe fc78 	bl	8005000 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006710:	f000 f974 	bl	80069fc <vPortExitCritical>
}
 8006714:	bf00      	nop
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20000f80 	.word	0x20000f80
 8006720:	20000f50 	.word	0x20000f50
 8006724:	20000f64 	.word	0x20000f64
 8006728:	20000f78 	.word	0x20000f78
 800672c:	20000f7c 	.word	0x20000f7c
 8006730:	2000102c 	.word	0x2000102c
 8006734:	20000f8c 	.word	0x20000f8c
 8006738:	08007ee4 	.word	0x08007ee4

0800673c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3b04      	subs	r3, #4
 800674c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3b04      	subs	r3, #4
 800675a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f023 0201 	bic.w	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3b04      	subs	r3, #4
 800676a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800676c:	4a0c      	ldr	r2, [pc, #48]	@ (80067a0 <pxPortInitialiseStack+0x64>)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3b14      	subs	r3, #20
 8006776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3b04      	subs	r3, #4
 8006782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f06f 0202 	mvn.w	r2, #2
 800678a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3b20      	subs	r3, #32
 8006790:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006792:	68fb      	ldr	r3, [r7, #12]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	080067a5 	.word	0x080067a5

080067a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067ae:	4b13      	ldr	r3, [pc, #76]	@ (80067fc <prvTaskExitError+0x58>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d00b      	beq.n	80067d0 <prvTaskExitError+0x2c>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60fb      	str	r3, [r7, #12]
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	e7fd      	b.n	80067cc <prvTaskExitError+0x28>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	60bb      	str	r3, [r7, #8]
}
 80067e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067e4:	bf00      	nop
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0fc      	beq.n	80067e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067ec:	bf00      	nop
 80067ee:	bf00      	nop
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	2000001c 	.word	0x2000001c

08006800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006800:	4b07      	ldr	r3, [pc, #28]	@ (8006820 <pxCurrentTCBConst2>)
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	6808      	ldr	r0, [r1, #0]
 8006806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	f380 8809 	msr	PSP, r0
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f04f 0000 	mov.w	r0, #0
 8006816:	f380 8811 	msr	BASEPRI, r0
 800681a:	4770      	bx	lr
 800681c:	f3af 8000 	nop.w

08006820 <pxCurrentTCBConst2>:
 8006820:	20000a50 	.word	0x20000a50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006828:	4808      	ldr	r0, [pc, #32]	@ (800684c <prvPortStartFirstTask+0x24>)
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	6800      	ldr	r0, [r0, #0]
 800682e:	f380 8808 	msr	MSP, r0
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8814 	msr	CONTROL, r0
 800683a:	b662      	cpsie	i
 800683c:	b661      	cpsie	f
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	df00      	svc	0
 8006848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800684a:	bf00      	nop
 800684c:	e000ed08 	.word	0xe000ed08

08006850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006856:	4b47      	ldr	r3, [pc, #284]	@ (8006974 <xPortStartScheduler+0x124>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a47      	ldr	r2, [pc, #284]	@ (8006978 <xPortStartScheduler+0x128>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d10b      	bne.n	8006878 <xPortStartScheduler+0x28>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	60fb      	str	r3, [r7, #12]
}
 8006872:	bf00      	nop
 8006874:	bf00      	nop
 8006876:	e7fd      	b.n	8006874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006878:	4b3e      	ldr	r3, [pc, #248]	@ (8006974 <xPortStartScheduler+0x124>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a3f      	ldr	r2, [pc, #252]	@ (800697c <xPortStartScheduler+0x12c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d10b      	bne.n	800689a <xPortStartScheduler+0x4a>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	613b      	str	r3, [r7, #16]
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop
 8006898:	e7fd      	b.n	8006896 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800689a:	4b39      	ldr	r3, [pc, #228]	@ (8006980 <xPortStartScheduler+0x130>)
 800689c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	22ff      	movs	r2, #255	@ 0xff
 80068aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	4b31      	ldr	r3, [pc, #196]	@ (8006984 <xPortStartScheduler+0x134>)
 80068c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068c2:	4b31      	ldr	r3, [pc, #196]	@ (8006988 <xPortStartScheduler+0x138>)
 80068c4:	2207      	movs	r2, #7
 80068c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068c8:	e009      	b.n	80068de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80068ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006988 <xPortStartScheduler+0x138>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006988 <xPortStartScheduler+0x138>)
 80068d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068de:	78fb      	ldrb	r3, [r7, #3]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e6:	2b80      	cmp	r3, #128	@ 0x80
 80068e8:	d0ef      	beq.n	80068ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068ea:	4b27      	ldr	r3, [pc, #156]	@ (8006988 <xPortStartScheduler+0x138>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f1c3 0307 	rsb	r3, r3, #7
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d00b      	beq.n	800690e <xPortStartScheduler+0xbe>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	60bb      	str	r3, [r7, #8]
}
 8006908:	bf00      	nop
 800690a:	bf00      	nop
 800690c:	e7fd      	b.n	800690a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800690e:	4b1e      	ldr	r3, [pc, #120]	@ (8006988 <xPortStartScheduler+0x138>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	4a1c      	ldr	r2, [pc, #112]	@ (8006988 <xPortStartScheduler+0x138>)
 8006916:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006918:	4b1b      	ldr	r3, [pc, #108]	@ (8006988 <xPortStartScheduler+0x138>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006920:	4a19      	ldr	r2, [pc, #100]	@ (8006988 <xPortStartScheduler+0x138>)
 8006922:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	b2da      	uxtb	r2, r3
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800692c:	4b17      	ldr	r3, [pc, #92]	@ (800698c <xPortStartScheduler+0x13c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a16      	ldr	r2, [pc, #88]	@ (800698c <xPortStartScheduler+0x13c>)
 8006932:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006936:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006938:	4b14      	ldr	r3, [pc, #80]	@ (800698c <xPortStartScheduler+0x13c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a13      	ldr	r2, [pc, #76]	@ (800698c <xPortStartScheduler+0x13c>)
 800693e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006942:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006944:	f000 f8da 	bl	8006afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006948:	4b11      	ldr	r3, [pc, #68]	@ (8006990 <xPortStartScheduler+0x140>)
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800694e:	f000 f8f9 	bl	8006b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006952:	4b10      	ldr	r3, [pc, #64]	@ (8006994 <xPortStartScheduler+0x144>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a0f      	ldr	r2, [pc, #60]	@ (8006994 <xPortStartScheduler+0x144>)
 8006958:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800695c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800695e:	f7ff ff63 	bl	8006828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006962:	f7fe ff2f 	bl	80057c4 <vTaskSwitchContext>
	prvTaskExitError();
 8006966:	f7ff ff1d 	bl	80067a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	e000ed00 	.word	0xe000ed00
 8006978:	410fc271 	.word	0x410fc271
 800697c:	410fc270 	.word	0x410fc270
 8006980:	e000e400 	.word	0xe000e400
 8006984:	2000107c 	.word	0x2000107c
 8006988:	20001080 	.word	0x20001080
 800698c:	e000ed20 	.word	0xe000ed20
 8006990:	2000001c 	.word	0x2000001c
 8006994:	e000ef34 	.word	0xe000ef34

08006998 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	607b      	str	r3, [r7, #4]
}
 80069b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069b2:	4b10      	ldr	r3, [pc, #64]	@ (80069f4 <vPortEnterCritical+0x5c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	4a0e      	ldr	r2, [pc, #56]	@ (80069f4 <vPortEnterCritical+0x5c>)
 80069ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069bc:	4b0d      	ldr	r3, [pc, #52]	@ (80069f4 <vPortEnterCritical+0x5c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d110      	bne.n	80069e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069c4:	4b0c      	ldr	r3, [pc, #48]	@ (80069f8 <vPortEnterCritical+0x60>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00b      	beq.n	80069e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	603b      	str	r3, [r7, #0]
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	e7fd      	b.n	80069e2 <vPortEnterCritical+0x4a>
	}
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	2000001c 	.word	0x2000001c
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a02:	4b12      	ldr	r3, [pc, #72]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <vPortExitCritical+0x26>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	607b      	str	r3, [r7, #4]
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	e7fd      	b.n	8006a1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a22:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	4a08      	ldr	r2, [pc, #32]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a2c:	4b07      	ldr	r3, [pc, #28]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <vPortExitCritical+0x44>
 8006a34:	2300      	movs	r3, #0
 8006a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f383 8811 	msr	BASEPRI, r3
}
 8006a3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	2000001c 	.word	0x2000001c

08006a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a50:	f3ef 8009 	mrs	r0, PSP
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4b15      	ldr	r3, [pc, #84]	@ (8006ab0 <pxCurrentTCBConst>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f01e 0f10 	tst.w	lr, #16
 8006a60:	bf08      	it	eq
 8006a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6a:	6010      	str	r0, [r2, #0]
 8006a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a74:	f380 8811 	msr	BASEPRI, r0
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f7fe fea0 	bl	80057c4 <vTaskSwitchContext>
 8006a84:	f04f 0000 	mov.w	r0, #0
 8006a88:	f380 8811 	msr	BASEPRI, r0
 8006a8c:	bc09      	pop	{r0, r3}
 8006a8e:	6819      	ldr	r1, [r3, #0]
 8006a90:	6808      	ldr	r0, [r1, #0]
 8006a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a96:	f01e 0f10 	tst.w	lr, #16
 8006a9a:	bf08      	it	eq
 8006a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006aa0:	f380 8809 	msr	PSP, r0
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	f3af 8000 	nop.w

08006ab0 <pxCurrentTCBConst>:
 8006ab0:	20000a50 	.word	0x20000a50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ad2:	f7fe fdbd 	bl	8005650 <xTaskIncrementTick>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006adc:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <xPortSysTickHandler+0x40>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f383 8811 	msr	BASEPRI, r3
}
 8006aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b00:	4b0b      	ldr	r3, [pc, #44]	@ (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b06:	4b0b      	ldr	r3, [pc, #44]	@ (8006b34 <vPortSetupTimerInterrupt+0x38>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <vPortSetupTimerInterrupt+0x3c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	@ (8006b3c <vPortSetupTimerInterrupt+0x40>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	099b      	lsrs	r3, r3, #6
 8006b18:	4a09      	ldr	r2, [pc, #36]	@ (8006b40 <vPortSetupTimerInterrupt+0x44>)
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b1e:	4b04      	ldr	r3, [pc, #16]	@ (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b20:	2207      	movs	r2, #7
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	e000e010 	.word	0xe000e010
 8006b34:	e000e018 	.word	0xe000e018
 8006b38:	20000010 	.word	0x20000010
 8006b3c:	10624dd3 	.word	0x10624dd3
 8006b40:	e000e014 	.word	0xe000e014

08006b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006b54 <vPortEnableVFP+0x10>
 8006b48:	6801      	ldr	r1, [r0, #0]
 8006b4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b4e:	6001      	str	r1, [r0, #0]
 8006b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b52:	bf00      	nop
 8006b54:	e000ed88 	.word	0xe000ed88

08006b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b5e:	f3ef 8305 	mrs	r3, IPSR
 8006b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b0f      	cmp	r3, #15
 8006b68:	d915      	bls.n	8006b96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b6a:	4a18      	ldr	r2, [pc, #96]	@ (8006bcc <vPortValidateInterruptPriority+0x74>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b74:	4b16      	ldr	r3, [pc, #88]	@ (8006bd0 <vPortValidateInterruptPriority+0x78>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	7afa      	ldrb	r2, [r7, #11]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d20b      	bcs.n	8006b96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	607b      	str	r3, [r7, #4]
}
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	e7fd      	b.n	8006b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b96:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd4 <vPortValidateInterruptPriority+0x7c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd8 <vPortValidateInterruptPriority+0x80>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d90b      	bls.n	8006bbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	603b      	str	r3, [r7, #0]
}
 8006bb8:	bf00      	nop
 8006bba:	bf00      	nop
 8006bbc:	e7fd      	b.n	8006bba <vPortValidateInterruptPriority+0x62>
	}
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	e000e3f0 	.word	0xe000e3f0
 8006bd0:	2000107c 	.word	0x2000107c
 8006bd4:	e000ed0c 	.word	0xe000ed0c
 8006bd8:	20001080 	.word	0x20001080

08006bdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08a      	sub	sp, #40	@ 0x28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006be8:	f7fe fc76 	bl	80054d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bec:	4b5c      	ldr	r3, [pc, #368]	@ (8006d60 <pvPortMalloc+0x184>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bf4:	f000 f924 	bl	8006e40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8006d64 <pvPortMalloc+0x188>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f040 8095 	bne.w	8006d30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01e      	beq.n	8006c4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006c0c:	2208      	movs	r2, #8
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4413      	add	r3, r2
 8006c12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d015      	beq.n	8006c4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f023 0307 	bic.w	r3, r3, #7
 8006c24:	3308      	adds	r3, #8
 8006c26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00b      	beq.n	8006c4a <pvPortMalloc+0x6e>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	617b      	str	r3, [r7, #20]
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	e7fd      	b.n	8006c46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d06f      	beq.n	8006d30 <pvPortMalloc+0x154>
 8006c50:	4b45      	ldr	r3, [pc, #276]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d86a      	bhi.n	8006d30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c5a:	4b44      	ldr	r3, [pc, #272]	@ (8006d6c <pvPortMalloc+0x190>)
 8006c5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c5e:	4b43      	ldr	r3, [pc, #268]	@ (8006d6c <pvPortMalloc+0x190>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c64:	e004      	b.n	8006c70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d903      	bls.n	8006c82 <pvPortMalloc+0xa6>
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f1      	bne.n	8006c66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c82:	4b37      	ldr	r3, [pc, #220]	@ (8006d60 <pvPortMalloc+0x184>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d051      	beq.n	8006d30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2208      	movs	r2, #8
 8006c92:	4413      	add	r3, r2
 8006c94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	1ad2      	subs	r2, r2, r3
 8006ca6:	2308      	movs	r3, #8
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d920      	bls.n	8006cf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <pvPortMalloc+0xfc>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	613b      	str	r3, [r7, #16]
}
 8006cd2:	bf00      	nop
 8006cd4:	bf00      	nop
 8006cd6:	e7fd      	b.n	8006cd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cea:	69b8      	ldr	r0, [r7, #24]
 8006cec:	f000 f90a 	bl	8006f04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006cfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4b1b      	ldr	r3, [pc, #108]	@ (8006d70 <pvPortMalloc+0x194>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d203      	bcs.n	8006d12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d0a:	4b17      	ldr	r3, [pc, #92]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a18      	ldr	r2, [pc, #96]	@ (8006d70 <pvPortMalloc+0x194>)
 8006d10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	4b13      	ldr	r3, [pc, #76]	@ (8006d64 <pvPortMalloc+0x188>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d26:	4b13      	ldr	r3, [pc, #76]	@ (8006d74 <pvPortMalloc+0x198>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	4a11      	ldr	r2, [pc, #68]	@ (8006d74 <pvPortMalloc+0x198>)
 8006d2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d30:	f7fe fbe0 	bl	80054f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <pvPortMalloc+0x17a>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	60fb      	str	r3, [r7, #12]
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	e7fd      	b.n	8006d52 <pvPortMalloc+0x176>
	return pvReturn;
 8006d56:	69fb      	ldr	r3, [r7, #28]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3728      	adds	r7, #40	@ 0x28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20004c8c 	.word	0x20004c8c
 8006d64:	20004ca0 	.word	0x20004ca0
 8006d68:	20004c90 	.word	0x20004c90
 8006d6c:	20004c84 	.word	0x20004c84
 8006d70:	20004c94 	.word	0x20004c94
 8006d74:	20004c98 	.word	0x20004c98

08006d78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d04f      	beq.n	8006e2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	425b      	negs	r3, r3
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4413      	add	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	4b25      	ldr	r3, [pc, #148]	@ (8006e34 <vPortFree+0xbc>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4013      	ands	r3, r2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <vPortFree+0x46>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	60fb      	str	r3, [r7, #12]
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	e7fd      	b.n	8006dba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00b      	beq.n	8006dde <vPortFree+0x66>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60bb      	str	r3, [r7, #8]
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	e7fd      	b.n	8006dda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	4b14      	ldr	r3, [pc, #80]	@ (8006e34 <vPortFree+0xbc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01e      	beq.n	8006e2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d11a      	bne.n	8006e2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e34 <vPortFree+0xbc>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	401a      	ands	r2, r3
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e04:	f7fe fb68 	bl	80054d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e38 <vPortFree+0xc0>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4413      	add	r3, r2
 8006e12:	4a09      	ldr	r2, [pc, #36]	@ (8006e38 <vPortFree+0xc0>)
 8006e14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e16:	6938      	ldr	r0, [r7, #16]
 8006e18:	f000 f874 	bl	8006f04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e1c:	4b07      	ldr	r3, [pc, #28]	@ (8006e3c <vPortFree+0xc4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	4a06      	ldr	r2, [pc, #24]	@ (8006e3c <vPortFree+0xc4>)
 8006e24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e26:	f7fe fb65 	bl	80054f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e2a:	bf00      	nop
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20004ca0 	.word	0x20004ca0
 8006e38:	20004c90 	.word	0x20004c90
 8006e3c:	20004c9c 	.word	0x20004c9c

08006e40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006e4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e4c:	4b27      	ldr	r3, [pc, #156]	@ (8006eec <prvHeapInit+0xac>)
 8006e4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00c      	beq.n	8006e74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3307      	adds	r3, #7
 8006e5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0307 	bic.w	r3, r3, #7
 8006e66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8006eec <prvHeapInit+0xac>)
 8006e70:	4413      	add	r3, r2
 8006e72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e78:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef0 <prvHeapInit+0xb0>)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ef0 <prvHeapInit+0xb0>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	4413      	add	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e8c:	2208      	movs	r2, #8
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0307 	bic.w	r3, r3, #7
 8006e9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4a15      	ldr	r2, [pc, #84]	@ (8006ef4 <prvHeapInit+0xb4>)
 8006ea0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ea2:	4b14      	ldr	r3, [pc, #80]	@ (8006ef4 <prvHeapInit+0xb4>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eaa:	4b12      	ldr	r3, [pc, #72]	@ (8006ef4 <prvHeapInit+0xb4>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	1ad2      	subs	r2, r2, r3
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef4 <prvHeapInit+0xb4>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8006ef8 <prvHeapInit+0xb8>)
 8006ece:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	4a09      	ldr	r2, [pc, #36]	@ (8006efc <prvHeapInit+0xbc>)
 8006ed6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ed8:	4b09      	ldr	r3, [pc, #36]	@ (8006f00 <prvHeapInit+0xc0>)
 8006eda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006ede:	601a      	str	r2, [r3, #0]
}
 8006ee0:	bf00      	nop
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	20001084 	.word	0x20001084
 8006ef0:	20004c84 	.word	0x20004c84
 8006ef4:	20004c8c 	.word	0x20004c8c
 8006ef8:	20004c94 	.word	0x20004c94
 8006efc:	20004c90 	.word	0x20004c90
 8006f00:	20004ca0 	.word	0x20004ca0

08006f04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f0c:	4b28      	ldr	r3, [pc, #160]	@ (8006fb0 <prvInsertBlockIntoFreeList+0xac>)
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	e002      	b.n	8006f18 <prvInsertBlockIntoFreeList+0x14>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d8f7      	bhi.n	8006f12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d108      	bne.n	8006f46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	441a      	add	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	441a      	add	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d118      	bne.n	8006f8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4b15      	ldr	r3, [pc, #84]	@ (8006fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d00d      	beq.n	8006f82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	441a      	add	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	e008      	b.n	8006f94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f82:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e003      	b.n	8006f94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d002      	beq.n	8006fa2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fa2:	bf00      	nop
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20004c84 	.word	0x20004c84
 8006fb4:	20004c8c 	.word	0x20004c8c

08006fb8 <RingBufferInit>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
sRingBuffer_t *RingBufferInit (size_t capacity) {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
    if (capacity <= 0) {
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <RingBufferInit+0x12>
        return NULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e028      	b.n	800701c <RingBufferInit+0x64>
    }

    sRingBuffer_t *r_buffer = (sRingBuffer_t *)calloc(1, sizeof(sRingBuffer_t));
 8006fca:	2114      	movs	r1, #20
 8006fcc:	2001      	movs	r0, #1
 8006fce:	f000 f8c9 	bl	8007164 <calloc>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	60fb      	str	r3, [r7, #12]
    if (r_buffer == NULL) {
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <RingBufferInit+0x28>
        return NULL;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e01d      	b.n	800701c <RingBufferInit+0x64>
    }

    r_buffer->buffer = (uint8_t *)calloc(capacity, sizeof(uint8_t));
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f8be 	bl	8007164 <calloc>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	461a      	mov	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	601a      	str	r2, [r3, #0]
    if (r_buffer->buffer == NULL) {
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <RingBufferInit+0x4a>
        free(r_buffer);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 f8d7 	bl	80071ac <free>
        return NULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	e00c      	b.n	800701c <RingBufferInit+0x64>
    }

    r_buffer->capacity = capacity;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	605a      	str	r2, [r3, #4]
    r_buffer->head = 0;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	609a      	str	r2, [r3, #8]
    r_buffer->tail = 0;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	60da      	str	r2, [r3, #12]
    r_buffer->count = 0;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	611a      	str	r2, [r3, #16]

    return r_buffer;
 800701a:	68fb      	ldr	r3, [r7, #12]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <RingBufferIsEmpty>:


bool RingBufferIsEmpty (sRingBuffer_t *r_buffer) {
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
    if (r_buffer == NULL) {
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <RingBufferIsEmpty+0x12>
        return true;
 8007032:	2301      	movs	r3, #1
 8007034:	e006      	b.n	8007044 <RingBufferIsEmpty+0x20>
    }

    return r_buffer->count == 0;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	bf0c      	ite	eq
 800703e:	2301      	moveq	r3, #1
 8007040:	2300      	movne	r3, #0
 8007042:	b2db      	uxtb	r3, r3
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <RingBufferIsFull>:

bool RingBufferIsFull (sRingBuffer_t *r_buffer) {
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
    if (r_buffer == NULL) {
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <RingBufferIsFull+0x12>
        return true;
 800705e:	2301      	movs	r3, #1
 8007060:	e008      	b.n	8007074 <RingBufferIsFull+0x24>
    }

    return r_buffer->count == r_buffer->capacity;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691a      	ldr	r2, [r3, #16]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	429a      	cmp	r2, r3
 800706c:	bf0c      	ite	eq
 800706e:	2301      	moveq	r3, #1
 8007070:	2300      	movne	r3, #0
 8007072:	b2db      	uxtb	r3, r3
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <RingBufferEnqueue>:


bool RingBufferEnqueue (sRingBuffer_t *r_buffer, uint8_t data) {
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	70fb      	strb	r3, [r7, #3]
    if (r_buffer == NULL) {
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <RingBufferEnqueue+0x16>
        return false;
 8007092:	2300      	movs	r3, #0
 8007094:	e030      	b.n	80070f8 <RingBufferEnqueue+0x78>
    }

    if (RingBufferIsFull(r_buffer)) {
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7ff ffda 	bl	8007050 <RingBufferIsFull>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00b      	beq.n	80070ba <RingBufferEnqueue+0x3a>
        r_buffer->tail = (r_buffer->tail + 1) % r_buffer->capacity;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	3301      	adds	r3, #1
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6852      	ldr	r2, [r2, #4]
 80070ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80070b0:	fb01 f202 	mul.w	r2, r1, r2
 80070b4:	1a9a      	subs	r2, r3, r2
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60da      	str	r2, [r3, #12]
    }

    r_buffer->buffer[r_buffer->head] = data;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	4413      	add	r3, r2
 80070c4:	78fa      	ldrb	r2, [r7, #3]
 80070c6:	701a      	strb	r2, [r3, #0]
    r_buffer->head = (r_buffer->head + 1) % r_buffer->capacity;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	3301      	adds	r3, #1
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6852      	ldr	r2, [r2, #4]
 80070d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80070d6:	fb01 f202 	mul.w	r2, r1, r2
 80070da:	1a9a      	subs	r2, r3, r2
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	609a      	str	r2, [r3, #8]

    if (r_buffer->count < r_buffer->capacity) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691a      	ldr	r2, [r3, #16]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d204      	bcs.n	80070f6 <RingBufferEnqueue+0x76>
        r_buffer->count++;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	611a      	str	r2, [r3, #16]
    }

    return true;
 80070f6:	2301      	movs	r3, #1
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <RingBufferDequeue>:

bool RingBufferDequeue (sRingBuffer_t *r_buffer, uint8_t *data) {
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
    if ((RingBufferIsEmpty(r_buffer)) || (data == NULL)) {
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff ff8a 	bl	8007024 <RingBufferIsEmpty>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d102      	bne.n	800711c <RingBufferDequeue+0x1c>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <RingBufferDequeue+0x20>
        return false;
 800711c:	2300      	movs	r3, #0
 800711e:	e019      	b.n	8007154 <RingBufferDequeue+0x54>
    }

    *data = r_buffer->buffer[r_buffer->tail];
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	4413      	add	r3, r2
 800712a:	781a      	ldrb	r2, [r3, #0]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	701a      	strb	r2, [r3, #0]
    r_buffer->tail = (r_buffer->tail + 1) % r_buffer->capacity;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6852      	ldr	r2, [r2, #4]
 800713a:	fbb3 f1f2 	udiv	r1, r3, r2
 800713e:	fb01 f202 	mul.w	r2, r1, r2
 8007142:	1a9a      	subs	r2, r3, r2
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	60da      	str	r2, [r3, #12]
    r_buffer->count--;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	1e5a      	subs	r2, r3, #1
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	611a      	str	r2, [r3, #16]

    return true;
 8007152:	2301      	movs	r3, #1
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <atoi>:
 800715c:	220a      	movs	r2, #10
 800715e:	2100      	movs	r1, #0
 8007160:	f000 b954 	b.w	800740c <strtol>

08007164 <calloc>:
 8007164:	4b02      	ldr	r3, [pc, #8]	@ (8007170 <calloc+0xc>)
 8007166:	460a      	mov	r2, r1
 8007168:	4601      	mov	r1, r0
 800716a:	6818      	ldr	r0, [r3, #0]
 800716c:	f000 b802 	b.w	8007174 <_calloc_r>
 8007170:	20000020 	.word	0x20000020

08007174 <_calloc_r>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	fba1 5402 	umull	r5, r4, r1, r2
 800717a:	b934      	cbnz	r4, 800718a <_calloc_r+0x16>
 800717c:	4629      	mov	r1, r5
 800717e:	f000 f83f 	bl	8007200 <_malloc_r>
 8007182:	4606      	mov	r6, r0
 8007184:	b928      	cbnz	r0, 8007192 <_calloc_r+0x1e>
 8007186:	4630      	mov	r0, r6
 8007188:	bd70      	pop	{r4, r5, r6, pc}
 800718a:	220c      	movs	r2, #12
 800718c:	6002      	str	r2, [r0, #0]
 800718e:	2600      	movs	r6, #0
 8007190:	e7f9      	b.n	8007186 <_calloc_r+0x12>
 8007192:	462a      	mov	r2, r5
 8007194:	4621      	mov	r1, r4
 8007196:	f000 f979 	bl	800748c <memset>
 800719a:	e7f4      	b.n	8007186 <_calloc_r+0x12>

0800719c <malloc>:
 800719c:	4b02      	ldr	r3, [pc, #8]	@ (80071a8 <malloc+0xc>)
 800719e:	4601      	mov	r1, r0
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	f000 b82d 	b.w	8007200 <_malloc_r>
 80071a6:	bf00      	nop
 80071a8:	20000020 	.word	0x20000020

080071ac <free>:
 80071ac:	4b02      	ldr	r3, [pc, #8]	@ (80071b8 <free+0xc>)
 80071ae:	4601      	mov	r1, r0
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	f000 ba1b 	b.w	80075ec <_free_r>
 80071b6:	bf00      	nop
 80071b8:	20000020 	.word	0x20000020

080071bc <sbrk_aligned>:
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	4e0f      	ldr	r6, [pc, #60]	@ (80071fc <sbrk_aligned+0x40>)
 80071c0:	460c      	mov	r4, r1
 80071c2:	6831      	ldr	r1, [r6, #0]
 80071c4:	4605      	mov	r5, r0
 80071c6:	b911      	cbnz	r1, 80071ce <sbrk_aligned+0x12>
 80071c8:	f000 f9c6 	bl	8007558 <_sbrk_r>
 80071cc:	6030      	str	r0, [r6, #0]
 80071ce:	4621      	mov	r1, r4
 80071d0:	4628      	mov	r0, r5
 80071d2:	f000 f9c1 	bl	8007558 <_sbrk_r>
 80071d6:	1c43      	adds	r3, r0, #1
 80071d8:	d103      	bne.n	80071e2 <sbrk_aligned+0x26>
 80071da:	f04f 34ff 	mov.w	r4, #4294967295
 80071de:	4620      	mov	r0, r4
 80071e0:	bd70      	pop	{r4, r5, r6, pc}
 80071e2:	1cc4      	adds	r4, r0, #3
 80071e4:	f024 0403 	bic.w	r4, r4, #3
 80071e8:	42a0      	cmp	r0, r4
 80071ea:	d0f8      	beq.n	80071de <sbrk_aligned+0x22>
 80071ec:	1a21      	subs	r1, r4, r0
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 f9b2 	bl	8007558 <_sbrk_r>
 80071f4:	3001      	adds	r0, #1
 80071f6:	d1f2      	bne.n	80071de <sbrk_aligned+0x22>
 80071f8:	e7ef      	b.n	80071da <sbrk_aligned+0x1e>
 80071fa:	bf00      	nop
 80071fc:	20004ca4 	.word	0x20004ca4

08007200 <_malloc_r>:
 8007200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007204:	1ccd      	adds	r5, r1, #3
 8007206:	f025 0503 	bic.w	r5, r5, #3
 800720a:	3508      	adds	r5, #8
 800720c:	2d0c      	cmp	r5, #12
 800720e:	bf38      	it	cc
 8007210:	250c      	movcc	r5, #12
 8007212:	2d00      	cmp	r5, #0
 8007214:	4606      	mov	r6, r0
 8007216:	db01      	blt.n	800721c <_malloc_r+0x1c>
 8007218:	42a9      	cmp	r1, r5
 800721a:	d904      	bls.n	8007226 <_malloc_r+0x26>
 800721c:	230c      	movs	r3, #12
 800721e:	6033      	str	r3, [r6, #0]
 8007220:	2000      	movs	r0, #0
 8007222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007226:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072fc <_malloc_r+0xfc>
 800722a:	f000 f869 	bl	8007300 <__malloc_lock>
 800722e:	f8d8 3000 	ldr.w	r3, [r8]
 8007232:	461c      	mov	r4, r3
 8007234:	bb44      	cbnz	r4, 8007288 <_malloc_r+0x88>
 8007236:	4629      	mov	r1, r5
 8007238:	4630      	mov	r0, r6
 800723a:	f7ff ffbf 	bl	80071bc <sbrk_aligned>
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	4604      	mov	r4, r0
 8007242:	d158      	bne.n	80072f6 <_malloc_r+0xf6>
 8007244:	f8d8 4000 	ldr.w	r4, [r8]
 8007248:	4627      	mov	r7, r4
 800724a:	2f00      	cmp	r7, #0
 800724c:	d143      	bne.n	80072d6 <_malloc_r+0xd6>
 800724e:	2c00      	cmp	r4, #0
 8007250:	d04b      	beq.n	80072ea <_malloc_r+0xea>
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	4639      	mov	r1, r7
 8007256:	4630      	mov	r0, r6
 8007258:	eb04 0903 	add.w	r9, r4, r3
 800725c:	f000 f97c 	bl	8007558 <_sbrk_r>
 8007260:	4581      	cmp	r9, r0
 8007262:	d142      	bne.n	80072ea <_malloc_r+0xea>
 8007264:	6821      	ldr	r1, [r4, #0]
 8007266:	1a6d      	subs	r5, r5, r1
 8007268:	4629      	mov	r1, r5
 800726a:	4630      	mov	r0, r6
 800726c:	f7ff ffa6 	bl	80071bc <sbrk_aligned>
 8007270:	3001      	adds	r0, #1
 8007272:	d03a      	beq.n	80072ea <_malloc_r+0xea>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	442b      	add	r3, r5
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	f8d8 3000 	ldr.w	r3, [r8]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	bb62      	cbnz	r2, 80072dc <_malloc_r+0xdc>
 8007282:	f8c8 7000 	str.w	r7, [r8]
 8007286:	e00f      	b.n	80072a8 <_malloc_r+0xa8>
 8007288:	6822      	ldr	r2, [r4, #0]
 800728a:	1b52      	subs	r2, r2, r5
 800728c:	d420      	bmi.n	80072d0 <_malloc_r+0xd0>
 800728e:	2a0b      	cmp	r2, #11
 8007290:	d917      	bls.n	80072c2 <_malloc_r+0xc2>
 8007292:	1961      	adds	r1, r4, r5
 8007294:	42a3      	cmp	r3, r4
 8007296:	6025      	str	r5, [r4, #0]
 8007298:	bf18      	it	ne
 800729a:	6059      	strne	r1, [r3, #4]
 800729c:	6863      	ldr	r3, [r4, #4]
 800729e:	bf08      	it	eq
 80072a0:	f8c8 1000 	streq.w	r1, [r8]
 80072a4:	5162      	str	r2, [r4, r5]
 80072a6:	604b      	str	r3, [r1, #4]
 80072a8:	4630      	mov	r0, r6
 80072aa:	f000 f82f 	bl	800730c <__malloc_unlock>
 80072ae:	f104 000b 	add.w	r0, r4, #11
 80072b2:	1d23      	adds	r3, r4, #4
 80072b4:	f020 0007 	bic.w	r0, r0, #7
 80072b8:	1ac2      	subs	r2, r0, r3
 80072ba:	bf1c      	itt	ne
 80072bc:	1a1b      	subne	r3, r3, r0
 80072be:	50a3      	strne	r3, [r4, r2]
 80072c0:	e7af      	b.n	8007222 <_malloc_r+0x22>
 80072c2:	6862      	ldr	r2, [r4, #4]
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	bf0c      	ite	eq
 80072c8:	f8c8 2000 	streq.w	r2, [r8]
 80072cc:	605a      	strne	r2, [r3, #4]
 80072ce:	e7eb      	b.n	80072a8 <_malloc_r+0xa8>
 80072d0:	4623      	mov	r3, r4
 80072d2:	6864      	ldr	r4, [r4, #4]
 80072d4:	e7ae      	b.n	8007234 <_malloc_r+0x34>
 80072d6:	463c      	mov	r4, r7
 80072d8:	687f      	ldr	r7, [r7, #4]
 80072da:	e7b6      	b.n	800724a <_malloc_r+0x4a>
 80072dc:	461a      	mov	r2, r3
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	d1fb      	bne.n	80072dc <_malloc_r+0xdc>
 80072e4:	2300      	movs	r3, #0
 80072e6:	6053      	str	r3, [r2, #4]
 80072e8:	e7de      	b.n	80072a8 <_malloc_r+0xa8>
 80072ea:	230c      	movs	r3, #12
 80072ec:	6033      	str	r3, [r6, #0]
 80072ee:	4630      	mov	r0, r6
 80072f0:	f000 f80c 	bl	800730c <__malloc_unlock>
 80072f4:	e794      	b.n	8007220 <_malloc_r+0x20>
 80072f6:	6005      	str	r5, [r0, #0]
 80072f8:	e7d6      	b.n	80072a8 <_malloc_r+0xa8>
 80072fa:	bf00      	nop
 80072fc:	20004ca8 	.word	0x20004ca8

08007300 <__malloc_lock>:
 8007300:	4801      	ldr	r0, [pc, #4]	@ (8007308 <__malloc_lock+0x8>)
 8007302:	f000 b963 	b.w	80075cc <__retarget_lock_acquire_recursive>
 8007306:	bf00      	nop
 8007308:	20004de8 	.word	0x20004de8

0800730c <__malloc_unlock>:
 800730c:	4801      	ldr	r0, [pc, #4]	@ (8007314 <__malloc_unlock+0x8>)
 800730e:	f000 b95e 	b.w	80075ce <__retarget_lock_release_recursive>
 8007312:	bf00      	nop
 8007314:	20004de8 	.word	0x20004de8

08007318 <_strtol_l.isra.0>:
 8007318:	2b24      	cmp	r3, #36	@ 0x24
 800731a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800731e:	4686      	mov	lr, r0
 8007320:	4690      	mov	r8, r2
 8007322:	d801      	bhi.n	8007328 <_strtol_l.isra.0+0x10>
 8007324:	2b01      	cmp	r3, #1
 8007326:	d106      	bne.n	8007336 <_strtol_l.isra.0+0x1e>
 8007328:	f000 f926 	bl	8007578 <__errno>
 800732c:	2316      	movs	r3, #22
 800732e:	6003      	str	r3, [r0, #0]
 8007330:	2000      	movs	r0, #0
 8007332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007336:	4834      	ldr	r0, [pc, #208]	@ (8007408 <_strtol_l.isra.0+0xf0>)
 8007338:	460d      	mov	r5, r1
 800733a:	462a      	mov	r2, r5
 800733c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007340:	5d06      	ldrb	r6, [r0, r4]
 8007342:	f016 0608 	ands.w	r6, r6, #8
 8007346:	d1f8      	bne.n	800733a <_strtol_l.isra.0+0x22>
 8007348:	2c2d      	cmp	r4, #45	@ 0x2d
 800734a:	d110      	bne.n	800736e <_strtol_l.isra.0+0x56>
 800734c:	782c      	ldrb	r4, [r5, #0]
 800734e:	2601      	movs	r6, #1
 8007350:	1c95      	adds	r5, r2, #2
 8007352:	f033 0210 	bics.w	r2, r3, #16
 8007356:	d115      	bne.n	8007384 <_strtol_l.isra.0+0x6c>
 8007358:	2c30      	cmp	r4, #48	@ 0x30
 800735a:	d10d      	bne.n	8007378 <_strtol_l.isra.0+0x60>
 800735c:	782a      	ldrb	r2, [r5, #0]
 800735e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007362:	2a58      	cmp	r2, #88	@ 0x58
 8007364:	d108      	bne.n	8007378 <_strtol_l.isra.0+0x60>
 8007366:	786c      	ldrb	r4, [r5, #1]
 8007368:	3502      	adds	r5, #2
 800736a:	2310      	movs	r3, #16
 800736c:	e00a      	b.n	8007384 <_strtol_l.isra.0+0x6c>
 800736e:	2c2b      	cmp	r4, #43	@ 0x2b
 8007370:	bf04      	itt	eq
 8007372:	782c      	ldrbeq	r4, [r5, #0]
 8007374:	1c95      	addeq	r5, r2, #2
 8007376:	e7ec      	b.n	8007352 <_strtol_l.isra.0+0x3a>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1f6      	bne.n	800736a <_strtol_l.isra.0+0x52>
 800737c:	2c30      	cmp	r4, #48	@ 0x30
 800737e:	bf14      	ite	ne
 8007380:	230a      	movne	r3, #10
 8007382:	2308      	moveq	r3, #8
 8007384:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007388:	f10c 3cff 	add.w	ip, ip, #4294967295
 800738c:	2200      	movs	r2, #0
 800738e:	fbbc f9f3 	udiv	r9, ip, r3
 8007392:	4610      	mov	r0, r2
 8007394:	fb03 ca19 	mls	sl, r3, r9, ip
 8007398:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800739c:	2f09      	cmp	r7, #9
 800739e:	d80f      	bhi.n	80073c0 <_strtol_l.isra.0+0xa8>
 80073a0:	463c      	mov	r4, r7
 80073a2:	42a3      	cmp	r3, r4
 80073a4:	dd1b      	ble.n	80073de <_strtol_l.isra.0+0xc6>
 80073a6:	1c57      	adds	r7, r2, #1
 80073a8:	d007      	beq.n	80073ba <_strtol_l.isra.0+0xa2>
 80073aa:	4581      	cmp	r9, r0
 80073ac:	d314      	bcc.n	80073d8 <_strtol_l.isra.0+0xc0>
 80073ae:	d101      	bne.n	80073b4 <_strtol_l.isra.0+0x9c>
 80073b0:	45a2      	cmp	sl, r4
 80073b2:	db11      	blt.n	80073d8 <_strtol_l.isra.0+0xc0>
 80073b4:	fb00 4003 	mla	r0, r0, r3, r4
 80073b8:	2201      	movs	r2, #1
 80073ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073be:	e7eb      	b.n	8007398 <_strtol_l.isra.0+0x80>
 80073c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80073c4:	2f19      	cmp	r7, #25
 80073c6:	d801      	bhi.n	80073cc <_strtol_l.isra.0+0xb4>
 80073c8:	3c37      	subs	r4, #55	@ 0x37
 80073ca:	e7ea      	b.n	80073a2 <_strtol_l.isra.0+0x8a>
 80073cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80073d0:	2f19      	cmp	r7, #25
 80073d2:	d804      	bhi.n	80073de <_strtol_l.isra.0+0xc6>
 80073d4:	3c57      	subs	r4, #87	@ 0x57
 80073d6:	e7e4      	b.n	80073a2 <_strtol_l.isra.0+0x8a>
 80073d8:	f04f 32ff 	mov.w	r2, #4294967295
 80073dc:	e7ed      	b.n	80073ba <_strtol_l.isra.0+0xa2>
 80073de:	1c53      	adds	r3, r2, #1
 80073e0:	d108      	bne.n	80073f4 <_strtol_l.isra.0+0xdc>
 80073e2:	2322      	movs	r3, #34	@ 0x22
 80073e4:	f8ce 3000 	str.w	r3, [lr]
 80073e8:	4660      	mov	r0, ip
 80073ea:	f1b8 0f00 	cmp.w	r8, #0
 80073ee:	d0a0      	beq.n	8007332 <_strtol_l.isra.0+0x1a>
 80073f0:	1e69      	subs	r1, r5, #1
 80073f2:	e006      	b.n	8007402 <_strtol_l.isra.0+0xea>
 80073f4:	b106      	cbz	r6, 80073f8 <_strtol_l.isra.0+0xe0>
 80073f6:	4240      	negs	r0, r0
 80073f8:	f1b8 0f00 	cmp.w	r8, #0
 80073fc:	d099      	beq.n	8007332 <_strtol_l.isra.0+0x1a>
 80073fe:	2a00      	cmp	r2, #0
 8007400:	d1f6      	bne.n	80073f0 <_strtol_l.isra.0+0xd8>
 8007402:	f8c8 1000 	str.w	r1, [r8]
 8007406:	e794      	b.n	8007332 <_strtol_l.isra.0+0x1a>
 8007408:	0800815d 	.word	0x0800815d

0800740c <strtol>:
 800740c:	4613      	mov	r3, r2
 800740e:	460a      	mov	r2, r1
 8007410:	4601      	mov	r1, r0
 8007412:	4802      	ldr	r0, [pc, #8]	@ (800741c <strtol+0x10>)
 8007414:	6800      	ldr	r0, [r0, #0]
 8007416:	f7ff bf7f 	b.w	8007318 <_strtol_l.isra.0>
 800741a:	bf00      	nop
 800741c:	20000020 	.word	0x20000020

08007420 <sniprintf>:
 8007420:	b40c      	push	{r2, r3}
 8007422:	b530      	push	{r4, r5, lr}
 8007424:	4b18      	ldr	r3, [pc, #96]	@ (8007488 <sniprintf+0x68>)
 8007426:	1e0c      	subs	r4, r1, #0
 8007428:	681d      	ldr	r5, [r3, #0]
 800742a:	b09d      	sub	sp, #116	@ 0x74
 800742c:	da08      	bge.n	8007440 <sniprintf+0x20>
 800742e:	238b      	movs	r3, #139	@ 0x8b
 8007430:	602b      	str	r3, [r5, #0]
 8007432:	f04f 30ff 	mov.w	r0, #4294967295
 8007436:	b01d      	add	sp, #116	@ 0x74
 8007438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800743c:	b002      	add	sp, #8
 800743e:	4770      	bx	lr
 8007440:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007444:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007448:	f04f 0300 	mov.w	r3, #0
 800744c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800744e:	bf14      	ite	ne
 8007450:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007454:	4623      	moveq	r3, r4
 8007456:	9304      	str	r3, [sp, #16]
 8007458:	9307      	str	r3, [sp, #28]
 800745a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800745e:	9002      	str	r0, [sp, #8]
 8007460:	9006      	str	r0, [sp, #24]
 8007462:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007466:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007468:	ab21      	add	r3, sp, #132	@ 0x84
 800746a:	a902      	add	r1, sp, #8
 800746c:	4628      	mov	r0, r5
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	f000 f962 	bl	8007738 <_svfiprintf_r>
 8007474:	1c43      	adds	r3, r0, #1
 8007476:	bfbc      	itt	lt
 8007478:	238b      	movlt	r3, #139	@ 0x8b
 800747a:	602b      	strlt	r3, [r5, #0]
 800747c:	2c00      	cmp	r4, #0
 800747e:	d0da      	beq.n	8007436 <sniprintf+0x16>
 8007480:	9b02      	ldr	r3, [sp, #8]
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	e7d6      	b.n	8007436 <sniprintf+0x16>
 8007488:	20000020 	.word	0x20000020

0800748c <memset>:
 800748c:	4402      	add	r2, r0
 800748e:	4603      	mov	r3, r0
 8007490:	4293      	cmp	r3, r2
 8007492:	d100      	bne.n	8007496 <memset+0xa>
 8007494:	4770      	bx	lr
 8007496:	f803 1b01 	strb.w	r1, [r3], #1
 800749a:	e7f9      	b.n	8007490 <memset+0x4>

0800749c <strchr>:
 800749c:	b2c9      	uxtb	r1, r1
 800749e:	4603      	mov	r3, r0
 80074a0:	4618      	mov	r0, r3
 80074a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074a6:	b112      	cbz	r2, 80074ae <strchr+0x12>
 80074a8:	428a      	cmp	r2, r1
 80074aa:	d1f9      	bne.n	80074a0 <strchr+0x4>
 80074ac:	4770      	bx	lr
 80074ae:	2900      	cmp	r1, #0
 80074b0:	bf18      	it	ne
 80074b2:	2000      	movne	r0, #0
 80074b4:	4770      	bx	lr

080074b6 <strncmp>:
 80074b6:	b510      	push	{r4, lr}
 80074b8:	b16a      	cbz	r2, 80074d6 <strncmp+0x20>
 80074ba:	3901      	subs	r1, #1
 80074bc:	1884      	adds	r4, r0, r2
 80074be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d103      	bne.n	80074d2 <strncmp+0x1c>
 80074ca:	42a0      	cmp	r0, r4
 80074cc:	d001      	beq.n	80074d2 <strncmp+0x1c>
 80074ce:	2a00      	cmp	r2, #0
 80074d0:	d1f5      	bne.n	80074be <strncmp+0x8>
 80074d2:	1ad0      	subs	r0, r2, r3
 80074d4:	bd10      	pop	{r4, pc}
 80074d6:	4610      	mov	r0, r2
 80074d8:	e7fc      	b.n	80074d4 <strncmp+0x1e>

080074da <strncpy>:
 80074da:	b510      	push	{r4, lr}
 80074dc:	3901      	subs	r1, #1
 80074de:	4603      	mov	r3, r0
 80074e0:	b132      	cbz	r2, 80074f0 <strncpy+0x16>
 80074e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80074e6:	f803 4b01 	strb.w	r4, [r3], #1
 80074ea:	3a01      	subs	r2, #1
 80074ec:	2c00      	cmp	r4, #0
 80074ee:	d1f7      	bne.n	80074e0 <strncpy+0x6>
 80074f0:	441a      	add	r2, r3
 80074f2:	2100      	movs	r1, #0
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d100      	bne.n	80074fa <strncpy+0x20>
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	f803 1b01 	strb.w	r1, [r3], #1
 80074fe:	e7f9      	b.n	80074f4 <strncpy+0x1a>

08007500 <__strtok_r>:
 8007500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007502:	4604      	mov	r4, r0
 8007504:	b908      	cbnz	r0, 800750a <__strtok_r+0xa>
 8007506:	6814      	ldr	r4, [r2, #0]
 8007508:	b144      	cbz	r4, 800751c <__strtok_r+0x1c>
 800750a:	4620      	mov	r0, r4
 800750c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007510:	460f      	mov	r7, r1
 8007512:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007516:	b91e      	cbnz	r6, 8007520 <__strtok_r+0x20>
 8007518:	b965      	cbnz	r5, 8007534 <__strtok_r+0x34>
 800751a:	6015      	str	r5, [r2, #0]
 800751c:	2000      	movs	r0, #0
 800751e:	e005      	b.n	800752c <__strtok_r+0x2c>
 8007520:	42b5      	cmp	r5, r6
 8007522:	d1f6      	bne.n	8007512 <__strtok_r+0x12>
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1f0      	bne.n	800750a <__strtok_r+0xa>
 8007528:	6014      	str	r4, [r2, #0]
 800752a:	7003      	strb	r3, [r0, #0]
 800752c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800752e:	461c      	mov	r4, r3
 8007530:	e00c      	b.n	800754c <__strtok_r+0x4c>
 8007532:	b91d      	cbnz	r5, 800753c <__strtok_r+0x3c>
 8007534:	4627      	mov	r7, r4
 8007536:	f814 3b01 	ldrb.w	r3, [r4], #1
 800753a:	460e      	mov	r6, r1
 800753c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007540:	42ab      	cmp	r3, r5
 8007542:	d1f6      	bne.n	8007532 <__strtok_r+0x32>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0f2      	beq.n	800752e <__strtok_r+0x2e>
 8007548:	2300      	movs	r3, #0
 800754a:	703b      	strb	r3, [r7, #0]
 800754c:	6014      	str	r4, [r2, #0]
 800754e:	e7ed      	b.n	800752c <__strtok_r+0x2c>

08007550 <strtok_r>:
 8007550:	2301      	movs	r3, #1
 8007552:	f7ff bfd5 	b.w	8007500 <__strtok_r>
	...

08007558 <_sbrk_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d06      	ldr	r5, [pc, #24]	@ (8007574 <_sbrk_r+0x1c>)
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	f7fa fb3e 	bl	8001be4 <_sbrk>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	d102      	bne.n	8007572 <_sbrk_r+0x1a>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	b103      	cbz	r3, 8007572 <_sbrk_r+0x1a>
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	20004de4 	.word	0x20004de4

08007578 <__errno>:
 8007578:	4b01      	ldr	r3, [pc, #4]	@ (8007580 <__errno+0x8>)
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	20000020 	.word	0x20000020

08007584 <__libc_init_array>:
 8007584:	b570      	push	{r4, r5, r6, lr}
 8007586:	4d0d      	ldr	r5, [pc, #52]	@ (80075bc <__libc_init_array+0x38>)
 8007588:	4c0d      	ldr	r4, [pc, #52]	@ (80075c0 <__libc_init_array+0x3c>)
 800758a:	1b64      	subs	r4, r4, r5
 800758c:	10a4      	asrs	r4, r4, #2
 800758e:	2600      	movs	r6, #0
 8007590:	42a6      	cmp	r6, r4
 8007592:	d109      	bne.n	80075a8 <__libc_init_array+0x24>
 8007594:	4d0b      	ldr	r5, [pc, #44]	@ (80075c4 <__libc_init_array+0x40>)
 8007596:	4c0c      	ldr	r4, [pc, #48]	@ (80075c8 <__libc_init_array+0x44>)
 8007598:	f000 fba6 	bl	8007ce8 <_init>
 800759c:	1b64      	subs	r4, r4, r5
 800759e:	10a4      	asrs	r4, r4, #2
 80075a0:	2600      	movs	r6, #0
 80075a2:	42a6      	cmp	r6, r4
 80075a4:	d105      	bne.n	80075b2 <__libc_init_array+0x2e>
 80075a6:	bd70      	pop	{r4, r5, r6, pc}
 80075a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ac:	4798      	blx	r3
 80075ae:	3601      	adds	r6, #1
 80075b0:	e7ee      	b.n	8007590 <__libc_init_array+0xc>
 80075b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b6:	4798      	blx	r3
 80075b8:	3601      	adds	r6, #1
 80075ba:	e7f2      	b.n	80075a2 <__libc_init_array+0x1e>
 80075bc:	08008298 	.word	0x08008298
 80075c0:	08008298 	.word	0x08008298
 80075c4:	08008298 	.word	0x08008298
 80075c8:	0800829c 	.word	0x0800829c

080075cc <__retarget_lock_acquire_recursive>:
 80075cc:	4770      	bx	lr

080075ce <__retarget_lock_release_recursive>:
 80075ce:	4770      	bx	lr

080075d0 <memcpy>:
 80075d0:	440a      	add	r2, r1
 80075d2:	4291      	cmp	r1, r2
 80075d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80075d8:	d100      	bne.n	80075dc <memcpy+0xc>
 80075da:	4770      	bx	lr
 80075dc:	b510      	push	{r4, lr}
 80075de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075e6:	4291      	cmp	r1, r2
 80075e8:	d1f9      	bne.n	80075de <memcpy+0xe>
 80075ea:	bd10      	pop	{r4, pc}

080075ec <_free_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4605      	mov	r5, r0
 80075f0:	2900      	cmp	r1, #0
 80075f2:	d041      	beq.n	8007678 <_free_r+0x8c>
 80075f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f8:	1f0c      	subs	r4, r1, #4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	bfb8      	it	lt
 80075fe:	18e4      	addlt	r4, r4, r3
 8007600:	f7ff fe7e 	bl	8007300 <__malloc_lock>
 8007604:	4a1d      	ldr	r2, [pc, #116]	@ (800767c <_free_r+0x90>)
 8007606:	6813      	ldr	r3, [r2, #0]
 8007608:	b933      	cbnz	r3, 8007618 <_free_r+0x2c>
 800760a:	6063      	str	r3, [r4, #4]
 800760c:	6014      	str	r4, [r2, #0]
 800760e:	4628      	mov	r0, r5
 8007610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007614:	f7ff be7a 	b.w	800730c <__malloc_unlock>
 8007618:	42a3      	cmp	r3, r4
 800761a:	d908      	bls.n	800762e <_free_r+0x42>
 800761c:	6820      	ldr	r0, [r4, #0]
 800761e:	1821      	adds	r1, r4, r0
 8007620:	428b      	cmp	r3, r1
 8007622:	bf01      	itttt	eq
 8007624:	6819      	ldreq	r1, [r3, #0]
 8007626:	685b      	ldreq	r3, [r3, #4]
 8007628:	1809      	addeq	r1, r1, r0
 800762a:	6021      	streq	r1, [r4, #0]
 800762c:	e7ed      	b.n	800760a <_free_r+0x1e>
 800762e:	461a      	mov	r2, r3
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	b10b      	cbz	r3, 8007638 <_free_r+0x4c>
 8007634:	42a3      	cmp	r3, r4
 8007636:	d9fa      	bls.n	800762e <_free_r+0x42>
 8007638:	6811      	ldr	r1, [r2, #0]
 800763a:	1850      	adds	r0, r2, r1
 800763c:	42a0      	cmp	r0, r4
 800763e:	d10b      	bne.n	8007658 <_free_r+0x6c>
 8007640:	6820      	ldr	r0, [r4, #0]
 8007642:	4401      	add	r1, r0
 8007644:	1850      	adds	r0, r2, r1
 8007646:	4283      	cmp	r3, r0
 8007648:	6011      	str	r1, [r2, #0]
 800764a:	d1e0      	bne.n	800760e <_free_r+0x22>
 800764c:	6818      	ldr	r0, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	6053      	str	r3, [r2, #4]
 8007652:	4408      	add	r0, r1
 8007654:	6010      	str	r0, [r2, #0]
 8007656:	e7da      	b.n	800760e <_free_r+0x22>
 8007658:	d902      	bls.n	8007660 <_free_r+0x74>
 800765a:	230c      	movs	r3, #12
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	e7d6      	b.n	800760e <_free_r+0x22>
 8007660:	6820      	ldr	r0, [r4, #0]
 8007662:	1821      	adds	r1, r4, r0
 8007664:	428b      	cmp	r3, r1
 8007666:	bf04      	itt	eq
 8007668:	6819      	ldreq	r1, [r3, #0]
 800766a:	685b      	ldreq	r3, [r3, #4]
 800766c:	6063      	str	r3, [r4, #4]
 800766e:	bf04      	itt	eq
 8007670:	1809      	addeq	r1, r1, r0
 8007672:	6021      	streq	r1, [r4, #0]
 8007674:	6054      	str	r4, [r2, #4]
 8007676:	e7ca      	b.n	800760e <_free_r+0x22>
 8007678:	bd38      	pop	{r3, r4, r5, pc}
 800767a:	bf00      	nop
 800767c:	20004ca8 	.word	0x20004ca8

08007680 <__ssputs_r>:
 8007680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007684:	688e      	ldr	r6, [r1, #8]
 8007686:	461f      	mov	r7, r3
 8007688:	42be      	cmp	r6, r7
 800768a:	680b      	ldr	r3, [r1, #0]
 800768c:	4682      	mov	sl, r0
 800768e:	460c      	mov	r4, r1
 8007690:	4690      	mov	r8, r2
 8007692:	d82d      	bhi.n	80076f0 <__ssputs_r+0x70>
 8007694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007698:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800769c:	d026      	beq.n	80076ec <__ssputs_r+0x6c>
 800769e:	6965      	ldr	r5, [r4, #20]
 80076a0:	6909      	ldr	r1, [r1, #16]
 80076a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076a6:	eba3 0901 	sub.w	r9, r3, r1
 80076aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076ae:	1c7b      	adds	r3, r7, #1
 80076b0:	444b      	add	r3, r9
 80076b2:	106d      	asrs	r5, r5, #1
 80076b4:	429d      	cmp	r5, r3
 80076b6:	bf38      	it	cc
 80076b8:	461d      	movcc	r5, r3
 80076ba:	0553      	lsls	r3, r2, #21
 80076bc:	d527      	bpl.n	800770e <__ssputs_r+0x8e>
 80076be:	4629      	mov	r1, r5
 80076c0:	f7ff fd9e 	bl	8007200 <_malloc_r>
 80076c4:	4606      	mov	r6, r0
 80076c6:	b360      	cbz	r0, 8007722 <__ssputs_r+0xa2>
 80076c8:	6921      	ldr	r1, [r4, #16]
 80076ca:	464a      	mov	r2, r9
 80076cc:	f7ff ff80 	bl	80075d0 <memcpy>
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80076d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076da:	81a3      	strh	r3, [r4, #12]
 80076dc:	6126      	str	r6, [r4, #16]
 80076de:	6165      	str	r5, [r4, #20]
 80076e0:	444e      	add	r6, r9
 80076e2:	eba5 0509 	sub.w	r5, r5, r9
 80076e6:	6026      	str	r6, [r4, #0]
 80076e8:	60a5      	str	r5, [r4, #8]
 80076ea:	463e      	mov	r6, r7
 80076ec:	42be      	cmp	r6, r7
 80076ee:	d900      	bls.n	80076f2 <__ssputs_r+0x72>
 80076f0:	463e      	mov	r6, r7
 80076f2:	6820      	ldr	r0, [r4, #0]
 80076f4:	4632      	mov	r2, r6
 80076f6:	4641      	mov	r1, r8
 80076f8:	f000 faa6 	bl	8007c48 <memmove>
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	1b9b      	subs	r3, r3, r6
 8007700:	60a3      	str	r3, [r4, #8]
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	4433      	add	r3, r6
 8007706:	6023      	str	r3, [r4, #0]
 8007708:	2000      	movs	r0, #0
 800770a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770e:	462a      	mov	r2, r5
 8007710:	f000 fab4 	bl	8007c7c <_realloc_r>
 8007714:	4606      	mov	r6, r0
 8007716:	2800      	cmp	r0, #0
 8007718:	d1e0      	bne.n	80076dc <__ssputs_r+0x5c>
 800771a:	6921      	ldr	r1, [r4, #16]
 800771c:	4650      	mov	r0, sl
 800771e:	f7ff ff65 	bl	80075ec <_free_r>
 8007722:	230c      	movs	r3, #12
 8007724:	f8ca 3000 	str.w	r3, [sl]
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800772e:	81a3      	strh	r3, [r4, #12]
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	e7e9      	b.n	800770a <__ssputs_r+0x8a>
	...

08007738 <_svfiprintf_r>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	4698      	mov	r8, r3
 800773e:	898b      	ldrh	r3, [r1, #12]
 8007740:	061b      	lsls	r3, r3, #24
 8007742:	b09d      	sub	sp, #116	@ 0x74
 8007744:	4607      	mov	r7, r0
 8007746:	460d      	mov	r5, r1
 8007748:	4614      	mov	r4, r2
 800774a:	d510      	bpl.n	800776e <_svfiprintf_r+0x36>
 800774c:	690b      	ldr	r3, [r1, #16]
 800774e:	b973      	cbnz	r3, 800776e <_svfiprintf_r+0x36>
 8007750:	2140      	movs	r1, #64	@ 0x40
 8007752:	f7ff fd55 	bl	8007200 <_malloc_r>
 8007756:	6028      	str	r0, [r5, #0]
 8007758:	6128      	str	r0, [r5, #16]
 800775a:	b930      	cbnz	r0, 800776a <_svfiprintf_r+0x32>
 800775c:	230c      	movs	r3, #12
 800775e:	603b      	str	r3, [r7, #0]
 8007760:	f04f 30ff 	mov.w	r0, #4294967295
 8007764:	b01d      	add	sp, #116	@ 0x74
 8007766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776a:	2340      	movs	r3, #64	@ 0x40
 800776c:	616b      	str	r3, [r5, #20]
 800776e:	2300      	movs	r3, #0
 8007770:	9309      	str	r3, [sp, #36]	@ 0x24
 8007772:	2320      	movs	r3, #32
 8007774:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007778:	f8cd 800c 	str.w	r8, [sp, #12]
 800777c:	2330      	movs	r3, #48	@ 0x30
 800777e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800791c <_svfiprintf_r+0x1e4>
 8007782:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007786:	f04f 0901 	mov.w	r9, #1
 800778a:	4623      	mov	r3, r4
 800778c:	469a      	mov	sl, r3
 800778e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007792:	b10a      	cbz	r2, 8007798 <_svfiprintf_r+0x60>
 8007794:	2a25      	cmp	r2, #37	@ 0x25
 8007796:	d1f9      	bne.n	800778c <_svfiprintf_r+0x54>
 8007798:	ebba 0b04 	subs.w	fp, sl, r4
 800779c:	d00b      	beq.n	80077b6 <_svfiprintf_r+0x7e>
 800779e:	465b      	mov	r3, fp
 80077a0:	4622      	mov	r2, r4
 80077a2:	4629      	mov	r1, r5
 80077a4:	4638      	mov	r0, r7
 80077a6:	f7ff ff6b 	bl	8007680 <__ssputs_r>
 80077aa:	3001      	adds	r0, #1
 80077ac:	f000 80a7 	beq.w	80078fe <_svfiprintf_r+0x1c6>
 80077b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077b2:	445a      	add	r2, fp
 80077b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80077b6:	f89a 3000 	ldrb.w	r3, [sl]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 809f 	beq.w	80078fe <_svfiprintf_r+0x1c6>
 80077c0:	2300      	movs	r3, #0
 80077c2:	f04f 32ff 	mov.w	r2, #4294967295
 80077c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077ca:	f10a 0a01 	add.w	sl, sl, #1
 80077ce:	9304      	str	r3, [sp, #16]
 80077d0:	9307      	str	r3, [sp, #28]
 80077d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80077d8:	4654      	mov	r4, sl
 80077da:	2205      	movs	r2, #5
 80077dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e0:	484e      	ldr	r0, [pc, #312]	@ (800791c <_svfiprintf_r+0x1e4>)
 80077e2:	f7f8 fcfd 	bl	80001e0 <memchr>
 80077e6:	9a04      	ldr	r2, [sp, #16]
 80077e8:	b9d8      	cbnz	r0, 8007822 <_svfiprintf_r+0xea>
 80077ea:	06d0      	lsls	r0, r2, #27
 80077ec:	bf44      	itt	mi
 80077ee:	2320      	movmi	r3, #32
 80077f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077f4:	0711      	lsls	r1, r2, #28
 80077f6:	bf44      	itt	mi
 80077f8:	232b      	movmi	r3, #43	@ 0x2b
 80077fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007802:	2b2a      	cmp	r3, #42	@ 0x2a
 8007804:	d015      	beq.n	8007832 <_svfiprintf_r+0xfa>
 8007806:	9a07      	ldr	r2, [sp, #28]
 8007808:	4654      	mov	r4, sl
 800780a:	2000      	movs	r0, #0
 800780c:	f04f 0c0a 	mov.w	ip, #10
 8007810:	4621      	mov	r1, r4
 8007812:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007816:	3b30      	subs	r3, #48	@ 0x30
 8007818:	2b09      	cmp	r3, #9
 800781a:	d94b      	bls.n	80078b4 <_svfiprintf_r+0x17c>
 800781c:	b1b0      	cbz	r0, 800784c <_svfiprintf_r+0x114>
 800781e:	9207      	str	r2, [sp, #28]
 8007820:	e014      	b.n	800784c <_svfiprintf_r+0x114>
 8007822:	eba0 0308 	sub.w	r3, r0, r8
 8007826:	fa09 f303 	lsl.w	r3, r9, r3
 800782a:	4313      	orrs	r3, r2
 800782c:	9304      	str	r3, [sp, #16]
 800782e:	46a2      	mov	sl, r4
 8007830:	e7d2      	b.n	80077d8 <_svfiprintf_r+0xa0>
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	1d19      	adds	r1, r3, #4
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	9103      	str	r1, [sp, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	bfbb      	ittet	lt
 800783e:	425b      	neglt	r3, r3
 8007840:	f042 0202 	orrlt.w	r2, r2, #2
 8007844:	9307      	strge	r3, [sp, #28]
 8007846:	9307      	strlt	r3, [sp, #28]
 8007848:	bfb8      	it	lt
 800784a:	9204      	strlt	r2, [sp, #16]
 800784c:	7823      	ldrb	r3, [r4, #0]
 800784e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007850:	d10a      	bne.n	8007868 <_svfiprintf_r+0x130>
 8007852:	7863      	ldrb	r3, [r4, #1]
 8007854:	2b2a      	cmp	r3, #42	@ 0x2a
 8007856:	d132      	bne.n	80078be <_svfiprintf_r+0x186>
 8007858:	9b03      	ldr	r3, [sp, #12]
 800785a:	1d1a      	adds	r2, r3, #4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	9203      	str	r2, [sp, #12]
 8007860:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007864:	3402      	adds	r4, #2
 8007866:	9305      	str	r3, [sp, #20]
 8007868:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800792c <_svfiprintf_r+0x1f4>
 800786c:	7821      	ldrb	r1, [r4, #0]
 800786e:	2203      	movs	r2, #3
 8007870:	4650      	mov	r0, sl
 8007872:	f7f8 fcb5 	bl	80001e0 <memchr>
 8007876:	b138      	cbz	r0, 8007888 <_svfiprintf_r+0x150>
 8007878:	9b04      	ldr	r3, [sp, #16]
 800787a:	eba0 000a 	sub.w	r0, r0, sl
 800787e:	2240      	movs	r2, #64	@ 0x40
 8007880:	4082      	lsls	r2, r0
 8007882:	4313      	orrs	r3, r2
 8007884:	3401      	adds	r4, #1
 8007886:	9304      	str	r3, [sp, #16]
 8007888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800788c:	4824      	ldr	r0, [pc, #144]	@ (8007920 <_svfiprintf_r+0x1e8>)
 800788e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007892:	2206      	movs	r2, #6
 8007894:	f7f8 fca4 	bl	80001e0 <memchr>
 8007898:	2800      	cmp	r0, #0
 800789a:	d036      	beq.n	800790a <_svfiprintf_r+0x1d2>
 800789c:	4b21      	ldr	r3, [pc, #132]	@ (8007924 <_svfiprintf_r+0x1ec>)
 800789e:	bb1b      	cbnz	r3, 80078e8 <_svfiprintf_r+0x1b0>
 80078a0:	9b03      	ldr	r3, [sp, #12]
 80078a2:	3307      	adds	r3, #7
 80078a4:	f023 0307 	bic.w	r3, r3, #7
 80078a8:	3308      	adds	r3, #8
 80078aa:	9303      	str	r3, [sp, #12]
 80078ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ae:	4433      	add	r3, r6
 80078b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80078b2:	e76a      	b.n	800778a <_svfiprintf_r+0x52>
 80078b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80078b8:	460c      	mov	r4, r1
 80078ba:	2001      	movs	r0, #1
 80078bc:	e7a8      	b.n	8007810 <_svfiprintf_r+0xd8>
 80078be:	2300      	movs	r3, #0
 80078c0:	3401      	adds	r4, #1
 80078c2:	9305      	str	r3, [sp, #20]
 80078c4:	4619      	mov	r1, r3
 80078c6:	f04f 0c0a 	mov.w	ip, #10
 80078ca:	4620      	mov	r0, r4
 80078cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078d0:	3a30      	subs	r2, #48	@ 0x30
 80078d2:	2a09      	cmp	r2, #9
 80078d4:	d903      	bls.n	80078de <_svfiprintf_r+0x1a6>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0c6      	beq.n	8007868 <_svfiprintf_r+0x130>
 80078da:	9105      	str	r1, [sp, #20]
 80078dc:	e7c4      	b.n	8007868 <_svfiprintf_r+0x130>
 80078de:	fb0c 2101 	mla	r1, ip, r1, r2
 80078e2:	4604      	mov	r4, r0
 80078e4:	2301      	movs	r3, #1
 80078e6:	e7f0      	b.n	80078ca <_svfiprintf_r+0x192>
 80078e8:	ab03      	add	r3, sp, #12
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	462a      	mov	r2, r5
 80078ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007928 <_svfiprintf_r+0x1f0>)
 80078f0:	a904      	add	r1, sp, #16
 80078f2:	4638      	mov	r0, r7
 80078f4:	f3af 8000 	nop.w
 80078f8:	1c42      	adds	r2, r0, #1
 80078fa:	4606      	mov	r6, r0
 80078fc:	d1d6      	bne.n	80078ac <_svfiprintf_r+0x174>
 80078fe:	89ab      	ldrh	r3, [r5, #12]
 8007900:	065b      	lsls	r3, r3, #25
 8007902:	f53f af2d 	bmi.w	8007760 <_svfiprintf_r+0x28>
 8007906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007908:	e72c      	b.n	8007764 <_svfiprintf_r+0x2c>
 800790a:	ab03      	add	r3, sp, #12
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	462a      	mov	r2, r5
 8007910:	4b05      	ldr	r3, [pc, #20]	@ (8007928 <_svfiprintf_r+0x1f0>)
 8007912:	a904      	add	r1, sp, #16
 8007914:	4638      	mov	r0, r7
 8007916:	f000 f879 	bl	8007a0c <_printf_i>
 800791a:	e7ed      	b.n	80078f8 <_svfiprintf_r+0x1c0>
 800791c:	0800825d 	.word	0x0800825d
 8007920:	08008267 	.word	0x08008267
 8007924:	00000000 	.word	0x00000000
 8007928:	08007681 	.word	0x08007681
 800792c:	08008263 	.word	0x08008263

08007930 <_printf_common>:
 8007930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007934:	4616      	mov	r6, r2
 8007936:	4698      	mov	r8, r3
 8007938:	688a      	ldr	r2, [r1, #8]
 800793a:	690b      	ldr	r3, [r1, #16]
 800793c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007940:	4293      	cmp	r3, r2
 8007942:	bfb8      	it	lt
 8007944:	4613      	movlt	r3, r2
 8007946:	6033      	str	r3, [r6, #0]
 8007948:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800794c:	4607      	mov	r7, r0
 800794e:	460c      	mov	r4, r1
 8007950:	b10a      	cbz	r2, 8007956 <_printf_common+0x26>
 8007952:	3301      	adds	r3, #1
 8007954:	6033      	str	r3, [r6, #0]
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	0699      	lsls	r1, r3, #26
 800795a:	bf42      	ittt	mi
 800795c:	6833      	ldrmi	r3, [r6, #0]
 800795e:	3302      	addmi	r3, #2
 8007960:	6033      	strmi	r3, [r6, #0]
 8007962:	6825      	ldr	r5, [r4, #0]
 8007964:	f015 0506 	ands.w	r5, r5, #6
 8007968:	d106      	bne.n	8007978 <_printf_common+0x48>
 800796a:	f104 0a19 	add.w	sl, r4, #25
 800796e:	68e3      	ldr	r3, [r4, #12]
 8007970:	6832      	ldr	r2, [r6, #0]
 8007972:	1a9b      	subs	r3, r3, r2
 8007974:	42ab      	cmp	r3, r5
 8007976:	dc26      	bgt.n	80079c6 <_printf_common+0x96>
 8007978:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800797c:	6822      	ldr	r2, [r4, #0]
 800797e:	3b00      	subs	r3, #0
 8007980:	bf18      	it	ne
 8007982:	2301      	movne	r3, #1
 8007984:	0692      	lsls	r2, r2, #26
 8007986:	d42b      	bmi.n	80079e0 <_printf_common+0xb0>
 8007988:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800798c:	4641      	mov	r1, r8
 800798e:	4638      	mov	r0, r7
 8007990:	47c8      	blx	r9
 8007992:	3001      	adds	r0, #1
 8007994:	d01e      	beq.n	80079d4 <_printf_common+0xa4>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	6922      	ldr	r2, [r4, #16]
 800799a:	f003 0306 	and.w	r3, r3, #6
 800799e:	2b04      	cmp	r3, #4
 80079a0:	bf02      	ittt	eq
 80079a2:	68e5      	ldreq	r5, [r4, #12]
 80079a4:	6833      	ldreq	r3, [r6, #0]
 80079a6:	1aed      	subeq	r5, r5, r3
 80079a8:	68a3      	ldr	r3, [r4, #8]
 80079aa:	bf0c      	ite	eq
 80079ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079b0:	2500      	movne	r5, #0
 80079b2:	4293      	cmp	r3, r2
 80079b4:	bfc4      	itt	gt
 80079b6:	1a9b      	subgt	r3, r3, r2
 80079b8:	18ed      	addgt	r5, r5, r3
 80079ba:	2600      	movs	r6, #0
 80079bc:	341a      	adds	r4, #26
 80079be:	42b5      	cmp	r5, r6
 80079c0:	d11a      	bne.n	80079f8 <_printf_common+0xc8>
 80079c2:	2000      	movs	r0, #0
 80079c4:	e008      	b.n	80079d8 <_printf_common+0xa8>
 80079c6:	2301      	movs	r3, #1
 80079c8:	4652      	mov	r2, sl
 80079ca:	4641      	mov	r1, r8
 80079cc:	4638      	mov	r0, r7
 80079ce:	47c8      	blx	r9
 80079d0:	3001      	adds	r0, #1
 80079d2:	d103      	bne.n	80079dc <_printf_common+0xac>
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079dc:	3501      	adds	r5, #1
 80079de:	e7c6      	b.n	800796e <_printf_common+0x3e>
 80079e0:	18e1      	adds	r1, r4, r3
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	2030      	movs	r0, #48	@ 0x30
 80079e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079ea:	4422      	add	r2, r4
 80079ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079f4:	3302      	adds	r3, #2
 80079f6:	e7c7      	b.n	8007988 <_printf_common+0x58>
 80079f8:	2301      	movs	r3, #1
 80079fa:	4622      	mov	r2, r4
 80079fc:	4641      	mov	r1, r8
 80079fe:	4638      	mov	r0, r7
 8007a00:	47c8      	blx	r9
 8007a02:	3001      	adds	r0, #1
 8007a04:	d0e6      	beq.n	80079d4 <_printf_common+0xa4>
 8007a06:	3601      	adds	r6, #1
 8007a08:	e7d9      	b.n	80079be <_printf_common+0x8e>
	...

08007a0c <_printf_i>:
 8007a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a10:	7e0f      	ldrb	r7, [r1, #24]
 8007a12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a14:	2f78      	cmp	r7, #120	@ 0x78
 8007a16:	4691      	mov	r9, r2
 8007a18:	4680      	mov	r8, r0
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	469a      	mov	sl, r3
 8007a1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a22:	d807      	bhi.n	8007a34 <_printf_i+0x28>
 8007a24:	2f62      	cmp	r7, #98	@ 0x62
 8007a26:	d80a      	bhi.n	8007a3e <_printf_i+0x32>
 8007a28:	2f00      	cmp	r7, #0
 8007a2a:	f000 80d1 	beq.w	8007bd0 <_printf_i+0x1c4>
 8007a2e:	2f58      	cmp	r7, #88	@ 0x58
 8007a30:	f000 80b8 	beq.w	8007ba4 <_printf_i+0x198>
 8007a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a3c:	e03a      	b.n	8007ab4 <_printf_i+0xa8>
 8007a3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a42:	2b15      	cmp	r3, #21
 8007a44:	d8f6      	bhi.n	8007a34 <_printf_i+0x28>
 8007a46:	a101      	add	r1, pc, #4	@ (adr r1, 8007a4c <_printf_i+0x40>)
 8007a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a4c:	08007aa5 	.word	0x08007aa5
 8007a50:	08007ab9 	.word	0x08007ab9
 8007a54:	08007a35 	.word	0x08007a35
 8007a58:	08007a35 	.word	0x08007a35
 8007a5c:	08007a35 	.word	0x08007a35
 8007a60:	08007a35 	.word	0x08007a35
 8007a64:	08007ab9 	.word	0x08007ab9
 8007a68:	08007a35 	.word	0x08007a35
 8007a6c:	08007a35 	.word	0x08007a35
 8007a70:	08007a35 	.word	0x08007a35
 8007a74:	08007a35 	.word	0x08007a35
 8007a78:	08007bb7 	.word	0x08007bb7
 8007a7c:	08007ae3 	.word	0x08007ae3
 8007a80:	08007b71 	.word	0x08007b71
 8007a84:	08007a35 	.word	0x08007a35
 8007a88:	08007a35 	.word	0x08007a35
 8007a8c:	08007bd9 	.word	0x08007bd9
 8007a90:	08007a35 	.word	0x08007a35
 8007a94:	08007ae3 	.word	0x08007ae3
 8007a98:	08007a35 	.word	0x08007a35
 8007a9c:	08007a35 	.word	0x08007a35
 8007aa0:	08007b79 	.word	0x08007b79
 8007aa4:	6833      	ldr	r3, [r6, #0]
 8007aa6:	1d1a      	adds	r2, r3, #4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6032      	str	r2, [r6, #0]
 8007aac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ab0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e09c      	b.n	8007bf2 <_printf_i+0x1e6>
 8007ab8:	6833      	ldr	r3, [r6, #0]
 8007aba:	6820      	ldr	r0, [r4, #0]
 8007abc:	1d19      	adds	r1, r3, #4
 8007abe:	6031      	str	r1, [r6, #0]
 8007ac0:	0606      	lsls	r6, r0, #24
 8007ac2:	d501      	bpl.n	8007ac8 <_printf_i+0xbc>
 8007ac4:	681d      	ldr	r5, [r3, #0]
 8007ac6:	e003      	b.n	8007ad0 <_printf_i+0xc4>
 8007ac8:	0645      	lsls	r5, r0, #25
 8007aca:	d5fb      	bpl.n	8007ac4 <_printf_i+0xb8>
 8007acc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ad0:	2d00      	cmp	r5, #0
 8007ad2:	da03      	bge.n	8007adc <_printf_i+0xd0>
 8007ad4:	232d      	movs	r3, #45	@ 0x2d
 8007ad6:	426d      	negs	r5, r5
 8007ad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007adc:	4858      	ldr	r0, [pc, #352]	@ (8007c40 <_printf_i+0x234>)
 8007ade:	230a      	movs	r3, #10
 8007ae0:	e011      	b.n	8007b06 <_printf_i+0xfa>
 8007ae2:	6821      	ldr	r1, [r4, #0]
 8007ae4:	6833      	ldr	r3, [r6, #0]
 8007ae6:	0608      	lsls	r0, r1, #24
 8007ae8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007aec:	d402      	bmi.n	8007af4 <_printf_i+0xe8>
 8007aee:	0649      	lsls	r1, r1, #25
 8007af0:	bf48      	it	mi
 8007af2:	b2ad      	uxthmi	r5, r5
 8007af4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007af6:	4852      	ldr	r0, [pc, #328]	@ (8007c40 <_printf_i+0x234>)
 8007af8:	6033      	str	r3, [r6, #0]
 8007afa:	bf14      	ite	ne
 8007afc:	230a      	movne	r3, #10
 8007afe:	2308      	moveq	r3, #8
 8007b00:	2100      	movs	r1, #0
 8007b02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b06:	6866      	ldr	r6, [r4, #4]
 8007b08:	60a6      	str	r6, [r4, #8]
 8007b0a:	2e00      	cmp	r6, #0
 8007b0c:	db05      	blt.n	8007b1a <_printf_i+0x10e>
 8007b0e:	6821      	ldr	r1, [r4, #0]
 8007b10:	432e      	orrs	r6, r5
 8007b12:	f021 0104 	bic.w	r1, r1, #4
 8007b16:	6021      	str	r1, [r4, #0]
 8007b18:	d04b      	beq.n	8007bb2 <_printf_i+0x1a6>
 8007b1a:	4616      	mov	r6, r2
 8007b1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b20:	fb03 5711 	mls	r7, r3, r1, r5
 8007b24:	5dc7      	ldrb	r7, [r0, r7]
 8007b26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b2a:	462f      	mov	r7, r5
 8007b2c:	42bb      	cmp	r3, r7
 8007b2e:	460d      	mov	r5, r1
 8007b30:	d9f4      	bls.n	8007b1c <_printf_i+0x110>
 8007b32:	2b08      	cmp	r3, #8
 8007b34:	d10b      	bne.n	8007b4e <_printf_i+0x142>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	07df      	lsls	r7, r3, #31
 8007b3a:	d508      	bpl.n	8007b4e <_printf_i+0x142>
 8007b3c:	6923      	ldr	r3, [r4, #16]
 8007b3e:	6861      	ldr	r1, [r4, #4]
 8007b40:	4299      	cmp	r1, r3
 8007b42:	bfde      	ittt	le
 8007b44:	2330      	movle	r3, #48	@ 0x30
 8007b46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b4e:	1b92      	subs	r2, r2, r6
 8007b50:	6122      	str	r2, [r4, #16]
 8007b52:	f8cd a000 	str.w	sl, [sp]
 8007b56:	464b      	mov	r3, r9
 8007b58:	aa03      	add	r2, sp, #12
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	4640      	mov	r0, r8
 8007b5e:	f7ff fee7 	bl	8007930 <_printf_common>
 8007b62:	3001      	adds	r0, #1
 8007b64:	d14a      	bne.n	8007bfc <_printf_i+0x1f0>
 8007b66:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6a:	b004      	add	sp, #16
 8007b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	f043 0320 	orr.w	r3, r3, #32
 8007b76:	6023      	str	r3, [r4, #0]
 8007b78:	4832      	ldr	r0, [pc, #200]	@ (8007c44 <_printf_i+0x238>)
 8007b7a:	2778      	movs	r7, #120	@ 0x78
 8007b7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	6831      	ldr	r1, [r6, #0]
 8007b84:	061f      	lsls	r7, r3, #24
 8007b86:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b8a:	d402      	bmi.n	8007b92 <_printf_i+0x186>
 8007b8c:	065f      	lsls	r7, r3, #25
 8007b8e:	bf48      	it	mi
 8007b90:	b2ad      	uxthmi	r5, r5
 8007b92:	6031      	str	r1, [r6, #0]
 8007b94:	07d9      	lsls	r1, r3, #31
 8007b96:	bf44      	itt	mi
 8007b98:	f043 0320 	orrmi.w	r3, r3, #32
 8007b9c:	6023      	strmi	r3, [r4, #0]
 8007b9e:	b11d      	cbz	r5, 8007ba8 <_printf_i+0x19c>
 8007ba0:	2310      	movs	r3, #16
 8007ba2:	e7ad      	b.n	8007b00 <_printf_i+0xf4>
 8007ba4:	4826      	ldr	r0, [pc, #152]	@ (8007c40 <_printf_i+0x234>)
 8007ba6:	e7e9      	b.n	8007b7c <_printf_i+0x170>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	f023 0320 	bic.w	r3, r3, #32
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	e7f6      	b.n	8007ba0 <_printf_i+0x194>
 8007bb2:	4616      	mov	r6, r2
 8007bb4:	e7bd      	b.n	8007b32 <_printf_i+0x126>
 8007bb6:	6833      	ldr	r3, [r6, #0]
 8007bb8:	6825      	ldr	r5, [r4, #0]
 8007bba:	6961      	ldr	r1, [r4, #20]
 8007bbc:	1d18      	adds	r0, r3, #4
 8007bbe:	6030      	str	r0, [r6, #0]
 8007bc0:	062e      	lsls	r6, r5, #24
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	d501      	bpl.n	8007bca <_printf_i+0x1be>
 8007bc6:	6019      	str	r1, [r3, #0]
 8007bc8:	e002      	b.n	8007bd0 <_printf_i+0x1c4>
 8007bca:	0668      	lsls	r0, r5, #25
 8007bcc:	d5fb      	bpl.n	8007bc6 <_printf_i+0x1ba>
 8007bce:	8019      	strh	r1, [r3, #0]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	6123      	str	r3, [r4, #16]
 8007bd4:	4616      	mov	r6, r2
 8007bd6:	e7bc      	b.n	8007b52 <_printf_i+0x146>
 8007bd8:	6833      	ldr	r3, [r6, #0]
 8007bda:	1d1a      	adds	r2, r3, #4
 8007bdc:	6032      	str	r2, [r6, #0]
 8007bde:	681e      	ldr	r6, [r3, #0]
 8007be0:	6862      	ldr	r2, [r4, #4]
 8007be2:	2100      	movs	r1, #0
 8007be4:	4630      	mov	r0, r6
 8007be6:	f7f8 fafb 	bl	80001e0 <memchr>
 8007bea:	b108      	cbz	r0, 8007bf0 <_printf_i+0x1e4>
 8007bec:	1b80      	subs	r0, r0, r6
 8007bee:	6060      	str	r0, [r4, #4]
 8007bf0:	6863      	ldr	r3, [r4, #4]
 8007bf2:	6123      	str	r3, [r4, #16]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bfa:	e7aa      	b.n	8007b52 <_printf_i+0x146>
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	4632      	mov	r2, r6
 8007c00:	4649      	mov	r1, r9
 8007c02:	4640      	mov	r0, r8
 8007c04:	47d0      	blx	sl
 8007c06:	3001      	adds	r0, #1
 8007c08:	d0ad      	beq.n	8007b66 <_printf_i+0x15a>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	079b      	lsls	r3, r3, #30
 8007c0e:	d413      	bmi.n	8007c38 <_printf_i+0x22c>
 8007c10:	68e0      	ldr	r0, [r4, #12]
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	4298      	cmp	r0, r3
 8007c16:	bfb8      	it	lt
 8007c18:	4618      	movlt	r0, r3
 8007c1a:	e7a6      	b.n	8007b6a <_printf_i+0x15e>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	4632      	mov	r2, r6
 8007c20:	4649      	mov	r1, r9
 8007c22:	4640      	mov	r0, r8
 8007c24:	47d0      	blx	sl
 8007c26:	3001      	adds	r0, #1
 8007c28:	d09d      	beq.n	8007b66 <_printf_i+0x15a>
 8007c2a:	3501      	adds	r5, #1
 8007c2c:	68e3      	ldr	r3, [r4, #12]
 8007c2e:	9903      	ldr	r1, [sp, #12]
 8007c30:	1a5b      	subs	r3, r3, r1
 8007c32:	42ab      	cmp	r3, r5
 8007c34:	dcf2      	bgt.n	8007c1c <_printf_i+0x210>
 8007c36:	e7eb      	b.n	8007c10 <_printf_i+0x204>
 8007c38:	2500      	movs	r5, #0
 8007c3a:	f104 0619 	add.w	r6, r4, #25
 8007c3e:	e7f5      	b.n	8007c2c <_printf_i+0x220>
 8007c40:	0800826e 	.word	0x0800826e
 8007c44:	0800827f 	.word	0x0800827f

08007c48 <memmove>:
 8007c48:	4288      	cmp	r0, r1
 8007c4a:	b510      	push	{r4, lr}
 8007c4c:	eb01 0402 	add.w	r4, r1, r2
 8007c50:	d902      	bls.n	8007c58 <memmove+0x10>
 8007c52:	4284      	cmp	r4, r0
 8007c54:	4623      	mov	r3, r4
 8007c56:	d807      	bhi.n	8007c68 <memmove+0x20>
 8007c58:	1e43      	subs	r3, r0, #1
 8007c5a:	42a1      	cmp	r1, r4
 8007c5c:	d008      	beq.n	8007c70 <memmove+0x28>
 8007c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c66:	e7f8      	b.n	8007c5a <memmove+0x12>
 8007c68:	4402      	add	r2, r0
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	428a      	cmp	r2, r1
 8007c6e:	d100      	bne.n	8007c72 <memmove+0x2a>
 8007c70:	bd10      	pop	{r4, pc}
 8007c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c7a:	e7f7      	b.n	8007c6c <memmove+0x24>

08007c7c <_realloc_r>:
 8007c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	4607      	mov	r7, r0
 8007c82:	4614      	mov	r4, r2
 8007c84:	460d      	mov	r5, r1
 8007c86:	b921      	cbnz	r1, 8007c92 <_realloc_r+0x16>
 8007c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	f7ff bab7 	b.w	8007200 <_malloc_r>
 8007c92:	b92a      	cbnz	r2, 8007ca0 <_realloc_r+0x24>
 8007c94:	f7ff fcaa 	bl	80075ec <_free_r>
 8007c98:	4625      	mov	r5, r4
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca0:	f000 f81a 	bl	8007cd8 <_malloc_usable_size_r>
 8007ca4:	4284      	cmp	r4, r0
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	d802      	bhi.n	8007cb0 <_realloc_r+0x34>
 8007caa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cae:	d8f4      	bhi.n	8007c9a <_realloc_r+0x1e>
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	f7ff faa4 	bl	8007200 <_malloc_r>
 8007cb8:	4680      	mov	r8, r0
 8007cba:	b908      	cbnz	r0, 8007cc0 <_realloc_r+0x44>
 8007cbc:	4645      	mov	r5, r8
 8007cbe:	e7ec      	b.n	8007c9a <_realloc_r+0x1e>
 8007cc0:	42b4      	cmp	r4, r6
 8007cc2:	4622      	mov	r2, r4
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	bf28      	it	cs
 8007cc8:	4632      	movcs	r2, r6
 8007cca:	f7ff fc81 	bl	80075d0 <memcpy>
 8007cce:	4629      	mov	r1, r5
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	f7ff fc8b 	bl	80075ec <_free_r>
 8007cd6:	e7f1      	b.n	8007cbc <_realloc_r+0x40>

08007cd8 <_malloc_usable_size_r>:
 8007cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cdc:	1f18      	subs	r0, r3, #4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	bfbc      	itt	lt
 8007ce2:	580b      	ldrlt	r3, [r1, r0]
 8007ce4:	18c0      	addlt	r0, r0, r3
 8007ce6:	4770      	bx	lr

08007ce8 <_init>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	bf00      	nop
 8007cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cee:	bc08      	pop	{r3}
 8007cf0:	469e      	mov	lr, r3
 8007cf2:	4770      	bx	lr

08007cf4 <_fini>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	bf00      	nop
 8007cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfa:	bc08      	pop	{r3}
 8007cfc:	469e      	mov	lr, r3
 8007cfe:	4770      	bx	lr
