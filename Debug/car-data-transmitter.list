
car-data-transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  08009e80  08009e80  0000ae80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a858  0800a858  0000c084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a858  0800a858  0000b858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a860  0800a860  0000c084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a860  0800a860  0000b860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a864  0800a864  0000b864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800a868  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005400  20000088  0800a8ec  0000c088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005488  0800a8ec  0000c488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac6e  00000000  00000000  0000c0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f6b  00000000  00000000  00026d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  0002bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012a3  00000000  00000000  0002d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008b9e  00000000  00000000  0002e7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d354  00000000  00000000  00037361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a331f  00000000  00000000  000546b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f79d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006adc  00000000  00000000  000f7a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000fe4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e68 	.word	0x08009e68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08009e68 	.word	0x08009e68

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <ACCEL_API_FormatAcceleration>:
	}

	return true;
}

void ACCEL_API_FormatAcceleration (uint8_t *buffer, size_t buffer_size) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	@ 0x30
 8000dac:	af04      	add	r7, sp, #16
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	if ((buffer == NULL) || (buffer_size <= 0)) {
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d033      	beq.n	8000e20 <ACCEL_API_FormatAcceleration+0x78>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d030      	beq.n	8000e20 <ACCEL_API_FormatAcceleration+0x78>
		return;
	}

	sAccelData_t accel_data = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	809a      	strh	r2, [r3, #4]

	if (ACCEL_API_GetAcceleration(&accel_data) == false) {
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f82f 	bl	8000e30 <ACCEL_API_GetAcceleration>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f083 0301 	eor.w	r3, r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d122      	bne.n	8000e24 <ACCEL_API_FormatAcceleration+0x7c>
		return;
	}

	int accel_x_int = (int)accel_data.x_val;
 8000dde:	893b      	ldrh	r3, [r7, #8]
 8000de0:	61fb      	str	r3, [r7, #28]
	int accel_x_dec = (int)((accel_data.x_val - accel_x_int) * 100);
 8000de2:	893b      	ldrh	r3, [r7, #8]
 8000de4:	461a      	mov	r2, r3
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2264      	movs	r2, #100	@ 0x64
 8000dec:	fb02 f303 	mul.w	r3, r2, r3
 8000df0:	61bb      	str	r3, [r7, #24]
	int accel_y_int = (int)accel_data.y_val;
 8000df2:	897b      	ldrh	r3, [r7, #10]
 8000df4:	617b      	str	r3, [r7, #20]
	int accel_y_dec = (int)((accel_data.y_val - accel_y_int) * 100);
 8000df6:	897b      	ldrh	r3, [r7, #10]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2264      	movs	r2, #100	@ 0x64
 8000e00:	fb02 f303 	mul.w	r3, r2, r3
 8000e04:	613b      	str	r3, [r7, #16]

    snprintf((char*)buffer, buffer_size, "acceleration_x: %d.%02d, acceleration_y: %d.%02d", accel_x_int, accel_x_dec, accel_y_int, accel_y_dec);
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	9302      	str	r3, [sp, #8]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <ACCEL_API_FormatAcceleration+0x84>)
 8000e16:	6839      	ldr	r1, [r7, #0]
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f008 fbaf 	bl	800957c <sniprintf>
 8000e1e:	e002      	b.n	8000e26 <ACCEL_API_FormatAcceleration+0x7e>
		return;
 8000e20:	bf00      	nop
 8000e22:	e000      	b.n	8000e26 <ACCEL_API_FormatAcceleration+0x7e>
		return;
 8000e24:	bf00      	nop
}
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	08009e80 	.word	0x08009e80

08000e30 <ACCEL_API_GetAcceleration>:
	}

	return true;
}

static bool ACCEL_API_GetAcceleration (sAccelData_t *accel_data) {
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

//	accel_data->x_val = raw_x_val * SCALE_FACTOR;
//	accel_data->y_val = raw_y_val * SCALE_FACTOR;
//	accel_data->z_val = raw_z_val * SCALE_FACTOR;

	accel_data->x_val = 0;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	801a      	strh	r2, [r3, #0]
	accel_data->y_val = 0;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	805a      	strh	r2, [r3, #2]
	accel_data->z_val = 0;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	809a      	strh	r2, [r3, #4]

	return true;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <CLI_APP_Init>:
    .reply_size = CLI_RESPONSE_BUFFER_SIZE
};

static void CLI_APP_Task (void *arguments);

bool CLI_APP_Init (void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    if (cli_app_thread == NULL) {
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <CLI_APP_Init+0x30>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10d      	bne.n	8000e80 <CLI_APP_Init+0x28>
    	cli_app_thread = osThreadNew(CLI_APP_Task, CLI_APP_THREAD_NO_ARGS, &cli_app_thread_attr);
 8000e64:	4a09      	ldr	r2, [pc, #36]	@ (8000e8c <CLI_APP_Init+0x34>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4809      	ldr	r0, [pc, #36]	@ (8000e90 <CLI_APP_Init+0x38>)
 8000e6a:	f004 f96d 	bl	8005148 <osThreadNew>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <CLI_APP_Init+0x30>)
 8000e72:	6013      	str	r3, [r2, #0]
    	if (cli_app_thread == NULL) {
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <CLI_APP_Init+0x30>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <CLI_APP_Init+0x28>
			return false;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e000      	b.n	8000e82 <CLI_APP_Init+0x2a>
		}
    }

    return true;
 8000e80:	2301      	movs	r3, #1
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200000a4 	.word	0x200000a4
 8000e8c:	0800a33c 	.word	0x0800a33c
 8000e90:	08000e95 	.word	0x08000e95

08000e94 <CLI_APP_Task>:


static void CLI_APP_Task (void *arguments) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    while (1) {
        if (UART_API_Receive(CLI_UART_PORT, &received_message, osWaitForever) == false) {
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	490a      	ldr	r1, [pc, #40]	@ (8000ecc <CLI_APP_Task+0x38>)
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f001 fef8 	bl	8002c98 <UART_API_Receive>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f083 0301 	eor.w	r3, r3, #1
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d109      	bne.n	8000ec8 <CLI_APP_Task+0x34>
            continue;
        }
        if (CMD_API_Process(&received_message, &command_parser) == false) {
 8000eb4:	4906      	ldr	r1, [pc, #24]	@ (8000ed0 <CLI_APP_Task+0x3c>)
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <CLI_APP_Task+0x38>)
 8000eb8:	f000 f970 	bl	800119c <CMD_API_Process>
            //debug_err
        }

        HEAP_API_Free(received_message.message);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	@ (8000ecc <CLI_APP_Task+0x38>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 fd15 	bl	80018f0 <HEAP_API_Free>
 8000ec6:	e7e9      	b.n	8000e9c <CLI_APP_Task+0x8>
            continue;
 8000ec8:	bf00      	nop
        if (UART_API_Receive(CLI_UART_PORT, &received_message, osWaitForever) == false) {
 8000eca:	e7e7      	b.n	8000e9c <CLI_APP_Task+0x8>
 8000ecc:	200002a8 	.word	0x200002a8
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <CLI_HandleResponse>:
    eHandlerCode_MissingParameter,
    eHandlerCode_Last
} eHandlerCode_t;


static void CLI_HandleResponse (uint8_t *response_buffer, size_t buffer_size, eHandlerCode_t error_code) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	71fb      	strb	r3, [r7, #7]
    if ((response_buffer == NULL) || (buffer_size == 0) || (error_code < eHandlerCode_First) || (error_code >= eHandlerCode_Last)) {
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d033      	beq.n	8000f50 <CLI_HandleResponse+0x7c>
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d030      	beq.n	8000f50 <CLI_HandleResponse+0x7c>
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d82d      	bhi.n	8000f50 <CLI_HandleResponse+0x7c>
        return;
    }
    switch (error_code) {
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d82c      	bhi.n	8000f54 <CLI_HandleResponse+0x80>
 8000efa:	a201      	add	r2, pc, #4	@ (adr r2, 8000f00 <CLI_HandleResponse+0x2c>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000f15 	.word	0x08000f15
 8000f04:	08000f21 	.word	0x08000f21
 8000f08:	08000f2d 	.word	0x08000f2d
 8000f0c:	08000f39 	.word	0x08000f39
 8000f10:	08000f45 	.word	0x08000f45
        case eHandlerCode_Internal: {
            snprintf((char*)response_buffer, buffer_size, "Internal Error\r");
 8000f14:	4a11      	ldr	r2, [pc, #68]	@ (8000f5c <CLI_HandleResponse+0x88>)
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f008 fb2f 	bl	800957c <sniprintf>
            break;
 8000f1e:	e01a      	b.n	8000f56 <CLI_HandleResponse+0x82>
        }
        case eHandlerCode_InvalidInput: {
            snprintf((char*)response_buffer, buffer_size, "Invalid Input\r");
 8000f20:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <CLI_HandleResponse+0x8c>)
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f008 fb29 	bl	800957c <sniprintf>
            break;
 8000f2a:	e014      	b.n	8000f56 <CLI_HandleResponse+0x82>
        }
        case eHandlerCode_ParameterOutOfRange: {
            snprintf((char*)response_buffer, buffer_size, "Invalid input: parameter out of range.\r");
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <CLI_HandleResponse+0x90>)
 8000f2e:	68b9      	ldr	r1, [r7, #8]
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f008 fb23 	bl	800957c <sniprintf>
            break;
 8000f36:	e00e      	b.n	8000f56 <CLI_HandleResponse+0x82>
        }
        case eHandlerCode_TaskQueueFull: {
            snprintf((char*)response_buffer, buffer_size, "Timeout: task queue is full.\r");
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <CLI_HandleResponse+0x94>)
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f008 fb1d 	bl	800957c <sniprintf>
            break;
 8000f42:	e008      	b.n	8000f56 <CLI_HandleResponse+0x82>
        }
        case eHandlerCode_MissingParameter: {
            snprintf((char*)response_buffer, buffer_size, "Invalid input: missing parameter\r");
 8000f44:	4a09      	ldr	r2, [pc, #36]	@ (8000f6c <CLI_HandleResponse+0x98>)
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f008 fb17 	bl	800957c <sniprintf>
            break;
 8000f4e:	e002      	b.n	8000f56 <CLI_HandleResponse+0x82>
        return;
 8000f50:	bf00      	nop
 8000f52:	e000      	b.n	8000f56 <CLI_HandleResponse+0x82>
        }
        default: {
        	break;
 8000f54:	bf00      	nop
        }
    }
}
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	08009ee0 	.word	0x08009ee0
 8000f60:	08009ef0 	.word	0x08009ef0
 8000f64:	08009f00 	.word	0x08009f00
 8000f68:	08009f28 	.word	0x08009f28
 8000f6c:	08009f48 	.word	0x08009f48

08000f70 <CLI_StartTCPHandler>:


bool CLI_StartTCPHandler(sCommandParams_t *cmd_params) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b090      	sub	sp, #64	@ 0x40
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	6078      	str	r0, [r7, #4]
    if (CMD_API_CheckParams(cmd_params) == false) {
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 f9a3 	bl	80012c4 <CMD_API_CheckParams>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f083 0301 	eor.w	r3, r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <CLI_StartTCPHandler+0x1e>
        return false;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e0ac      	b.n	80010e8 <CLI_StartTCPHandler+0x178>
    }

    char *params = (char*)cmd_params->params;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	637b      	str	r3, [r7, #52]	@ 0x34

    const char *command_delimiter = ",";
 8000f94:	4b56      	ldr	r3, [pc, #344]	@ (80010f0 <CLI_StartTCPHandler+0x180>)
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
	char *saveptr = NULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
	char *token = NULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	token = strtok_r((char*)params, command_delimiter, &saveptr);
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000fa8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000faa:	f008 fb92 	bl	80096d2 <strtok_r>
 8000fae:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (token == NULL) {
 8000fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d109      	bne.n	8000fca <CLI_StartTCPHandler+0x5a>
        CLI_HandleResponse(cmd_params->reply, cmd_params->reply_length, eHandlerCode_MissingParameter);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6898      	ldr	r0, [r3, #8]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff ff87 	bl	8000ed4 <CLI_HandleResponse>
        return false;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e08e      	b.n	80010e8 <CLI_StartTCPHandler+0x178>
    }

    char ip[16] = {0};
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
    strncpy(ip, token, sizeof(token) - 1);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	2203      	movs	r2, #3
 8000fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f008 fb3b 	bl	800965c <strncpy>

	token = strtok_r((char*)params, command_delimiter, &saveptr);
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	461a      	mov	r2, r3
 8000fec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000fee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000ff0:	f008 fb6f 	bl	80096d2 <strtok_r>
 8000ff4:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (token == NULL) {
 8000ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d109      	bne.n	8001010 <CLI_StartTCPHandler+0xa0>
        CLI_HandleResponse(cmd_params->reply, cmd_params->reply_length, eHandlerCode_MissingParameter);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6898      	ldr	r0, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2204      	movs	r2, #4
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff ff64 	bl	8000ed4 <CLI_HandleResponse>
        return false;
 800100c:	2300      	movs	r3, #0
 800100e:	e06b      	b.n	80010e8 <CLI_StartTCPHandler+0x178>
    }

    uint16_t port = atoi(token);
 8001010:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001012:	f008 f951 	bl	80092b8 <atoi>
 8001016:	4603      	mov	r3, r0
 8001018:	857b      	strh	r3, [r7, #42]	@ 0x2a

	token = strtok_r((char*)params, command_delimiter, &saveptr);
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	461a      	mov	r2, r3
 8001020:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001022:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001024:	f008 fb55 	bl	80096d2 <strtok_r>
 8001028:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (token == NULL) {
 800102a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102c:	2b00      	cmp	r3, #0
 800102e:	d109      	bne.n	8001044 <CLI_StartTCPHandler+0xd4>
        CLI_HandleResponse(cmd_params->reply, cmd_params->reply_length, eHandlerCode_MissingParameter);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6898      	ldr	r0, [r3, #8]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2204      	movs	r2, #4
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff ff4a 	bl	8000ed4 <CLI_HandleResponse>
        return false;
 8001040:	2300      	movs	r3, #0
 8001042:	e051      	b.n	80010e8 <CLI_StartTCPHandler+0x178>
    }

    uint16_t socket = atoi(token);
 8001044:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001046:	f008 f937 	bl	80092b8 <atoi>
 800104a:	4603      	mov	r3, r0
 800104c:	853b      	strh	r3, [r7, #40]	@ 0x28

    sNetworkAppConnParams_t *tcp_params = (sNetworkAppConnParams_t*)HEAP_API_Malloc(sizeof(sNetworkAppConnParams_t));
 800104e:	2214      	movs	r2, #20
 8001050:	2101      	movs	r1, #1
 8001052:	2000      	movs	r0, #0
 8001054:	f000 fc08 	bl	8001868 <HEAP_API_Alloc>
 8001058:	6278      	str	r0, [r7, #36]	@ 0x24
    if (tcp_params == NULL) {
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	2b00      	cmp	r3, #0
 800105e:	d109      	bne.n	8001074 <CLI_StartTCPHandler+0x104>
    	CLI_HandleResponse(cmd_params->reply, cmd_params->reply_length, eHandlerCode_Internal);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6898      	ldr	r0, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff ff32 	bl	8000ed4 <CLI_HandleResponse>
        return false;
 8001070:	2300      	movs	r3, #0
 8001072:	e039      	b.n	80010e8 <CLI_StartTCPHandler+0x178>
    }

    strncpy((char*)tcp_params->ip, ip, sizeof(tcp_params->ip) - 1);
 8001074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001076:	f107 0110 	add.w	r1, r7, #16
 800107a:	220f      	movs	r2, #15
 800107c:	4618      	mov	r0, r3
 800107e:	f008 faed 	bl	800965c <strncpy>
    tcp_params->ip[sizeof(tcp_params->ip) - 1] = '\0';
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	2200      	movs	r2, #0
 8001086:	73da      	strb	r2, [r3, #15]
    tcp_params->port = port;
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800108c:	821a      	strh	r2, [r3, #16]
    tcp_params->socket = socket;
 800108e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001090:	b2da      	uxtb	r2, r3
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	749a      	strb	r2, [r3, #18]

    sDataSendingTask_t tcp_task;
    tcp_task.task = eDataSendingTask_Start;
 8001096:	2300      	movs	r3, #0
 8001098:	723b      	strb	r3, [r7, #8]
    tcp_task.params = tcp_params;
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	60fb      	str	r3, [r7, #12]
    if (DataSending_APP_AddTask(&tcp_task) == false) {
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f974 	bl	8001390 <DataSending_APP_AddTask>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f083 0301 	eor.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00c      	beq.n	80010ce <CLI_StartTCPHandler+0x15e>
    	CLI_HandleResponse(cmd_params->reply, cmd_params->reply_length, eHandlerCode_TaskQueueFull);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6898      	ldr	r0, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2203      	movs	r2, #3
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff ff08 	bl	8000ed4 <CLI_HandleResponse>
        HEAP_API_Free(tcp_params);
 80010c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010c6:	f000 fc13 	bl	80018f0 <HEAP_API_Free>
        return false;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e00c      	b.n	80010e8 <CLI_StartTCPHandler+0x178>
    }

    snprintf((char*)cmd_params->reply, cmd_params->reply_length, "Starting TCP connection to %s:%u\r", ip, port);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6898      	ldr	r0, [r3, #8]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68d9      	ldr	r1, [r3, #12]
 80010d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80010d8:	f107 0210 	add.w	r2, r7, #16
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	4613      	mov	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <CLI_StartTCPHandler+0x184>)
 80010e2:	f008 fa4b 	bl	800957c <sniprintf>
    return true;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3738      	adds	r7, #56	@ 0x38
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	08009f6c 	.word	0x08009f6c
 80010f4:	08009f70 	.word	0x08009f70

080010f8 <CLI_StopTCPHandler>:

bool CLI_StopTCPHandler(sCommandParams_t *cmd_params) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	sDataSendingTask_t params = {0};
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
	params.task = eDataSendingTask_Stop;
 800110a:	2301      	movs	r3, #1
 800110c:	723b      	strb	r3, [r7, #8]
	params.params = NULL;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]

    if (DataSending_APP_AddTask(&params) == false) {
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f93a 	bl	8001390 <DataSending_APP_AddTask>
 800111c:	4603      	mov	r3, r0
 800111e:	f083 0301 	eor.w	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d009      	beq.n	800113c <CLI_StopTCPHandler+0x44>
    	CLI_HandleResponse(cmd_params->reply, cmd_params->reply_length, eHandlerCode_TaskQueueFull);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6898      	ldr	r0, [r3, #8]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2203      	movs	r2, #3
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fece 	bl	8000ed4 <CLI_HandleResponse>
        return false;
 8001138:	2300      	movs	r3, #0
 800113a:	e008      	b.n	800114e <CLI_StopTCPHandler+0x56>
    }

    snprintf((char*)cmd_params->reply, cmd_params->reply_length, "Stoping TCP connection\r");
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6898      	ldr	r0, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <CLI_StopTCPHandler+0x60>)
 8001146:	4619      	mov	r1, r3
 8001148:	f008 fa18 	bl	800957c <sniprintf>
    return true;
 800114c:	2301      	movs	r3, #1
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	08009f94 	.word	0x08009f94

0800115c <CMD_API_FindSeperator>:
 *********************************************************************************************************************/
int CMD_API_FindSeperator (uint8_t *message, uint8_t seperator);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
int CMD_API_FindSeperator (uint8_t *message, uint8_t seperator) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
    char *delimiter_pos = strchr((char*)message, seperator);
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f008 fa43 	bl	80095f8 <strchr>
 8001172:	60f8      	str	r0, [r7, #12]

    if (delimiter_pos == NULL) {
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <CMD_API_FindSeperator+0x24>
        return NO_SEPERATOR;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e009      	b.n	8001194 <CMD_API_FindSeperator+0x38>
    } else if ((uint8_t*)delimiter_pos == message) {
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	d101      	bne.n	800118c <CMD_API_FindSeperator+0x30>
        return EMPTY_MESSAGE;
 8001188:	2300      	movs	r3, #0
 800118a:	e003      	b.n	8001194 <CMD_API_FindSeperator+0x38>
    }

    return (uint8_t*)delimiter_pos - message + 1;
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	3301      	adds	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <CMD_API_Process>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool CMD_API_Process (sMessage_t *received_message, sCmdLauncherParams_t *cmd_params) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    if ((received_message->message == NULL) || (received_message->message_length <= 0)) {
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <CMD_API_Process+0x1a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <CMD_API_Process+0x1e>
        return false;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e077      	b.n	80012aa <CMD_API_Process+0x10e>
    }

    for (size_t cmd = 0; cmd < cmd_params->command_table_size; cmd++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011be:	e066      	b.n	800128e <CMD_API_Process+0xf2>
        const sCommandDesc_t *command = &cmd_params->command_table[cmd];
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	623b      	str	r3, [r7, #32]
        int seperator_pos = CMD_API_FindSeperator(received_message->message, *command->separator);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	4610      	mov	r0, r2
 80011da:	f7ff ffbf 	bl	800115c <CMD_API_FindSeperator>
 80011de:	61f8      	str	r0, [r7, #28]

		if (seperator_pos == NO_SEPERATOR) {
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e6:	d109      	bne.n	80011fc <CMD_API_Process+0x60>
			snprintf((char*)cmd_params->reply, cmd_params->reply_size, "No seperator was found\r\n");
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6898      	ldr	r0, [r3, #8]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4a30      	ldr	r2, [pc, #192]	@ (80012b4 <CMD_API_Process+0x118>)
 80011f2:	4619      	mov	r1, r3
 80011f4:	f008 f9c2 	bl	800957c <sniprintf>
			return false;
 80011f8:	2300      	movs	r3, #0
 80011fa:	e056      	b.n	80012aa <CMD_API_Process+0x10e>
		} else if (seperator_pos == EMPTY_MESSAGE) {
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <CMD_API_Process+0x7a>
			snprintf((char*)cmd_params->reply, cmd_params->reply_size, "An empty message was received\r\n");
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	6898      	ldr	r0, [r3, #8]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	4a2b      	ldr	r2, [pc, #172]	@ (80012b8 <CMD_API_Process+0x11c>)
 800120c:	4619      	mov	r1, r3
 800120e:	f008 f9b5 	bl	800957c <sniprintf>
			return false;
 8001212:	2300      	movs	r3, #0
 8001214:	e049      	b.n	80012aa <CMD_API_Process+0x10e>
		}

        if ((command->command_name_size + 1 == seperator_pos) && (strncmp((char*)command->command_name, (char*)received_message->message, command->command_name_size) == 0)) {
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	429a      	cmp	r2, r3
 8001220:	d132      	bne.n	8001288 <CMD_API_Process+0xec>
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6819      	ldr	r1, [r3, #0]
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	461a      	mov	r2, r3
 8001230:	f008 fa02 	bl	8009638 <strncmp>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d126      	bne.n	8001288 <CMD_API_Process+0xec>
            if (command->function == NULL) {
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d109      	bne.n	8001256 <CMD_API_Process+0xba>
                snprintf((char*)cmd_params->reply, cmd_params->reply_size, "Command does not have a function\r\n");
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	6898      	ldr	r0, [r3, #8]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	4a1c      	ldr	r2, [pc, #112]	@ (80012bc <CMD_API_Process+0x120>)
 800124c:	4619      	mov	r1, r3
 800124e:	f008 f995 	bl	800957c <sniprintf>
                return false;
 8001252:	2300      	movs	r3, #0
 8001254:	e029      	b.n	80012aa <CMD_API_Process+0x10e>
            }

            sCommandParams_t params = {
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
                .params = received_message->message + seperator_pos,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	4413      	add	r3, r2
            sCommandParams_t params = {
 800126c:	60fb      	str	r3, [r7, #12]
                .params_length = received_message->message_length - seperator_pos,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	1ad3      	subs	r3, r2, r3
            sCommandParams_t params = {
 8001276:	613b      	str	r3, [r7, #16]
            };

            command->function(&params);
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f107 020c 	add.w	r2, r7, #12
 8001280:	4610      	mov	r0, r2
 8001282:	4798      	blx	r3
            return true;
 8001284:	2301      	movs	r3, #1
 8001286:	e010      	b.n	80012aa <CMD_API_Process+0x10e>
    for (size_t cmd = 0; cmd < cmd_params->command_table_size; cmd++) {
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	3301      	adds	r3, #1
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001294:	429a      	cmp	r2, r3
 8001296:	d393      	bcc.n	80011c0 <CMD_API_Process+0x24>
        }
    }

    snprintf((char*)cmd_params->reply, cmd_params->reply_size, "Such command does not exist\r\n");
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	6898      	ldr	r0, [r3, #8]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4a07      	ldr	r2, [pc, #28]	@ (80012c0 <CMD_API_Process+0x124>)
 80012a2:	4619      	mov	r1, r3
 80012a4:	f008 f96a 	bl	800957c <sniprintf>
    return false;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3728      	adds	r7, #40	@ 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	08009fac 	.word	0x08009fac
 80012b8:	08009fc8 	.word	0x08009fc8
 80012bc:	08009fe8 	.word	0x08009fe8
 80012c0:	0800a00c 	.word	0x0800a00c

080012c4 <CMD_API_CheckParams>:

bool CMD_API_CheckParams (sCommandParams_t *cmd_params) {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	if (cmd_params == NULL) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <CMD_API_CheckParams+0x12>
		return false;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e00a      	b.n	80012ec <CMD_API_CheckParams+0x28>
	}

	if ((cmd_params->params == NULL) || (cmd_params->params_length == 0)) {
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <CMD_API_CheckParams+0x22>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <CMD_API_CheckParams+0x26>
		return false;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <CMD_API_CheckParams+0x28>
	}

	return true;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <DataSending_APP_Init>:

static void DataSending_APP_Callback (void *arguments);
static void DataSending_APP_Task (void *arguments);
static void DataSending_APP_FormatMessage (void);

bool DataSending_APP_Init (void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	if (data_sending_mq == NULL) {
 80012fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <DataSending_APP_Init+0x78>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10d      	bne.n	8001320 <DataSending_APP_Init+0x28>
		data_sending_mq = osMessageQueueNew(DATA_SENDING_APP_QUEUE_MSG_SIZE, sizeof(sDataSendingTask_t), &data_sending_app_mq_attr);
 8001304:	4a1b      	ldr	r2, [pc, #108]	@ (8001374 <DataSending_APP_Init+0x7c>)
 8001306:	2108      	movs	r1, #8
 8001308:	200a      	movs	r0, #10
 800130a:	f004 fab4 	bl	8005876 <osMessageQueueNew>
 800130e:	4603      	mov	r3, r0
 8001310:	4a17      	ldr	r2, [pc, #92]	@ (8001370 <DataSending_APP_Init+0x78>)
 8001312:	6013      	str	r3, [r2, #0]
		if (data_sending_mq == NULL) {
 8001314:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <DataSending_APP_Init+0x78>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <DataSending_APP_Init+0x28>
			return false;
 800131c:	2300      	movs	r3, #0
 800131e:	e025      	b.n	800136c <DataSending_APP_Init+0x74>
		}
	}

	if (data_sending_timer == NULL) {
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <DataSending_APP_Init+0x80>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10e      	bne.n	8001346 <DataSending_APP_Init+0x4e>
		data_sending_timer = osTimerNew(DataSending_APP_Callback, osTimerPeriodic, DATA_SENDING_APP_NO_ARG, &data_sending_timer_attr);
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <DataSending_APP_Init+0x84>)
 800132a:	2200      	movs	r2, #0
 800132c:	2101      	movs	r1, #1
 800132e:	4814      	ldr	r0, [pc, #80]	@ (8001380 <DataSending_APP_Init+0x88>)
 8001330:	f003 ffcc 	bl	80052cc <osTimerNew>
 8001334:	4603      	mov	r3, r0
 8001336:	4a10      	ldr	r2, [pc, #64]	@ (8001378 <DataSending_APP_Init+0x80>)
 8001338:	6013      	str	r3, [r2, #0]
		if (data_sending_timer == NULL) {
 800133a:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <DataSending_APP_Init+0x80>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <DataSending_APP_Init+0x4e>
			return false;
 8001342:	2300      	movs	r3, #0
 8001344:	e012      	b.n	800136c <DataSending_APP_Init+0x74>
		}
	}

	if (data_sending_thread == NULL) {
 8001346:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <DataSending_APP_Init+0x8c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10d      	bne.n	800136a <DataSending_APP_Init+0x72>
		data_sending_thread = osThreadNew(DataSending_APP_Task, DATA_SENDING_APP_NO_ARG, &data_sending_thread_attr);
 800134e:	4a0e      	ldr	r2, [pc, #56]	@ (8001388 <DataSending_APP_Init+0x90>)
 8001350:	2100      	movs	r1, #0
 8001352:	480e      	ldr	r0, [pc, #56]	@ (800138c <DataSending_APP_Init+0x94>)
 8001354:	f003 fef8 	bl	8005148 <osThreadNew>
 8001358:	4603      	mov	r3, r0
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <DataSending_APP_Init+0x8c>)
 800135c:	6013      	str	r3, [r2, #0]
		if (data_sending_thread == NULL) {
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <DataSending_APP_Init+0x8c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <DataSending_APP_Init+0x72>
			return false;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <DataSending_APP_Init+0x74>
		}
	}

	return true;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200002b4 	.word	0x200002b4
 8001374:	0800a384 	.word	0x0800a384
 8001378:	200002b8 	.word	0x200002b8
 800137c:	0800a39c 	.word	0x0800a39c
 8001380:	080013e1 	.word	0x080013e1
 8001384:	200002b0 	.word	0x200002b0
 8001388:	0800a360 	.word	0x0800a360
 800138c:	0800144d 	.word	0x0800144d

08001390 <DataSending_APP_AddTask>:

bool DataSending_APP_AddTask (sDataSendingTask_t *task) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	if ((task->params == NULL) || (task->task < eDataSendingTask_First) || (task->task >= eDataSendingTask_Last)) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <DataSending_APP_AddTask+0x18>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d901      	bls.n	80013ac <DataSending_APP_AddTask+0x1c>
		return false;
 80013a8:	2300      	movs	r3, #0
 80013aa:	e012      	b.n	80013d2 <DataSending_APP_AddTask+0x42>
	}

	if (data_sending_mq == NULL) {
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <DataSending_APP_AddTask+0x4c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <DataSending_APP_AddTask+0x28>
		return false;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e00c      	b.n	80013d2 <DataSending_APP_AddTask+0x42>
	}

	if (osMessageQueuePut(data_sending_mq, task, MESSAGE_PRIORITY, DATA_SENDING_APP_MQ_TIMEOUT) != osOK) {
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <DataSending_APP_AddTask+0x4c>)
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	23fa      	movs	r3, #250	@ 0xfa
 80013be:	2200      	movs	r2, #0
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	f004 facb 	bl	800595c <osMessageQueuePut>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <DataSending_APP_AddTask+0x40>
		return false;
 80013cc:	2300      	movs	r3, #0
 80013ce:	e000      	b.n	80013d2 <DataSending_APP_AddTask+0x42>
	}

	return true;
 80013d0:	2301      	movs	r3, #1
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200002b4 	.word	0x200002b4

080013e0 <DataSending_APP_Callback>:

static void DataSending_APP_Callback (void *arguments) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	DataSending_APP_FormatMessage();
 80013e8:	f000 f87e 	bl	80014e8 <DataSending_APP_FormatMessage>
    network_send_params.data = (uint8_t*)data_buffer;
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <DataSending_APP_Callback+0x5c>)
 80013ee:	4a14      	ldr	r2, [pc, #80]	@ (8001440 <DataSending_APP_Callback+0x60>)
 80013f0:	601a      	str	r2, [r3, #0]
    network_send_params.data_length = strlen((char*)data_buffer);
 80013f2:	4813      	ldr	r0, [pc, #76]	@ (8001440 <DataSending_APP_Callback+0x60>)
 80013f4:	f7fe fef4 	bl	80001e0 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a10      	ldr	r2, [pc, #64]	@ (800143c <DataSending_APP_Callback+0x5c>)
 80013fc:	6053      	str	r3, [r2, #4]
    network_task.params = &network_conn_params;
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <DataSending_APP_Callback+0x64>)
 8001400:	4a11      	ldr	r2, [pc, #68]	@ (8001448 <DataSending_APP_Callback+0x68>)
 8001402:	605a      	str	r2, [r3, #4]
    network_task.task = eNetworkTask_Connect;
 8001404:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <DataSending_APP_Callback+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
    Network_APP_AddTask(&network_task);
 800140a:	480e      	ldr	r0, [pc, #56]	@ (8001444 <DataSending_APP_Callback+0x64>)
 800140c:	f000 fd52 	bl	8001eb4 <Network_APP_AddTask>
    network_task.params = &network_send_params;
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <DataSending_APP_Callback+0x64>)
 8001412:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <DataSending_APP_Callback+0x5c>)
 8001414:	605a      	str	r2, [r3, #4]
    network_task.task = eNetworkTask_Send;
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <DataSending_APP_Callback+0x64>)
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
    Network_APP_AddTask(&network_task);
 800141c:	4809      	ldr	r0, [pc, #36]	@ (8001444 <DataSending_APP_Callback+0x64>)
 800141e:	f000 fd49 	bl	8001eb4 <Network_APP_AddTask>
    network_task.params = NULL;
 8001422:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <DataSending_APP_Callback+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
    network_task.task = eNetworkTask_Disconnect;
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <DataSending_APP_Callback+0x64>)
 800142a:	2202      	movs	r2, #2
 800142c:	701a      	strb	r2, [r3, #0]
    Network_APP_AddTask(&network_task);
 800142e:	4805      	ldr	r0, [pc, #20]	@ (8001444 <DataSending_APP_Callback+0x64>)
 8001430:	f000 fd40 	bl	8001eb4 <Network_APP_AddTask>

}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200003d8 	.word	0x200003d8
 8001440:	200002bc 	.word	0x200002bc
 8001444:	200003bc 	.word	0x200003bc
 8001448:	200003c4 	.word	0x200003c4

0800144c <DataSending_APP_Task>:

static void DataSending_APP_Task (void *arguments) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    while (1) {
        if (osMessageQueueGet(data_sending_mq, &received_task, NULL, osWaitForever) != osOK) {
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <DataSending_APP_Task+0x8c>)
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	2200      	movs	r2, #0
 800145e:	491f      	ldr	r1, [pc, #124]	@ (80014dc <DataSending_APP_Task+0x90>)
 8001460:	f004 fadc 	bl	8005a1c <osMessageQueueGet>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d132      	bne.n	80014d0 <DataSending_APP_Task+0x84>
            continue;
        }

        if (received_task.params == NULL) {
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <DataSending_APP_Task+0x90>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d030      	beq.n	80014d4 <DataSending_APP_Task+0x88>
            continue;
        }

        switch (received_task.task) {
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <DataSending_APP_Task+0x90>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <DataSending_APP_Task+0x34>
 800147a:	2b01      	cmp	r3, #1
 800147c:	d01c      	beq.n	80014b8 <DataSending_APP_Task+0x6c>
            case eDataSendingTask_Stop: {
                osTimerStop(data_sending_timer);
                break;
            }
            default: {
            	break;
 800147e:	e021      	b.n	80014c4 <DataSending_APP_Task+0x78>
                strncpy((char*)network_conn_params.ip, (char*)received_task.params->ip, sizeof(network_conn_params.ip) - 1);
 8001480:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <DataSending_APP_Task+0x90>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	220f      	movs	r2, #15
 8001486:	4619      	mov	r1, r3
 8001488:	4815      	ldr	r0, [pc, #84]	@ (80014e0 <DataSending_APP_Task+0x94>)
 800148a:	f008 f8e7 	bl	800965c <strncpy>
                network_conn_params.ip[sizeof(network_conn_params.ip) - 1] = '\0';
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <DataSending_APP_Task+0x94>)
 8001490:	2200      	movs	r2, #0
 8001492:	73da      	strb	r2, [r3, #15]
                network_conn_params.port = received_task.params->port;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <DataSending_APP_Task+0x90>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	8a1a      	ldrh	r2, [r3, #16]
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <DataSending_APP_Task+0x94>)
 800149c:	821a      	strh	r2, [r3, #16]
                network_conn_params.socket = received_task.params->socket;
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <DataSending_APP_Task+0x90>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	7c9a      	ldrb	r2, [r3, #18]
 80014a4:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <DataSending_APP_Task+0x94>)
 80014a6:	749a      	strb	r2, [r3, #18]
                osTimerStart(data_sending_timer, DATA_SENDING_TIMER_PERIOD);
 80014a8:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <DataSending_APP_Task+0x98>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f241 3188 	movw	r1, #5000	@ 0x1388
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 ff87 	bl	80053c4 <osTimerStart>
                break;
 80014b6:	e005      	b.n	80014c4 <DataSending_APP_Task+0x78>
                osTimerStop(data_sending_timer);
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <DataSending_APP_Task+0x98>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 ffaf 	bl	8005420 <osTimerStop>
                break;
 80014c2:	bf00      	nop
            }
        }

        HEAP_API_Free(received_task.params);
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <DataSending_APP_Task+0x90>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fa11 	bl	80018f0 <HEAP_API_Free>
 80014ce:	e7c1      	b.n	8001454 <DataSending_APP_Task+0x8>
            continue;
 80014d0:	bf00      	nop
 80014d2:	e7bf      	b.n	8001454 <DataSending_APP_Task+0x8>
            continue;
 80014d4:	bf00      	nop
        if (osMessageQueueGet(data_sending_mq, &received_task, NULL, osWaitForever) != osOK) {
 80014d6:	e7bd      	b.n	8001454 <DataSending_APP_Task+0x8>
 80014d8:	200002b4 	.word	0x200002b4
 80014dc:	200003e0 	.word	0x200003e0
 80014e0:	200003c4 	.word	0x200003c4
 80014e4:	200002b8 	.word	0x200002b8

080014e8 <DataSending_APP_FormatMessage>:
    }

}

static void DataSending_APP_FormatMessage (void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0aa      	sub	sp, #168	@ 0xa8
 80014ec:	af02      	add	r7, sp, #8
	uint8_t gnss_data[128] = {0};
 80014ee:	f107 0320 	add.w	r3, r7, #32
 80014f2:	2280      	movs	r2, #128	@ 0x80
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f008 f876 	bl	80095e8 <memset>
	uint8_t accel_data[32] = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2220      	movs	r2, #32
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f008 f870 	bl	80095e8 <memset>

	GNSS_API_FormatGNSS(gnss_data, sizeof(gnss_data));
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	2180      	movs	r1, #128	@ 0x80
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f81a 	bl	8001548 <GNSS_API_FormatGNSS>
	ACCEL_API_FormatAcceleration(accel_data, sizeof(accel_data));
 8001514:	463b      	mov	r3, r7
 8001516:	2120      	movs	r1, #32
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fc45 	bl	8000da8 <ACCEL_API_FormatAcceleration>

	snprintf((char*)data_buffer, sizeof(data_buffer), "{%s, %s}\r\n", gnss_data, accel_data);
 800151e:	f107 0220 	add.w	r2, r7, #32
 8001522:	463b      	mov	r3, r7
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	4613      	mov	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <DataSending_APP_FormatMessage+0x54>)
 800152a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800152e:	4804      	ldr	r0, [pc, #16]	@ (8001540 <DataSending_APP_FormatMessage+0x58>)
 8001530:	f008 f824 	bl	800957c <sniprintf>
}
 8001534:	bf00      	nop
 8001536:	37a0      	adds	r7, #160	@ 0xa0
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	0800a07c 	.word	0x0800a07c
 8001540:	200002bc 	.word	0x200002bc
 8001544:	00000000 	.word	0x00000000

08001548 <GNSS_API_FormatGNSS>:

void GNSS_API_UpdateSpeed (double speed) {
	current_gnss_data.speed = speed;
}

void GNSS_API_FormatGNSS (uint8_t *buffer, size_t buffer_size) {
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b08e      	sub	sp, #56	@ 0x38
 800154c:	af04      	add	r7, sp, #16
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
    if ((buffer == NULL) || (buffer_size == 0)) {
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d072      	beq.n	800163e <GNSS_API_FormatGNSS+0xf6>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d06f      	beq.n	800163e <GNSS_API_FormatGNSS+0xf6>
        return;
    }
    char formatted_time[9] = {0};
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	721a      	strb	r2, [r3, #8]
    GNSS_API_FormatTime(current_gnss_data.timestamp, formatted_time, sizeof(formatted_time));
 800156a:	4b39      	ldr	r3, [pc, #228]	@ (8001650 <GNSS_API_FormatGNSS+0x108>)
 800156c:	ed93 7b00 	vldr	d7, [r3]
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2109      	movs	r1, #9
 8001576:	4618      	mov	r0, r3
 8001578:	eeb0 0a47 	vmov.f32	s0, s14
 800157c:	eef0 0a67 	vmov.f32	s1, s15
 8001580:	f000 f86a 	bl	8001658 <GNSS_API_FormatTime>

    int lat_int = (int)current_gnss_data.lat;
 8001584:	4b32      	ldr	r3, [pc, #200]	@ (8001650 <GNSS_API_FormatGNSS+0x108>)
 8001586:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fa4d 	bl	8000a2c <__aeabi_d2iz>
 8001592:	4603      	mov	r3, r0
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
    int lat_dec = (int)((current_gnss_data.lat - lat_int) * 1000000);
 8001596:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <GNSS_API_FormatGNSS+0x108>)
 8001598:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800159c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800159e:	f7fe ffc9 	bl	8000534 <__aeabi_i2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4620      	mov	r0, r4
 80015a8:	4629      	mov	r1, r5
 80015aa:	f7fe fe75 	bl	8000298 <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	a324      	add	r3, pc, #144	@ (adr r3, 8001648 <GNSS_API_FormatGNSS+0x100>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f7ff f824 	bl	8000608 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff fa30 	bl	8000a2c <__aeabi_d2iz>
 80015cc:	4603      	mov	r3, r0
 80015ce:	623b      	str	r3, [r7, #32]
    int lon_int = (int)current_gnss_data.lon;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <GNSS_API_FormatGNSS+0x108>)
 80015d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fa27 	bl	8000a2c <__aeabi_d2iz>
 80015de:	4603      	mov	r3, r0
 80015e0:	61fb      	str	r3, [r7, #28]
    int lon_dec = (int)((current_gnss_data.lon - lon_int) * 1000000);
 80015e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <GNSS_API_FormatGNSS+0x108>)
 80015e4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80015e8:	69f8      	ldr	r0, [r7, #28]
 80015ea:	f7fe ffa3 	bl	8000534 <__aeabi_i2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4620      	mov	r0, r4
 80015f4:	4629      	mov	r1, r5
 80015f6:	f7fe fe4f 	bl	8000298 <__aeabi_dsub>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	a311      	add	r3, pc, #68	@ (adr r3, 8001648 <GNSS_API_FormatGNSS+0x100>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe fffe 	bl	8000608 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fa0a 	bl	8000a2c <__aeabi_d2iz>
 8001618:	4603      	mov	r3, r0
 800161a:	61bb      	str	r3, [r7, #24]

    snprintf((char*)buffer, buffer_size, "timestamp: %s, latitude: %d.%06d, longitude: %d.%06d", formatted_time, lat_int, lat_dec, lon_int, lon_dec);
 800161c:	f107 020c 	add.w	r2, r7, #12
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	9303      	str	r3, [sp, #12]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4613      	mov	r3, r2
 8001632:	4a08      	ldr	r2, [pc, #32]	@ (8001654 <GNSS_API_FormatGNSS+0x10c>)
 8001634:	6839      	ldr	r1, [r7, #0]
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f007 ffa0 	bl	800957c <sniprintf>
 800163c:	e000      	b.n	8001640 <GNSS_API_FormatGNSS+0xf8>
        return;
 800163e:	bf00      	nop
}
 8001640:	3728      	adds	r7, #40	@ 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bdb0      	pop	{r4, r5, r7, pc}
 8001646:	bf00      	nop
 8001648:	00000000 	.word	0x00000000
 800164c:	412e8480 	.word	0x412e8480
 8001650:	200003e8 	.word	0x200003e8
 8001654:	0800a0b0 	.word	0x0800a0b0

08001658 <GNSS_API_FormatTime>:

static void GNSS_API_FormatTime (double numeric_time, char *buffer, size_t buffer_size) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af02      	add	r7, sp, #8
 800165e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    if (buffer == NULL || buffer_size < 9) {
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d040      	beq.n	80016ee <GNSS_API_FormatTime+0x96>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	2b08      	cmp	r3, #8
 8001670:	d93d      	bls.n	80016ee <GNSS_API_FormatTime+0x96>
        return;
    }

    int hours = (int) numeric_time / 10000;
 8001672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001676:	f7ff f9d9 	bl	8000a2c <__aeabi_d2iz>
 800167a:	4603      	mov	r3, r0
 800167c:	4a1e      	ldr	r2, [pc, #120]	@ (80016f8 <GNSS_API_FormatTime+0xa0>)
 800167e:	fb82 1203 	smull	r1, r2, r2, r3
 8001682:	1312      	asrs	r2, r2, #12
 8001684:	17db      	asrs	r3, r3, #31
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	61fb      	str	r3, [r7, #28]
    int minutes = ((int) numeric_time % 10000) / 100;
 800168a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800168e:	f7ff f9cd 	bl	8000a2c <__aeabi_d2iz>
 8001692:	4602      	mov	r2, r0
 8001694:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <GNSS_API_FormatTime+0xa0>)
 8001696:	fb83 1302 	smull	r1, r3, r3, r2
 800169a:	1319      	asrs	r1, r3, #12
 800169c:	17d3      	asrs	r3, r2, #31
 800169e:	1acb      	subs	r3, r1, r3
 80016a0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <GNSS_API_FormatTime+0xa4>)
 80016ac:	fb82 1203 	smull	r1, r2, r2, r3
 80016b0:	1152      	asrs	r2, r2, #5
 80016b2:	17db      	asrs	r3, r3, #31
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	61bb      	str	r3, [r7, #24]
    int seconds = (int) numeric_time % 100;
 80016b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016bc:	f7ff f9b6 	bl	8000a2c <__aeabi_d2iz>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4a0e      	ldr	r2, [pc, #56]	@ (80016fc <GNSS_API_FormatTime+0xa4>)
 80016c4:	fb82 1203 	smull	r1, r2, r2, r3
 80016c8:	1151      	asrs	r1, r2, #5
 80016ca:	17da      	asrs	r2, r3, #31
 80016cc:	1a8a      	subs	r2, r1, r2
 80016ce:	2164      	movs	r1, #100	@ 0x64
 80016d0:	fb01 f202 	mul.w	r2, r1, r2
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	617b      	str	r3, [r7, #20]

    snprintf(buffer, buffer_size, "%02d.%02d.%02d", hours, minutes, seconds);
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <GNSS_API_FormatTime+0xa8>)
 80016e4:	6839      	ldr	r1, [r7, #0]
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f007 ff48 	bl	800957c <sniprintf>
 80016ec:	e000      	b.n	80016f0 <GNSS_API_FormatTime+0x98>
        return;
 80016ee:	bf00      	nop
}
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	68db8bad 	.word	0x68db8bad
 80016fc:	51eb851f 	.word	0x51eb851f
 8001700:	0800a0e8 	.word	0x0800a0e8

08001704 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	041a      	lsls	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	619a      	str	r2, [r3, #24]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800172c:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800172e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001730:	4907      	ldr	r1, [pc, #28]	@ (8001750 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4313      	orrs	r3, r2
 8001736:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800173a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4013      	ands	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40023800 	.word	0x40023800

08001754 <GPIO_Driver_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool GPIO_Driver_Init (void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
    LL_GPIO_InitTypeDef gpio_init_struct = {0};
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
 8001768:	615a      	str	r2, [r3, #20]
    bool is_init_successful = true;
 800176a:	2301      	movs	r3, #1
 800176c:	77fb      	strb	r3, [r7, #31]

    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 800176e:	2300      	movs	r3, #0
 8001770:	77bb      	strb	r3, [r7, #30]
 8001772:	e053      	b.n	800181c <GPIO_Driver_Init+0xc8>
        LL_AHB1_GRP1_EnableClock(g_static_gpio_lut[pin].clock);
 8001774:	7fbb      	ldrb	r3, [r7, #30]
 8001776:	4a2d      	ldr	r2, [pc, #180]	@ (800182c <GPIO_Driver_Init+0xd8>)
 8001778:	015b      	lsls	r3, r3, #5
 800177a:	4413      	add	r3, r2
 800177c:	3318      	adds	r3, #24
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ffcf 	bl	8001724 <LL_AHB1_GRP1_EnableClock>
        LL_GPIO_ResetOutputPin(g_static_gpio_lut[pin].port, g_static_gpio_lut[pin].pin);
 8001786:	7fbb      	ldrb	r3, [r7, #30]
 8001788:	4a28      	ldr	r2, [pc, #160]	@ (800182c <GPIO_Driver_Init+0xd8>)
 800178a:	015b      	lsls	r3, r3, #5
 800178c:	4413      	add	r3, r2
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	7fbb      	ldrb	r3, [r7, #30]
 8001792:	4926      	ldr	r1, [pc, #152]	@ (800182c <GPIO_Driver_Init+0xd8>)
 8001794:	015b      	lsls	r3, r3, #5
 8001796:	440b      	add	r3, r1
 8001798:	3304      	adds	r3, #4
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	4610      	mov	r0, r2
 80017a0:	f7ff ffb0 	bl	8001704 <LL_GPIO_ResetOutputPin>

        gpio_init_struct.Pin = g_static_gpio_lut[pin].pin;
 80017a4:	7fbb      	ldrb	r3, [r7, #30]
 80017a6:	4a21      	ldr	r2, [pc, #132]	@ (800182c <GPIO_Driver_Init+0xd8>)
 80017a8:	015b      	lsls	r3, r3, #5
 80017aa:	4413      	add	r3, r2
 80017ac:	3304      	adds	r3, #4
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	607b      	str	r3, [r7, #4]
        gpio_init_struct.Mode = g_static_gpio_lut[pin].mode;
 80017b2:	7fbb      	ldrb	r3, [r7, #30]
 80017b4:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <GPIO_Driver_Init+0xd8>)
 80017b6:	015b      	lsls	r3, r3, #5
 80017b8:	4413      	add	r3, r2
 80017ba:	3308      	adds	r3, #8
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60bb      	str	r3, [r7, #8]
        gpio_init_struct.Speed = g_static_gpio_lut[pin].speed;
 80017c0:	7fbb      	ldrb	r3, [r7, #30]
 80017c2:	4a1a      	ldr	r2, [pc, #104]	@ (800182c <GPIO_Driver_Init+0xd8>)
 80017c4:	015b      	lsls	r3, r3, #5
 80017c6:	4413      	add	r3, r2
 80017c8:	330c      	adds	r3, #12
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
        gpio_init_struct.OutputType = g_static_gpio_lut[pin].output;
 80017ce:	7fbb      	ldrb	r3, [r7, #30]
 80017d0:	4a16      	ldr	r2, [pc, #88]	@ (800182c <GPIO_Driver_Init+0xd8>)
 80017d2:	015b      	lsls	r3, r3, #5
 80017d4:	4413      	add	r3, r2
 80017d6:	3310      	adds	r3, #16
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	613b      	str	r3, [r7, #16]
        gpio_init_struct.Pull = g_static_gpio_lut[pin].pull;
 80017dc:	7fbb      	ldrb	r3, [r7, #30]
 80017de:	4a13      	ldr	r2, [pc, #76]	@ (800182c <GPIO_Driver_Init+0xd8>)
 80017e0:	015b      	lsls	r3, r3, #5
 80017e2:	4413      	add	r3, r2
 80017e4:	3314      	adds	r3, #20
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	617b      	str	r3, [r7, #20]
        gpio_init_struct.Alternate = g_static_gpio_lut[pin].alternate;
 80017ea:	7fbb      	ldrb	r3, [r7, #30]
 80017ec:	4a0f      	ldr	r2, [pc, #60]	@ (800182c <GPIO_Driver_Init+0xd8>)
 80017ee:	015b      	lsls	r3, r3, #5
 80017f0:	4413      	add	r3, r2
 80017f2:	331c      	adds	r3, #28
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	61bb      	str	r3, [r7, #24]

        if (LL_GPIO_Init(g_static_gpio_lut[pin].port, &gpio_init_struct) != SUCCESS) {
 80017f8:	7fbb      	ldrb	r3, [r7, #30]
 80017fa:	4a0c      	ldr	r2, [pc, #48]	@ (800182c <GPIO_Driver_Init+0xd8>)
 80017fc:	015b      	lsls	r3, r3, #5
 80017fe:	4413      	add	r3, r2
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	1d3a      	adds	r2, r7, #4
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f002 ff89 	bl	800471e <LL_GPIO_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <GPIO_Driver_Init+0xc2>
            is_init_successful = false;
 8001812:	2300      	movs	r3, #0
 8001814:	77fb      	strb	r3, [r7, #31]
    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 8001816:	7fbb      	ldrb	r3, [r7, #30]
 8001818:	3301      	adds	r3, #1
 800181a:	77bb      	strb	r3, [r7, #30]
 800181c:	7fbb      	ldrb	r3, [r7, #30]
 800181e:	2b07      	cmp	r3, #7
 8001820:	d9a8      	bls.n	8001774 <GPIO_Driver_Init+0x20>
        }
    }

    return is_init_successful;
 8001822:	7ffb      	ldrb	r3, [r7, #31]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	0800a3ac 	.word	0x0800a3ac

08001830 <HEAP_API_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool HEAP_API_Init (void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    if (heap_mutex != NULL) {
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <HEAP_API_Init+0x30>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HEAP_API_Init+0x10>
        return false;
 800183c:	2300      	movs	r3, #0
 800183e:	e00c      	b.n	800185a <HEAP_API_Init+0x2a>
    }

    heap_mutex = osMutexNew(&g_static_uart_mutex_attr);
 8001840:	4808      	ldr	r0, [pc, #32]	@ (8001864 <HEAP_API_Init+0x34>)
 8001842:	f003 ff0a 	bl	800565a <osMutexNew>
 8001846:	4603      	mov	r3, r0
 8001848:	4a05      	ldr	r2, [pc, #20]	@ (8001860 <HEAP_API_Init+0x30>)
 800184a:	6013      	str	r3, [r2, #0]
    if (heap_mutex == NULL) {
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <HEAP_API_Init+0x30>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HEAP_API_Init+0x28>
        return false;
 8001854:	2300      	movs	r3, #0
 8001856:	e000      	b.n	800185a <HEAP_API_Init+0x2a>
    }

    return true;
 8001858:	2301      	movs	r3, #1
}
 800185a:	4618      	mov	r0, r3
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000408 	.word	0x20000408
 8001864:	0800a4ac 	.word	0x0800a4ac

08001868 <HEAP_API_Alloc>:

void *HEAP_API_Alloc (bool is_calloc, size_t number, size_t size) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	73fb      	strb	r3, [r7, #15]
    if ((number <= 0) || (size <= 0)) {
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <HEAP_API_Alloc+0x1a>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HEAP_API_Alloc+0x1e>
        return NULL;
 8001882:	2300      	movs	r3, #0
 8001884:	e02e      	b.n	80018e4 <HEAP_API_Alloc+0x7c>
    }

    if (heap_mutex == NULL) {
 8001886:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HEAP_API_Alloc+0x84>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HEAP_API_Alloc+0x2a>
        return NULL;
 800188e:	2300      	movs	r3, #0
 8001890:	e028      	b.n	80018e4 <HEAP_API_Alloc+0x7c>
    }

    if (osMutexAcquire(heap_mutex, osWaitForever) != osOK) {
 8001892:	4b16      	ldr	r3, [pc, #88]	@ (80018ec <HEAP_API_Alloc+0x84>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f04f 31ff 	mov.w	r1, #4294967295
 800189a:	4618      	mov	r0, r3
 800189c:	f003 ff63 	bl	8005766 <osMutexAcquire>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HEAP_API_Alloc+0x42>
        return NULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e01c      	b.n	80018e4 <HEAP_API_Alloc+0x7c>
    }

    void *ptr = is_calloc ? calloc(number, size) : malloc(number * size);
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HEAP_API_Alloc+0x54>
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	68b8      	ldr	r0, [r7, #8]
 80018b4:	f007 fd04 	bl	80092c0 <calloc>
 80018b8:	4603      	mov	r3, r0
 80018ba:	e007      	b.n	80018cc <HEAP_API_Alloc+0x64>
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f007 fd17 	bl	80092f8 <malloc>
 80018ca:	4603      	mov	r3, r0
 80018cc:	617b      	str	r3, [r7, #20]

    if (osMutexRelease(heap_mutex) != osOK){
 80018ce:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <HEAP_API_Alloc+0x84>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 ff92 	bl	80057fc <osMutexRelease>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HEAP_API_Alloc+0x7a>
        return NULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HEAP_API_Alloc+0x7c>
    }

    return ptr;
 80018e2:	697b      	ldr	r3, [r7, #20]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000408 	.word	0x20000408

080018f0 <HEAP_API_Free>:

void HEAP_API_Free (void *memory_pointer) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    if (memory_pointer == NULL) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d018      	beq.n	8001930 <HEAP_API_Free+0x40>
        return;
    }

    if (heap_mutex == NULL) {
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <HEAP_API_Free+0x50>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d016      	beq.n	8001934 <HEAP_API_Free+0x44>
        return;
    }

    if (osMutexAcquire(heap_mutex, osWaitForever) != osOK) {
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <HEAP_API_Free+0x50>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f04f 31ff 	mov.w	r1, #4294967295
 800190e:	4618      	mov	r0, r3
 8001910:	f003 ff29 	bl	8005766 <osMutexAcquire>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10e      	bne.n	8001938 <HEAP_API_Free+0x48>
        return;
    }

    free(memory_pointer);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f007 fcf4 	bl	8009308 <free>

    if (osMutexRelease(heap_mutex) != osOK) {
 8001920:	4b07      	ldr	r3, [pc, #28]	@ (8001940 <HEAP_API_Free+0x50>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f003 ff69 	bl	80057fc <osMutexRelease>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	e004      	b.n	800193a <HEAP_API_Free+0x4a>
        return;
 8001930:	bf00      	nop
 8001932:	e002      	b.n	800193a <HEAP_API_Free+0x4a>
        return;
 8001934:	bf00      	nop
 8001936:	e000      	b.n	800193a <HEAP_API_Free+0x4a>
        return;
 8001938:	bf00      	nop
        return;
    }
}
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000408 	.word	0x20000408

08001944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001948:	f001 fd56 	bl	80033f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194c:	f000 f862 	bl	8001a14 <SystemClock_Config>
//  MX_I2C1_Init();
//  MX_USART1_UART_Init();
//  MX_USART6_UART_Init();
//  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  if (HEAP_API_Init() == false) {
 8001950:	f7ff ff6e 	bl	8001830 <HEAP_API_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	f083 0301 	eor.w	r3, r3, #1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <main+0x20>
	  Error_Handler();
 8001960:	f000 f8de 	bl	8001b20 <Error_Handler>
  }
  if (GPIO_Driver_Init() == false) {
 8001964:	f7ff fef6 	bl	8001754 <GPIO_Driver_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	f083 0301 	eor.w	r3, r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <main+0x34>
	  Error_Handler();
 8001974:	f000 f8d4 	bl	8001b20 <Error_Handler>
//  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001978:	f003 fb9c 	bl	80050b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800197c:	4a21      	ldr	r2, [pc, #132]	@ (8001a04 <main+0xc0>)
 800197e:	2100      	movs	r1, #0
 8001980:	4821      	ldr	r0, [pc, #132]	@ (8001a08 <main+0xc4>)
 8001982:	f003 fbe1 	bl	8005148 <osThreadNew>
 8001986:	4603      	mov	r3, r0
 8001988:	4a20      	ldr	r2, [pc, #128]	@ (8001a0c <main+0xc8>)
 800198a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
/* add threads, ... */
	if (UART_API_Init(eUartApiPort_Usart2, 115200, "\r\n", 2) == false) {
 800198c:	2302      	movs	r3, #2
 800198e:	4a20      	ldr	r2, [pc, #128]	@ (8001a10 <main+0xcc>)
 8001990:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8001994:	2001      	movs	r0, #1
 8001996:	f001 f85b 	bl	8002a50 <UART_API_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	f083 0301 	eor.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <main+0x66>
		Error_Handler();
 80019a6:	f000 f8bb 	bl	8001b20 <Error_Handler>
	}
	if (CLI_APP_Init() == false) {
 80019aa:	f7ff fa55 	bl	8000e58 <CLI_APP_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f083 0301 	eor.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <main+0x7a>
		Error_Handler();
 80019ba:	f000 f8b1 	bl	8001b20 <Error_Handler>
	}
	if (MODEM_API_Init() == false) {
 80019be:	f000 f8b5 	bl	8001b2c <MODEM_API_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f083 0301 	eor.w	r3, r3, #1
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <main+0x8e>
		Error_Handler();
 80019ce:	f000 f8a7 	bl	8001b20 <Error_Handler>
	}
	if (DataSending_APP_Init() == false) {
 80019d2:	f7ff fc91 	bl	80012f8 <DataSending_APP_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f083 0301 	eor.w	r3, r3, #1
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <main+0xa2>
		Error_Handler();
 80019e2:	f000 f89d 	bl	8001b20 <Error_Handler>
	}
	if (Network_APP_Init() == false) {
 80019e6:	f000 fa31 	bl	8001e4c <Network_APP_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f083 0301 	eor.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <main+0xb6>
		Error_Handler();
 80019f6:	f000 f893 	bl	8001b20 <Error_Handler>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019fa:	f003 fb7f 	bl	80050fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019fe:	bf00      	nop
 8001a00:	e7fd      	b.n	80019fe <main+0xba>
 8001a02:	bf00      	nop
 8001a04:	0800a4bc 	.word	0x0800a4bc
 8001a08:	08001aed 	.word	0x08001aed
 8001a0c:	2000040c 	.word	0x2000040c
 8001a10:	0800a114 	.word	0x0800a114

08001a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b094      	sub	sp, #80	@ 0x50
 8001a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1a:	f107 0320 	add.w	r3, r7, #32
 8001a1e:	2230      	movs	r2, #48	@ 0x30
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f007 fde0 	bl	80095e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ae4 <SystemClock_Config+0xd0>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	4a28      	ldr	r2, [pc, #160]	@ (8001ae4 <SystemClock_Config+0xd0>)
 8001a42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a48:	4b26      	ldr	r3, [pc, #152]	@ (8001ae4 <SystemClock_Config+0xd0>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a54:	2300      	movs	r3, #0
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <SystemClock_Config+0xd4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a60:	4a21      	ldr	r2, [pc, #132]	@ (8001ae8 <SystemClock_Config+0xd4>)
 8001a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <SystemClock_Config+0xd4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a74:	2302      	movs	r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a7c:	2310      	movs	r3, #16
 8001a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a80:	2302      	movs	r3, #2
 8001a82:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a88:	2310      	movs	r3, #16
 8001a8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a8c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a92:	2304      	movs	r3, #4
 8001a94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a96:	2307      	movs	r3, #7
 8001a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9a:	f107 0320 	add.w	r3, r7, #32
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f001 fdce 	bl	8003640 <HAL_RCC_OscConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001aaa:	f000 f839 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aae:	230f      	movs	r3, #15
 8001ab0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001abe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 f830 	bl	8003b30 <HAL_RCC_ClockConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ad6:	f000 f823 	bl	8001b20 <Error_Handler>
  }
}
 8001ada:	bf00      	nop
 8001adc:	3750      	adds	r7, #80	@ 0x50
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40007000 	.word	0x40007000

08001aec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f003 fbb9 	bl	800526c <osDelay>
 8001afa:	e7fb      	b.n	8001af4 <StartDefaultTask+0x8>

08001afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001b0e:	f001 fc95 	bl	800343c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40000400 	.word	0x40000400

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <Error_Handler+0x8>

08001b2c <MODEM_API_Init>:
	.reply_size = MODEM_RESPONSE_LENGTH,
};

static void MODEM_API_Task (void *argument);

bool MODEM_API_Init (void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	if (UART_API_Init(MODEM_UART_PORT, MODEM_UART_BAUDRATE, MODEM_UART_DELIMITER, MODEM_UART_DELIMITER_LENGTH) == false) {
 8001b30:	2302      	movs	r3, #2
 8001b32:	4a2a      	ldr	r2, [pc, #168]	@ (8001bdc <MODEM_API_Init+0xb0>)
 8001b34:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f000 ff89 	bl	8002a50 <UART_API_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f083 0301 	eor.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MODEM_API_Init+0x22>
		return false;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e044      	b.n	8001bd8 <MODEM_API_Init+0xac>
	}

	if (modem_api_event_flag == NULL) {
 8001b4e:	4b24      	ldr	r3, [pc, #144]	@ (8001be0 <MODEM_API_Init+0xb4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10b      	bne.n	8001b6e <MODEM_API_Init+0x42>
		modem_api_event_flag = osEventFlagsNew(&modem_api_event_flag_attr);
 8001b56:	4823      	ldr	r0, [pc, #140]	@ (8001be4 <MODEM_API_Init+0xb8>)
 8001b58:	f003 fc99 	bl	800548e <osEventFlagsNew>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4a20      	ldr	r2, [pc, #128]	@ (8001be0 <MODEM_API_Init+0xb4>)
 8001b60:	6013      	str	r3, [r2, #0]
		if (modem_api_event_flag == NULL) {
 8001b62:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <MODEM_API_Init+0xb4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <MODEM_API_Init+0x42>
			return false;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e034      	b.n	8001bd8 <MODEM_API_Init+0xac>
		}
	}

	if (modem_api_mutex == NULL) {
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001be8 <MODEM_API_Init+0xbc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10b      	bne.n	8001b8e <MODEM_API_Init+0x62>
		modem_api_mutex = osMutexNew(&modem_api_mutex_attr);
 8001b76:	481d      	ldr	r0, [pc, #116]	@ (8001bec <MODEM_API_Init+0xc0>)
 8001b78:	f003 fd6f 	bl	800565a <osMutexNew>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001be8 <MODEM_API_Init+0xbc>)
 8001b80:	6013      	str	r3, [r2, #0]
		if (modem_api_mutex == NULL) {
 8001b82:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <MODEM_API_Init+0xbc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <MODEM_API_Init+0x62>
			return false;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e024      	b.n	8001bd8 <MODEM_API_Init+0xac>
		}
	}

	if (modem_api_queue == NULL) {
 8001b8e:	4b18      	ldr	r3, [pc, #96]	@ (8001bf0 <MODEM_API_Init+0xc4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10d      	bne.n	8001bb2 <MODEM_API_Init+0x86>
		modem_api_queue = osMessageQueueNew(MODEM_API_QUEUE_MSG_SIZE, sizeof(sMessage_t), &modem_api_mq_attr);
 8001b96:	4a17      	ldr	r2, [pc, #92]	@ (8001bf4 <MODEM_API_Init+0xc8>)
 8001b98:	2108      	movs	r1, #8
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f003 fe6b 	bl	8005876 <osMessageQueueNew>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a13      	ldr	r2, [pc, #76]	@ (8001bf0 <MODEM_API_Init+0xc4>)
 8001ba4:	6013      	str	r3, [r2, #0]
		if (modem_api_queue == NULL) {
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <MODEM_API_Init+0xc4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <MODEM_API_Init+0x86>
			return false;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e012      	b.n	8001bd8 <MODEM_API_Init+0xac>
		}
	}

	if (modem_api_thread == NULL) {
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <MODEM_API_Init+0xcc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10d      	bne.n	8001bd6 <MODEM_API_Init+0xaa>
		modem_api_thread = osThreadNew(MODEM_API_Task, NULL, &modem_api_thread_attr);
 8001bba:	4a10      	ldr	r2, [pc, #64]	@ (8001bfc <MODEM_API_Init+0xd0>)
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4810      	ldr	r0, [pc, #64]	@ (8001c00 <MODEM_API_Init+0xd4>)
 8001bc0:	f003 fac2 	bl	8005148 <osThreadNew>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf8 <MODEM_API_Init+0xcc>)
 8001bc8:	6013      	str	r3, [r2, #0]
		if (modem_api_thread == NULL) {
 8001bca:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <MODEM_API_Init+0xcc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <MODEM_API_Init+0xaa>
			return false;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e000      	b.n	8001bd8 <MODEM_API_Init+0xac>
		}
	}

	return true;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	0800a194 	.word	0x0800a194
 8001be0:	20000414 	.word	0x20000414
 8001be4:	0800a4e0 	.word	0x0800a4e0
 8001be8:	20000418 	.word	0x20000418
 8001bec:	0800a4f0 	.word	0x0800a4f0
 8001bf0:	2000041c 	.word	0x2000041c
 8001bf4:	0800a500 	.word	0x0800a500
 8001bf8:	20000410 	.word	0x20000410
 8001bfc:	0800a518 	.word	0x0800a518
 8001c00:	08001c05 	.word	0x08001c05

08001c04 <MODEM_API_Task>:

static void MODEM_API_Task (void *argument) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	while (1) {
		if (UART_API_Receive(MODEM_UART_PORT, &modem_message, osWaitForever) == false) {
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	4914      	ldr	r1, [pc, #80]	@ (8001c64 <MODEM_API_Task+0x60>)
 8001c12:	2002      	movs	r0, #2
 8001c14:	f001 f840 	bl	8002c98 <UART_API_Receive>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f083 0301 	eor.w	r3, r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d11d      	bne.n	8001c60 <MODEM_API_Task+0x5c>
			continue;
		}

		if (CMD_API_Process(&modem_message, &command_parser) == false) {
 8001c24:	4910      	ldr	r1, [pc, #64]	@ (8001c68 <MODEM_API_Task+0x64>)
 8001c26:	480f      	ldr	r0, [pc, #60]	@ (8001c64 <MODEM_API_Task+0x60>)
 8001c28:	f7ff fab8 	bl	800119c <CMD_API_Process>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f083 0301 	eor.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00d      	beq.n	8001c54 <MODEM_API_Task+0x50>
			//debug_err
			sMessage_t reply = {.message = command_parser.reply, .message_length = command_parser.reply_size};
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <MODEM_API_Task+0x64>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <MODEM_API_Task+0x64>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	60fb      	str	r3, [r7, #12]
			UART_API_Send(eUartApiPort_Usart2, &reply, osWaitForever);
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f000 ffc0 	bl	8002bd4 <UART_API_Send>
		}

		HEAP_API_Free(modem_message.message);
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <MODEM_API_Task+0x60>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fe49 	bl	80018f0 <HEAP_API_Free>
 8001c5e:	e7d5      	b.n	8001c0c <MODEM_API_Task+0x8>
			continue;
 8001c60:	bf00      	nop
		if (UART_API_Receive(MODEM_UART_PORT, &modem_message, osWaitForever) == false) {
 8001c62:	e7d3      	b.n	8001c0c <MODEM_API_Task+0x8>
 8001c64:	20000420 	.word	0x20000420
 8001c68:	20000014 	.word	0x20000014

08001c6c <MODEM_API_SendAndWait>:
	}
}

eModemStatus_t MODEM_API_SendAndWait (uint8_t *cmd, uint16_t wait_time) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
	if ((cmd == NULL) || (wait_time <= 0)) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <MODEM_API_SendAndWait+0x18>
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <MODEM_API_SendAndWait+0x1c>
		return eModemStatus_Error;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e01d      	b.n	8001cc4 <MODEM_API_SendAndWait+0x58>
	}

	sMessage_t cmd_msg = {.message = cmd, sizeof(cmd) - 1};
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	60fb      	str	r3, [r7, #12]
	UART_API_Send(MODEM_UART_PORT, &cmd_msg, wait_time);
 8001c90:	887a      	ldrh	r2, [r7, #2]
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	4619      	mov	r1, r3
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f000 ff9b 	bl	8002bd4 <UART_API_Send>
	uint32_t flag = osEventFlagsWait(modem_api_event_flag, 0x01, osFlagsWaitAny, wait_time);
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <MODEM_API_SendAndWait+0x60>)
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	f003 fc72 	bl	8005590 <osEventFlagsWait>
 8001cac:	6178      	str	r0, [r7, #20]
	eModemStatus_t result = (flag & 0x01) ? last_command_status : eModemStatus_TimeOut;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <MODEM_API_SendAndWait+0x52>
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <MODEM_API_SendAndWait+0x64>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	e000      	b.n	8001cc0 <MODEM_API_SendAndWait+0x54>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	74fb      	strb	r3, [r7, #19]
	return result;
 8001cc2:	7cfb      	ldrb	r3, [r7, #19]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000414 	.word	0x20000414
 8001cd0:	20000010 	.word	0x20000010

08001cd4 <MODEM_API_RepeatedSendAndWait>:

eModemStatus_t MODEM_API_RepeatedSendAndWait (uint8_t *cmd, uint16_t wait_time, size_t repeat, uint16_t delay) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	817b      	strh	r3, [r7, #10]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	813b      	strh	r3, [r7, #8]
	if ((cmd == NULL) || (wait_time <= 0) || (repeat <= 0)) {
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <MODEM_API_RepeatedSendAndWait+0x26>
 8001cee:	897b      	ldrh	r3, [r7, #10]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <MODEM_API_RepeatedSendAndWait+0x26>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d117      	bne.n	8001d2a <MODEM_API_RepeatedSendAndWait+0x56>
		return eModemStatus_Error;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e019      	b.n	8001d32 <MODEM_API_RepeatedSendAndWait+0x5e>
	}

	eModemStatus_t result;

	while (repeat > 0) {
		result = MODEM_API_SendAndWait(cmd, wait_time);
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	4619      	mov	r1, r3
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7ff ffb2 	bl	8001c6c <MODEM_API_SendAndWait>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	75fb      	strb	r3, [r7, #23]
		if (result != eModemStatus_Error) {
 8001d0c:	7dfb      	ldrb	r3, [r7, #23]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <MODEM_API_RepeatedSendAndWait+0x42>
			return result;
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	e00d      	b.n	8001d32 <MODEM_API_RepeatedSendAndWait+0x5e>
		}

		repeat--;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	607b      	str	r3, [r7, #4]
		if (repeat > 0) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <MODEM_API_RepeatedSendAndWait+0x56>
			osDelay(delay);
 8001d22:	893b      	ldrh	r3, [r7, #8]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 faa1 	bl	800526c <osDelay>
	while (repeat > 0) {
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e6      	bne.n	8001cfe <MODEM_API_RepeatedSendAndWait+0x2a>
		}
	}

	return result;
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <MODEM_API_Lock>:

bool MODEM_API_Lock (void) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
    if (modem_api_mutex == NULL) {
 8001d40:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <MODEM_API_Lock+0x30>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <MODEM_API_Lock+0x10>
        return false;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e00c      	b.n	8001d66 <MODEM_API_Lock+0x2a>
    }
    if (osMutexAcquire(modem_api_mutex, osWaitForever) == osOK) {
 8001d4c:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <MODEM_API_Lock+0x30>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 fd06 	bl	8005766 <osMutexAcquire>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <MODEM_API_Lock+0x28>
        return true;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <MODEM_API_Lock+0x2a>
    } else {
        return false;
 8001d64:	2300      	movs	r3, #0
    }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000418 	.word	0x20000418

08001d70 <MODEM_API_Unlock>:

bool MODEM_API_Unlock (void) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
    if (modem_api_mutex == NULL) {
 8001d74:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <MODEM_API_Unlock+0x2c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <MODEM_API_Unlock+0x10>
        return false;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e00a      	b.n	8001d96 <MODEM_API_Unlock+0x26>
    }
    if (osMutexRelease(modem_api_mutex) == osOK) {
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <MODEM_API_Unlock+0x2c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 fd39 	bl	80057fc <osMutexRelease>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <MODEM_API_Unlock+0x24>
        return true;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <MODEM_API_Unlock+0x26>
    } else {
        return false;
 8001d94:	2300      	movs	r3, #0
    }
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000418 	.word	0x20000418

08001da0 <MODEM_API_SetModemStatus>:

void MODEM_API_SetModemStatus (eModemStatus_t status) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
	last_command_status = status;
 8001daa:	4a06      	ldr	r2, [pc, #24]	@ (8001dc4 <MODEM_API_SetModemStatus+0x24>)
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	7013      	strb	r3, [r2, #0]
	osEventFlagsSet(modem_api_event_flag, 0x01);
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <MODEM_API_SetModemStatus+0x28>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2101      	movs	r1, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 fba8 	bl	800550c <osEventFlagsSet>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000010 	.word	0x20000010
 8001dc8:	20000414 	.word	0x20000414

08001dcc <MODEM_CMD_OkHandler>:
#include <stdio.h>
#include "cmd_api.h"
#include "modem_api.h"
#include "modem_cmd_handler.h"

bool MODEM_CMD_OkHandler (sCommandParams_t *cmd_params) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	if (CMD_API_CheckParams(cmd_params)) {
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff fa75 	bl	80012c4 <CMD_API_CheckParams>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MODEM_CMD_OkHandler+0x18>
		return false;
 8001de0:	2300      	movs	r3, #0
 8001de2:	e00c      	b.n	8001dfe <MODEM_CMD_OkHandler+0x32>
	}

	snprintf((char*)cmd_params->reply, cmd_params->reply_length, "MODEM RESPONDED WITH: %s\r\n", cmd_params->params);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6898      	ldr	r0, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68d9      	ldr	r1, [r3, #12]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a05      	ldr	r2, [pc, #20]	@ (8001e08 <MODEM_CMD_OkHandler+0x3c>)
 8001df2:	f007 fbc3 	bl	800957c <sniprintf>
	MODEM_API_SetModemStatus(eModemStatus_Ok);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7ff ffd2 	bl	8001da0 <MODEM_API_SetModemStatus>

	return true;
 8001dfc:	2301      	movs	r3, #1
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	0800a198 	.word	0x0800a198

08001e0c <MODEM_CMD_ErrorHandler>:

bool MODEM_CMD_ErrorHandler (sCommandParams_t *cmd_params) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	if (CMD_API_CheckParams(cmd_params)) {
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff fa55 	bl	80012c4 <CMD_API_CheckParams>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MODEM_CMD_ErrorHandler+0x18>
		return false;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e00c      	b.n	8001e3e <MODEM_CMD_ErrorHandler+0x32>
	}

	snprintf((char*)cmd_params->reply, cmd_params->reply_length, "MODEM RESPONDED WITH: %s\r\n", cmd_params->params);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6898      	ldr	r0, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68d9      	ldr	r1, [r3, #12]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a05      	ldr	r2, [pc, #20]	@ (8001e48 <MODEM_CMD_ErrorHandler+0x3c>)
 8001e32:	f007 fba3 	bl	800957c <sniprintf>
	MODEM_API_SetModemStatus(eModemStatus_Error);
 8001e36:	2001      	movs	r0, #1
 8001e38:	f7ff ffb2 	bl	8001da0 <MODEM_API_SetModemStatus>

	return true;
 8001e3c:	2301      	movs	r3, #1
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	0800a198 	.word	0x0800a198

08001e4c <Network_APP_Init>:
static sNetworkAppTaskParams_t received_task = {0};
static uint8_t socket = 0;

static void Network_APP_Task (void *arguments);

bool Network_APP_Init (void) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	if (network_app_mq == NULL) {
 8001e50:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <Network_APP_Init+0x54>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <Network_APP_Init+0x28>
		network_app_mq = osMessageQueueNew(NETWORK_APP_QUEUE_MSG_SIZE, sizeof(sMessage_t), &network_app_mq_attr);
 8001e58:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <Network_APP_Init+0x58>)
 8001e5a:	2108      	movs	r1, #8
 8001e5c:	200a      	movs	r0, #10
 8001e5e:	f003 fd0a 	bl	8005876 <osMessageQueueNew>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea0 <Network_APP_Init+0x54>)
 8001e66:	6013      	str	r3, [r2, #0]
		if (network_app_mq == NULL) {
 8001e68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <Network_APP_Init+0x54>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <Network_APP_Init+0x28>
			return false;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e012      	b.n	8001e9a <Network_APP_Init+0x4e>
		}
	}

	if (network_app_thread == NULL) {
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <Network_APP_Init+0x5c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10d      	bne.n	8001e98 <Network_APP_Init+0x4c>
		network_app_thread = osThreadNew(Network_APP_Task, NETWORK_APP_THREAD_NO_ARG, &network_app_thread_attr);
 8001e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001eac <Network_APP_Init+0x60>)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	480b      	ldr	r0, [pc, #44]	@ (8001eb0 <Network_APP_Init+0x64>)
 8001e82:	f003 f961 	bl	8005148 <osThreadNew>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <Network_APP_Init+0x5c>)
 8001e8a:	6013      	str	r3, [r2, #0]
		if (network_app_thread == NULL) {
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <Network_APP_Init+0x5c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <Network_APP_Init+0x4c>
			return false;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e000      	b.n	8001e9a <Network_APP_Init+0x4e>
		}
	}

	return true;
 8001e98:	2301      	movs	r3, #1
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000082c 	.word	0x2000082c
 8001ea4:	0800a5b0 	.word	0x0800a5b0
 8001ea8:	20000828 	.word	0x20000828
 8001eac:	0800a58c 	.word	0x0800a58c
 8001eb0:	08001ef9 	.word	0x08001ef9

08001eb4 <Network_APP_AddTask>:

bool Network_APP_AddTask (sNetworkAppTaskParams_t *task_params) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	if ((task_params->params == NULL) || (task_params->task < eNetworkTask_First) || (task_params->task >= eNetworkTask_Last)) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <Network_APP_AddTask+0x18>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <Network_APP_AddTask+0x1c>
		return false;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e00d      	b.n	8001eec <Network_APP_AddTask+0x38>
	}

	if (osMessageQueuePut(network_app_mq, task_params, MESSAGE_PRIORITY, osWaitForever) != osOK) {
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <Network_APP_AddTask+0x40>)
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed8:	2200      	movs	r2, #0
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	f003 fd3e 	bl	800595c <osMessageQueuePut>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <Network_APP_AddTask+0x36>
		return false;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <Network_APP_AddTask+0x38>
	}

	return true;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2000082c 	.word	0x2000082c

08001ef8 <Network_APP_Task>:

static void Network_APP_Task (void *argument) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
    while (1) {
        if (osMessageQueueGet(network_app_mq, &received_task, MESSAGE_PRIORITY, osWaitForever) == osOK) {
 8001f00:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <Network_APP_Task+0x7c>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295
 8001f08:	2200      	movs	r2, #0
 8001f0a:	491b      	ldr	r1, [pc, #108]	@ (8001f78 <Network_APP_Task+0x80>)
 8001f0c:	f003 fd86 	bl	8005a1c <osMessageQueueGet>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f4      	bne.n	8001f00 <Network_APP_Task+0x8>
            switch (received_task.task) {
 8001f16:	4b18      	ldr	r3, [pc, #96]	@ (8001f78 <Network_APP_Task+0x80>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d022      	beq.n	8001f64 <Network_APP_Task+0x6c>
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	dc26      	bgt.n	8001f70 <Network_APP_Task+0x78>
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <Network_APP_Task+0x34>
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d010      	beq.n	8001f4c <Network_APP_Task+0x54>
                    	//debug_err
                    }
                    break;
                }
                default: {
                	break;
 8001f2a:	e021      	b.n	8001f70 <Network_APP_Task+0x78>
                    sNetworkAppConnParams_t *connect_params = (sNetworkAppConnParams_t*)received_task.params;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <Network_APP_Task+0x80>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	60bb      	str	r3, [r7, #8]
                    if (TCP_API_Connect(connect_params->ip, connect_params->port, connect_params->socket) == false) {
 8001f32:	68b8      	ldr	r0, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	8a19      	ldrh	r1, [r3, #16]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	7c9b      	ldrb	r3, [r3, #18]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f000 fa07 	bl	8002350 <TCP_API_Connect>
                    socket = connect_params->socket;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	7c9a      	ldrb	r2, [r3, #18]
 8001f46:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <Network_APP_Task+0x84>)
 8001f48:	701a      	strb	r2, [r3, #0]
                    break;
 8001f4a:	e012      	b.n	8001f72 <Network_APP_Task+0x7a>
                    sNetworkAppSendParams_t *send_params = (sNetworkAppSendParams_t*)received_task.params;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <Network_APP_Task+0x80>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	60fb      	str	r3, [r7, #12]
                    if (TCP_API_Send(send_params->data, send_params->data_length) == false) {
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	f000 fb1d 	bl	800259c <TCP_API_Send>
                    break;
 8001f62:	e006      	b.n	8001f72 <Network_APP_Task+0x7a>
                    if (TCP_API_Disconnect(socket) == false) {
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <Network_APP_Task+0x84>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 faad 	bl	80024c8 <TCP_API_Disconnect>
                    break;
 8001f6e:	e000      	b.n	8001f72 <Network_APP_Task+0x7a>
                	break;
 8001f70:	bf00      	nop
        if (osMessageQueueGet(network_app_mq, &received_task, MESSAGE_PRIORITY, osWaitForever) == osOK) {
 8001f72:	e7c5      	b.n	8001f00 <Network_APP_Task+0x8>
 8001f74:	2000082c 	.word	0x2000082c
 8001f78:	20000830 	.word	0x20000830
 8001f7c:	20000838 	.word	0x20000838

08001f80 <RingBufferInit>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
sRingBuffer_t *RingBufferInit (size_t capacity) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    if (capacity <= 0) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <RingBufferInit+0x12>
        return NULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e028      	b.n	8001fe4 <RingBufferInit+0x64>
    }

    sRingBuffer_t *r_buffer = (sRingBuffer_t *)calloc(1, sizeof(sRingBuffer_t));
 8001f92:	2114      	movs	r1, #20
 8001f94:	2001      	movs	r0, #1
 8001f96:	f007 f993 	bl	80092c0 <calloc>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	60fb      	str	r3, [r7, #12]
    if (r_buffer == NULL) {
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <RingBufferInit+0x28>
        return NULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e01d      	b.n	8001fe4 <RingBufferInit+0x64>
    }

    r_buffer->buffer = (uint8_t *)calloc(capacity, sizeof(uint8_t));
 8001fa8:	2101      	movs	r1, #1
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f007 f988 	bl	80092c0 <calloc>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]
    if (r_buffer->buffer == NULL) {
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d104      	bne.n	8001fca <RingBufferInit+0x4a>
        free(r_buffer);
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f007 f9a1 	bl	8009308 <free>
        return NULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e00c      	b.n	8001fe4 <RingBufferInit+0x64>
    }

    r_buffer->capacity = capacity;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	605a      	str	r2, [r3, #4]
    r_buffer->head = 0;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
    r_buffer->tail = 0;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
    r_buffer->count = 0;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]

    return r_buffer;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <RingBufferIsEmpty>:


bool RingBufferIsEmpty (sRingBuffer_t *r_buffer) {
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
    if (r_buffer == NULL) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <RingBufferIsEmpty+0x12>
        return true;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e006      	b.n	800200c <RingBufferIsEmpty+0x20>
    }

    return r_buffer->count == 0;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf0c      	ite	eq
 8002006:	2301      	moveq	r3, #1
 8002008:	2300      	movne	r3, #0
 800200a:	b2db      	uxtb	r3, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <RingBufferIsFull>:

bool RingBufferIsFull (sRingBuffer_t *r_buffer) {
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
    if (r_buffer == NULL) {
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <RingBufferIsFull+0x12>
        return true;
 8002026:	2301      	movs	r3, #1
 8002028:	e008      	b.n	800203c <RingBufferIsFull+0x24>
    }

    return r_buffer->count == r_buffer->capacity;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	bf0c      	ite	eq
 8002036:	2301      	moveq	r3, #1
 8002038:	2300      	movne	r3, #0
 800203a:	b2db      	uxtb	r3, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <RingBufferEnqueue>:


bool RingBufferEnqueue (sRingBuffer_t *r_buffer, uint8_t data) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
    if (r_buffer == NULL) {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <RingBufferEnqueue+0x16>
        return false;
 800205a:	2300      	movs	r3, #0
 800205c:	e030      	b.n	80020c0 <RingBufferEnqueue+0x78>
    }

    if (RingBufferIsFull(r_buffer)) {
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ffda 	bl	8002018 <RingBufferIsFull>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <RingBufferEnqueue+0x3a>
        r_buffer->tail = (r_buffer->tail + 1) % r_buffer->capacity;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	3301      	adds	r3, #1
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6852      	ldr	r2, [r2, #4]
 8002074:	fbb3 f1f2 	udiv	r1, r3, r2
 8002078:	fb01 f202 	mul.w	r2, r1, r2
 800207c:	1a9a      	subs	r2, r3, r2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	60da      	str	r2, [r3, #12]
    }

    r_buffer->buffer[r_buffer->head] = data;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	4413      	add	r3, r2
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	701a      	strb	r2, [r3, #0]
    r_buffer->head = (r_buffer->head + 1) % r_buffer->capacity;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	3301      	adds	r3, #1
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6852      	ldr	r2, [r2, #4]
 800209a:	fbb3 f1f2 	udiv	r1, r3, r2
 800209e:	fb01 f202 	mul.w	r2, r1, r2
 80020a2:	1a9a      	subs	r2, r3, r2
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	609a      	str	r2, [r3, #8]

    if (r_buffer->count < r_buffer->capacity) {
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d204      	bcs.n	80020be <RingBufferEnqueue+0x76>
        r_buffer->count++;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	611a      	str	r2, [r3, #16]
    }

    return true;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <RingBufferDequeue>:

bool RingBufferDequeue (sRingBuffer_t *r_buffer, uint8_t *data) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
    if ((RingBufferIsEmpty(r_buffer)) || (data == NULL)) {
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ff8a 	bl	8001fec <RingBufferIsEmpty>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <RingBufferDequeue+0x1c>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <RingBufferDequeue+0x20>
        return false;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e019      	b.n	800211c <RingBufferDequeue+0x54>
    }

    *data = r_buffer->buffer[r_buffer->tail];
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	781a      	ldrb	r2, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	701a      	strb	r2, [r3, #0]
    r_buffer->tail = (r_buffer->tail + 1) % r_buffer->capacity;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	3301      	adds	r3, #1
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6852      	ldr	r2, [r2, #4]
 8002102:	fbb3 f1f2 	udiv	r1, r3, r2
 8002106:	fb01 f202 	mul.w	r2, r1, r2
 800210a:	1a9a      	subs	r2, r3, r2
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	60da      	str	r2, [r3, #12]
    r_buffer->count--;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	1e5a      	subs	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	611a      	str	r2, [r3, #16]

    return true;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HAL_MspInit+0x54>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	4a11      	ldr	r2, [pc, #68]	@ (8002178 <HAL_MspInit+0x54>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002138:	6453      	str	r3, [r2, #68]	@ 0x44
 800213a:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <HAL_MspInit+0x54>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <HAL_MspInit+0x54>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <HAL_MspInit+0x54>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	@ 0x40
 8002156:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <HAL_MspInit+0x54>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	210f      	movs	r1, #15
 8002166:	f06f 0001 	mvn.w	r0, #1
 800216a:	f001 fa3f 	bl	80035ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800

0800217c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08e      	sub	sp, #56	@ 0x38
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	4b33      	ldr	r3, [pc, #204]	@ (8002260 <HAL_InitTick+0xe4>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002194:	4a32      	ldr	r2, [pc, #200]	@ (8002260 <HAL_InitTick+0xe4>)
 8002196:	f043 0302 	orr.w	r3, r3, #2
 800219a:	6413      	str	r3, [r2, #64]	@ 0x40
 800219c:	4b30      	ldr	r3, [pc, #192]	@ (8002260 <HAL_InitTick+0xe4>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021a8:	f107 0210 	add.w	r2, r7, #16
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 fec8 	bl	8003f48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021c2:	f001 fead 	bl	8003f20 <HAL_RCC_GetPCLK1Freq>
 80021c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80021c8:	e004      	b.n	80021d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021ca:	f001 fea9 	bl	8003f20 <HAL_RCC_GetPCLK1Freq>
 80021ce:	4603      	mov	r3, r0
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d6:	4a23      	ldr	r2, [pc, #140]	@ (8002264 <HAL_InitTick+0xe8>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	0c9b      	lsrs	r3, r3, #18
 80021de:	3b01      	subs	r3, #1
 80021e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80021e2:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <HAL_InitTick+0xec>)
 80021e4:	4a21      	ldr	r2, [pc, #132]	@ (800226c <HAL_InitTick+0xf0>)
 80021e6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80021e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <HAL_InitTick+0xec>)
 80021ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021ee:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80021f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002268 <HAL_InitTick+0xec>)
 80021f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <HAL_InitTick+0xec>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <HAL_InitTick+0xec>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002202:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <HAL_InitTick+0xec>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002208:	4817      	ldr	r0, [pc, #92]	@ (8002268 <HAL_InitTick+0xec>)
 800220a:	f001 fecf 	bl	8003fac <HAL_TIM_Base_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002214:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002218:	2b00      	cmp	r3, #0
 800221a:	d11b      	bne.n	8002254 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800221c:	4812      	ldr	r0, [pc, #72]	@ (8002268 <HAL_InitTick+0xec>)
 800221e:	f001 ff1f 	bl	8004060 <HAL_TIM_Base_Start_IT>
 8002222:	4603      	mov	r3, r0
 8002224:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002228:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800222c:	2b00      	cmp	r3, #0
 800222e:	d111      	bne.n	8002254 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002230:	201d      	movs	r0, #29
 8002232:	f001 f9f7 	bl	8003624 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b0f      	cmp	r3, #15
 800223a:	d808      	bhi.n	800224e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800223c:	2200      	movs	r2, #0
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	201d      	movs	r0, #29
 8002242:	f001 f9d3 	bl	80035ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002246:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <HAL_InitTick+0xf4>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	e002      	b.n	8002254 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002254:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002258:	4618      	mov	r0, r3
 800225a:	3738      	adds	r7, #56	@ 0x38
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40023800 	.word	0x40023800
 8002264:	431bde83 	.word	0x431bde83
 8002268:	2000083c 	.word	0x2000083c
 800226c:	40000400 	.word	0x40000400
 8002270:	20000028 	.word	0x20000028

08002274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <NMI_Handler+0x4>

0800227c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <HardFault_Handler+0x4>

08002284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002288:	bf00      	nop
 800228a:	e7fd      	b.n	8002288 <MemManage_Handler+0x4>

0800228c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <BusFault_Handler+0x4>

08002294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <UsageFault_Handler+0x4>

0800229c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <TIM3_IRQHandler+0x10>)
 80022b2:	f001 ff37 	bl	8004124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000083c 	.word	0x2000083c

080022c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c8:	4a14      	ldr	r2, [pc, #80]	@ (800231c <_sbrk+0x5c>)
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <_sbrk+0x60>)
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d4:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022dc:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <_sbrk+0x64>)
 80022de:	4a12      	ldr	r2, [pc, #72]	@ (8002328 <_sbrk+0x68>)
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d207      	bcs.n	8002300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f0:	f007 fa02 	bl	80096f8 <__errno>
 80022f4:	4603      	mov	r3, r0
 80022f6:	220c      	movs	r2, #12
 80022f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	e009      	b.n	8002314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002300:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002306:	4b07      	ldr	r3, [pc, #28]	@ (8002324 <_sbrk+0x64>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	4a05      	ldr	r2, [pc, #20]	@ (8002324 <_sbrk+0x64>)
 8002310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20018000 	.word	0x20018000
 8002320:	00000400 	.word	0x00000400
 8002324:	20000884 	.word	0x20000884
 8002328:	20005488 	.word	0x20005488

0800232c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <SystemInit+0x20>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002336:	4a05      	ldr	r2, [pc, #20]	@ (800234c <SystemInit+0x20>)
 8002338:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800233c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <TCP_API_Connect>:
};

static char command_buffer[256] = {0};


bool TCP_API_Connect (uint8_t *ip, uint16_t port, uint8_t socket) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af02      	add	r7, sp, #8
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
	if (MODEM_API_Lock() == false) {
 8002360:	f7ff fcec 	bl	8001d3c <MODEM_API_Lock>
 8002364:	4603      	mov	r3, r0
 8002366:	f083 0301 	eor.w	r3, r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <TCP_API_Connect+0x24>
		return false;
 8002370:	2300      	movs	r3, #0
 8002372:	e093      	b.n	800249c <TCP_API_Connect+0x14c>
	}

	eModemStatus_t status;

	status = MODEM_API_RepeatedSendAndWait(static_tcp_cmd_lut[eTcpCmd_CpinCheck].cmd, TCP_API_TIMEOUT, static_tcp_cmd_lut[eTcpCmd_CpinCheck].repeat, static_tcp_cmd_lut[eTcpCmd_CpinCheck].delay);
 8002374:	484b      	ldr	r0, [pc, #300]	@ (80024a4 <TCP_API_Connect+0x154>)
 8002376:	2201      	movs	r2, #1
 8002378:	2300      	movs	r3, #0
 800237a:	b29b      	uxth	r3, r3
 800237c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002380:	f7ff fca8 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 8002384:	4603      	mov	r3, r0
 8002386:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <TCP_API_Connect+0x46>
		MODEM_API_Unlock();
 800238e:	f7ff fcef 	bl	8001d70 <MODEM_API_Unlock>
		return false;
 8002392:	2300      	movs	r3, #0
 8002394:	e082      	b.n	800249c <TCP_API_Connect+0x14c>
	}

	status = MODEM_API_RepeatedSendAndWait(static_tcp_cmd_lut[eTcpCmd_CsqCheck].cmd, TCP_API_TIMEOUT, static_tcp_cmd_lut[eTcpCmd_CsqCheck].repeat, static_tcp_cmd_lut[eTcpCmd_CsqCheck].delay);
 8002396:	4844      	ldr	r0, [pc, #272]	@ (80024a8 <TCP_API_Connect+0x158>)
 8002398:	2201      	movs	r2, #1
 800239a:	2300      	movs	r3, #0
 800239c:	b29b      	uxth	r3, r3
 800239e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80023a2:	f7ff fc97 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 80023a6:	4603      	mov	r3, r0
 80023a8:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d165      	bne.n	800247c <TCP_API_Connect+0x12c>
		goto error;
	}

	status = MODEM_API_RepeatedSendAndWait(static_tcp_cmd_lut[eTcpCmd_CregCheck].cmd, TCP_API_TIMEOUT, static_tcp_cmd_lut[eTcpCmd_CregCheck].repeat, static_tcp_cmd_lut[eTcpCmd_CregCheck].delay);
 80023b0:	483e      	ldr	r0, [pc, #248]	@ (80024ac <TCP_API_Connect+0x15c>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	2300      	movs	r3, #0
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80023bc:	f7ff fc8a 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d15a      	bne.n	8002480 <TCP_API_Connect+0x130>
		goto error;
	}

	status = MODEM_API_RepeatedSendAndWait(static_tcp_cmd_lut[eTcpCmd_CgAtt].cmd, TCP_API_TIMEOUT, static_tcp_cmd_lut[eTcpCmd_CgAtt].repeat, static_tcp_cmd_lut[eTcpCmd_CgAtt].delay);
 80023ca:	4839      	ldr	r0, [pc, #228]	@ (80024b0 <TCP_API_Connect+0x160>)
 80023cc:	2203      	movs	r2, #3
 80023ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80023d8:	f7ff fc7c 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 80023dc:	4603      	mov	r3, r0
 80023de:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d14e      	bne.n	8002484 <TCP_API_Connect+0x134>
		goto error;
	}

	status = MODEM_API_RepeatedSendAndWait(static_tcp_cmd_lut[eTcpCmd_CgattCheck].cmd, TCP_API_TIMEOUT, static_tcp_cmd_lut[eTcpCmd_CgattCheck].repeat, static_tcp_cmd_lut[eTcpCmd_CgattCheck].delay);
 80023e6:	4833      	ldr	r0, [pc, #204]	@ (80024b4 <TCP_API_Connect+0x164>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	2300      	movs	r3, #0
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80023f2:	f7ff fc6f 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 80023f6:	4603      	mov	r3, r0
 80023f8:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d143      	bne.n	8002488 <TCP_API_Connect+0x138>
		goto error;
	}

	status = MODEM_API_RepeatedSendAndWait(static_tcp_cmd_lut[eTcpCmd_CgdCont].cmd, TCP_API_TIMEOUT, static_tcp_cmd_lut[eTcpCmd_CgdCont].repeat, static_tcp_cmd_lut[eTcpCmd_CgdCont].delay);
 8002400:	482d      	ldr	r0, [pc, #180]	@ (80024b8 <TCP_API_Connect+0x168>)
 8002402:	2203      	movs	r2, #3
 8002404:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002408:	b29b      	uxth	r3, r3
 800240a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800240e:	f7ff fc61 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 8002412:	4603      	mov	r3, r0
 8002414:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d137      	bne.n	800248c <TCP_API_Connect+0x13c>
		goto error;
	}

	snprintf(command_buffer, sizeof(command_buffer), (const char*)static_tcp_cmd_lut[eTcpCmd_CgAct].cmd, socket);
 800241c:	4a27      	ldr	r2, [pc, #156]	@ (80024bc <TCP_API_Connect+0x16c>)
 800241e:	787b      	ldrb	r3, [r7, #1]
 8002420:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002424:	4826      	ldr	r0, [pc, #152]	@ (80024c0 <TCP_API_Connect+0x170>)
 8002426:	f007 f8a9 	bl	800957c <sniprintf>
	status = MODEM_API_RepeatedSendAndWait((uint8_t*)command_buffer, TCP_API_TIMEOUT, static_tcp_cmd_lut[eTcpCmd_CgAct].repeat, static_tcp_cmd_lut[eTcpCmd_CgAct].delay);
 800242a:	2203      	movs	r2, #3
 800242c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002430:	b29b      	uxth	r3, r3
 8002432:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002436:	4822      	ldr	r0, [pc, #136]	@ (80024c0 <TCP_API_Connect+0x170>)
 8002438:	f7ff fc4c 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 800243c:	4603      	mov	r3, r0
 800243e:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d124      	bne.n	8002490 <TCP_API_Connect+0x140>
		goto error;
	}

	snprintf(command_buffer, sizeof(command_buffer), (const char*)static_tcp_cmd_lut[eTcpCmd_CipStart].cmd, ip, port);
 8002446:	4a1f      	ldr	r2, [pc, #124]	@ (80024c4 <TCP_API_Connect+0x174>)
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002452:	481b      	ldr	r0, [pc, #108]	@ (80024c0 <TCP_API_Connect+0x170>)
 8002454:	f007 f892 	bl	800957c <sniprintf>
	status = MODEM_API_RepeatedSendAndWait((uint8_t*)command_buffer, TCP_API_TIMEOUT, static_tcp_cmd_lut[eTcpCmd_CipStart].repeat, static_tcp_cmd_lut[eTcpCmd_CipStart].delay);
 8002458:	2205      	movs	r2, #5
 800245a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800245e:	b29b      	uxth	r3, r3
 8002460:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002464:	4816      	ldr	r0, [pc, #88]	@ (80024c0 <TCP_API_Connect+0x170>)
 8002466:	f7ff fc35 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 800246a:	4603      	mov	r3, r0
 800246c:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10f      	bne.n	8002494 <TCP_API_Connect+0x144>
		goto error;
	}

	MODEM_API_Unlock();
 8002474:	f7ff fc7c 	bl	8001d70 <MODEM_API_Unlock>
	return true;
 8002478:	2301      	movs	r3, #1
 800247a:	e00f      	b.n	800249c <TCP_API_Connect+0x14c>
		goto error;
 800247c:	bf00      	nop
 800247e:	e00a      	b.n	8002496 <TCP_API_Connect+0x146>
		goto error;
 8002480:	bf00      	nop
 8002482:	e008      	b.n	8002496 <TCP_API_Connect+0x146>
		goto error;
 8002484:	bf00      	nop
 8002486:	e006      	b.n	8002496 <TCP_API_Connect+0x146>
		goto error;
 8002488:	bf00      	nop
 800248a:	e004      	b.n	8002496 <TCP_API_Connect+0x146>
		goto error;
 800248c:	bf00      	nop
 800248e:	e002      	b.n	8002496 <TCP_API_Connect+0x146>
		goto error;
 8002490:	bf00      	nop
 8002492:	e000      	b.n	8002496 <TCP_API_Connect+0x146>
		goto error;
 8002494:	bf00      	nop

error:
	MODEM_API_Unlock();
 8002496:	f7ff fc6b 	bl	8001d70 <MODEM_API_Unlock>
	return false;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	0800a1e4 	.word	0x0800a1e4
 80024a8:	0800a1f0 	.word	0x0800a1f0
 80024ac:	0800a1fc 	.word	0x0800a1fc
 80024b0:	0800a224 	.word	0x0800a224
 80024b4:	0800a234 	.word	0x0800a234
 80024b8:	0800a208 	.word	0x0800a208
 80024bc:	0800a240 	.word	0x0800a240
 80024c0:	20000888 	.word	0x20000888
 80024c4:	0800a250 	.word	0x0800a250

080024c8 <TCP_API_Disconnect>:

bool TCP_API_Disconnect (uint8_t socket) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
	if (MODEM_API_Lock() == false) {
 80024d2:	f7ff fc33 	bl	8001d3c <MODEM_API_Lock>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f083 0301 	eor.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <TCP_API_Disconnect+0x1e>
		return false;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e04c      	b.n	8002580 <TCP_API_Disconnect+0xb8>
	}

	eModemStatus_t status;

	status = MODEM_API_RepeatedSendAndWait(static_tcp_cmd_lut[eTcpCmd_CipClose].cmd, TCP_API_TIMEOUT, static_tcp_cmd_lut[eTcpCmd_CipClose].repeat, static_tcp_cmd_lut[eTcpCmd_CipClose].delay);
 80024e6:	4828      	ldr	r0, [pc, #160]	@ (8002588 <TCP_API_Disconnect+0xc0>)
 80024e8:	2203      	movs	r2, #3
 80024ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80024f4:	f7ff fbee 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 80024f8:	4603      	mov	r3, r0
 80024fa:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d134      	bne.n	800256c <TCP_API_Disconnect+0xa4>
		goto error;
	}

	status = MODEM_API_RepeatedSendAndWait(static_tcp_cmd_lut[eTcpCmd_CipShut].cmd, TCP_API_TIMEOUT, static_tcp_cmd_lut[eTcpCmd_CipShut].repeat, static_tcp_cmd_lut[eTcpCmd_CipShut].delay);
 8002502:	4822      	ldr	r0, [pc, #136]	@ (800258c <TCP_API_Disconnect+0xc4>)
 8002504:	2203      	movs	r2, #3
 8002506:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800250a:	b29b      	uxth	r3, r3
 800250c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002510:	f7ff fbe0 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 8002514:	4603      	mov	r3, r0
 8002516:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d128      	bne.n	8002570 <TCP_API_Disconnect+0xa8>
		goto error;
	}

	snprintf(command_buffer, sizeof(command_buffer), (const char*)static_tcp_cmd_lut[eTcpCmd_CgDeact].cmd, socket);
 800251e:	4a1c      	ldr	r2, [pc, #112]	@ (8002590 <TCP_API_Disconnect+0xc8>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002526:	481b      	ldr	r0, [pc, #108]	@ (8002594 <TCP_API_Disconnect+0xcc>)
 8002528:	f007 f828 	bl	800957c <sniprintf>
	status = MODEM_API_RepeatedSendAndWait((uint8_t*)command_buffer, TCP_API_TIMEOUT, static_tcp_cmd_lut[eTcpCmd_CgDeact].repeat, static_tcp_cmd_lut[eTcpCmd_CgDeact].delay);
 800252c:	2203      	movs	r2, #3
 800252e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002532:	b29b      	uxth	r3, r3
 8002534:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002538:	4816      	ldr	r0, [pc, #88]	@ (8002594 <TCP_API_Disconnect+0xcc>)
 800253a:	f7ff fbcb 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 800253e:	4603      	mov	r3, r0
 8002540:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d115      	bne.n	8002574 <TCP_API_Disconnect+0xac>
		goto error;
	}

	status = MODEM_API_RepeatedSendAndWait(static_tcp_cmd_lut[eTcpCmd_CgDeatt].cmd, TCP_API_TIMEOUT, static_tcp_cmd_lut[eTcpCmd_CgDeatt].repeat, static_tcp_cmd_lut[eTcpCmd_CgDeatt].delay);
 8002548:	4813      	ldr	r0, [pc, #76]	@ (8002598 <TCP_API_Disconnect+0xd0>)
 800254a:	2203      	movs	r2, #3
 800254c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002550:	b29b      	uxth	r3, r3
 8002552:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002556:	f7ff fbbd 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 800255a:	4603      	mov	r3, r0
 800255c:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d109      	bne.n	8002578 <TCP_API_Disconnect+0xb0>
		goto error;
	}

	MODEM_API_Unlock();
 8002564:	f7ff fc04 	bl	8001d70 <MODEM_API_Unlock>
	return true;
 8002568:	2301      	movs	r3, #1
 800256a:	e009      	b.n	8002580 <TCP_API_Disconnect+0xb8>
		goto error;
 800256c:	bf00      	nop
 800256e:	e004      	b.n	800257a <TCP_API_Disconnect+0xb2>
		goto error;
 8002570:	bf00      	nop
 8002572:	e002      	b.n	800257a <TCP_API_Disconnect+0xb2>
		goto error;
 8002574:	bf00      	nop
 8002576:	e000      	b.n	800257a <TCP_API_Disconnect+0xb2>
		goto error;
 8002578:	bf00      	nop

error:
	MODEM_API_Unlock();
 800257a:	f7ff fbf9 	bl	8001d70 <MODEM_API_Unlock>
	return false;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	0800a280 	.word	0x0800a280
 800258c:	0800a290 	.word	0x0800a290
 8002590:	0800a2a0 	.word	0x0800a2a0
 8002594:	20000888 	.word	0x20000888
 8002598:	0800a2b0 	.word	0x0800a2b0

0800259c <TCP_API_Send>:

bool TCP_API_Send (uint8_t *data, size_t data_length) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
	if (MODEM_API_Lock() == false) {
 80025a6:	f7ff fbc9 	bl	8001d3c <MODEM_API_Lock>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f083 0301 	eor.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <TCP_API_Send+0x1e>
		return false;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e02e      	b.n	8002618 <TCP_API_Send+0x7c>
	}

	eModemStatus_t status;

	status = MODEM_API_RepeatedSendAndWait(static_tcp_cmd_lut[eTcpCmd_CipSend].cmd, TCP_API_TIMEOUT, static_tcp_cmd_lut[eTcpCmd_CipSend].repeat, static_tcp_cmd_lut[eTcpCmd_CipSend].delay);
 80025ba:	4819      	ldr	r0, [pc, #100]	@ (8002620 <TCP_API_Send+0x84>)
 80025bc:	2201      	movs	r2, #1
 80025be:	2300      	movs	r3, #0
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80025c6:	f7ff fb85 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 80025ca:	4603      	mov	r3, r0
 80025cc:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d11b      	bne.n	800260c <TCP_API_Send+0x70>
		goto error;
	}

	strncpy(command_buffer, (char*)data, sizeof(command_buffer));
 80025d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4812      	ldr	r0, [pc, #72]	@ (8002624 <TCP_API_Send+0x88>)
 80025dc:	f007 f83e 	bl	800965c <strncpy>
	strncat(command_buffer, END_OF_DATA_CHAR, 1);
 80025e0:	2201      	movs	r2, #1
 80025e2:	4911      	ldr	r1, [pc, #68]	@ (8002628 <TCP_API_Send+0x8c>)
 80025e4:	480f      	ldr	r0, [pc, #60]	@ (8002624 <TCP_API_Send+0x88>)
 80025e6:	f007 f814 	bl	8009612 <strncat>

	status = MODEM_API_RepeatedSendAndWait((uint8_t*)command_buffer, TCP_API_TIMEOUT, 3, 500);
 80025ea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80025ee:	2203      	movs	r2, #3
 80025f0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80025f4:	480b      	ldr	r0, [pc, #44]	@ (8002624 <TCP_API_Send+0x88>)
 80025f6:	f7ff fb6d 	bl	8001cd4 <MODEM_API_RepeatedSendAndWait>
 80025fa:	4603      	mov	r3, r0
 80025fc:	73fb      	strb	r3, [r7, #15]
	if (status != eModemStatus_Ok) {
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <TCP_API_Send+0x74>
		goto error;
	}

	MODEM_API_Unlock();
 8002604:	f7ff fbb4 	bl	8001d70 <MODEM_API_Unlock>
	return true;
 8002608:	2301      	movs	r3, #1
 800260a:	e005      	b.n	8002618 <TCP_API_Send+0x7c>
		goto error;
 800260c:	bf00      	nop
 800260e:	e000      	b.n	8002612 <TCP_API_Send+0x76>
		goto error;
 8002610:	bf00      	nop

error:
	MODEM_API_Unlock();
 8002612:	f7ff fbad 	bl	8001d70 <MODEM_API_Unlock>
	return false;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	0800a270 	.word	0x0800a270
 8002624:	20000888 	.word	0x20000888
 8002628:	0800a2c0 	.word	0x0800a2c0

0800262c <UART_API_Task>:
static void UART_API_Task (void *argument);
static bool UART_API_IsDelimiterReceived (sUartApiTaskData_t *task_data);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void UART_API_Task (void *argument) {
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b089      	sub	sp, #36	@ 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
    while (1) {
        for (eUartApiPort_t port = eUartApiPort_First; port < eUartApiPort_Last; port++) {
 8002634:	2300      	movs	r3, #0
 8002636:	77fb      	strb	r3, [r7, #31]
 8002638:	e1cf      	b.n	80029da <UART_API_Task+0x3ae>
            if (g_dynamic_uart_api_lut[port].is_initialized == false) {
 800263a:	7ffa      	ldrb	r2, [r7, #31]
 800263c:	49b9      	ldr	r1, [pc, #740]	@ (8002924 <UART_API_Task+0x2f8>)
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	3315      	adds	r3, #21
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	f083 0301 	eor.w	r3, r3, #1
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 81b5 	bne.w	80029c2 <UART_API_Task+0x396>
                continue;
            }

            switch (g_dynamic_uart_api_lut[port].state) {
 8002658:	7ffa      	ldrb	r2, [r7, #31]
 800265a:	49b2      	ldr	r1, [pc, #712]	@ (8002924 <UART_API_Task+0x2f8>)
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	3314      	adds	r3, #20
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b02      	cmp	r3, #2
 800266c:	f000 8177 	beq.w	800295e <UART_API_Task+0x332>
 8002670:	2b02      	cmp	r3, #2
 8002672:	f300 81a8 	bgt.w	80029c6 <UART_API_Task+0x39a>
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <UART_API_Task+0x56>
 800267a:	2b01      	cmp	r3, #1
 800267c:	f000 8157 	beq.w	800292e <UART_API_Task+0x302>

                    g_dynamic_uart_api_lut[port].state = eUartApiState_Initialize;
                    break;
                }
                default: {
                    break;
 8002680:	e1a1      	b.n	80029c6 <UART_API_Task+0x39a>
                    g_dynamic_uart_api_lut[port].buffer = HEAP_API_Calloc(g_static_uart_api_lut[port].buffer_size, sizeof(char));
 8002682:	7ffa      	ldrb	r2, [r7, #31]
 8002684:	49a8      	ldr	r1, [pc, #672]	@ (8002928 <UART_API_Task+0x2fc>)
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	440b      	add	r3, r1
 8002690:	3304      	adds	r3, #4
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	7ffc      	ldrb	r4, [r7, #31]
 8002696:	2201      	movs	r2, #1
 8002698:	4619      	mov	r1, r3
 800269a:	2001      	movs	r0, #1
 800269c:	f7ff f8e4 	bl	8001868 <HEAP_API_Alloc>
 80026a0:	4602      	mov	r2, r0
 80026a2:	49a0      	ldr	r1, [pc, #640]	@ (8002924 <UART_API_Task+0x2f8>)
 80026a4:	4623      	mov	r3, r4
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	1b1b      	subs	r3, r3, r4
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	3304      	adds	r3, #4
 80026b0:	601a      	str	r2, [r3, #0]
                    if (g_dynamic_uart_api_lut[port].buffer == NULL) {
 80026b2:	7ffa      	ldrb	r2, [r7, #31]
 80026b4:	499b      	ldr	r1, [pc, #620]	@ (8002924 <UART_API_Task+0x2f8>)
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3304      	adds	r3, #4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8180 	beq.w	80029ca <UART_API_Task+0x39e>
                    g_dynamic_uart_api_lut[port].index = 0;
 80026ca:	7ffa      	ldrb	r2, [r7, #31]
 80026cc:	4995      	ldr	r1, [pc, #596]	@ (8002924 <UART_API_Task+0x2f8>)
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	3308      	adds	r3, #8
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
                    g_dynamic_uart_api_lut[port].state = eUartApiState_Collect;
 80026de:	7ffa      	ldrb	r2, [r7, #31]
 80026e0:	4990      	ldr	r1, [pc, #576]	@ (8002924 <UART_API_Task+0x2f8>)
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	3314      	adds	r3, #20
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
                    while (UART_Driver_Read(port, &symbol) == true) {
 80026f2:	e11c      	b.n	800292e <UART_API_Task+0x302>
                        g_dynamic_uart_api_lut[port].buffer[g_dynamic_uart_api_lut[port].index] = symbol;
 80026f4:	7ffa      	ldrb	r2, [r7, #31]
 80026f6:	498b      	ldr	r1, [pc, #556]	@ (8002924 <UART_API_Task+0x2f8>)
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	3304      	adds	r3, #4
 8002704:	6819      	ldr	r1, [r3, #0]
 8002706:	7ffa      	ldrb	r2, [r7, #31]
 8002708:	4886      	ldr	r0, [pc, #536]	@ (8002924 <UART_API_Task+0x2f8>)
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4403      	add	r3, r0
 8002714:	3308      	adds	r3, #8
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	440b      	add	r3, r1
 800271a:	7dfa      	ldrb	r2, [r7, #23]
 800271c:	701a      	strb	r2, [r3, #0]
                        g_dynamic_uart_api_lut[port].index++;
 800271e:	7ffa      	ldrb	r2, [r7, #31]
 8002720:	4980      	ldr	r1, [pc, #512]	@ (8002924 <UART_API_Task+0x2f8>)
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3308      	adds	r3, #8
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	1c59      	adds	r1, r3, #1
 8002732:	487c      	ldr	r0, [pc, #496]	@ (8002924 <UART_API_Task+0x2f8>)
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4403      	add	r3, r0
 800273e:	3308      	adds	r3, #8
 8002740:	6019      	str	r1, [r3, #0]
                        if (g_dynamic_uart_api_lut[port].index >= g_static_uart_api_lut[port].buffer_size) {
 8002742:	7ffa      	ldrb	r2, [r7, #31]
 8002744:	4977      	ldr	r1, [pc, #476]	@ (8002924 <UART_API_Task+0x2f8>)
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3308      	adds	r3, #8
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	7ffa      	ldrb	r2, [r7, #31]
 8002756:	4874      	ldr	r0, [pc, #464]	@ (8002928 <UART_API_Task+0x2fc>)
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	4403      	add	r3, r0
 8002762:	3304      	adds	r3, #4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4299      	cmp	r1, r3
 8002768:	d320      	bcc.n	80027ac <UART_API_Task+0x180>
                            memset(g_dynamic_uart_api_lut[port].buffer, 0, g_static_uart_api_lut[port].buffer_size);
 800276a:	7ffa      	ldrb	r2, [r7, #31]
 800276c:	496d      	ldr	r1, [pc, #436]	@ (8002924 <UART_API_Task+0x2f8>)
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	3304      	adds	r3, #4
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	7ffa      	ldrb	r2, [r7, #31]
 800277e:	496a      	ldr	r1, [pc, #424]	@ (8002928 <UART_API_Task+0x2fc>)
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	440b      	add	r3, r1
 800278a:	3304      	adds	r3, #4
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	2100      	movs	r1, #0
 8002792:	f006 ff29 	bl	80095e8 <memset>
                            g_dynamic_uart_api_lut[port].index = 0;
 8002796:	7ffa      	ldrb	r2, [r7, #31]
 8002798:	4962      	ldr	r1, [pc, #392]	@ (8002924 <UART_API_Task+0x2f8>)
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3308      	adds	r3, #8
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
                            break;
 80027aa:	e0cd      	b.n	8002948 <UART_API_Task+0x31c>
                        if (g_dynamic_uart_api_lut[port].index == 1 && symbol == '>') {
 80027ac:	7ffa      	ldrb	r2, [r7, #31]
 80027ae:	495d      	ldr	r1, [pc, #372]	@ (8002924 <UART_API_Task+0x2f8>)
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	3308      	adds	r3, #8
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d103      	bne.n	80027ca <UART_API_Task+0x19e>
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80027c6:	f000 80b1 	beq.w	800292c <UART_API_Task+0x300>
                        if (g_dynamic_uart_api_lut[port].index == 2 && g_dynamic_uart_api_lut[port].buffer[0] == '>' && symbol == ' ') {
 80027ca:	7ffa      	ldrb	r2, [r7, #31]
 80027cc:	4955      	ldr	r1, [pc, #340]	@ (8002924 <UART_API_Task+0x2f8>)
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	3308      	adds	r3, #8
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d140      	bne.n	8002862 <UART_API_Task+0x236>
 80027e0:	7ffa      	ldrb	r2, [r7, #31]
 80027e2:	4950      	ldr	r1, [pc, #320]	@ (8002924 <UART_API_Task+0x2f8>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	3304      	adds	r3, #4
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80027f6:	d134      	bne.n	8002862 <UART_API_Task+0x236>
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d131      	bne.n	8002862 <UART_API_Task+0x236>
                        	g_dynamic_uart_api_lut[port].index--;
 80027fe:	7ffa      	ldrb	r2, [r7, #31]
 8002800:	4948      	ldr	r1, [pc, #288]	@ (8002924 <UART_API_Task+0x2f8>)
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3308      	adds	r3, #8
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	1e59      	subs	r1, r3, #1
 8002812:	4844      	ldr	r0, [pc, #272]	@ (8002924 <UART_API_Task+0x2f8>)
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4403      	add	r3, r0
 800281e:	3308      	adds	r3, #8
 8002820:	6019      	str	r1, [r3, #0]
                        	g_dynamic_uart_api_lut[port].buffer[g_dynamic_uart_api_lut[port].index] = '\0';
 8002822:	7ffa      	ldrb	r2, [r7, #31]
 8002824:	493f      	ldr	r1, [pc, #252]	@ (8002924 <UART_API_Task+0x2f8>)
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	3304      	adds	r3, #4
 8002832:	6819      	ldr	r1, [r3, #0]
 8002834:	7ffa      	ldrb	r2, [r7, #31]
 8002836:	483b      	ldr	r0, [pc, #236]	@ (8002924 <UART_API_Task+0x2f8>)
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4403      	add	r3, r0
 8002842:	3308      	adds	r3, #8
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	440b      	add	r3, r1
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
                        	g_dynamic_uart_api_lut[port].state = eUartApiState_Flush;
 800284c:	7ffa      	ldrb	r2, [r7, #31]
 800284e:	4935      	ldr	r1, [pc, #212]	@ (8002924 <UART_API_Task+0x2f8>)
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	3314      	adds	r3, #20
 800285c:	2202      	movs	r2, #2
 800285e:	701a      	strb	r2, [r3, #0]
                            break;
 8002860:	e072      	b.n	8002948 <UART_API_Task+0x31c>
                        if (symbol != g_dynamic_uart_api_lut[port].delimiter[g_dynamic_uart_api_lut[port].delimiter_length - 1]) {
 8002862:	7ffa      	ldrb	r2, [r7, #31]
 8002864:	492f      	ldr	r1, [pc, #188]	@ (8002924 <UART_API_Task+0x2f8>)
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	330c      	adds	r3, #12
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	7ffa      	ldrb	r2, [r7, #31]
 8002876:	482b      	ldr	r0, [pc, #172]	@ (8002924 <UART_API_Task+0x2f8>)
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4403      	add	r3, r0
 8002882:	3310      	adds	r3, #16
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3b01      	subs	r3, #1
 8002888:	440b      	add	r3, r1
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	429a      	cmp	r2, r3
 8002890:	d159      	bne.n	8002946 <UART_API_Task+0x31a>
                        if (UART_API_IsDelimiterReceived(&g_dynamic_uart_api_lut[port]) == true) {
 8002892:	7ffa      	ldrb	r2, [r7, #31]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4a21      	ldr	r2, [pc, #132]	@ (8002924 <UART_API_Task+0x2f8>)
 800289e:	4413      	add	r3, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f8a1 	bl	80029e8 <UART_API_IsDelimiterReceived>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d040      	beq.n	800292e <UART_API_Task+0x302>
                        	g_dynamic_uart_api_lut[port].index -= g_dynamic_uart_api_lut[port].delimiter_length;
 80028ac:	7ffa      	ldrb	r2, [r7, #31]
 80028ae:	491d      	ldr	r1, [pc, #116]	@ (8002924 <UART_API_Task+0x2f8>)
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	3308      	adds	r3, #8
 80028bc:	6819      	ldr	r1, [r3, #0]
 80028be:	7ffa      	ldrb	r2, [r7, #31]
 80028c0:	4818      	ldr	r0, [pc, #96]	@ (8002924 <UART_API_Task+0x2f8>)
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4403      	add	r3, r0
 80028cc:	3310      	adds	r3, #16
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	7ffa      	ldrb	r2, [r7, #31]
 80028d2:	1ac9      	subs	r1, r1, r3
 80028d4:	4813      	ldr	r0, [pc, #76]	@ (8002924 <UART_API_Task+0x2f8>)
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4403      	add	r3, r0
 80028e0:	3308      	adds	r3, #8
 80028e2:	6019      	str	r1, [r3, #0]
                        	g_dynamic_uart_api_lut[port].buffer[g_dynamic_uart_api_lut[port].index] = '\0';
 80028e4:	7ffa      	ldrb	r2, [r7, #31]
 80028e6:	490f      	ldr	r1, [pc, #60]	@ (8002924 <UART_API_Task+0x2f8>)
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	3304      	adds	r3, #4
 80028f4:	6819      	ldr	r1, [r3, #0]
 80028f6:	7ffa      	ldrb	r2, [r7, #31]
 80028f8:	480a      	ldr	r0, [pc, #40]	@ (8002924 <UART_API_Task+0x2f8>)
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4403      	add	r3, r0
 8002904:	3308      	adds	r3, #8
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	440b      	add	r3, r1
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
                            g_dynamic_uart_api_lut[port].state = eUartApiState_Flush;
 800290e:	7ffa      	ldrb	r2, [r7, #31]
 8002910:	4904      	ldr	r1, [pc, #16]	@ (8002924 <UART_API_Task+0x2f8>)
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3314      	adds	r3, #20
 800291e:	2202      	movs	r2, #2
 8002920:	701a      	strb	r2, [r3, #0]
                            break;
 8002922:	e011      	b.n	8002948 <UART_API_Task+0x31c>
 8002924:	2000098c 	.word	0x2000098c
 8002928:	0800a604 	.word	0x0800a604
                            continue;
 800292c:	bf00      	nop
                    while (UART_Driver_Read(port, &symbol) == true) {
 800292e:	f107 0217 	add.w	r2, r7, #23
 8002932:	7ffb      	ldrb	r3, [r7, #31]
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fd10 	bl	800335c <UART_Driver_Read>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	f47f aed8 	bne.w	80026f4 <UART_API_Task+0xc8>
 8002944:	e000      	b.n	8002948 <UART_API_Task+0x31c>
                            break;
 8002946:	bf00      	nop
                    if (g_dynamic_uart_api_lut[port].state != eUartApiState_Flush) {
 8002948:	7ffa      	ldrb	r2, [r7, #31]
 800294a:	4926      	ldr	r1, [pc, #152]	@ (80029e4 <UART_API_Task+0x3b8>)
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3314      	adds	r3, #20
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d137      	bne.n	80029ce <UART_API_Task+0x3a2>
                    sMessage_t message = {.message = g_dynamic_uart_api_lut[port].buffer, .message_length = g_dynamic_uart_api_lut[port].index};
 800295e:	7ffa      	ldrb	r2, [r7, #31]
 8002960:	4920      	ldr	r1, [pc, #128]	@ (80029e4 <UART_API_Task+0x3b8>)
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3304      	adds	r3, #4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	7ffa      	ldrb	r2, [r7, #31]
 8002974:	491b      	ldr	r1, [pc, #108]	@ (80029e4 <UART_API_Task+0x3b8>)
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3308      	adds	r3, #8
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	613b      	str	r3, [r7, #16]
                    osStatus_t status = osMessageQueuePut(g_dynamic_uart_api_lut[port].message_queue_id, &message, MESSAGE_PRIORITY, osWaitForever);
 8002986:	7ffa      	ldrb	r2, [r7, #31]
 8002988:	4916      	ldr	r1, [pc, #88]	@ (80029e4 <UART_API_Task+0x3b8>)
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	f107 010c 	add.w	r1, r7, #12
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	2200      	movs	r2, #0
 80029a0:	f002 ffdc 	bl	800595c <osMessageQueuePut>
 80029a4:	61b8      	str	r0, [r7, #24]
                    if (status != osOK) {
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d112      	bne.n	80029d2 <UART_API_Task+0x3a6>
                    g_dynamic_uart_api_lut[port].state = eUartApiState_Initialize;
 80029ac:	7ffa      	ldrb	r2, [r7, #31]
 80029ae:	490d      	ldr	r1, [pc, #52]	@ (80029e4 <UART_API_Task+0x3b8>)
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	3314      	adds	r3, #20
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
                    break;
 80029c0:	e008      	b.n	80029d4 <UART_API_Task+0x3a8>
                continue;
 80029c2:	bf00      	nop
 80029c4:	e006      	b.n	80029d4 <UART_API_Task+0x3a8>
                    break;
 80029c6:	bf00      	nop
 80029c8:	e004      	b.n	80029d4 <UART_API_Task+0x3a8>
                        continue;
 80029ca:	bf00      	nop
 80029cc:	e002      	b.n	80029d4 <UART_API_Task+0x3a8>
                        break;
 80029ce:	bf00      	nop
 80029d0:	e000      	b.n	80029d4 <UART_API_Task+0x3a8>
                        break;
 80029d2:	bf00      	nop
        for (eUartApiPort_t port = eUartApiPort_First; port < eUartApiPort_Last; port++) {
 80029d4:	7ffb      	ldrb	r3, [r7, #31]
 80029d6:	3301      	adds	r3, #1
 80029d8:	77fb      	strb	r3, [r7, #31]
 80029da:	7ffb      	ldrb	r3, [r7, #31]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	f67f ae2c 	bls.w	800263a <UART_API_Task+0xe>
 80029e2:	e627      	b.n	8002634 <UART_API_Task+0x8>
 80029e4:	2000098c 	.word	0x2000098c

080029e8 <UART_API_IsDelimiterReceived>:

        }
    }
}

static bool UART_API_IsDelimiterReceived (sUartApiTaskData_t *task_data) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
    if ((task_data->buffer == NULL) || (task_data->index < task_data->delimiter_length) || (task_data->delimiter == NULL) || (task_data->delimiter_length <= 0)) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00d      	beq.n	8002a14 <UART_API_IsDelimiterReceived+0x2c>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d307      	bcc.n	8002a14 <UART_API_IsDelimiterReceived+0x2c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <UART_API_IsDelimiterReceived+0x2c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <UART_API_IsDelimiterReceived+0x30>
        return false;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e016      	b.n	8002a46 <UART_API_IsDelimiterReceived+0x5e>
    }

    const char *start_index = (char*)task_data->buffer + task_data->index - task_data->delimiter_length;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6899      	ldr	r1, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	1acb      	subs	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

    return strncmp(start_index, (char*)task_data->delimiter, task_data->delimiter_length) == 0;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68d9      	ldr	r1, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f006 fdff 	bl	8009638 <strncmp>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <UART_API_Init>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool UART_API_Init (eUartApiPort_t port, uint32_t baudrate, const char *delimiter, size_t delimiter_length) {
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartApiPort_First) || (port >= eUartApiPort_Last)) {
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <UART_API_Init+0x1a>
        return false;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e0a6      	b.n	8002bb8 <UART_API_Init+0x168>
    }

    if (UART_Driver_Init(port, baudrate) == false) {
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fb0c 	bl	800308c <UART_Driver_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f083 0301 	eor.w	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <UART_API_Init+0x34>
        return false;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e099      	b.n	8002bb8 <UART_API_Init+0x168>
    }

    if (delimiter_length <= 0) {
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <UART_API_Init+0x3e>
        return false;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e094      	b.n	8002bb8 <UART_API_Init+0x168>
    }

    g_dynamic_uart_api_lut[port].delimiter = HEAP_API_Calloc(delimiter_length, sizeof(char));
 8002a8e:	7bfc      	ldrb	r4, [r7, #15]
 8002a90:	2201      	movs	r2, #1
 8002a92:	6839      	ldr	r1, [r7, #0]
 8002a94:	2001      	movs	r0, #1
 8002a96:	f7fe fee7 	bl	8001868 <HEAP_API_Alloc>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	4948      	ldr	r1, [pc, #288]	@ (8002bc0 <UART_API_Init+0x170>)
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	1b1b      	subs	r3, r3, r4
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	330c      	adds	r3, #12
 8002aaa:	601a      	str	r2, [r3, #0]
    if (g_dynamic_uart_api_lut[port].delimiter == NULL) {
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	4944      	ldr	r1, [pc, #272]	@ (8002bc0 <UART_API_Init+0x170>)
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	330c      	adds	r3, #12
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <UART_API_Init+0x76>
            return false;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e078      	b.n	8002bb8 <UART_API_Init+0x168>
    }
	memcpy(g_dynamic_uart_api_lut[port].delimiter, delimiter, delimiter_length);
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	493d      	ldr	r1, [pc, #244]	@ (8002bc0 <UART_API_Init+0x170>)
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f006 fe37 	bl	8009750 <memcpy>

    g_dynamic_uart_api_lut[port].delimiter_length = delimiter_length;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	4936      	ldr	r1, [pc, #216]	@ (8002bc0 <UART_API_Init+0x170>)
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	3310      	adds	r3, #16
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	601a      	str	r2, [r3, #0]

    g_dynamic_uart_api_lut[port].message_queue_id = osMessageQueueNew(MESSAGE_QUEUE_SIZE, sizeof(sMessage_t), &g_static_uart_api_lut[port].queue_attributes);
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	3308      	adds	r3, #8
 8002b02:	4a30      	ldr	r2, [pc, #192]	@ (8002bc4 <UART_API_Init+0x174>)
 8002b04:	4413      	add	r3, r2
 8002b06:	7bfc      	ldrb	r4, [r7, #15]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2108      	movs	r1, #8
 8002b0c:	2008      	movs	r0, #8
 8002b0e:	f002 feb2 	bl	8005876 <osMessageQueueNew>
 8002b12:	4602      	mov	r2, r0
 8002b14:	492a      	ldr	r1, [pc, #168]	@ (8002bc0 <UART_API_Init+0x170>)
 8002b16:	4623      	mov	r3, r4
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	1b1b      	subs	r3, r3, r4
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	601a      	str	r2, [r3, #0]
    if (g_dynamic_uart_api_lut[port].message_queue_id == NULL) {
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	4926      	ldr	r1, [pc, #152]	@ (8002bc0 <UART_API_Init+0x170>)
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <UART_API_Init+0xea>
        return false;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e03e      	b.n	8002bb8 <UART_API_Init+0x168>
    }

    g_dynamic_uart_api_lut[port].mutex_id = osMutexNew(&g_static_uart_api_lut[port].mutex_attributes);
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	3320      	adds	r3, #32
 8002b46:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc4 <UART_API_Init+0x174>)
 8002b48:	4413      	add	r3, r2
 8002b4a:	7bfc      	ldrb	r4, [r7, #15]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f002 fd84 	bl	800565a <osMutexNew>
 8002b52:	4602      	mov	r2, r0
 8002b54:	491a      	ldr	r1, [pc, #104]	@ (8002bc0 <UART_API_Init+0x170>)
 8002b56:	4623      	mov	r3, r4
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	1b1b      	subs	r3, r3, r4
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	3318      	adds	r3, #24
 8002b62:	601a      	str	r2, [r3, #0]
    if (g_dynamic_uart_api_lut[port].mutex_id == NULL) {
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	4916      	ldr	r1, [pc, #88]	@ (8002bc0 <UART_API_Init+0x170>)
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	3318      	adds	r3, #24
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <UART_API_Init+0x12e>
        return false;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e01c      	b.n	8002bb8 <UART_API_Init+0x168>
    }

    if (g_uart_api_task_handle == NULL) {
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <UART_API_Init+0x178>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10d      	bne.n	8002ba2 <UART_API_Init+0x152>
        g_uart_api_task_handle = osThreadNew(UART_API_Task, NULL, &g_uart_api_task_attr);
 8002b86:	4a11      	ldr	r2, [pc, #68]	@ (8002bcc <UART_API_Init+0x17c>)
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4811      	ldr	r0, [pc, #68]	@ (8002bd0 <UART_API_Init+0x180>)
 8002b8c:	f002 fadc 	bl	8005148 <osThreadNew>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc8 <UART_API_Init+0x178>)
 8002b94:	6013      	str	r3, [r2, #0]
        if (g_uart_api_task_handle == NULL) {
 8002b96:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <UART_API_Init+0x178>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <UART_API_Init+0x152>
            return false;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e00a      	b.n	8002bb8 <UART_API_Init+0x168>
        }
    }

    g_dynamic_uart_api_lut[port].is_initialized = true;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	4906      	ldr	r1, [pc, #24]	@ (8002bc0 <UART_API_Init+0x170>)
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	3315      	adds	r3, #21
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
    return true;
 8002bb6:	2301      	movs	r3, #1
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd90      	pop	{r4, r7, pc}
 8002bc0:	2000098c 	.word	0x2000098c
 8002bc4:	0800a604 	.word	0x0800a604
 8002bc8:	20000988 	.word	0x20000988
 8002bcc:	0800a5e0 	.word	0x0800a5e0
 8002bd0:	0800262d 	.word	0x0800262d

08002bd4 <UART_API_Send>:

bool UART_API_Send (eUartApiPort_t port, sMessage_t *message, uint32_t wait_time) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartApiPort_First) || (port >= eUartApiPort_Last) || (message == NULL)) {
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d802      	bhi.n	8002bee <UART_API_Send+0x1a>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <UART_API_Send+0x1e>
        return false;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e04c      	b.n	8002c8c <UART_API_Send+0xb8>
    }

    if (g_dynamic_uart_api_lut[port].mutex_id == NULL) {
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	4927      	ldr	r1, [pc, #156]	@ (8002c94 <UART_API_Send+0xc0>)
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	3318      	adds	r3, #24
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <UART_API_Send+0x38>
    	return false;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e03f      	b.n	8002c8c <UART_API_Send+0xb8>
    }

    if (osMutexAcquire(g_dynamic_uart_api_lut[port].mutex_id, wait_time) != osOK) {
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	4921      	ldr	r1, [pc, #132]	@ (8002c94 <UART_API_Send+0xc0>)
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	3318      	adds	r3, #24
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f002 fda0 	bl	8005766 <osMutexAcquire>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <UART_API_Send+0x5c>
    	return false;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e02d      	b.n	8002c8c <UART_API_Send+0xb8>
    }

    if (UART_Driver_TransmitMultipleBytes(port, message->message, message->message_length) == false) {
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fb64 	bl	8003308 <UART_Driver_TransmitMultipleBytes>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f083 0301 	eor.w	r3, r3, #1
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00d      	beq.n	8002c68 <UART_API_Send+0x94>
        osMutexRelease(g_dynamic_uart_api_lut[port].mutex_id);
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	4911      	ldr	r1, [pc, #68]	@ (8002c94 <UART_API_Send+0xc0>)
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	3318      	adds	r3, #24
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 fdcc 	bl	80057fc <osMutexRelease>
    	return false;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e011      	b.n	8002c8c <UART_API_Send+0xb8>
    }

    if (osMutexRelease(g_dynamic_uart_api_lut[port].mutex_id) != osOK) {
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	490a      	ldr	r1, [pc, #40]	@ (8002c94 <UART_API_Send+0xc0>)
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3318      	adds	r3, #24
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f002 fdbe 	bl	80057fc <osMutexRelease>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <UART_API_Send+0xb6>
    	return false;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e000      	b.n	8002c8c <UART_API_Send+0xb8>
    }

    return true;
 8002c8a:	2301      	movs	r3, #1
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	2000098c 	.word	0x2000098c

08002c98 <UART_API_Receive>:


bool UART_API_Receive (eUartApiPort_t port, sMessage_t *message, uint32_t wait_time) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartApiPort_First) || (port >= eUartApiPort_Last) || (message == NULL) || (wait_time <= 0)) {
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d805      	bhi.n	8002cb8 <UART_API_Receive+0x20>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <UART_API_Receive+0x20>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <UART_API_Receive+0x24>
        return false;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e013      	b.n	8002ce4 <UART_API_Receive+0x4c>
    }

    osStatus_t status = osMessageQueueGet(g_dynamic_uart_api_lut[port].message_queue_id, message, MESSAGE_PRIORITY, wait_time);
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	490b      	ldr	r1, [pc, #44]	@ (8002cec <UART_API_Receive+0x54>)
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	f002 fea3 	bl	8005a1c <osMessageQueueGet>
 8002cd6:	6178      	str	r0, [r7, #20]
    if (status != osOK) {
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <UART_API_Receive+0x4a>
        return false;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e000      	b.n	8002ce4 <UART_API_Receive+0x4c>
    }

    return true;
 8002ce2:	2301      	movs	r3, #1
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	2000098c 	.word	0x2000098c

08002cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf4:	4b04      	ldr	r3, [pc, #16]	@ (8002d08 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	f003 0307 	and.w	r3, r3, #7
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	db0b      	blt.n	8002d36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	4907      	ldr	r1, [pc, #28]	@ (8002d44 <__NVIC_EnableIRQ+0x38>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000e100 	.word	0xe000e100

08002d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6039      	str	r1, [r7, #0]
 8002d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db0a      	blt.n	8002d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	490c      	ldr	r1, [pc, #48]	@ (8002d94 <__NVIC_SetPriority+0x4c>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d70:	e00a      	b.n	8002d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4908      	ldr	r1, [pc, #32]	@ (8002d98 <__NVIC_SetPriority+0x50>)
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	3b04      	subs	r3, #4
 8002d80:	0112      	lsls	r2, r2, #4
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	440b      	add	r3, r1
 8002d86:	761a      	strb	r2, [r3, #24]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000e100 	.word	0xe000e100
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	@ 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f1c3 0307 	rsb	r3, r3, #7
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	bf28      	it	cs
 8002dba:	2304      	movcs	r3, #4
 8002dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d902      	bls.n	8002dcc <NVIC_EncodePriority+0x30>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3b03      	subs	r3, #3
 8002dca:	e000      	b.n	8002dce <NVIC_EncodePriority+0x32>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	401a      	ands	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de4:	f04f 31ff 	mov.w	r1, #4294967295
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43d9      	mvns	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	4313      	orrs	r3, r2
         );
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3724      	adds	r7, #36	@ 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60da      	str	r2, [r3, #12]
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(const USART_TypeDef *USARTx)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	615a      	str	r2, [r3, #20]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eac:	2b80      	cmp	r3, #128	@ 0x80
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b089      	sub	sp, #36	@ 0x24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	e853 3f00 	ldrex	r3, [r3]
 8002ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f043 0320 	orr.w	r3, r3, #32
 8002ede:	61fb      	str	r3, [r7, #28]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	61ba      	str	r2, [r7, #24]
 8002ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eea:	6979      	ldr	r1, [r7, #20]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e7      	bne.n	8002eca <LL_USART_EnableIT_RXNE+0x8>
}
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
 8002efe:	3724      	adds	r7, #36	@ 0x24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	b2db      	uxtb	r3, r3
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	605a      	str	r2, [r3, #4]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002f70:	4b08      	ldr	r3, [pc, #32]	@ (8002f94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f74:	4907      	ldr	r1, [pc, #28]	@ (8002f94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002f7c:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4013      	ands	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f86:	68fb      	ldr	r3, [r7, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	40023800 	.word	0x40023800

08002f98 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002fa0:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002fa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fa4:	4907      	ldr	r1, [pc, #28]	@ (8002fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002fac:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002fae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <UART_Driver_IRQReceive>:
 *********************************************************************************************************************/
static void UART_Driver_IRQReceive (eUartPort_t port);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void UART_Driver_IRQReceive (eUartPort_t port) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
    if ((port < eUartPort_First) || (port >= eUartPort_Last)) {
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d838      	bhi.n	800304a <UART_Driver_IRQReceive+0x82>
        return;
    }

    if (g_static_uart_rb[port] != NULL) {
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	4a1f      	ldr	r2, [pc, #124]	@ (8003058 <UART_Driver_IRQReceive+0x90>)
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d034      	beq.n	800304e <UART_Driver_IRQReceive+0x86>
        if ((LL_USART_IsActiveFlag_RXNE(g_static_uart_lut[port].port)) && (LL_USART_IsEnabledIT_RXNE(g_static_uart_lut[port].port))) {
 8002fe4:	79fa      	ldrb	r2, [r7, #7]
 8002fe6:	491d      	ldr	r1, [pc, #116]	@ (800305c <UART_Driver_IRQReceive+0x94>)
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	440b      	add	r3, r1
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff3e 	bl	8002e76 <LL_USART_IsActiveFlag_RXNE>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d026      	beq.n	800304e <UART_Driver_IRQReceive+0x86>
 8003000:	79fa      	ldrb	r2, [r7, #7]
 8003002:	4916      	ldr	r1, [pc, #88]	@ (800305c <UART_Driver_IRQReceive+0x94>)
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	440b      	add	r3, r1
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff79 	bl	8002f08 <LL_USART_IsEnabledIT_RXNE>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d018      	beq.n	800304e <UART_Driver_IRQReceive+0x86>
            uint8_t data = LL_USART_ReceiveData8(g_static_uart_lut[port].port);
 800301c:	79fa      	ldrb	r2, [r7, #7]
 800301e:	490f      	ldr	r1, [pc, #60]	@ (800305c <UART_Driver_IRQReceive+0x94>)
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	440b      	add	r3, r1
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff7e 	bl	8002f2e <LL_USART_ReceiveData8>
 8003032:	4603      	mov	r3, r0
 8003034:	73fb      	strb	r3, [r7, #15]
            RingBufferEnqueue(g_static_uart_rb[port], data);
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	4a07      	ldr	r2, [pc, #28]	@ (8003058 <UART_Driver_IRQReceive+0x90>)
 800303a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff f800 	bl	8002048 <RingBufferEnqueue>
//            	LL_USART_TransmitData8(USART2, data);
//            }
        }
    }

    return;
 8003048:	e001      	b.n	800304e <UART_Driver_IRQReceive+0x86>
        return;
 800304a:	bf00      	nop
 800304c:	e000      	b.n	8003050 <UART_Driver_IRQReceive+0x88>
    return;
 800304e:	bf00      	nop
}
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200009e0 	.word	0x200009e0
 800305c:	0800a694 	.word	0x0800a694

08003060 <USART1_IRQHandler>:

void USART1_IRQHandler (void) {
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
    UART_Driver_IRQReceive(eUartPort_Usart1);
 8003064:	2000      	movs	r0, #0
 8003066:	f7ff ffaf 	bl	8002fc8 <UART_Driver_IRQReceive>
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}

0800306e <USART2_IRQHandler>:

void USART2_IRQHandler (void) {
 800306e:	b580      	push	{r7, lr}
 8003070:	af00      	add	r7, sp, #0
    UART_Driver_IRQReceive(eUartPort_Usart2);
 8003072:	2001      	movs	r0, #1
 8003074:	f7ff ffa8 	bl	8002fc8 <UART_Driver_IRQReceive>
}
 8003078:	bf00      	nop
 800307a:	bd80      	pop	{r7, pc}

0800307c <USART6_IRQHandler>:

void USART6_IRQHandler (void) {
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
	UART_Driver_IRQReceive(eUartPort_Usart6);
 8003080:	2002      	movs	r0, #2
 8003082:	f7ff ffa1 	bl	8002fc8 <UART_Driver_IRQReceive>
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <UART_Driver_Init>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool UART_Driver_Init (eUartPort_t port, uint32_t baudrate) {
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b08b      	sub	sp, #44	@ 0x2c
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	71fb      	strb	r3, [r7, #7]
    if ((port < eUartPort_First) || (port >= eUartPort_Last)) {
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <UART_Driver_Init+0x16>
        return false;
 800309e:	2300      	movs	r3, #0
 80030a0:	e0fa      	b.n	8003298 <UART_Driver_Init+0x20c>
    }

    LL_USART_InitTypeDef usart_init_struct = {0};
 80030a2:	f107 030c 	add.w	r3, r7, #12
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	611a      	str	r2, [r3, #16]
 80030b2:	615a      	str	r2, [r3, #20]
 80030b4:	619a      	str	r2, [r3, #24]

    g_static_uart_lut[port].enable_clock(g_static_uart_lut[port].clock);
 80030b6:	79fa      	ldrb	r2, [r7, #7]
 80030b8:	4979      	ldr	r1, [pc, #484]	@ (80032a0 <UART_Driver_Init+0x214>)
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	440b      	add	r3, r1
 80030c4:	3328      	adds	r3, #40	@ 0x28
 80030c6:	6819      	ldr	r1, [r3, #0]
 80030c8:	79fa      	ldrb	r2, [r7, #7]
 80030ca:	4875      	ldr	r0, [pc, #468]	@ (80032a0 <UART_Driver_Init+0x214>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	4403      	add	r3, r0
 80030d6:	332c      	adds	r3, #44	@ 0x2c
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	4788      	blx	r1

    usart_init_struct.BaudRate = (baudrate == 0) ? g_static_uart_lut[port].baud_rate : baudrate;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d109      	bne.n	80030f8 <UART_Driver_Init+0x6c>
 80030e4:	79fa      	ldrb	r2, [r7, #7]
 80030e6:	496e      	ldr	r1, [pc, #440]	@ (80032a0 <UART_Driver_Init+0x214>)
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	440b      	add	r3, r1
 80030f2:	3304      	adds	r3, #4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	e000      	b.n	80030fa <UART_Driver_Init+0x6e>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	60fb      	str	r3, [r7, #12]
    usart_init_struct.DataWidth = g_static_uart_lut[port].data_width;
 80030fc:	79fa      	ldrb	r2, [r7, #7]
 80030fe:	4968      	ldr	r1, [pc, #416]	@ (80032a0 <UART_Driver_Init+0x214>)
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	440b      	add	r3, r1
 800310a:	3308      	adds	r3, #8
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	613b      	str	r3, [r7, #16]
    usart_init_struct.StopBits = g_static_uart_lut[port].stop_bits;
 8003110:	79fa      	ldrb	r2, [r7, #7]
 8003112:	4963      	ldr	r1, [pc, #396]	@ (80032a0 <UART_Driver_Init+0x214>)
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	440b      	add	r3, r1
 800311e:	330c      	adds	r3, #12
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	617b      	str	r3, [r7, #20]
    usart_init_struct.Parity = g_static_uart_lut[port].parity;
 8003124:	79fa      	ldrb	r2, [r7, #7]
 8003126:	495e      	ldr	r1, [pc, #376]	@ (80032a0 <UART_Driver_Init+0x214>)
 8003128:	4613      	mov	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4413      	add	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	440b      	add	r3, r1
 8003132:	3310      	adds	r3, #16
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	61bb      	str	r3, [r7, #24]
    usart_init_struct.TransferDirection = g_static_uart_lut[port].transfer_direction;
 8003138:	79fa      	ldrb	r2, [r7, #7]
 800313a:	4959      	ldr	r1, [pc, #356]	@ (80032a0 <UART_Driver_Init+0x214>)
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	440b      	add	r3, r1
 8003146:	3314      	adds	r3, #20
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	61fb      	str	r3, [r7, #28]
    usart_init_struct.HardwareFlowControl = g_static_uart_lut[port].hardware_flow_control;
 800314c:	79fa      	ldrb	r2, [r7, #7]
 800314e:	4954      	ldr	r1, [pc, #336]	@ (80032a0 <UART_Driver_Init+0x214>)
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	440b      	add	r3, r1
 800315a:	3318      	adds	r3, #24
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	623b      	str	r3, [r7, #32]
    usart_init_struct.OverSampling = g_static_uart_lut[port].over_sampling;
 8003160:	79fa      	ldrb	r2, [r7, #7]
 8003162:	494f      	ldr	r1, [pc, #316]	@ (80032a0 <UART_Driver_Init+0x214>)
 8003164:	4613      	mov	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	440b      	add	r3, r1
 800316e:	331c      	adds	r3, #28
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24

    NVIC_SetPriority(g_static_uart_lut[port].irqn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8003174:	79fa      	ldrb	r2, [r7, #7]
 8003176:	494a      	ldr	r1, [pc, #296]	@ (80032a0 <UART_Driver_Init+0x214>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	440b      	add	r3, r1
 8003182:	3324      	adds	r3, #36	@ 0x24
 8003184:	f993 4000 	ldrsb.w	r4, [r3]
 8003188:	f7ff fdb2 	bl	8002cf0 <__NVIC_GetPriorityGrouping>
 800318c:	4603      	mov	r3, r0
 800318e:	2200      	movs	r2, #0
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fe02 	bl	8002d9c <NVIC_EncodePriority>
 8003198:	4603      	mov	r3, r0
 800319a:	4619      	mov	r1, r3
 800319c:	4620      	mov	r0, r4
 800319e:	f7ff fdd3 	bl	8002d48 <__NVIC_SetPriority>
    NVIC_EnableIRQ(g_static_uart_lut[port].irqn);
 80031a2:	79fa      	ldrb	r2, [r7, #7]
 80031a4:	493e      	ldr	r1, [pc, #248]	@ (80032a0 <UART_Driver_Init+0x214>)
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	440b      	add	r3, r1
 80031b0:	3324      	adds	r3, #36	@ 0x24
 80031b2:	f993 3000 	ldrsb.w	r3, [r3]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fda8 	bl	8002d0c <__NVIC_EnableIRQ>

    if (LL_USART_Init(g_static_uart_lut[port].port, &usart_init_struct) != SUCCESS) {
 80031bc:	79fa      	ldrb	r2, [r7, #7]
 80031be:	4938      	ldr	r1, [pc, #224]	@ (80032a0 <UART_Driver_Init+0x214>)
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	440b      	add	r3, r1
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f107 020c 	add.w	r2, r7, #12
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f001 fec6 	bl	8004f64 <LL_USART_Init>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <UART_Driver_Init+0x156>
        return false;
 80031de:	2300      	movs	r3, #0
 80031e0:	e05a      	b.n	8003298 <UART_Driver_Init+0x20c>
    }
    LL_USART_ConfigAsyncMode(g_static_uart_lut[port].port);
 80031e2:	79fa      	ldrb	r2, [r7, #7]
 80031e4:	492e      	ldr	r1, [pc, #184]	@ (80032a0 <UART_Driver_Init+0x214>)
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	440b      	add	r3, r1
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fe29 	bl	8002e4a <LL_USART_ConfigAsyncMode>
    LL_USART_EnableIT_RXNE(g_static_uart_lut[port].port);
 80031f8:	79fa      	ldrb	r2, [r7, #7]
 80031fa:	4929      	ldr	r1, [pc, #164]	@ (80032a0 <UART_Driver_Init+0x214>)
 80031fc:	4613      	mov	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	440b      	add	r3, r1
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fe5a 	bl	8002ec2 <LL_USART_EnableIT_RXNE>
    LL_USART_Enable(g_static_uart_lut[port].port);
 800320e:	79fa      	ldrb	r2, [r7, #7]
 8003210:	4923      	ldr	r1, [pc, #140]	@ (80032a0 <UART_Driver_Init+0x214>)
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	440b      	add	r3, r1
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fdef 	bl	8002e02 <LL_USART_Enable>

    if (LL_USART_IsEnabledIT_RXNE(g_static_uart_lut[port].port) == 0) {
 8003224:	79fa      	ldrb	r2, [r7, #7]
 8003226:	491e      	ldr	r1, [pc, #120]	@ (80032a0 <UART_Driver_Init+0x214>)
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	440b      	add	r3, r1
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fe67 	bl	8002f08 <LL_USART_IsEnabledIT_RXNE>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <UART_Driver_Init+0x1b8>
        return false;
 8003240:	2300      	movs	r3, #0
 8003242:	e029      	b.n	8003298 <UART_Driver_Init+0x20c>
    }

    g_static_uart_rb[port] = RingBufferInit(g_static_uart_lut[port].ringbuffer_capacity);
 8003244:	79fa      	ldrb	r2, [r7, #7]
 8003246:	4916      	ldr	r1, [pc, #88]	@ (80032a0 <UART_Driver_Init+0x214>)
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	440b      	add	r3, r1
 8003252:	3320      	adds	r3, #32
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	79fc      	ldrb	r4, [r7, #7]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe fe91 	bl	8001f80 <RingBufferInit>
 800325e:	4603      	mov	r3, r0
 8003260:	4a10      	ldr	r2, [pc, #64]	@ (80032a4 <UART_Driver_Init+0x218>)
 8003262:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (g_static_uart_rb[port] == NULL) {
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	4a0e      	ldr	r2, [pc, #56]	@ (80032a4 <UART_Driver_Init+0x218>)
 800326a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <UART_Driver_Init+0x1ea>
        return false;
 8003272:	2300      	movs	r3, #0
 8003274:	e010      	b.n	8003298 <UART_Driver_Init+0x20c>
    }

    if (LL_USART_IsEnabled(g_static_uart_lut[port].port) == 0) {
 8003276:	79fa      	ldrb	r2, [r7, #7]
 8003278:	4909      	ldr	r1, [pc, #36]	@ (80032a0 <UART_Driver_Init+0x214>)
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	440b      	add	r3, r1
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fdcb 	bl	8002e22 <LL_USART_IsEnabled>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <UART_Driver_Init+0x20a>
        return false;
 8003292:	2300      	movs	r3, #0
 8003294:	e000      	b.n	8003298 <UART_Driver_Init+0x20c>
    }

    return true;
 8003296:	2301      	movs	r3, #1
}
 8003298:	4618      	mov	r0, r3
 800329a:	372c      	adds	r7, #44	@ 0x2c
 800329c:	46bd      	mov	sp, r7
 800329e:	bd90      	pop	{r4, r7, pc}
 80032a0:	0800a694 	.word	0x0800a694
 80032a4:	200009e0 	.word	0x200009e0

080032a8 <UART_Driver_TransmitByte>:

bool UART_Driver_TransmitByte (eUartPort_t port, uint8_t data) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	460a      	mov	r2, r1
 80032b2:	71fb      	strb	r3, [r7, #7]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71bb      	strb	r3, [r7, #6]
    if ((port < eUartPort_First) || (port >= eUartPort_Last)) {
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <UART_Driver_TransmitByte+0x1a>
        return false;
 80032be:	2300      	movs	r3, #0
 80032c0:	e01c      	b.n	80032fc <UART_Driver_TransmitByte+0x54>
    }

    while (!LL_USART_IsActiveFlag_TXE(g_static_uart_lut[port].port)) {};
 80032c2:	bf00      	nop
 80032c4:	79fa      	ldrb	r2, [r7, #7]
 80032c6:	490f      	ldr	r1, [pc, #60]	@ (8003304 <UART_Driver_TransmitByte+0x5c>)
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	440b      	add	r3, r1
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fde1 	bl	8002e9c <LL_USART_IsActiveFlag_TXE>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f1      	beq.n	80032c4 <UART_Driver_TransmitByte+0x1c>
    LL_USART_TransmitData8(g_static_uart_lut[port].port, data);
 80032e0:	79fa      	ldrb	r2, [r7, #7]
 80032e2:	4908      	ldr	r1, [pc, #32]	@ (8003304 <UART_Driver_TransmitByte+0x5c>)
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	440b      	add	r3, r1
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	79ba      	ldrb	r2, [r7, #6]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fe27 	bl	8002f48 <LL_USART_TransmitData8>

    return true;
 80032fa:	2301      	movs	r3, #1
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	0800a694 	.word	0x0800a694

08003308 <UART_Driver_TransmitMultipleBytes>:

bool UART_Driver_TransmitMultipleBytes (eUartPort_t port, uint8_t *data, size_t size) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartPort_First) || (port >= eUartPort_Last) || (data == NULL) || (size == 0)) {
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d805      	bhi.n	8003328 <UART_Driver_TransmitMultipleBytes+0x20>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <UART_Driver_TransmitMultipleBytes+0x20>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <UART_Driver_TransmitMultipleBytes+0x24>
        return false;
 8003328:	2300      	movs	r3, #0
 800332a:	e013      	b.n	8003354 <UART_Driver_TransmitMultipleBytes+0x4c>
    }

    for (size_t i = 0; i < size; i++) {
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e00b      	b.n	800334a <UART_Driver_TransmitMultipleBytes+0x42>
        UART_Driver_TransmitByte(port, data[i]);
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	4413      	add	r3, r2
 8003338:	781a      	ldrb	r2, [r3, #0]
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ffb2 	bl	80032a8 <UART_Driver_TransmitByte>
    for (size_t i = 0; i < size; i++) {
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	3301      	adds	r3, #1
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	429a      	cmp	r2, r3
 8003350:	d3ef      	bcc.n	8003332 <UART_Driver_TransmitMultipleBytes+0x2a>
    }

    return true;
 8003352:	2301      	movs	r3, #1
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <UART_Driver_Read>:


bool UART_Driver_Read (eUartPort_t port, uint8_t *data) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	71fb      	strb	r3, [r7, #7]
    if ((port < eUartPort_First) || (port >= eUartPort_Last) || (g_static_uart_rb[port] == NULL) || (data == NULL)) {
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d808      	bhi.n	8003380 <UART_Driver_Read+0x24>
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	4a0b      	ldr	r2, [pc, #44]	@ (80033a0 <UART_Driver_Read+0x44>)
 8003372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <UART_Driver_Read+0x24>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <UART_Driver_Read+0x28>
        return false;
 8003380:	2300      	movs	r3, #0
 8003382:	e008      	b.n	8003396 <UART_Driver_Read+0x3a>
    }

    return RingBufferDequeue(g_static_uart_rb[port], data);
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	4a06      	ldr	r2, [pc, #24]	@ (80033a0 <UART_Driver_Read+0x44>)
 8003388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338c:	6839      	ldr	r1, [r7, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fe9a 	bl	80020c8 <RingBufferDequeue>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200009e0 	.word	0x200009e0

080033a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80033a8:	f7fe ffc0 	bl	800232c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033ac:	480c      	ldr	r0, [pc, #48]	@ (80033e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033ae:	490d      	ldr	r1, [pc, #52]	@ (80033e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033b0:	4a0d      	ldr	r2, [pc, #52]	@ (80033e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b4:	e002      	b.n	80033bc <LoopCopyDataInit>

080033b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ba:	3304      	adds	r3, #4

080033bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033c0:	d3f9      	bcc.n	80033b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033c2:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033c4:	4c0a      	ldr	r4, [pc, #40]	@ (80033f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c8:	e001      	b.n	80033ce <LoopFillZerobss>

080033ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033cc:	3204      	adds	r2, #4

080033ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033d0:	d3fb      	bcc.n	80033ca <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80033d2:	f006 f997 	bl	8009704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033d6:	f7fe fab5 	bl	8001944 <main>
  bx  lr    
 80033da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80033e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80033e8:	0800a868 	.word	0x0800a868
  ldr r2, =_sbss
 80033ec:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80033f0:	20005488 	.word	0x20005488

080033f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033f4:	e7fe      	b.n	80033f4 <ADC_IRQHandler>
	...

080033f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003438 <HAL_Init+0x40>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0d      	ldr	r2, [pc, #52]	@ (8003438 <HAL_Init+0x40>)
 8003402:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003408:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <HAL_Init+0x40>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0a      	ldr	r2, [pc, #40]	@ (8003438 <HAL_Init+0x40>)
 800340e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003414:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <HAL_Init+0x40>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a07      	ldr	r2, [pc, #28]	@ (8003438 <HAL_Init+0x40>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800341e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003420:	2003      	movs	r0, #3
 8003422:	f000 f8d8 	bl	80035d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003426:	200f      	movs	r0, #15
 8003428:	f7fe fea8 	bl	800217c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800342c:	f7fe fe7a 	bl	8002124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023c00 	.word	0x40023c00

0800343c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003440:	4b06      	ldr	r3, [pc, #24]	@ (800345c <HAL_IncTick+0x20>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <HAL_IncTick+0x24>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4413      	add	r3, r2
 800344c:	4a04      	ldr	r2, [pc, #16]	@ (8003460 <HAL_IncTick+0x24>)
 800344e:	6013      	str	r3, [r2, #0]
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	2000002c 	.word	0x2000002c
 8003460:	200009ec 	.word	0x200009ec

08003464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return uwTick;
 8003468:	4b03      	ldr	r3, [pc, #12]	@ (8003478 <HAL_GetTick+0x14>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	200009ec 	.word	0x200009ec

0800347c <__NVIC_SetPriorityGrouping>:
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800348c:	4b0c      	ldr	r3, [pc, #48]	@ (80034c0 <__NVIC_SetPriorityGrouping+0x44>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003498:	4013      	ands	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ae:	4a04      	ldr	r2, [pc, #16]	@ (80034c0 <__NVIC_SetPriorityGrouping+0x44>)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	60d3      	str	r3, [r2, #12]
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <__NVIC_GetPriorityGrouping>:
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c8:	4b04      	ldr	r3, [pc, #16]	@ (80034dc <__NVIC_GetPriorityGrouping+0x18>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	f003 0307 	and.w	r3, r3, #7
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <__NVIC_EnableIRQ>:
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	db0b      	blt.n	800350a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	f003 021f 	and.w	r2, r3, #31
 80034f8:	4907      	ldr	r1, [pc, #28]	@ (8003518 <__NVIC_EnableIRQ+0x38>)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	2001      	movs	r0, #1
 8003502:	fa00 f202 	lsl.w	r2, r0, r2
 8003506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	e000e100 	.word	0xe000e100

0800351c <__NVIC_SetPriority>:
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	6039      	str	r1, [r7, #0]
 8003526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352c:	2b00      	cmp	r3, #0
 800352e:	db0a      	blt.n	8003546 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	b2da      	uxtb	r2, r3
 8003534:	490c      	ldr	r1, [pc, #48]	@ (8003568 <__NVIC_SetPriority+0x4c>)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	0112      	lsls	r2, r2, #4
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	440b      	add	r3, r1
 8003540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003544:	e00a      	b.n	800355c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	b2da      	uxtb	r2, r3
 800354a:	4908      	ldr	r1, [pc, #32]	@ (800356c <__NVIC_SetPriority+0x50>)
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	3b04      	subs	r3, #4
 8003554:	0112      	lsls	r2, r2, #4
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	440b      	add	r3, r1
 800355a:	761a      	strb	r2, [r3, #24]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000e100 	.word	0xe000e100
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <NVIC_EncodePriority>:
{
 8003570:	b480      	push	{r7}
 8003572:	b089      	sub	sp, #36	@ 0x24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f1c3 0307 	rsb	r3, r3, #7
 800358a:	2b04      	cmp	r3, #4
 800358c:	bf28      	it	cs
 800358e:	2304      	movcs	r3, #4
 8003590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3304      	adds	r3, #4
 8003596:	2b06      	cmp	r3, #6
 8003598:	d902      	bls.n	80035a0 <NVIC_EncodePriority+0x30>
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3b03      	subs	r3, #3
 800359e:	e000      	b.n	80035a2 <NVIC_EncodePriority+0x32>
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a4:	f04f 32ff 	mov.w	r2, #4294967295
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43da      	mvns	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	401a      	ands	r2, r3
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b8:	f04f 31ff 	mov.w	r1, #4294967295
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	43d9      	mvns	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c8:	4313      	orrs	r3, r2
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3724      	adds	r7, #36	@ 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ff4c 	bl	800347c <__NVIC_SetPriorityGrouping>
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035fe:	f7ff ff61 	bl	80034c4 <__NVIC_GetPriorityGrouping>
 8003602:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	6978      	ldr	r0, [r7, #20]
 800360a:	f7ff ffb1 	bl	8003570 <NVIC_EncodePriority>
 800360e:	4602      	mov	r2, r0
 8003610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ff80 	bl	800351c <__NVIC_SetPriority>
}
 800361c:	bf00      	nop
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ff54 	bl	80034e0 <__NVIC_EnableIRQ>
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e267      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d075      	beq.n	800374a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800365e:	4b88      	ldr	r3, [pc, #544]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b04      	cmp	r3, #4
 8003668:	d00c      	beq.n	8003684 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366a:	4b85      	ldr	r3, [pc, #532]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003672:	2b08      	cmp	r3, #8
 8003674:	d112      	bne.n	800369c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003676:	4b82      	ldr	r3, [pc, #520]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800367e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003682:	d10b      	bne.n	800369c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	4b7e      	ldr	r3, [pc, #504]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d05b      	beq.n	8003748 <HAL_RCC_OscConfig+0x108>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d157      	bne.n	8003748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e242      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a4:	d106      	bne.n	80036b4 <HAL_RCC_OscConfig+0x74>
 80036a6:	4b76      	ldr	r3, [pc, #472]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a75      	ldr	r2, [pc, #468]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e01d      	b.n	80036f0 <HAL_RCC_OscConfig+0xb0>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x98>
 80036be:	4b70      	ldr	r3, [pc, #448]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a6f      	ldr	r2, [pc, #444]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e00b      	b.n	80036f0 <HAL_RCC_OscConfig+0xb0>
 80036d8:	4b69      	ldr	r3, [pc, #420]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a68      	ldr	r2, [pc, #416]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	4b66      	ldr	r3, [pc, #408]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a65      	ldr	r2, [pc, #404]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d013      	beq.n	8003720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7ff feb4 	bl	8003464 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003700:	f7ff feb0 	bl	8003464 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	@ 0x64
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e207      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003712:	4b5b      	ldr	r3, [pc, #364]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0xc0>
 800371e:	e014      	b.n	800374a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7ff fea0 	bl	8003464 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003728:	f7ff fe9c 	bl	8003464 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	@ 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e1f3      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373a:	4b51      	ldr	r3, [pc, #324]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0xe8>
 8003746:	e000      	b.n	800374a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d063      	beq.n	800381e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003756:	4b4a      	ldr	r3, [pc, #296]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003762:	4b47      	ldr	r3, [pc, #284]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800376a:	2b08      	cmp	r3, #8
 800376c:	d11c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376e:	4b44      	ldr	r3, [pc, #272]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d116      	bne.n	80037a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377a:	4b41      	ldr	r3, [pc, #260]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_RCC_OscConfig+0x152>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d001      	beq.n	8003792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e1c7      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003792:	4b3b      	ldr	r3, [pc, #236]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4937      	ldr	r1, [pc, #220]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a6:	e03a      	b.n	800381e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b0:	4b34      	ldr	r3, [pc, #208]	@ (8003884 <HAL_RCC_OscConfig+0x244>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7ff fe55 	bl	8003464 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037be:	f7ff fe51 	bl	8003464 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e1a8      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037dc:	4b28      	ldr	r3, [pc, #160]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4925      	ldr	r1, [pc, #148]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]
 80037f0:	e015      	b.n	800381e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f2:	4b24      	ldr	r3, [pc, #144]	@ (8003884 <HAL_RCC_OscConfig+0x244>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7ff fe34 	bl	8003464 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003800:	f7ff fe30 	bl	8003464 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e187      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003812:	4b1b      	ldr	r3, [pc, #108]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d036      	beq.n	8003898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d016      	beq.n	8003860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003832:	4b15      	ldr	r3, [pc, #84]	@ (8003888 <HAL_RCC_OscConfig+0x248>)
 8003834:	2201      	movs	r2, #1
 8003836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7ff fe14 	bl	8003464 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003840:	f7ff fe10 	bl	8003464 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e167      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003852:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x200>
 800385e:	e01b      	b.n	8003898 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003860:	4b09      	ldr	r3, [pc, #36]	@ (8003888 <HAL_RCC_OscConfig+0x248>)
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003866:	f7ff fdfd 	bl	8003464 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386c:	e00e      	b.n	800388c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800386e:	f7ff fdf9 	bl	8003464 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d907      	bls.n	800388c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e150      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
 8003880:	40023800 	.word	0x40023800
 8003884:	42470000 	.word	0x42470000
 8003888:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388c:	4b88      	ldr	r3, [pc, #544]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 800388e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1ea      	bne.n	800386e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8097 	beq.w	80039d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038aa:	4b81      	ldr	r3, [pc, #516]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10f      	bne.n	80038d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	4b7d      	ldr	r3, [pc, #500]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	4a7c      	ldr	r2, [pc, #496]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80038c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d2:	2301      	movs	r3, #1
 80038d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d6:	4b77      	ldr	r3, [pc, #476]	@ (8003ab4 <HAL_RCC_OscConfig+0x474>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d118      	bne.n	8003914 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e2:	4b74      	ldr	r3, [pc, #464]	@ (8003ab4 <HAL_RCC_OscConfig+0x474>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a73      	ldr	r2, [pc, #460]	@ (8003ab4 <HAL_RCC_OscConfig+0x474>)
 80038e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ee:	f7ff fdb9 	bl	8003464 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f6:	f7ff fdb5 	bl	8003464 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e10c      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab4 <HAL_RCC_OscConfig+0x474>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x2ea>
 800391c:	4b64      	ldr	r3, [pc, #400]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003920:	4a63      	ldr	r2, [pc, #396]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6713      	str	r3, [r2, #112]	@ 0x70
 8003928:	e01c      	b.n	8003964 <HAL_RCC_OscConfig+0x324>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b05      	cmp	r3, #5
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x30c>
 8003932:	4b5f      	ldr	r3, [pc, #380]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	4a5e      	ldr	r2, [pc, #376]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	6713      	str	r3, [r2, #112]	@ 0x70
 800393e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003942:	4a5b      	ldr	r2, [pc, #364]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6713      	str	r3, [r2, #112]	@ 0x70
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0x324>
 800394c:	4b58      	ldr	r3, [pc, #352]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003950:	4a57      	ldr	r2, [pc, #348]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	6713      	str	r3, [r2, #112]	@ 0x70
 8003958:	4b55      	ldr	r3, [pc, #340]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395c:	4a54      	ldr	r2, [pc, #336]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 800395e:	f023 0304 	bic.w	r3, r3, #4
 8003962:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d015      	beq.n	8003998 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7ff fd7a 	bl	8003464 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003972:	e00a      	b.n	800398a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f7ff fd76 	bl	8003464 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e0cb      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398a:	4b49      	ldr	r3, [pc, #292]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ee      	beq.n	8003974 <HAL_RCC_OscConfig+0x334>
 8003996:	e014      	b.n	80039c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003998:	f7ff fd64 	bl	8003464 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a0:	f7ff fd60 	bl	8003464 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e0b5      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ee      	bne.n	80039a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d105      	bne.n	80039d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c8:	4b39      	ldr	r3, [pc, #228]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039cc:	4a38      	ldr	r2, [pc, #224]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80039ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80a1 	beq.w	8003b20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039de:	4b34      	ldr	r3, [pc, #208]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d05c      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d141      	bne.n	8003a76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f2:	4b31      	ldr	r3, [pc, #196]	@ (8003ab8 <HAL_RCC_OscConfig+0x478>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7ff fd34 	bl	8003464 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7ff fd30 	bl	8003464 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e087      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	4b27      	ldr	r3, [pc, #156]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	019b      	lsls	r3, r3, #6
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	3b01      	subs	r3, #1
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	061b      	lsls	r3, r3, #24
 8003a42:	491b      	ldr	r1, [pc, #108]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a48:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab8 <HAL_RCC_OscConfig+0x478>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7ff fd09 	bl	8003464 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a56:	f7ff fd05 	bl	8003464 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e05c      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a68:	4b11      	ldr	r3, [pc, #68]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCC_OscConfig+0x416>
 8003a74:	e054      	b.n	8003b20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a76:	4b10      	ldr	r3, [pc, #64]	@ (8003ab8 <HAL_RCC_OscConfig+0x478>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7ff fcf2 	bl	8003464 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a84:	f7ff fcee 	bl	8003464 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e045      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	4b06      	ldr	r3, [pc, #24]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x444>
 8003aa2:	e03d      	b.n	8003b20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e038      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40007000 	.word	0x40007000
 8003ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003abc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b2c <HAL_RCC_OscConfig+0x4ec>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d028      	beq.n	8003b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d121      	bne.n	8003b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d11a      	bne.n	8003b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003aec:	4013      	ands	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d111      	bne.n	8003b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	3b01      	subs	r3, #1
 8003b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d107      	bne.n	8003b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800

08003b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0cc      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b44:	4b68      	ldr	r3, [pc, #416]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d90c      	bls.n	8003b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b52:	4b65      	ldr	r3, [pc, #404]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b63      	ldr	r3, [pc, #396]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0b8      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d020      	beq.n	8003bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b84:	4b59      	ldr	r3, [pc, #356]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4a58      	ldr	r2, [pc, #352]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b9c:	4b53      	ldr	r3, [pc, #332]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4a52      	ldr	r2, [pc, #328]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba8:	4b50      	ldr	r3, [pc, #320]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	494d      	ldr	r1, [pc, #308]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d044      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d107      	bne.n	8003bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	4b47      	ldr	r3, [pc, #284]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d119      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e07f      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d003      	beq.n	8003bee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d107      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bee:	4b3f      	ldr	r3, [pc, #252]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e06f      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e067      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c0e:	4b37      	ldr	r3, [pc, #220]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f023 0203 	bic.w	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4934      	ldr	r1, [pc, #208]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c20:	f7ff fc20 	bl	8003464 <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c28:	f7ff fc1c 	bl	8003464 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e04f      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 020c 	and.w	r2, r3, #12
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d1eb      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c50:	4b25      	ldr	r3, [pc, #148]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d20c      	bcs.n	8003c78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5e:	4b22      	ldr	r3, [pc, #136]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b20      	ldr	r3, [pc, #128]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e032      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c84:	4b19      	ldr	r3, [pc, #100]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4916      	ldr	r1, [pc, #88]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca2:	4b12      	ldr	r3, [pc, #72]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	490e      	ldr	r1, [pc, #56]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cb6:	f000 f821 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	490a      	ldr	r1, [pc, #40]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	5ccb      	ldrb	r3, [r1, r3]
 8003cca:	fa22 f303 	lsr.w	r3, r2, r3
 8003cce:	4a09      	ldr	r2, [pc, #36]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cd2:	4b09      	ldr	r3, [pc, #36]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe fa50 	bl	800217c <HAL_InitTick>

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023c00 	.word	0x40023c00
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	0800a5c8 	.word	0x0800a5c8
 8003cf4:	20000024 	.word	0x20000024
 8003cf8:	20000028 	.word	0x20000028

08003cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d00:	b094      	sub	sp, #80	@ 0x50
 8003d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d14:	4b79      	ldr	r3, [pc, #484]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d00d      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0x40>
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	f200 80e1 	bhi.w	8003ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0x34>
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d2e:	e0db      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d30:	4b73      	ldr	r3, [pc, #460]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d34:	e0db      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d36:	4b73      	ldr	r3, [pc, #460]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d3a:	e0d8      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d46:	4b6d      	ldr	r3, [pc, #436]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d063      	beq.n	8003e1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d52:	4b6a      	ldr	r3, [pc, #424]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	099b      	lsrs	r3, r3, #6
 8003d58:	2200      	movs	r2, #0
 8003d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d66:	2300      	movs	r3, #0
 8003d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d6e:	4622      	mov	r2, r4
 8003d70:	462b      	mov	r3, r5
 8003d72:	f04f 0000 	mov.w	r0, #0
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	0159      	lsls	r1, r3, #5
 8003d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d80:	0150      	lsls	r0, r2, #5
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4621      	mov	r1, r4
 8003d88:	1a51      	subs	r1, r2, r1
 8003d8a:	6139      	str	r1, [r7, #16]
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da0:	4659      	mov	r1, fp
 8003da2:	018b      	lsls	r3, r1, #6
 8003da4:	4651      	mov	r1, sl
 8003da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003daa:	4651      	mov	r1, sl
 8003dac:	018a      	lsls	r2, r1, #6
 8003dae:	4651      	mov	r1, sl
 8003db0:	ebb2 0801 	subs.w	r8, r2, r1
 8003db4:	4659      	mov	r1, fp
 8003db6:	eb63 0901 	sbc.w	r9, r3, r1
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dce:	4690      	mov	r8, r2
 8003dd0:	4699      	mov	r9, r3
 8003dd2:	4623      	mov	r3, r4
 8003dd4:	eb18 0303 	adds.w	r3, r8, r3
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	462b      	mov	r3, r5
 8003ddc:	eb49 0303 	adc.w	r3, r9, r3
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dee:	4629      	mov	r1, r5
 8003df0:	024b      	lsls	r3, r1, #9
 8003df2:	4621      	mov	r1, r4
 8003df4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003df8:	4621      	mov	r1, r4
 8003dfa:	024a      	lsls	r2, r1, #9
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e02:	2200      	movs	r2, #0
 8003e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e0c:	f7fc fe36 	bl	8000a7c <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4613      	mov	r3, r2
 8003e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e18:	e058      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1a:	4b38      	ldr	r3, [pc, #224]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	099b      	lsrs	r3, r3, #6
 8003e20:	2200      	movs	r2, #0
 8003e22:	4618      	mov	r0, r3
 8003e24:	4611      	mov	r1, r2
 8003e26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e2a:	623b      	str	r3, [r7, #32]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	f04f 0000 	mov.w	r0, #0
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	0159      	lsls	r1, r3, #5
 8003e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e46:	0150      	lsls	r0, r2, #5
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e52:	4649      	mov	r1, r9
 8003e54:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e6c:	ebb2 040a 	subs.w	r4, r2, sl
 8003e70:	eb63 050b 	sbc.w	r5, r3, fp
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	00eb      	lsls	r3, r5, #3
 8003e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e82:	00e2      	lsls	r2, r4, #3
 8003e84:	4614      	mov	r4, r2
 8003e86:	461d      	mov	r5, r3
 8003e88:	4643      	mov	r3, r8
 8003e8a:	18e3      	adds	r3, r4, r3
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	464b      	mov	r3, r9
 8003e90:	eb45 0303 	adc.w	r3, r5, r3
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	028b      	lsls	r3, r1, #10
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eac:	4621      	mov	r1, r4
 8003eae:	028a      	lsls	r2, r1, #10
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	61fa      	str	r2, [r7, #28]
 8003ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec0:	f7fc fddc 	bl	8000a7c <__aeabi_uldivmod>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4613      	mov	r3, r2
 8003eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003edc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ee6:	e002      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4b05      	ldr	r3, [pc, #20]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3750      	adds	r7, #80	@ 0x50
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800
 8003f00:	00f42400 	.word	0x00f42400
 8003f04:	007a1200 	.word	0x007a1200

08003f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f0c:	4b03      	ldr	r3, [pc, #12]	@ (8003f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000024 	.word	0x20000024

08003f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f24:	f7ff fff0 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	0a9b      	lsrs	r3, r3, #10
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	4903      	ldr	r1, [pc, #12]	@ (8003f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f36:	5ccb      	ldrb	r3, [r1, r3]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40023800 	.word	0x40023800
 8003f44:	0800a5d8 	.word	0x0800a5d8

08003f48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	220f      	movs	r2, #15
 8003f56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f58:	4b12      	ldr	r3, [pc, #72]	@ (8003fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0203 	and.w	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f64:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f70:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f7c:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	08db      	lsrs	r3, r3, #3
 8003f82:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f8a:	4b07      	ldr	r3, [pc, #28]	@ (8003fa8 <HAL_RCC_GetClockConfig+0x60>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0207 	and.w	r2, r3, #7
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	601a      	str	r2, [r3, #0]
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40023c00 	.word	0x40023c00

08003fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e041      	b.n	8004042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f839 	bl	800404a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f000 f9b2 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	d001      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e044      	b.n	8004102 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1e      	ldr	r2, [pc, #120]	@ (8004110 <HAL_TIM_Base_Start_IT+0xb0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d018      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x6c>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a2:	d013      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x6c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004114 <HAL_TIM_Base_Start_IT+0xb4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00e      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x6c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a19      	ldr	r2, [pc, #100]	@ (8004118 <HAL_TIM_Base_Start_IT+0xb8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d009      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x6c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a17      	ldr	r2, [pc, #92]	@ (800411c <HAL_TIM_Base_Start_IT+0xbc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d004      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x6c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a16      	ldr	r2, [pc, #88]	@ (8004120 <HAL_TIM_Base_Start_IT+0xc0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d111      	bne.n	80040f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d010      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ee:	e007      	b.n	8004100 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40014000 	.word	0x40014000

08004124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d020      	beq.n	8004188 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01b      	beq.n	8004188 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0202 	mvn.w	r2, #2
 8004158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8d2 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f8c4 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8d5 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d020      	beq.n	80041d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0204 	mvn.w	r2, #4
 80041a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8ac 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f89e 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f8af 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d020      	beq.n	8004220 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0208 	mvn.w	r2, #8
 80041f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2204      	movs	r2, #4
 80041f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f886 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f878 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f889 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	d020      	beq.n	800426c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01b      	beq.n	800426c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0210 	mvn.w	r2, #16
 800423c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2208      	movs	r2, #8
 8004242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f860 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8004258:	e005      	b.n	8004266 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f852 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f863 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00c      	beq.n	8004290 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0201 	mvn.w	r2, #1
 8004288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fd fc36 	bl	8001afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00c      	beq.n	80042b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d007      	beq.n	80042b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f8e0 	bl	8004474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00c      	beq.n	80042d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f834 	bl	8004340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00c      	beq.n	80042fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0220 	mvn.w	r2, #32
 80042f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f8b2 	bl	8004460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a37      	ldr	r2, [pc, #220]	@ (8004444 <TIM_Base_SetConfig+0xf0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00f      	beq.n	800438c <TIM_Base_SetConfig+0x38>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004372:	d00b      	beq.n	800438c <TIM_Base_SetConfig+0x38>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a34      	ldr	r2, [pc, #208]	@ (8004448 <TIM_Base_SetConfig+0xf4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d007      	beq.n	800438c <TIM_Base_SetConfig+0x38>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a33      	ldr	r2, [pc, #204]	@ (800444c <TIM_Base_SetConfig+0xf8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_Base_SetConfig+0x38>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a32      	ldr	r2, [pc, #200]	@ (8004450 <TIM_Base_SetConfig+0xfc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d108      	bne.n	800439e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a28      	ldr	r2, [pc, #160]	@ (8004444 <TIM_Base_SetConfig+0xf0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01b      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ac:	d017      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a25      	ldr	r2, [pc, #148]	@ (8004448 <TIM_Base_SetConfig+0xf4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a24      	ldr	r2, [pc, #144]	@ (800444c <TIM_Base_SetConfig+0xf8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00f      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a23      	ldr	r2, [pc, #140]	@ (8004450 <TIM_Base_SetConfig+0xfc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00b      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a22      	ldr	r2, [pc, #136]	@ (8004454 <TIM_Base_SetConfig+0x100>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a21      	ldr	r2, [pc, #132]	@ (8004458 <TIM_Base_SetConfig+0x104>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a20      	ldr	r2, [pc, #128]	@ (800445c <TIM_Base_SetConfig+0x108>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d108      	bne.n	80043f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a0c      	ldr	r2, [pc, #48]	@ (8004444 <TIM_Base_SetConfig+0xf0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d103      	bne.n	800441e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f043 0204 	orr.w	r2, r3, #4
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	601a      	str	r2, [r3, #0]
}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40010000 	.word	0x40010000
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	40014000 	.word	0x40014000
 8004458:	40014400 	.word	0x40014400
 800445c:	40014800 	.word	0x40014800

08004460 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <LL_GPIO_SetPinMode>:
{
 8004488:	b480      	push	{r7}
 800448a:	b08b      	sub	sp, #44	@ 0x2c
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	613b      	str	r3, [r7, #16]
  return result;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80044ae:	2320      	movs	r3, #32
 80044b0:	e003      	b.n	80044ba <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	fab3 f383 	clz	r3, r3
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	2103      	movs	r1, #3
 80044be:	fa01 f303 	lsl.w	r3, r1, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	401a      	ands	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	fa93 f3a3 	rbit	r3, r3
 80044d0:	61fb      	str	r3, [r7, #28]
  return result;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80044dc:	2320      	movs	r3, #32
 80044de:	e003      	b.n	80044e8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80044e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e2:	fab3 f383 	clz	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	431a      	orrs	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	601a      	str	r2, [r3, #0]
}
 80044f6:	bf00      	nop
 80044f8:	372c      	adds	r7, #44	@ 0x2c
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <LL_GPIO_SetPinOutputType>:
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	43db      	mvns	r3, r3
 8004516:	401a      	ands	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	431a      	orrs	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	605a      	str	r2, [r3, #4]
}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <LL_GPIO_SetPinSpeed>:
{
 8004532:	b480      	push	{r7}
 8004534:	b08b      	sub	sp, #44	@ 0x2c
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	fa93 f3a3 	rbit	r3, r3
 800454c:	613b      	str	r3, [r7, #16]
  return result;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004558:	2320      	movs	r3, #32
 800455a:	e003      	b.n	8004564 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	2103      	movs	r1, #3
 8004568:	fa01 f303 	lsl.w	r3, r1, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	401a      	ands	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	fa93 f3a3 	rbit	r3, r3
 800457a:	61fb      	str	r3, [r7, #28]
  return result;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004586:	2320      	movs	r3, #32
 8004588:	e003      	b.n	8004592 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	fab3 f383 	clz	r3, r3
 8004590:	b2db      	uxtb	r3, r3
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	fa01 f303 	lsl.w	r3, r1, r3
 800459a:	431a      	orrs	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	609a      	str	r2, [r3, #8]
}
 80045a0:	bf00      	nop
 80045a2:	372c      	adds	r7, #44	@ 0x2c
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <LL_GPIO_SetPinPull>:
{
 80045ac:	b480      	push	{r7}
 80045ae:	b08b      	sub	sp, #44	@ 0x2c
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	fa93 f3a3 	rbit	r3, r3
 80045c6:	613b      	str	r3, [r7, #16]
  return result;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80045d2:	2320      	movs	r3, #32
 80045d4:	e003      	b.n	80045de <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	fab3 f383 	clz	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	2103      	movs	r1, #3
 80045e2:	fa01 f303 	lsl.w	r3, r1, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	401a      	ands	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	61fb      	str	r3, [r7, #28]
  return result;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004600:	2320      	movs	r3, #32
 8004602:	e003      	b.n	800460c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	fab3 f383 	clz	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	fa01 f303 	lsl.w	r3, r1, r3
 8004614:	431a      	orrs	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	60da      	str	r2, [r3, #12]
}
 800461a:	bf00      	nop
 800461c:	372c      	adds	r7, #44	@ 0x2c
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <LL_GPIO_SetAFPin_0_7>:
{
 8004626:	b480      	push	{r7}
 8004628:	b08b      	sub	sp, #44	@ 0x2c
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a1a      	ldr	r2, [r3, #32]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	fa93 f3a3 	rbit	r3, r3
 8004640:	613b      	str	r3, [r7, #16]
  return result;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800464c:	2320      	movs	r3, #32
 800464e:	e003      	b.n	8004658 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	fab3 f383 	clz	r3, r3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	210f      	movs	r1, #15
 800465c:	fa01 f303 	lsl.w	r3, r1, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	401a      	ands	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	fa93 f3a3 	rbit	r3, r3
 800466e:	61fb      	str	r3, [r7, #28]
  return result;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800467a:	2320      	movs	r3, #32
 800467c:	e003      	b.n	8004686 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	fab3 f383 	clz	r3, r3
 8004684:	b2db      	uxtb	r3, r3
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	431a      	orrs	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	621a      	str	r2, [r3, #32]
}
 8004694:	bf00      	nop
 8004696:	372c      	adds	r7, #44	@ 0x2c
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <LL_GPIO_SetAFPin_8_15>:
{
 80046a0:	b480      	push	{r7}
 80046a2:	b08b      	sub	sp, #44	@ 0x2c
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	0a1b      	lsrs	r3, r3, #8
 80046b4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	fa93 f3a3 	rbit	r3, r3
 80046bc:	613b      	str	r3, [r7, #16]
  return result;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80046c8:	2320      	movs	r3, #32
 80046ca:	e003      	b.n	80046d4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	fab3 f383 	clz	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	210f      	movs	r1, #15
 80046d8:	fa01 f303 	lsl.w	r3, r1, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	401a      	ands	r2, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	0a1b      	lsrs	r3, r3, #8
 80046e4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	fa93 f3a3 	rbit	r3, r3
 80046ec:	61fb      	str	r3, [r7, #28]
  return result;
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80046f8:	2320      	movs	r3, #32
 80046fa:	e003      	b.n	8004704 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	fab3 f383 	clz	r3, r3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	fa01 f303 	lsl.w	r3, r1, r3
 800470c:	431a      	orrs	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004712:	bf00      	nop
 8004714:	372c      	adds	r7, #44	@ 0x2c
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b08a      	sub	sp, #40	@ 0x28
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004728:	2300      	movs	r3, #0
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800472c:	2300      	movs	r3, #0
 800472e:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	fa93 f3a3 	rbit	r3, r3
 800473c:	617b      	str	r3, [r7, #20]
  return result;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <LL_GPIO_Init+0x2e>
    return 32U;
 8004748:	2320      	movs	r3, #32
 800474a:	e003      	b.n	8004754 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004756:	e057      	b.n	8004808 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	2101      	movs	r1, #1
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	fa01 f303 	lsl.w	r3, r1, r3
 8004764:	4013      	ands	r3, r2
 8004766:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d049      	beq.n	8004802 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d003      	beq.n	800477e <LL_GPIO_Init+0x60>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d10d      	bne.n	800479a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	461a      	mov	r2, r3
 8004784:	6a39      	ldr	r1, [r7, #32]
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff fed3 	bl	8004532 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	461a      	mov	r2, r3
 8004792:	6a39      	ldr	r1, [r7, #32]
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff feb4 	bl	8004502 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	461a      	mov	r2, r3
 80047a0:	6a39      	ldr	r1, [r7, #32]
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff ff02 	bl	80045ac <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d121      	bne.n	80047f4 <LL_GPIO_Init+0xd6>
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	fa93 f3a3 	rbit	r3, r3
 80047ba:	60bb      	str	r3, [r7, #8]
  return result;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <LL_GPIO_Init+0xac>
    return 32U;
 80047c6:	2320      	movs	r3, #32
 80047c8:	e003      	b.n	80047d2 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80047d2:	2b07      	cmp	r3, #7
 80047d4:	d807      	bhi.n	80047e6 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	461a      	mov	r2, r3
 80047dc:	6a39      	ldr	r1, [r7, #32]
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff ff21 	bl	8004626 <LL_GPIO_SetAFPin_0_7>
 80047e4:	e006      	b.n	80047f4 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	461a      	mov	r2, r3
 80047ec:	6a39      	ldr	r1, [r7, #32]
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ff56 	bl	80046a0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	461a      	mov	r2, r3
 80047fa:	6a39      	ldr	r1, [r7, #32]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff fe43 	bl	8004488 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	3301      	adds	r3, #1
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1a0      	bne.n	8004758 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3728      	adds	r7, #40	@ 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004824:	4b04      	ldr	r3, [pc, #16]	@ (8004838 <LL_RCC_GetSysClkSource+0x18>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 030c 	and.w	r3, r3, #12
}
 800482c:	4618      	mov	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800

0800483c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004840:	4b04      	ldr	r3, [pc, #16]	@ (8004854 <LL_RCC_GetAHBPrescaler+0x18>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800

08004858 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800485c:	4b04      	ldr	r3, [pc, #16]	@ (8004870 <LL_RCC_GetAPB1Prescaler+0x18>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8004864:	4618      	mov	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40023800 	.word	0x40023800

08004874 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004878:	4b04      	ldr	r3, [pc, #16]	@ (800488c <LL_RCC_GetAPB2Prescaler+0x18>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40023800 	.word	0x40023800

08004890 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004894:	4b04      	ldr	r3, [pc, #16]	@ (80048a8 <LL_RCC_PLL_GetMainSource+0x18>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800489c:	4618      	mov	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800

080048ac <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80048b0:	4b04      	ldr	r3, [pc, #16]	@ (80048c4 <LL_RCC_PLL_GetN+0x18>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	099b      	lsrs	r3, r3, #6
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	40023800 	.word	0x40023800

080048c8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80048cc:	4b04      	ldr	r3, [pc, #16]	@ (80048e0 <LL_RCC_PLL_GetP+0x18>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800

080048e4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80048e8:	4b04      	ldr	r3, [pc, #16]	@ (80048fc <LL_RCC_PLL_GetDivider+0x18>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800

08004900 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004908:	f000 f820 	bl	800494c <RCC_GetSystemClockFreq>
 800490c:	4602      	mov	r2, r0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f840 	bl	800499c <RCC_GetHCLKClockFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 f84e 	bl	80049c8 <RCC_GetPCLK1ClockFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f85a 	bl	80049f0 <RCC_GetPCLK2ClockFreq>
 800493c:	4602      	mov	r2, r0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60da      	str	r2, [r3, #12]
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004956:	f7ff ff63 	bl	8004820 <LL_RCC_GetSysClkSource>
 800495a:	4603      	mov	r3, r0
 800495c:	2b08      	cmp	r3, #8
 800495e:	d00c      	beq.n	800497a <RCC_GetSystemClockFreq+0x2e>
 8004960:	2b08      	cmp	r3, #8
 8004962:	d80f      	bhi.n	8004984 <RCC_GetSystemClockFreq+0x38>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <RCC_GetSystemClockFreq+0x22>
 8004968:	2b04      	cmp	r3, #4
 800496a:	d003      	beq.n	8004974 <RCC_GetSystemClockFreq+0x28>
 800496c:	e00a      	b.n	8004984 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800496e:	4b09      	ldr	r3, [pc, #36]	@ (8004994 <RCC_GetSystemClockFreq+0x48>)
 8004970:	607b      	str	r3, [r7, #4]
      break;
 8004972:	e00a      	b.n	800498a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004974:	4b08      	ldr	r3, [pc, #32]	@ (8004998 <RCC_GetSystemClockFreq+0x4c>)
 8004976:	607b      	str	r3, [r7, #4]
      break;
 8004978:	e007      	b.n	800498a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800497a:	2008      	movs	r0, #8
 800497c:	f000 f84c 	bl	8004a18 <RCC_PLL_GetFreqDomain_SYS>
 8004980:	6078      	str	r0, [r7, #4]
      break;
 8004982:	e002      	b.n	800498a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004984:	4b03      	ldr	r3, [pc, #12]	@ (8004994 <RCC_GetSystemClockFreq+0x48>)
 8004986:	607b      	str	r3, [r7, #4]
      break;
 8004988:	bf00      	nop
  }

  return frequency;
 800498a:	687b      	ldr	r3, [r7, #4]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	00f42400 	.word	0x00f42400
 8004998:	007a1200 	.word	0x007a1200

0800499c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80049a4:	f7ff ff4a 	bl	800483c <LL_RCC_GetAHBPrescaler>
 80049a8:	4603      	mov	r3, r0
 80049aa:	091b      	lsrs	r3, r3, #4
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	4a04      	ldr	r2, [pc, #16]	@ (80049c4 <RCC_GetHCLKClockFreq+0x28>)
 80049b2:	5cd3      	ldrb	r3, [r2, r3]
 80049b4:	461a      	mov	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	40d3      	lsrs	r3, r2
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	0800a5c8 	.word	0x0800a5c8

080049c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80049d0:	f7ff ff42 	bl	8004858 <LL_RCC_GetAPB1Prescaler>
 80049d4:	4603      	mov	r3, r0
 80049d6:	0a9b      	lsrs	r3, r3, #10
 80049d8:	4a04      	ldr	r2, [pc, #16]	@ (80049ec <RCC_GetPCLK1ClockFreq+0x24>)
 80049da:	5cd3      	ldrb	r3, [r2, r3]
 80049dc:	461a      	mov	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	40d3      	lsrs	r3, r2
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	0800a5d8 	.word	0x0800a5d8

080049f0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80049f8:	f7ff ff3c 	bl	8004874 <LL_RCC_GetAPB2Prescaler>
 80049fc:	4603      	mov	r3, r0
 80049fe:	0b5b      	lsrs	r3, r3, #13
 8004a00:	4a04      	ldr	r2, [pc, #16]	@ (8004a14 <RCC_GetPCLK2ClockFreq+0x24>)
 8004a02:	5cd3      	ldrb	r3, [r2, r3]
 8004a04:	461a      	mov	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	40d3      	lsrs	r3, r2
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	0800a5d8 	.word	0x0800a5d8

08004a18 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004a2c:	f7ff ff30 	bl	8004890 <LL_RCC_PLL_GetMainSource>
 8004a30:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d004      	beq.n	8004a42 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a3e:	d003      	beq.n	8004a48 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004a40:	e005      	b.n	8004a4e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004a42:	4b12      	ldr	r3, [pc, #72]	@ (8004a8c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004a44:	617b      	str	r3, [r7, #20]
      break;
 8004a46:	e005      	b.n	8004a54 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004a48:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004a4a:	617b      	str	r3, [r7, #20]
      break;
 8004a4c:	e002      	b.n	8004a54 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a8c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004a50:	617b      	str	r3, [r7, #20]
      break;
 8004a52:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d113      	bne.n	8004a82 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004a5a:	f7ff ff43 	bl	80048e4 <LL_RCC_PLL_GetDivider>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	fbb3 f4f2 	udiv	r4, r3, r2
 8004a66:	f7ff ff21 	bl	80048ac <LL_RCC_PLL_GetN>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	fb03 f404 	mul.w	r4, r3, r4
 8004a70:	f7ff ff2a 	bl	80048c8 <LL_RCC_PLL_GetP>
 8004a74:	4603      	mov	r3, r0
 8004a76:	0c1b      	lsrs	r3, r3, #16
 8004a78:	3301      	adds	r3, #1
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	fbb4 f3f3 	udiv	r3, r4, r3
 8004a80:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004a82:	693b      	ldr	r3, [r7, #16]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd90      	pop	{r4, r7, pc}
 8004a8c:	00f42400 	.word	0x00f42400
 8004a90:	007a1200 	.word	0x007a1200

08004a94 <LL_USART_IsEnabled>:
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa8:	bf0c      	ite	eq
 8004aaa:	2301      	moveq	r3, #1
 8004aac:	2300      	movne	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <LL_USART_SetStopBitsLength>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	611a      	str	r2, [r3, #16]
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <LL_USART_SetHWFlowCtrl>:
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	615a      	str	r2, [r3, #20]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <LL_USART_SetBaudRate>:
{
 8004b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b0c:	b0c0      	sub	sp, #256	@ 0x100
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b14:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8004b18:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8004b1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b28:	f040 810c 	bne.w	8004d44 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004b2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b30:	2200      	movs	r2, #0
 8004b32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b3e:	4622      	mov	r2, r4
 8004b40:	462b      	mov	r3, r5
 8004b42:	1891      	adds	r1, r2, r2
 8004b44:	6639      	str	r1, [r7, #96]	@ 0x60
 8004b46:	415b      	adcs	r3, r3
 8004b48:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b4a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004b4e:	4621      	mov	r1, r4
 8004b50:	eb12 0801 	adds.w	r8, r2, r1
 8004b54:	4629      	mov	r1, r5
 8004b56:	eb43 0901 	adc.w	r9, r3, r1
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b6e:	4690      	mov	r8, r2
 8004b70:	4699      	mov	r9, r3
 8004b72:	4623      	mov	r3, r4
 8004b74:	eb18 0303 	adds.w	r3, r8, r3
 8004b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b7c:	462b      	mov	r3, r5
 8004b7e:	eb49 0303 	adc.w	r3, r9, r3
 8004b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	469a      	mov	sl, r3
 8004b8e:	4693      	mov	fp, r2
 8004b90:	eb1a 030a 	adds.w	r3, sl, sl
 8004b94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b96:	eb4b 030b 	adc.w	r3, fp, fp
 8004b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ba0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ba4:	f7fb ff6a 	bl	8000a7c <__aeabi_uldivmod>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4b64      	ldr	r3, [pc, #400]	@ (8004d40 <LL_USART_SetBaudRate+0x238>)
 8004bae:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	b29c      	uxth	r4, r3
 8004bba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bc4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bc8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8004bcc:	4642      	mov	r2, r8
 8004bce:	464b      	mov	r3, r9
 8004bd0:	1891      	adds	r1, r2, r2
 8004bd2:	6539      	str	r1, [r7, #80]	@ 0x50
 8004bd4:	415b      	adcs	r3, r3
 8004bd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004bdc:	4641      	mov	r1, r8
 8004bde:	1851      	adds	r1, r2, r1
 8004be0:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004be2:	4649      	mov	r1, r9
 8004be4:	414b      	adcs	r3, r1
 8004be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8004bf4:	4659      	mov	r1, fp
 8004bf6:	00cb      	lsls	r3, r1, #3
 8004bf8:	4651      	mov	r1, sl
 8004bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bfe:	4651      	mov	r1, sl
 8004c00:	00ca      	lsls	r2, r1, #3
 8004c02:	4610      	mov	r0, r2
 8004c04:	4619      	mov	r1, r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	4642      	mov	r2, r8
 8004c0a:	189b      	adds	r3, r3, r2
 8004c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c10:	464b      	mov	r3, r9
 8004c12:	460a      	mov	r2, r1
 8004c14:	eb42 0303 	adc.w	r3, r2, r3
 8004c18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004c1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004c20:	2200      	movs	r2, #0
 8004c22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c26:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8004c2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004c2e:	460b      	mov	r3, r1
 8004c30:	18db      	adds	r3, r3, r3
 8004c32:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c34:	4613      	mov	r3, r2
 8004c36:	eb42 0303 	adc.w	r3, r2, r3
 8004c3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c40:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8004c44:	f7fb ff1a 	bl	8000a7c <__aeabi_uldivmod>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d40 <LL_USART_SetBaudRate+0x238>)
 8004c50:	fba3 2301 	umull	r2, r3, r3, r1
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	2264      	movs	r2, #100	@ 0x64
 8004c58:	fb02 f303 	mul.w	r3, r2, r3
 8004c5c:	1acb      	subs	r3, r1, r3
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c64:	4b36      	ldr	r3, [pc, #216]	@ (8004d40 <LL_USART_SetBaudRate+0x238>)
 8004c66:	fba3 2302 	umull	r2, r3, r3, r2
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	4423      	add	r3, r4
 8004c7a:	b29c      	uxth	r4, r3
 8004c7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c86:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c8a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8004c8e:	4642      	mov	r2, r8
 8004c90:	464b      	mov	r3, r9
 8004c92:	1891      	adds	r1, r2, r2
 8004c94:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c96:	415b      	adcs	r3, r3
 8004c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c9a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c9e:	4641      	mov	r1, r8
 8004ca0:	1851      	adds	r1, r2, r1
 8004ca2:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	414b      	adcs	r3, r1
 8004ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004cb6:	4659      	mov	r1, fp
 8004cb8:	00cb      	lsls	r3, r1, #3
 8004cba:	4651      	mov	r1, sl
 8004cbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cc0:	4651      	mov	r1, sl
 8004cc2:	00ca      	lsls	r2, r1, #3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4642      	mov	r2, r8
 8004ccc:	189b      	adds	r3, r3, r2
 8004cce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	460a      	mov	r2, r1
 8004cd6:	eb42 0303 	adc.w	r3, r2, r3
 8004cda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004cde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ce8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004cec:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	18db      	adds	r3, r3, r3
 8004cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	eb42 0303 	adc.w	r3, r2, r3
 8004cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d02:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8004d06:	f7fb feb9 	bl	8000a7c <__aeabi_uldivmod>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d40 <LL_USART_SetBaudRate+0x238>)
 8004d10:	fba3 1302 	umull	r1, r3, r3, r2
 8004d14:	095b      	lsrs	r3, r3, #5
 8004d16:	2164      	movs	r1, #100	@ 0x64
 8004d18:	fb01 f303 	mul.w	r3, r1, r3
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	3332      	adds	r3, #50	@ 0x32
 8004d22:	4a07      	ldr	r2, [pc, #28]	@ (8004d40 <LL_USART_SetBaudRate+0x238>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	4423      	add	r3, r4
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d3c:	609a      	str	r2, [r3, #8]
}
 8004d3e:	e108      	b.n	8004f52 <LL_USART_SetBaudRate+0x44a>
 8004d40:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004d44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d4e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d52:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8004d56:	4642      	mov	r2, r8
 8004d58:	464b      	mov	r3, r9
 8004d5a:	1891      	adds	r1, r2, r2
 8004d5c:	6239      	str	r1, [r7, #32]
 8004d5e:	415b      	adcs	r3, r3
 8004d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d66:	4641      	mov	r1, r8
 8004d68:	1854      	adds	r4, r2, r1
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	eb43 0501 	adc.w	r5, r3, r1
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	00eb      	lsls	r3, r5, #3
 8004d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d7e:	00e2      	lsls	r2, r4, #3
 8004d80:	4614      	mov	r4, r2
 8004d82:	461d      	mov	r5, r3
 8004d84:	4643      	mov	r3, r8
 8004d86:	18e3      	adds	r3, r4, r3
 8004d88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	eb45 0303 	adc.w	r3, r5, r3
 8004d92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004d96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004da0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8004db0:	4629      	mov	r1, r5
 8004db2:	008b      	lsls	r3, r1, #2
 8004db4:	4621      	mov	r1, r4
 8004db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dba:	4621      	mov	r1, r4
 8004dbc:	008a      	lsls	r2, r1, #2
 8004dbe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8004dc2:	f7fb fe5b 	bl	8000a7c <__aeabi_uldivmod>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4b65      	ldr	r3, [pc, #404]	@ (8004f60 <LL_USART_SetBaudRate+0x458>)
 8004dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	b29c      	uxth	r4, r3
 8004dd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004de2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004de6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8004dea:	4642      	mov	r2, r8
 8004dec:	464b      	mov	r3, r9
 8004dee:	1891      	adds	r1, r2, r2
 8004df0:	61b9      	str	r1, [r7, #24]
 8004df2:	415b      	adcs	r3, r3
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dfa:	4641      	mov	r1, r8
 8004dfc:	1851      	adds	r1, r2, r1
 8004dfe:	6139      	str	r1, [r7, #16]
 8004e00:	4649      	mov	r1, r9
 8004e02:	414b      	adcs	r3, r1
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e12:	4659      	mov	r1, fp
 8004e14:	00cb      	lsls	r3, r1, #3
 8004e16:	4651      	mov	r1, sl
 8004e18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e1c:	4651      	mov	r1, sl
 8004e1e:	00ca      	lsls	r2, r1, #3
 8004e20:	4610      	mov	r0, r2
 8004e22:	4619      	mov	r1, r3
 8004e24:	4603      	mov	r3, r0
 8004e26:	4642      	mov	r2, r8
 8004e28:	189b      	adds	r3, r3, r2
 8004e2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e2e:	464b      	mov	r3, r9
 8004e30:	460a      	mov	r2, r1
 8004e32:	eb42 0303 	adc.w	r3, r2, r3
 8004e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e44:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8004e54:	4649      	mov	r1, r9
 8004e56:	008b      	lsls	r3, r1, #2
 8004e58:	4641      	mov	r1, r8
 8004e5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e5e:	4641      	mov	r1, r8
 8004e60:	008a      	lsls	r2, r1, #2
 8004e62:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8004e66:	f7fb fe09 	bl	8000a7c <__aeabi_uldivmod>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4b3b      	ldr	r3, [pc, #236]	@ (8004f60 <LL_USART_SetBaudRate+0x458>)
 8004e72:	fba3 2301 	umull	r2, r3, r3, r1
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	2264      	movs	r2, #100	@ 0x64
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	1acb      	subs	r3, r1, r3
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	3332      	adds	r3, #50	@ 0x32
 8004e84:	4a36      	ldr	r2, [pc, #216]	@ (8004f60 <LL_USART_SetBaudRate+0x458>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	4423      	add	r3, r4
 8004e96:	b29c      	uxth	r4, r3
 8004e98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ea0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ea2:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ea6:	4642      	mov	r2, r8
 8004ea8:	464b      	mov	r3, r9
 8004eaa:	1891      	adds	r1, r2, r2
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	415b      	adcs	r3, r3
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	1851      	adds	r1, r2, r1
 8004eba:	6039      	str	r1, [r7, #0]
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	414b      	adcs	r3, r1
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ece:	4659      	mov	r1, fp
 8004ed0:	00cb      	lsls	r3, r1, #3
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ed8:	4651      	mov	r1, sl
 8004eda:	00ca      	lsls	r2, r1, #3
 8004edc:	4610      	mov	r0, r2
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	4642      	mov	r2, r8
 8004ee4:	189b      	adds	r3, r3, r2
 8004ee6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ee8:	464b      	mov	r3, r9
 8004eea:	460a      	mov	r2, r1
 8004eec:	eb42 0303 	adc.w	r3, r2, r3
 8004ef0:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ef2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004efa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8004f08:	4649      	mov	r1, r9
 8004f0a:	008b      	lsls	r3, r1, #2
 8004f0c:	4641      	mov	r1, r8
 8004f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f12:	4641      	mov	r1, r8
 8004f14:	008a      	lsls	r2, r1, #2
 8004f16:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004f1a:	f7fb fdaf 	bl	8000a7c <__aeabi_uldivmod>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	4b0f      	ldr	r3, [pc, #60]	@ (8004f60 <LL_USART_SetBaudRate+0x458>)
 8004f24:	fba3 1302 	umull	r1, r3, r3, r2
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	2164      	movs	r1, #100	@ 0x64
 8004f2c:	fb01 f303 	mul.w	r3, r1, r3
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	3332      	adds	r3, #50	@ 0x32
 8004f36:	4a0a      	ldr	r2, [pc, #40]	@ (8004f60 <LL_USART_SetBaudRate+0x458>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	4423      	add	r3, r4
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f50:	609a      	str	r2, [r3, #8]
}
 8004f52:	bf00      	nop
 8004f54:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5e:	bf00      	nop
 8004f60:	51eb851f 	.word	0x51eb851f

08004f64 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff fd8c 	bl	8004a94 <LL_USART_IsEnabled>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d149      	bne.n	8005016 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004f8a:	f023 030c 	bic.w	r3, r3, #12
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	6851      	ldr	r1, [r2, #4]
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	68d2      	ldr	r2, [r2, #12]
 8004f96:	4311      	orrs	r1, r2
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	6912      	ldr	r2, [r2, #16]
 8004f9c:	4311      	orrs	r1, r2
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	6992      	ldr	r2, [r2, #24]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff fd83 	bl	8004abc <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff fd90 	bl	8004ae2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004fc2:	f107 0308 	add.w	r3, r7, #8
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fc9a 	bl	8004900 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a14      	ldr	r2, [pc, #80]	@ (8005020 <LL_USART_Init+0xbc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d102      	bne.n	8004fda <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	e00c      	b.n	8004ff4 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a11      	ldr	r2, [pc, #68]	@ (8005024 <LL_USART_Init+0xc0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d102      	bne.n	8004fe8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	e005      	b.n	8004ff4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a0f      	ldr	r2, [pc, #60]	@ (8005028 <LL_USART_Init+0xc4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00d      	beq.n	8005016 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8005002:	2300      	movs	r3, #0
 8005004:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800500e:	69b9      	ldr	r1, [r7, #24]
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff fd79 	bl	8004b08 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005016:	7ffb      	ldrb	r3, [r7, #31]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40011000 	.word	0x40011000
 8005024:	40004400 	.word	0x40004400
 8005028:	40011400 	.word	0x40011400

0800502c <__NVIC_SetPriority>:
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	4603      	mov	r3, r0
 8005034:	6039      	str	r1, [r7, #0]
 8005036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503c:	2b00      	cmp	r3, #0
 800503e:	db0a      	blt.n	8005056 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	b2da      	uxtb	r2, r3
 8005044:	490c      	ldr	r1, [pc, #48]	@ (8005078 <__NVIC_SetPriority+0x4c>)
 8005046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504a:	0112      	lsls	r2, r2, #4
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	440b      	add	r3, r1
 8005050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005054:	e00a      	b.n	800506c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	b2da      	uxtb	r2, r3
 800505a:	4908      	ldr	r1, [pc, #32]	@ (800507c <__NVIC_SetPriority+0x50>)
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	3b04      	subs	r3, #4
 8005064:	0112      	lsls	r2, r2, #4
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	440b      	add	r3, r1
 800506a:	761a      	strb	r2, [r3, #24]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	e000e100 	.word	0xe000e100
 800507c:	e000ed00 	.word	0xe000ed00

08005080 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005084:	4b05      	ldr	r3, [pc, #20]	@ (800509c <SysTick_Handler+0x1c>)
 8005086:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005088:	f002 fe78 	bl	8007d7c <xTaskGetSchedulerState>
 800508c:	4603      	mov	r3, r0
 800508e:	2b01      	cmp	r3, #1
 8005090:	d001      	beq.n	8005096 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005092:	f003 fe91 	bl	8008db8 <xPortSysTickHandler>
  }
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	e000e010 	.word	0xe000e010

080050a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050a4:	2100      	movs	r1, #0
 80050a6:	f06f 0004 	mvn.w	r0, #4
 80050aa:	f7ff ffbf 	bl	800502c <__NVIC_SetPriority>
#endif
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050ba:	f3ef 8305 	mrs	r3, IPSR
 80050be:	603b      	str	r3, [r7, #0]
  return(result);
 80050c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050c6:	f06f 0305 	mvn.w	r3, #5
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	e00c      	b.n	80050e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050ce:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <osKernelInitialize+0x44>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d105      	bne.n	80050e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80050d6:	4b08      	ldr	r3, [pc, #32]	@ (80050f8 <osKernelInitialize+0x44>)
 80050d8:	2201      	movs	r2, #1
 80050da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050dc:	2300      	movs	r3, #0
 80050de:	607b      	str	r3, [r7, #4]
 80050e0:	e002      	b.n	80050e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80050e2:	f04f 33ff 	mov.w	r3, #4294967295
 80050e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050e8:	687b      	ldr	r3, [r7, #4]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	200009f0 	.word	0x200009f0

080050fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005102:	f3ef 8305 	mrs	r3, IPSR
 8005106:	603b      	str	r3, [r7, #0]
  return(result);
 8005108:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <osKernelStart+0x1a>
    stat = osErrorISR;
 800510e:	f06f 0305 	mvn.w	r3, #5
 8005112:	607b      	str	r3, [r7, #4]
 8005114:	e010      	b.n	8005138 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005116:	4b0b      	ldr	r3, [pc, #44]	@ (8005144 <osKernelStart+0x48>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d109      	bne.n	8005132 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800511e:	f7ff ffbf 	bl	80050a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005122:	4b08      	ldr	r3, [pc, #32]	@ (8005144 <osKernelStart+0x48>)
 8005124:	2202      	movs	r2, #2
 8005126:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005128:	f002 f928 	bl	800737c <vTaskStartScheduler>
      stat = osOK;
 800512c:	2300      	movs	r3, #0
 800512e:	607b      	str	r3, [r7, #4]
 8005130:	e002      	b.n	8005138 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005132:	f04f 33ff 	mov.w	r3, #4294967295
 8005136:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005138:	687b      	ldr	r3, [r7, #4]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	200009f0 	.word	0x200009f0

08005148 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b08e      	sub	sp, #56	@ 0x38
 800514c:	af04      	add	r7, sp, #16
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005154:	2300      	movs	r3, #0
 8005156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005158:	f3ef 8305 	mrs	r3, IPSR
 800515c:	617b      	str	r3, [r7, #20]
  return(result);
 800515e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005160:	2b00      	cmp	r3, #0
 8005162:	d17e      	bne.n	8005262 <osThreadNew+0x11a>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d07b      	beq.n	8005262 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800516a:	2380      	movs	r3, #128	@ 0x80
 800516c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800516e:	2318      	movs	r3, #24
 8005170:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d045      	beq.n	800520e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <osThreadNew+0x48>
        name = attr->name;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <osThreadNew+0x6e>
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b38      	cmp	r3, #56	@ 0x38
 80051a8:	d805      	bhi.n	80051b6 <osThreadNew+0x6e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <osThreadNew+0x72>
        return (NULL);
 80051b6:	2300      	movs	r3, #0
 80051b8:	e054      	b.n	8005264 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	089b      	lsrs	r3, r3, #2
 80051c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00e      	beq.n	80051f0 <osThreadNew+0xa8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2b5b      	cmp	r3, #91	@ 0x5b
 80051d8:	d90a      	bls.n	80051f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d006      	beq.n	80051f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <osThreadNew+0xa8>
        mem = 1;
 80051ea:	2301      	movs	r3, #1
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	e010      	b.n	8005212 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10c      	bne.n	8005212 <osThreadNew+0xca>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d108      	bne.n	8005212 <osThreadNew+0xca>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d104      	bne.n	8005212 <osThreadNew+0xca>
          mem = 0;
 8005208:	2300      	movs	r3, #0
 800520a:	61bb      	str	r3, [r7, #24]
 800520c:	e001      	b.n	8005212 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d110      	bne.n	800523a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005220:	9202      	str	r2, [sp, #8]
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	6a3a      	ldr	r2, [r7, #32]
 800522c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f001 fec8 	bl	8006fc4 <xTaskCreateStatic>
 8005234:	4603      	mov	r3, r0
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	e013      	b.n	8005262 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d110      	bne.n	8005262 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	b29a      	uxth	r2, r3
 8005244:	f107 0310 	add.w	r3, r7, #16
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f001 ff16 	bl	8007084 <xTaskCreate>
 8005258:	4603      	mov	r3, r0
 800525a:	2b01      	cmp	r3, #1
 800525c:	d001      	beq.n	8005262 <osThreadNew+0x11a>
            hTask = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005262:	693b      	ldr	r3, [r7, #16]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3728      	adds	r7, #40	@ 0x28
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005274:	f3ef 8305 	mrs	r3, IPSR
 8005278:	60bb      	str	r3, [r7, #8]
  return(result);
 800527a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <osDelay+0x1c>
    stat = osErrorISR;
 8005280:	f06f 0305 	mvn.w	r3, #5
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e007      	b.n	8005298 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f002 f83c 	bl	8007310 <vTaskDelay>
    }
  }

  return (stat);
 8005298:	68fb      	ldr	r3, [r7, #12]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f003 fb82 	bl	80089b4 <pvTimerGetTimerID>
 80052b0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <TimerCallback+0x22>
    callb->func (callb->arg);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	6852      	ldr	r2, [r2, #4]
 80052c0:	4610      	mov	r0, r2
 80052c2:	4798      	blx	r3
  }
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08c      	sub	sp, #48	@ 0x30
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	460b      	mov	r3, r1
 80052da:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052e0:	f3ef 8305 	mrs	r3, IPSR
 80052e4:	613b      	str	r3, [r7, #16]
  return(result);
 80052e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d163      	bne.n	80053b4 <osTimerNew+0xe8>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d060      	beq.n	80053b4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80052f2:	2008      	movs	r0, #8
 80052f4:	f003 fdf2 	bl	8008edc <pvPortMalloc>
 80052f8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d059      	beq.n	80053b4 <osTimerNew+0xe8>
      callb->func = func;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800530c:	7afb      	ldrb	r3, [r7, #11]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d102      	bne.n	8005318 <osTimerNew+0x4c>
        reload = pdFALSE;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	e001      	b.n	800531c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005318:	2301      	movs	r3, #1
 800531a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800531c:	f04f 33ff 	mov.w	r3, #4294967295
 8005320:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8005322:	2300      	movs	r3, #0
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01c      	beq.n	8005366 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <osTimerNew+0x6e>
          name = attr->name;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d006      	beq.n	8005350 <osTimerNew+0x84>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b2b      	cmp	r3, #43	@ 0x2b
 8005348:	d902      	bls.n	8005350 <osTimerNew+0x84>
          mem = 1;
 800534a:	2301      	movs	r3, #1
 800534c:	61bb      	str	r3, [r7, #24]
 800534e:	e00c      	b.n	800536a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d108      	bne.n	800536a <osTimerNew+0x9e>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d104      	bne.n	800536a <osTimerNew+0x9e>
            mem = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	e001      	b.n	800536a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d10c      	bne.n	800538a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	4b12      	ldr	r3, [pc, #72]	@ (80053c0 <osTimerNew+0xf4>)
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	69fa      	ldr	r2, [r7, #28]
 800537e:	2101      	movs	r1, #1
 8005380:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005382:	f002 ff60 	bl	8008246 <xTimerCreateStatic>
 8005386:	6238      	str	r0, [r7, #32]
 8005388:	e00b      	b.n	80053a2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d108      	bne.n	80053a2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005390:	4b0b      	ldr	r3, [pc, #44]	@ (80053c0 <osTimerNew+0xf4>)
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	2101      	movs	r1, #1
 800539a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800539c:	f002 ff32 	bl	8008204 <xTimerCreate>
 80053a0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <osTimerNew+0xe8>
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <osTimerNew+0xe8>
        vPortFree (callb);
 80053ae:	6978      	ldr	r0, [r7, #20]
 80053b0:	f003 fe62 	bl	8009078 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80053b4:	6a3b      	ldr	r3, [r7, #32]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3728      	adds	r7, #40	@ 0x28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	080052a3 	.word	0x080052a3

080053c4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053d2:	f3ef 8305 	mrs	r3, IPSR
 80053d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80053d8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <osTimerStart+0x22>
    stat = osErrorISR;
 80053de:	f06f 0305 	mvn.w	r3, #5
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	e017      	b.n	8005416 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d103      	bne.n	80053f4 <osTimerStart+0x30>
    stat = osErrorParameter;
 80053ec:	f06f 0303 	mvn.w	r3, #3
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	e010      	b.n	8005416 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80053f4:	2300      	movs	r3, #0
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	2300      	movs	r3, #0
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	2104      	movs	r1, #4
 80053fe:	6938      	ldr	r0, [r7, #16]
 8005400:	f002 ff9e 	bl	8008340 <xTimerGenericCommand>
 8005404:	4603      	mov	r3, r0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d102      	bne.n	8005410 <osTimerStart+0x4c>
      stat = osOK;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	e002      	b.n	8005416 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005410:	f06f 0302 	mvn.w	r3, #2
 8005414:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005416:	697b      	ldr	r3, [r7, #20]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af02      	add	r7, sp, #8
 8005426:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800542c:	f3ef 8305 	mrs	r3, IPSR
 8005430:	60fb      	str	r3, [r7, #12]
  return(result);
 8005432:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <osTimerStop+0x20>
    stat = osErrorISR;
 8005438:	f06f 0305 	mvn.w	r3, #5
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	e021      	b.n	8005484 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <osTimerStop+0x2e>
    stat = osErrorParameter;
 8005446:	f06f 0303 	mvn.w	r3, #3
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e01a      	b.n	8005484 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800544e:	6938      	ldr	r0, [r7, #16]
 8005450:	f003 fa86 	bl	8008960 <xTimerIsTimerActive>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d103      	bne.n	8005462 <osTimerStop+0x42>
      stat = osErrorResource;
 800545a:	f06f 0302 	mvn.w	r3, #2
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	e010      	b.n	8005484 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8005462:	2300      	movs	r3, #0
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	2300      	movs	r3, #0
 8005468:	2200      	movs	r2, #0
 800546a:	2103      	movs	r1, #3
 800546c:	6938      	ldr	r0, [r7, #16]
 800546e:	f002 ff67 	bl	8008340 <xTimerGenericCommand>
 8005472:	4603      	mov	r3, r0
 8005474:	2b01      	cmp	r3, #1
 8005476:	d102      	bne.n	800547e <osTimerStop+0x5e>
        stat = osOK;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e002      	b.n	8005484 <osTimerStop+0x64>
      } else {
        stat = osError;
 800547e:	f04f 33ff 	mov.w	r3, #4294967295
 8005482:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005484:	697b      	ldr	r3, [r7, #20]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800548e:	b580      	push	{r7, lr}
 8005490:	b086      	sub	sp, #24
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800549a:	f3ef 8305 	mrs	r3, IPSR
 800549e:	60fb      	str	r3, [r7, #12]
  return(result);
 80054a0:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d12d      	bne.n	8005502 <osEventFlagsNew+0x74>
    mem = -1;
 80054a6:	f04f 33ff 	mov.w	r3, #4294967295
 80054aa:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d015      	beq.n	80054de <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d006      	beq.n	80054c8 <osEventFlagsNew+0x3a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	2b1f      	cmp	r3, #31
 80054c0:	d902      	bls.n	80054c8 <osEventFlagsNew+0x3a>
        mem = 1;
 80054c2:	2301      	movs	r3, #1
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	e00c      	b.n	80054e2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d108      	bne.n	80054e2 <osEventFlagsNew+0x54>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d104      	bne.n	80054e2 <osEventFlagsNew+0x54>
          mem = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	e001      	b.n	80054e2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d106      	bne.n	80054f6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fb27 	bl	8005b40 <xEventGroupCreateStatic>
 80054f2:	6178      	str	r0, [r7, #20]
 80054f4:	e005      	b.n	8005502 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d102      	bne.n	8005502 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80054fc:	f000 fb59 	bl	8005bb2 <xEventGroupCreate>
 8005500:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005502:	697b      	ldr	r3, [r7, #20]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <osEventFlagsSet+0x1c>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005526:	d303      	bcc.n	8005530 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8005528:	f06f 0303 	mvn.w	r3, #3
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e028      	b.n	8005582 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005530:	f3ef 8305 	mrs	r3, IPSR
 8005534:	60fb      	str	r3, [r7, #12]
  return(result);
 8005536:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01d      	beq.n	8005578 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8005540:	f107 0308 	add.w	r3, r7, #8
 8005544:	461a      	mov	r2, r3
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	6938      	ldr	r0, [r7, #16]
 800554a:	f000 fcdb 	bl	8005f04 <xEventGroupSetBitsFromISR>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8005554:	f06f 0302 	mvn.w	r3, #2
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	e012      	b.n	8005582 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00d      	beq.n	8005582 <osEventFlagsSet+0x76>
 8005566:	4b09      	ldr	r3, [pc, #36]	@ (800558c <osEventFlagsSet+0x80>)
 8005568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	e004      	b.n	8005582 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	6938      	ldr	r0, [r7, #16]
 800557c:	f000 fc06 	bl	8005d8c <xEventGroupSetBits>
 8005580:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8005582:	697b      	ldr	r3, [r7, #20]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	e000ed04 	.word	0xe000ed04

08005590 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b08c      	sub	sp, #48	@ 0x30
 8005594:	af02      	add	r7, sp, #8
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <osEventFlagsWait+0x20>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055ae:	d303      	bcc.n	80055b8 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 80055b0:	f06f 0303 	mvn.w	r3, #3
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	e04b      	b.n	8005650 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055b8:	f3ef 8305 	mrs	r3, IPSR
 80055bc:	617b      	str	r3, [r7, #20]
  return(result);
 80055be:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 80055c4:	f06f 0305 	mvn.w	r3, #5
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	e041      	b.n	8005650 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 80055d6:	2301      	movs	r3, #1
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055da:	e001      	b.n	80055e0 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 80055dc:	2300      	movs	r3, #0
 80055de:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	623b      	str	r3, [r7, #32]
 80055ee:	e001      	b.n	80055f4 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 80055f0:	2301      	movs	r3, #1
 80055f2:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	6a3a      	ldr	r2, [r7, #32]
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	69b8      	ldr	r0, [r7, #24]
 8005600:	f000 faf2 	bl	8005be8 <xEventGroupWaitBits>
 8005604:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d010      	beq.n	8005632 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4013      	ands	r3, r2
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	429a      	cmp	r2, r3
 800561a:	d019      	beq.n	8005650 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8005622:	f06f 0301 	mvn.w	r3, #1
 8005626:	61fb      	str	r3, [r7, #28]
 8005628:	e012      	b.n	8005650 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800562a:	f06f 0302 	mvn.w	r3, #2
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	e00e      	b.n	8005650 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d109      	bne.n	8005650 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8005642:	f06f 0301 	mvn.w	r3, #1
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	e002      	b.n	8005650 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800564a:	f06f 0302 	mvn.w	r3, #2
 800564e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8005650:	69fb      	ldr	r3, [r7, #28]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3728      	adds	r7, #40	@ 0x28
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800565a:	b580      	push	{r7, lr}
 800565c:	b088      	sub	sp, #32
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005666:	f3ef 8305 	mrs	r3, IPSR
 800566a:	60bb      	str	r3, [r7, #8]
  return(result);
 800566c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800566e:	2b00      	cmp	r3, #0
 8005670:	d174      	bne.n	800575c <osMutexNew+0x102>
    if (attr != NULL) {
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	e001      	b.n	8005684 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <osMutexNew+0x3a>
      rmtx = 1U;
 800568e:	2301      	movs	r3, #1
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	e001      	b.n	8005698 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d15c      	bne.n	800575c <osMutexNew+0x102>
      mem = -1;
 80056a2:	f04f 33ff 	mov.w	r3, #4294967295
 80056a6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d015      	beq.n	80056da <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d006      	beq.n	80056c4 <osMutexNew+0x6a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2b4f      	cmp	r3, #79	@ 0x4f
 80056bc:	d902      	bls.n	80056c4 <osMutexNew+0x6a>
          mem = 1;
 80056be:	2301      	movs	r3, #1
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	e00c      	b.n	80056de <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d108      	bne.n	80056de <osMutexNew+0x84>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d104      	bne.n	80056de <osMutexNew+0x84>
            mem = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	e001      	b.n	80056de <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d112      	bne.n	800570a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	4619      	mov	r1, r3
 80056f0:	2004      	movs	r0, #4
 80056f2:	f000 fe46 	bl	8006382 <xQueueCreateMutexStatic>
 80056f6:	61f8      	str	r0, [r7, #28]
 80056f8:	e016      	b.n	8005728 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	4619      	mov	r1, r3
 8005700:	2001      	movs	r0, #1
 8005702:	f000 fe3e 	bl	8006382 <xQueueCreateMutexStatic>
 8005706:	61f8      	str	r0, [r7, #28]
 8005708:	e00e      	b.n	8005728 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10b      	bne.n	8005728 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005716:	2004      	movs	r0, #4
 8005718:	f000 fe1b 	bl	8006352 <xQueueCreateMutex>
 800571c:	61f8      	str	r0, [r7, #28]
 800571e:	e003      	b.n	8005728 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005720:	2001      	movs	r0, #1
 8005722:	f000 fe16 	bl	8006352 <xQueueCreateMutex>
 8005726:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00c      	beq.n	8005748 <osMutexNew+0xee>
        if (attr != NULL) {
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <osMutexNew+0xe2>
          name = attr->name;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	e001      	b.n	8005740 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800573c:	2300      	movs	r3, #0
 800573e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005740:	68f9      	ldr	r1, [r7, #12]
 8005742:	69f8      	ldr	r0, [r7, #28]
 8005744:	f001 fbe0 	bl	8006f08 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d006      	beq.n	800575c <osMutexNew+0x102>
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800575c:	69fb      	ldr	r3, [r7, #28]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005766:	b580      	push	{r7, lr}
 8005768:	b086      	sub	sp, #24
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f023 0301 	bic.w	r3, r3, #1
 8005776:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005784:	f3ef 8305 	mrs	r3, IPSR
 8005788:	60bb      	str	r3, [r7, #8]
  return(result);
 800578a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005790:	f06f 0305 	mvn.w	r3, #5
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e02c      	b.n	80057f2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d103      	bne.n	80057a6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800579e:	f06f 0303 	mvn.w	r3, #3
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	e025      	b.n	80057f2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d011      	beq.n	80057d0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	6938      	ldr	r0, [r7, #16]
 80057b0:	f000 fe37 	bl	8006422 <xQueueTakeMutexRecursive>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d01b      	beq.n	80057f2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80057c0:	f06f 0301 	mvn.w	r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	e014      	b.n	80057f2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80057c8:	f06f 0302 	mvn.w	r3, #2
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e010      	b.n	80057f2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6938      	ldr	r0, [r7, #16]
 80057d4:	f001 f8de 	bl	8006994 <xQueueSemaphoreTake>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d009      	beq.n	80057f2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80057e4:	f06f 0301 	mvn.w	r3, #1
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	e002      	b.n	80057f2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80057ec:	f06f 0302 	mvn.w	r3, #2
 80057f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80057f2:	697b      	ldr	r3, [r7, #20]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f023 0301 	bic.w	r3, r3, #1
 800580a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005814:	2300      	movs	r3, #0
 8005816:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005818:	f3ef 8305 	mrs	r3, IPSR
 800581c:	60bb      	str	r3, [r7, #8]
  return(result);
 800581e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <osMutexRelease+0x30>
    stat = osErrorISR;
 8005824:	f06f 0305 	mvn.w	r3, #5
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e01f      	b.n	800586c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d103      	bne.n	800583a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005832:	f06f 0303 	mvn.w	r3, #3
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	e018      	b.n	800586c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d009      	beq.n	8005854 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005840:	6938      	ldr	r0, [r7, #16]
 8005842:	f000 fdb9 	bl	80063b8 <xQueueGiveMutexRecursive>
 8005846:	4603      	mov	r3, r0
 8005848:	2b01      	cmp	r3, #1
 800584a:	d00f      	beq.n	800586c <osMutexRelease+0x70>
        stat = osErrorResource;
 800584c:	f06f 0302 	mvn.w	r3, #2
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e00b      	b.n	800586c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005854:	2300      	movs	r3, #0
 8005856:	2200      	movs	r2, #0
 8005858:	2100      	movs	r1, #0
 800585a:	6938      	ldr	r0, [r7, #16]
 800585c:	f000 fe18 	bl	8006490 <xQueueGenericSend>
 8005860:	4603      	mov	r3, r0
 8005862:	2b01      	cmp	r3, #1
 8005864:	d002      	beq.n	800586c <osMutexRelease+0x70>
        stat = osErrorResource;
 8005866:	f06f 0302 	mvn.w	r3, #2
 800586a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800586c:	697b      	ldr	r3, [r7, #20]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005876:	b580      	push	{r7, lr}
 8005878:	b08a      	sub	sp, #40	@ 0x28
 800587a:	af02      	add	r7, sp, #8
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005886:	f3ef 8305 	mrs	r3, IPSR
 800588a:	613b      	str	r3, [r7, #16]
  return(result);
 800588c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800588e:	2b00      	cmp	r3, #0
 8005890:	d15f      	bne.n	8005952 <osMessageQueueNew+0xdc>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d05c      	beq.n	8005952 <osMessageQueueNew+0xdc>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d059      	beq.n	8005952 <osMessageQueueNew+0xdc>
    mem = -1;
 800589e:	f04f 33ff 	mov.w	r3, #4294967295
 80058a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d029      	beq.n	80058fe <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d012      	beq.n	80058d8 <osMessageQueueNew+0x62>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b4f      	cmp	r3, #79	@ 0x4f
 80058b8:	d90e      	bls.n	80058d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	fb01 f303 	mul.w	r3, r1, r3
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d302      	bcc.n	80058d8 <osMessageQueueNew+0x62>
        mem = 1;
 80058d2:	2301      	movs	r3, #1
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	e014      	b.n	8005902 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d110      	bne.n	8005902 <osMessageQueueNew+0x8c>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10c      	bne.n	8005902 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d108      	bne.n	8005902 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d104      	bne.n	8005902 <osMessageQueueNew+0x8c>
          mem = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	e001      	b.n	8005902 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d10b      	bne.n	8005920 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2100      	movs	r1, #0
 8005912:	9100      	str	r1, [sp, #0]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fc26 	bl	8006168 <xQueueGenericCreateStatic>
 800591c:	61f8      	str	r0, [r7, #28]
 800591e:	e008      	b.n	8005932 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d105      	bne.n	8005932 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005926:	2200      	movs	r2, #0
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fc99 	bl	8006262 <xQueueGenericCreate>
 8005930:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00c      	beq.n	8005952 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <osMessageQueueNew+0xd0>
        name = attr->name;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	e001      	b.n	800594a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800594a:	6979      	ldr	r1, [r7, #20]
 800594c:	69f8      	ldr	r0, [r7, #28]
 800594e:	f001 fadb 	bl	8006f08 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005952:	69fb      	ldr	r3, [r7, #28]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005974:	f3ef 8305 	mrs	r3, IPSR
 8005978:	617b      	str	r3, [r7, #20]
  return(result);
 800597a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800597c:	2b00      	cmp	r3, #0
 800597e:	d028      	beq.n	80059d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d005      	beq.n	8005992 <osMessageQueuePut+0x36>
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <osMessageQueuePut+0x36>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005992:	f06f 0303 	mvn.w	r3, #3
 8005996:	61fb      	str	r3, [r7, #28]
 8005998:	e038      	b.n	8005a0c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800599e:	f107 0210 	add.w	r2, r7, #16
 80059a2:	2300      	movs	r3, #0
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	69b8      	ldr	r0, [r7, #24]
 80059a8:	f000 fe74 	bl	8006694 <xQueueGenericSendFromISR>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d003      	beq.n	80059ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80059b2:	f06f 0302 	mvn.w	r3, #2
 80059b6:	61fb      	str	r3, [r7, #28]
 80059b8:	e028      	b.n	8005a0c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d025      	beq.n	8005a0c <osMessageQueuePut+0xb0>
 80059c0:	4b15      	ldr	r3, [pc, #84]	@ (8005a18 <osMessageQueuePut+0xbc>)
 80059c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	e01c      	b.n	8005a0c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <osMessageQueuePut+0x82>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d103      	bne.n	80059e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80059de:	f06f 0303 	mvn.w	r3, #3
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	e012      	b.n	8005a0c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80059e6:	2300      	movs	r3, #0
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	69b8      	ldr	r0, [r7, #24]
 80059ee:	f000 fd4f 	bl	8006490 <xQueueGenericSend>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d009      	beq.n	8005a0c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80059fe:	f06f 0301 	mvn.w	r3, #1
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	e002      	b.n	8005a0c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005a06:	f06f 0302 	mvn.w	r3, #2
 8005a0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005a0c:	69fb      	ldr	r3, [r7, #28]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3720      	adds	r7, #32
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a32:	f3ef 8305 	mrs	r3, IPSR
 8005a36:	617b      	str	r3, [r7, #20]
  return(result);
 8005a38:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d028      	beq.n	8005a90 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <osMessageQueueGet+0x34>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <osMessageQueueGet+0x34>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005a50:	f06f 0303 	mvn.w	r3, #3
 8005a54:	61fb      	str	r3, [r7, #28]
 8005a56:	e037      	b.n	8005ac8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005a5c:	f107 0310 	add.w	r3, r7, #16
 8005a60:	461a      	mov	r2, r3
 8005a62:	68b9      	ldr	r1, [r7, #8]
 8005a64:	69b8      	ldr	r0, [r7, #24]
 8005a66:	f001 f8a5 	bl	8006bb4 <xQueueReceiveFromISR>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d003      	beq.n	8005a78 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005a70:	f06f 0302 	mvn.w	r3, #2
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	e027      	b.n	8005ac8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d024      	beq.n	8005ac8 <osMessageQueueGet+0xac>
 8005a7e:	4b15      	ldr	r3, [pc, #84]	@ (8005ad4 <osMessageQueueGet+0xb8>)
 8005a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	e01b      	b.n	8005ac8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <osMessageQueueGet+0x80>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d103      	bne.n	8005aa4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005a9c:	f06f 0303 	mvn.w	r3, #3
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	e011      	b.n	8005ac8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	69b8      	ldr	r0, [r7, #24]
 8005aaa:	f000 fe91 	bl	80067d0 <xQueueReceive>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d009      	beq.n	8005ac8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005aba:	f06f 0301 	mvn.w	r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	e002      	b.n	8005ac8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005ac2:	f06f 0302 	mvn.w	r3, #2
 8005ac6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005ac8:	69fb      	ldr	r3, [r7, #28]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	e000ed04 	.word	0xe000ed04

08005ad8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a07      	ldr	r2, [pc, #28]	@ (8005b04 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ae8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	4a06      	ldr	r2, [pc, #24]	@ (8005b08 <vApplicationGetIdleTaskMemory+0x30>)
 8005aee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2280      	movs	r2, #128	@ 0x80
 8005af4:	601a      	str	r2, [r3, #0]
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	200009f4 	.word	0x200009f4
 8005b08:	20000a50 	.word	0x20000a50

08005b0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4a07      	ldr	r2, [pc, #28]	@ (8005b38 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	4a06      	ldr	r2, [pc, #24]	@ (8005b3c <vApplicationGetTimerTaskMemory+0x30>)
 8005b22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b2a:	601a      	str	r2, [r3, #0]
}
 8005b2c:	bf00      	nop
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	20000c50 	.word	0x20000c50
 8005b3c:	20000cac 	.word	0x20000cac

08005b40 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10b      	bne.n	8005b66 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	e7fd      	b.n	8005b62 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005b66:	2320      	movs	r3, #32
 8005b68:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d00b      	beq.n	8005b88 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	60fb      	str	r3, [r7, #12]
}
 8005b82:	bf00      	nop
 8005b84:	bf00      	nop
 8005b86:	e7fd      	b.n	8005b84 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 f9c5 	bl	8005f2c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005ba8:	697b      	ldr	r3, [r7, #20]
	}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b082      	sub	sp, #8
 8005bb6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005bb8:	2020      	movs	r0, #32
 8005bba:	f003 f98f 	bl	8008edc <pvPortMalloc>
 8005bbe:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 f9ab 	bl	8005f2c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005bdc:	687b      	ldr	r3, [r7, #4]
	}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b090      	sub	sp, #64	@ 0x40
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10b      	bne.n	8005c20 <xEventGroupWaitBits+0x38>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	623b      	str	r3, [r7, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	bf00      	nop
 8005c1e:	e7fd      	b.n	8005c1c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c26:	d30b      	bcc.n	8005c40 <xEventGroupWaitBits+0x58>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	61fb      	str	r3, [r7, #28]
}
 8005c3a:	bf00      	nop
 8005c3c:	bf00      	nop
 8005c3e:	e7fd      	b.n	8005c3c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10b      	bne.n	8005c5e <xEventGroupWaitBits+0x76>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	61bb      	str	r3, [r7, #24]
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	e7fd      	b.n	8005c5a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c5e:	f002 f88d 	bl	8007d7c <xTaskGetSchedulerState>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d102      	bne.n	8005c6e <xEventGroupWaitBits+0x86>
 8005c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <xEventGroupWaitBits+0x8a>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <xEventGroupWaitBits+0x8c>
 8005c72:	2300      	movs	r3, #0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	617b      	str	r3, [r7, #20]
}
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	e7fd      	b.n	8005c8c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8005c90:	f001 fbdc 	bl	800744c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ca0:	f000 f90d 	bl	8005ebe <prvTestWaitCondition>
 8005ca4:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8005ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00e      	beq.n	8005cca <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d028      	beq.n	8005d0c <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	401a      	ands	r2, r3
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	e020      	b.n	8005d0c <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cd8:	e018      	b.n	8005d0c <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf8:	1d18      	adds	r0, r3, #4
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d02:	4619      	mov	r1, r3
 8005d04:	f001 fd9c 	bl	8007840 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005d0c:	f001 fbac 	bl	8007468 <xTaskResumeAll>
 8005d10:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d031      	beq.n	8005d7c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d107      	bne.n	8005d2e <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8005d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005d88 <xEventGroupWaitBits+0x1a0>)
 8005d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005d2e:	f002 f99f 	bl	8008070 <uxTaskResetEventItemValue>
 8005d32:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d11a      	bne.n	8005d74 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8005d3e:	f002 ffab 	bl	8008c98 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005d4e:	f000 f8b6 	bl	8005ebe <prvTestWaitCondition>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d009      	beq.n	8005d6c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d006      	beq.n	8005d6c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	43db      	mvns	r3, r3
 8005d66:	401a      	ands	r2, r3
 8005d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d6a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8005d70:	f002 ffc4 	bl	8008cfc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d76:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3740      	adds	r7, #64	@ 0x40
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	e000ed04 	.word	0xe000ed04

08005d8c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08e      	sub	sp, #56	@ 0x38
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005d96:	2300      	movs	r3, #0
 8005d98:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10b      	bne.n	8005dc0 <xEventGroupSetBits+0x34>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	613b      	str	r3, [r7, #16]
}
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	e7fd      	b.n	8005dbc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dc6:	d30b      	bcc.n	8005de0 <xEventGroupSetBits+0x54>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	60fb      	str	r3, [r7, #12]
}
 8005dda:	bf00      	nop
 8005ddc:	bf00      	nop
 8005dde:	e7fd      	b.n	8005ddc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	3304      	adds	r3, #4
 8005de4:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	3308      	adds	r3, #8
 8005dea:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005dec:	f001 fb2e 	bl	800744c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e00:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005e02:	e03c      	b.n	8005e7e <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005e1a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005e22:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d108      	bne.n	8005e40 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	4013      	ands	r3, r2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e3e:	e008      	b.n	8005e52 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	4013      	ands	r3, r2
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d101      	bne.n	8005e52 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d010      	beq.n	8005e7a <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e72:	4619      	mov	r1, r3
 8005e74:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005e76:	f001 fdb1 	bl	80079dc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8005e7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d1be      	bne.n	8005e04 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	401a      	ands	r2, r3
 8005e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e92:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005e94:	f001 fae8 	bl	8007468 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9a:	681b      	ldr	r3, [r3, #0]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3738      	adds	r7, #56	@ 0x38
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff ff6b 	bl	8005d8c <xEventGroupSetBits>
}
 8005eb6:	bf00      	nop
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b087      	sub	sp, #28
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d107      	bne.n	8005ee4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	e007      	b.n	8005ef4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d101      	bne.n	8005ef4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005ef4:	697b      	ldr	r3, [r7, #20]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	68f9      	ldr	r1, [r7, #12]
 8005f16:	4804      	ldr	r0, [pc, #16]	@ (8005f28 <xEventGroupSetBitsFromISR+0x24>)
 8005f18:	f002 fd6e 	bl	80089f8 <xTimerPendFunctionCallFromISR>
 8005f1c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005f1e:	697b      	ldr	r3, [r7, #20]
	}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	08005ea5 	.word	0x08005ea5

08005f2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f103 0208 	add.w	r2, r3, #8
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f04f 32ff 	mov.w	r2, #4294967295
 8005f44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f103 0208 	add.w	r2, r3, #8
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f103 0208 	add.w	r2, r3, #8
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	601a      	str	r2, [r3, #0]
}
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe4:	d103      	bne.n	8005fee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	e00c      	b.n	8006008 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3308      	adds	r3, #8
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	e002      	b.n	8005ffc <vListInsert+0x2e>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	429a      	cmp	r2, r3
 8006006:	d2f6      	bcs.n	8005ff6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	601a      	str	r2, [r3, #0]
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6892      	ldr	r2, [r2, #8]
 8006056:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6852      	ldr	r2, [r2, #4]
 8006060:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	429a      	cmp	r2, r3
 800606a:	d103      	bne.n	8006074 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	1e5a      	subs	r2, r3, #1
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10b      	bne.n	80060c0 <xQueueGenericReset+0x2c>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	60bb      	str	r3, [r7, #8]
}
 80060ba:	bf00      	nop
 80060bc:	bf00      	nop
 80060be:	e7fd      	b.n	80060bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80060c0:	f002 fdea 	bl	8008c98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060cc:	68f9      	ldr	r1, [r7, #12]
 80060ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	441a      	add	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f0:	3b01      	subs	r3, #1
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	441a      	add	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	22ff      	movs	r2, #255	@ 0xff
 8006104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	22ff      	movs	r2, #255	@ 0xff
 800610c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d114      	bne.n	8006140 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01a      	beq.n	8006154 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3310      	adds	r3, #16
 8006122:	4618      	mov	r0, r3
 8006124:	f001 fbf6 	bl	8007914 <xTaskRemoveFromEventList>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d012      	beq.n	8006154 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800612e:	4b0d      	ldr	r3, [pc, #52]	@ (8006164 <xQueueGenericReset+0xd0>)
 8006130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	e009      	b.n	8006154 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3310      	adds	r3, #16
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fef1 	bl	8005f2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3324      	adds	r3, #36	@ 0x24
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff feec 	bl	8005f2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006154:	f002 fdd2 	bl	8008cfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006158:	2301      	movs	r3, #1
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08e      	sub	sp, #56	@ 0x38
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10b      	bne.n	8006194 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800618e:	bf00      	nop
 8006190:	bf00      	nop
 8006192:	e7fd      	b.n	8006190 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	e7fd      	b.n	80061ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <xQueueGenericCreateStatic+0x56>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <xQueueGenericCreateStatic+0x5a>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <xQueueGenericCreateStatic+0x5c>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	623b      	str	r3, [r7, #32]
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	e7fd      	b.n	80061dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <xQueueGenericCreateStatic+0x84>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <xQueueGenericCreateStatic+0x88>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <xQueueGenericCreateStatic+0x8a>
 80061f0:	2300      	movs	r3, #0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	61fb      	str	r3, [r7, #28]
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	e7fd      	b.n	800620a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800620e:	2350      	movs	r3, #80	@ 0x50
 8006210:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2b50      	cmp	r3, #80	@ 0x50
 8006216:	d00b      	beq.n	8006230 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	61bb      	str	r3, [r7, #24]
}
 800622a:	bf00      	nop
 800622c:	bf00      	nop
 800622e:	e7fd      	b.n	800622c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006230:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00d      	beq.n	8006258 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800623c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006244:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	4613      	mov	r3, r2
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	68b9      	ldr	r1, [r7, #8]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 f840 	bl	80062d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800625a:	4618      	mov	r0, r3
 800625c:	3730      	adds	r7, #48	@ 0x30
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006262:	b580      	push	{r7, lr}
 8006264:	b08a      	sub	sp, #40	@ 0x28
 8006266:	af02      	add	r7, sp, #8
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	4613      	mov	r3, r2
 800626e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10b      	bne.n	800628e <xQueueGenericCreate+0x2c>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	613b      	str	r3, [r7, #16]
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	e7fd      	b.n	800628a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	fb02 f303 	mul.w	r3, r2, r3
 8006296:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	3350      	adds	r3, #80	@ 0x50
 800629c:	4618      	mov	r0, r3
 800629e:	f002 fe1d 	bl	8008edc <pvPortMalloc>
 80062a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d011      	beq.n	80062ce <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	3350      	adds	r3, #80	@ 0x50
 80062b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062bc:	79fa      	ldrb	r2, [r7, #7]
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	4613      	mov	r3, r2
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 f805 	bl	80062d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062ce:	69bb      	ldr	r3, [r7, #24]
	}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3720      	adds	r7, #32
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d103      	bne.n	80062f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	e002      	b.n	80062fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006306:	2101      	movs	r1, #1
 8006308:	69b8      	ldr	r0, [r7, #24]
 800630a:	f7ff fec3 	bl	8006094 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	78fa      	ldrb	r2, [r7, #3]
 8006312:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006316:	bf00      	nop
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00e      	beq.n	800634a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800633e:	2300      	movs	r3, #0
 8006340:	2200      	movs	r2, #0
 8006342:	2100      	movs	r1, #0
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f8a3 	bl	8006490 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800634a:	bf00      	nop
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006352:	b580      	push	{r7, lr}
 8006354:	b086      	sub	sp, #24
 8006356:	af00      	add	r7, sp, #0
 8006358:	4603      	mov	r3, r0
 800635a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800635c:	2301      	movs	r3, #1
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	2300      	movs	r3, #0
 8006362:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	461a      	mov	r2, r3
 8006368:	6939      	ldr	r1, [r7, #16]
 800636a:	6978      	ldr	r0, [r7, #20]
 800636c:	f7ff ff79 	bl	8006262 <xQueueGenericCreate>
 8006370:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7ff ffd3 	bl	800631e <prvInitialiseMutex>

		return xNewQueue;
 8006378:	68fb      	ldr	r3, [r7, #12]
	}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006382:	b580      	push	{r7, lr}
 8006384:	b088      	sub	sp, #32
 8006386:	af02      	add	r7, sp, #8
 8006388:	4603      	mov	r3, r0
 800638a:	6039      	str	r1, [r7, #0]
 800638c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800638e:	2301      	movs	r3, #1
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	2300      	movs	r3, #0
 8006394:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2200      	movs	r2, #0
 800639e:	6939      	ldr	r1, [r7, #16]
 80063a0:	6978      	ldr	r0, [r7, #20]
 80063a2:	f7ff fee1 	bl	8006168 <xQueueGenericCreateStatic>
 80063a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7ff ffb8 	bl	800631e <prvInitialiseMutex>

		return xNewQueue;
 80063ae:	68fb      	ldr	r3, [r7, #12]
	}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80063b8:	b590      	push	{r4, r7, lr}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10b      	bne.n	80063e2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	60fb      	str	r3, [r7, #12]
}
 80063dc:	bf00      	nop
 80063de:	bf00      	nop
 80063e0:	e7fd      	b.n	80063de <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	689c      	ldr	r4, [r3, #8]
 80063e6:	f001 fcb9 	bl	8007d5c <xTaskGetCurrentTaskHandle>
 80063ea:	4603      	mov	r3, r0
 80063ec:	429c      	cmp	r4, r3
 80063ee:	d111      	bne.n	8006414 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	1e5a      	subs	r2, r3, #1
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d105      	bne.n	800640e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006402:	2300      	movs	r3, #0
 8006404:	2200      	movs	r2, #0
 8006406:	2100      	movs	r1, #0
 8006408:	6938      	ldr	r0, [r7, #16]
 800640a:	f000 f841 	bl	8006490 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800640e:	2301      	movs	r3, #1
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	e001      	b.n	8006418 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006418:	697b      	ldr	r3, [r7, #20]
	}
 800641a:	4618      	mov	r0, r3
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	bd90      	pop	{r4, r7, pc}

08006422 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006422:	b590      	push	{r4, r7, lr}
 8006424:	b087      	sub	sp, #28
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10b      	bne.n	800644e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	60fb      	str	r3, [r7, #12]
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	e7fd      	b.n	800644a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	689c      	ldr	r4, [r3, #8]
 8006452:	f001 fc83 	bl	8007d5c <xTaskGetCurrentTaskHandle>
 8006456:	4603      	mov	r3, r0
 8006458:	429c      	cmp	r4, r3
 800645a:	d107      	bne.n	800646c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006466:	2301      	movs	r3, #1
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e00c      	b.n	8006486 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6938      	ldr	r0, [r7, #16]
 8006470:	f000 fa90 	bl	8006994 <xQueueSemaphoreTake>
 8006474:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d004      	beq.n	8006486 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006486:	697b      	ldr	r3, [r7, #20]
	}
 8006488:	4618      	mov	r0, r3
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	bd90      	pop	{r4, r7, pc}

08006490 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08e      	sub	sp, #56	@ 0x38
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800649e:	2300      	movs	r3, #0
 80064a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10b      	bne.n	80064c4 <xQueueGenericSend+0x34>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	e7fd      	b.n	80064c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d103      	bne.n	80064d2 <xQueueGenericSend+0x42>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <xQueueGenericSend+0x46>
 80064d2:	2301      	movs	r3, #1
 80064d4:	e000      	b.n	80064d8 <xQueueGenericSend+0x48>
 80064d6:	2300      	movs	r3, #0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <xQueueGenericSend+0x64>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	e7fd      	b.n	80064f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d103      	bne.n	8006502 <xQueueGenericSend+0x72>
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <xQueueGenericSend+0x76>
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <xQueueGenericSend+0x78>
 8006506:	2300      	movs	r3, #0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10b      	bne.n	8006524 <xQueueGenericSend+0x94>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	623b      	str	r3, [r7, #32]
}
 800651e:	bf00      	nop
 8006520:	bf00      	nop
 8006522:	e7fd      	b.n	8006520 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006524:	f001 fc2a 	bl	8007d7c <xTaskGetSchedulerState>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <xQueueGenericSend+0xa4>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <xQueueGenericSend+0xa8>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <xQueueGenericSend+0xaa>
 8006538:	2300      	movs	r3, #0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10b      	bne.n	8006556 <xQueueGenericSend+0xc6>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	61fb      	str	r3, [r7, #28]
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	e7fd      	b.n	8006552 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006556:	f002 fb9f 	bl	8008c98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006562:	429a      	cmp	r2, r3
 8006564:	d302      	bcc.n	800656c <xQueueGenericSend+0xdc>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d129      	bne.n	80065c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006572:	f000 fbb9 	bl	8006ce8 <prvCopyDataToQueue>
 8006576:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	d010      	beq.n	80065a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006582:	3324      	adds	r3, #36	@ 0x24
 8006584:	4618      	mov	r0, r3
 8006586:	f001 f9c5 	bl	8007914 <xTaskRemoveFromEventList>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d013      	beq.n	80065b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006590:	4b3f      	ldr	r3, [pc, #252]	@ (8006690 <xQueueGenericSend+0x200>)
 8006592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	e00a      	b.n	80065b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d007      	beq.n	80065b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065a8:	4b39      	ldr	r3, [pc, #228]	@ (8006690 <xQueueGenericSend+0x200>)
 80065aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065b8:	f002 fba0 	bl	8008cfc <vPortExitCritical>
				return pdPASS;
 80065bc:	2301      	movs	r3, #1
 80065be:	e063      	b.n	8006688 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d103      	bne.n	80065ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065c6:	f002 fb99 	bl	8008cfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	e05c      	b.n	8006688 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d106      	bne.n	80065e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065d4:	f107 0314 	add.w	r3, r7, #20
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 fa63 	bl	8007aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065de:	2301      	movs	r3, #1
 80065e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065e2:	f002 fb8b 	bl	8008cfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065e6:	f000 ff31 	bl	800744c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065ea:	f002 fb55 	bl	8008c98 <vPortEnterCritical>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065f4:	b25b      	sxtb	r3, r3
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d103      	bne.n	8006604 <xQueueGenericSend+0x174>
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006606:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800660a:	b25b      	sxtb	r3, r3
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d103      	bne.n	800661a <xQueueGenericSend+0x18a>
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800661a:	f002 fb6f 	bl	8008cfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800661e:	1d3a      	adds	r2, r7, #4
 8006620:	f107 0314 	add.w	r3, r7, #20
 8006624:	4611      	mov	r1, r2
 8006626:	4618      	mov	r0, r3
 8006628:	f001 fa52 	bl	8007ad0 <xTaskCheckForTimeOut>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d124      	bne.n	800667c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006632:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006634:	f000 fc50 	bl	8006ed8 <prvIsQueueFull>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d018      	beq.n	8006670 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800663e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006640:	3310      	adds	r3, #16
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	4611      	mov	r1, r2
 8006646:	4618      	mov	r0, r3
 8006648:	f001 f8d4 	bl	80077f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800664c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800664e:	f000 fbdb 	bl	8006e08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006652:	f000 ff09 	bl	8007468 <xTaskResumeAll>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	f47f af7c 	bne.w	8006556 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800665e:	4b0c      	ldr	r3, [pc, #48]	@ (8006690 <xQueueGenericSend+0x200>)
 8006660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	e772      	b.n	8006556 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006672:	f000 fbc9 	bl	8006e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006676:	f000 fef7 	bl	8007468 <xTaskResumeAll>
 800667a:	e76c      	b.n	8006556 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800667c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800667e:	f000 fbc3 	bl	8006e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006682:	f000 fef1 	bl	8007468 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006688:	4618      	mov	r0, r3
 800668a:	3738      	adds	r7, #56	@ 0x38
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	e000ed04 	.word	0xe000ed04

08006694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b090      	sub	sp, #64	@ 0x40
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10b      	bne.n	80066c4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066be:	bf00      	nop
 80066c0:	bf00      	nop
 80066c2:	e7fd      	b.n	80066c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d103      	bne.n	80066d2 <xQueueGenericSendFromISR+0x3e>
 80066ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <xQueueGenericSendFromISR+0x42>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e000      	b.n	80066d8 <xQueueGenericSendFromISR+0x44>
 80066d6:	2300      	movs	r3, #0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10b      	bne.n	80066f4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066ee:	bf00      	nop
 80066f0:	bf00      	nop
 80066f2:	e7fd      	b.n	80066f0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d103      	bne.n	8006702 <xQueueGenericSendFromISR+0x6e>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <xQueueGenericSendFromISR+0x72>
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <xQueueGenericSendFromISR+0x74>
 8006706:	2300      	movs	r3, #0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	623b      	str	r3, [r7, #32]
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	e7fd      	b.n	8006720 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006724:	f002 fb98 	bl	8008e58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006728:	f3ef 8211 	mrs	r2, BASEPRI
 800672c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	61fa      	str	r2, [r7, #28]
 800673e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006740:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006742:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800674c:	429a      	cmp	r2, r3
 800674e:	d302      	bcc.n	8006756 <xQueueGenericSendFromISR+0xc2>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d12f      	bne.n	80067b6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800675c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006764:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800676c:	f000 fabc 	bl	8006ce8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006770:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006778:	d112      	bne.n	80067a0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800677a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677e:	2b00      	cmp	r3, #0
 8006780:	d016      	beq.n	80067b0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006784:	3324      	adds	r3, #36	@ 0x24
 8006786:	4618      	mov	r0, r3
 8006788:	f001 f8c4 	bl	8007914 <xTaskRemoveFromEventList>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	e007      	b.n	80067b0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80067a4:	3301      	adds	r3, #1
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	b25a      	sxtb	r2, r3
 80067aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80067b0:	2301      	movs	r3, #1
 80067b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80067b4:	e001      	b.n	80067ba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067bc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3740      	adds	r7, #64	@ 0x40
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08c      	sub	sp, #48	@ 0x30
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067dc:	2300      	movs	r3, #0
 80067de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10b      	bne.n	8006802 <xQueueReceive+0x32>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	623b      	str	r3, [r7, #32]
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	e7fd      	b.n	80067fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <xQueueReceive+0x40>
 8006808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <xQueueReceive+0x44>
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <xQueueReceive+0x46>
 8006814:	2300      	movs	r3, #0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <xQueueReceive+0x62>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	61fb      	str	r3, [r7, #28]
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	e7fd      	b.n	800682e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006832:	f001 faa3 	bl	8007d7c <xTaskGetSchedulerState>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d102      	bne.n	8006842 <xQueueReceive+0x72>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <xQueueReceive+0x76>
 8006842:	2301      	movs	r3, #1
 8006844:	e000      	b.n	8006848 <xQueueReceive+0x78>
 8006846:	2300      	movs	r3, #0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10b      	bne.n	8006864 <xQueueReceive+0x94>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	61bb      	str	r3, [r7, #24]
}
 800685e:	bf00      	nop
 8006860:	bf00      	nop
 8006862:	e7fd      	b.n	8006860 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006864:	f002 fa18 	bl	8008c98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d01f      	beq.n	80068b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006874:	68b9      	ldr	r1, [r7, #8]
 8006876:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006878:	f000 faa0 	bl	8006dbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800687c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687e:	1e5a      	subs	r2, r3, #1
 8006880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006882:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00f      	beq.n	80068ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800688c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688e:	3310      	adds	r3, #16
 8006890:	4618      	mov	r0, r3
 8006892:	f001 f83f 	bl	8007914 <xTaskRemoveFromEventList>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800689c:	4b3c      	ldr	r3, [pc, #240]	@ (8006990 <xQueueReceive+0x1c0>)
 800689e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068ac:	f002 fa26 	bl	8008cfc <vPortExitCritical>
				return pdPASS;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e069      	b.n	8006988 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d103      	bne.n	80068c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068ba:	f002 fa1f 	bl	8008cfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068be:	2300      	movs	r3, #0
 80068c0:	e062      	b.n	8006988 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d106      	bne.n	80068d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068c8:	f107 0310 	add.w	r3, r7, #16
 80068cc:	4618      	mov	r0, r3
 80068ce:	f001 f8e9 	bl	8007aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068d2:	2301      	movs	r3, #1
 80068d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068d6:	f002 fa11 	bl	8008cfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068da:	f000 fdb7 	bl	800744c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068de:	f002 f9db 	bl	8008c98 <vPortEnterCritical>
 80068e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068e8:	b25b      	sxtb	r3, r3
 80068ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ee:	d103      	bne.n	80068f8 <xQueueReceive+0x128>
 80068f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068fe:	b25b      	sxtb	r3, r3
 8006900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006904:	d103      	bne.n	800690e <xQueueReceive+0x13e>
 8006906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800690e:	f002 f9f5 	bl	8008cfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006912:	1d3a      	adds	r2, r7, #4
 8006914:	f107 0310 	add.w	r3, r7, #16
 8006918:	4611      	mov	r1, r2
 800691a:	4618      	mov	r0, r3
 800691c:	f001 f8d8 	bl	8007ad0 <xTaskCheckForTimeOut>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d123      	bne.n	800696e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006928:	f000 fac0 	bl	8006eac <prvIsQueueEmpty>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d017      	beq.n	8006962 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006934:	3324      	adds	r3, #36	@ 0x24
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	4611      	mov	r1, r2
 800693a:	4618      	mov	r0, r3
 800693c:	f000 ff5a 	bl	80077f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006942:	f000 fa61 	bl	8006e08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006946:	f000 fd8f 	bl	8007468 <xTaskResumeAll>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d189      	bne.n	8006864 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006950:	4b0f      	ldr	r3, [pc, #60]	@ (8006990 <xQueueReceive+0x1c0>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	e780      	b.n	8006864 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006964:	f000 fa50 	bl	8006e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006968:	f000 fd7e 	bl	8007468 <xTaskResumeAll>
 800696c:	e77a      	b.n	8006864 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800696e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006970:	f000 fa4a 	bl	8006e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006974:	f000 fd78 	bl	8007468 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006978:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800697a:	f000 fa97 	bl	8006eac <prvIsQueueEmpty>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	f43f af6f 	beq.w	8006864 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006986:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006988:	4618      	mov	r0, r3
 800698a:	3730      	adds	r7, #48	@ 0x30
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	e000ed04 	.word	0xe000ed04

08006994 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08e      	sub	sp, #56	@ 0x38
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800699e:	2300      	movs	r3, #0
 80069a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80069a6:	2300      	movs	r3, #0
 80069a8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10b      	bne.n	80069c8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	623b      	str	r3, [r7, #32]
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	e7fd      	b.n	80069c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80069c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00b      	beq.n	80069e8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	61fb      	str	r3, [r7, #28]
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069e8:	f001 f9c8 	bl	8007d7c <xTaskGetSchedulerState>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <xQueueSemaphoreTake+0x64>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <xQueueSemaphoreTake+0x68>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e000      	b.n	80069fe <xQueueSemaphoreTake+0x6a>
 80069fc:	2300      	movs	r3, #0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10b      	bne.n	8006a1a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	61bb      	str	r3, [r7, #24]
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop
 8006a18:	e7fd      	b.n	8006a16 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a1a:	f002 f93d 	bl	8008c98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a22:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d024      	beq.n	8006a74 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2c:	1e5a      	subs	r2, r3, #1
 8006a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a30:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d104      	bne.n	8006a44 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a3a:	f001 fb31 	bl	80080a0 <pvTaskIncrementMutexHeldCount>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a42:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00f      	beq.n	8006a6c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4e:	3310      	adds	r3, #16
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 ff5f 	bl	8007914 <xTaskRemoveFromEventList>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d007      	beq.n	8006a6c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a5c:	4b54      	ldr	r3, [pc, #336]	@ (8006bb0 <xQueueSemaphoreTake+0x21c>)
 8006a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a6c:	f002 f946 	bl	8008cfc <vPortExitCritical>
				return pdPASS;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e098      	b.n	8006ba6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d112      	bne.n	8006aa0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	617b      	str	r3, [r7, #20]
}
 8006a92:	bf00      	nop
 8006a94:	bf00      	nop
 8006a96:	e7fd      	b.n	8006a94 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a98:	f002 f930 	bl	8008cfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	e082      	b.n	8006ba6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006aa6:	f107 030c 	add.w	r3, r7, #12
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fffa 	bl	8007aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ab4:	f002 f922 	bl	8008cfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ab8:	f000 fcc8 	bl	800744c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006abc:	f002 f8ec 	bl	8008c98 <vPortEnterCritical>
 8006ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ac6:	b25b      	sxtb	r3, r3
 8006ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006acc:	d103      	bne.n	8006ad6 <xQueueSemaphoreTake+0x142>
 8006ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006adc:	b25b      	sxtb	r3, r3
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae2:	d103      	bne.n	8006aec <xQueueSemaphoreTake+0x158>
 8006ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006aec:	f002 f906 	bl	8008cfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006af0:	463a      	mov	r2, r7
 8006af2:	f107 030c 	add.w	r3, r7, #12
 8006af6:	4611      	mov	r1, r2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 ffe9 	bl	8007ad0 <xTaskCheckForTimeOut>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d132      	bne.n	8006b6a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b06:	f000 f9d1 	bl	8006eac <prvIsQueueEmpty>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d026      	beq.n	8006b5e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006b18:	f002 f8be 	bl	8008c98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f001 f949 	bl	8007db8 <xTaskPriorityInherit>
 8006b26:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006b28:	f002 f8e8 	bl	8008cfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2e:	3324      	adds	r3, #36	@ 0x24
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	4611      	mov	r1, r2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fe5d 	bl	80077f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b3c:	f000 f964 	bl	8006e08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b40:	f000 fc92 	bl	8007468 <xTaskResumeAll>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f47f af67 	bne.w	8006a1a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006b4c:	4b18      	ldr	r3, [pc, #96]	@ (8006bb0 <xQueueSemaphoreTake+0x21c>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	e75d      	b.n	8006a1a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b60:	f000 f952 	bl	8006e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b64:	f000 fc80 	bl	8007468 <xTaskResumeAll>
 8006b68:	e757      	b.n	8006a1a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b6c:	f000 f94c 	bl	8006e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b70:	f000 fc7a 	bl	8007468 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b76:	f000 f999 	bl	8006eac <prvIsQueueEmpty>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f43f af4c 	beq.w	8006a1a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00d      	beq.n	8006ba4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006b88:	f002 f886 	bl	8008c98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b8e:	f000 f893 	bl	8006cb8 <prvGetDisinheritPriorityAfterTimeout>
 8006b92:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f001 f9e4 	bl	8007f68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006ba0:	f002 f8ac 	bl	8008cfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ba4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3738      	adds	r7, #56	@ 0x38
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	e000ed04 	.word	0xe000ed04

08006bb4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08e      	sub	sp, #56	@ 0x38
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10b      	bne.n	8006be2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	623b      	str	r3, [r7, #32]
}
 8006bdc:	bf00      	nop
 8006bde:	bf00      	nop
 8006be0:	e7fd      	b.n	8006bde <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d103      	bne.n	8006bf0 <xQueueReceiveFromISR+0x3c>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <xQueueReceiveFromISR+0x40>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e000      	b.n	8006bf6 <xQueueReceiveFromISR+0x42>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10b      	bne.n	8006c12 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	61fb      	str	r3, [r7, #28]
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	e7fd      	b.n	8006c0e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c12:	f002 f921 	bl	8008e58 <vPortValidateInterruptPriority>
	__asm volatile
 8006c16:	f3ef 8211 	mrs	r2, BASEPRI
 8006c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	61ba      	str	r2, [r7, #24]
 8006c2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c36:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d02f      	beq.n	8006c9e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c4c:	f000 f8b6 	bl	8006dbc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c52:	1e5a      	subs	r2, r3, #1
 8006c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c56:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c58:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d112      	bne.n	8006c88 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d016      	beq.n	8006c98 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	3310      	adds	r3, #16
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fe50 	bl	8007914 <xTaskRemoveFromEventList>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	e007      	b.n	8006c98 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	b25a      	sxtb	r2, r3
 8006c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c9c:	e001      	b.n	8006ca2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f383 8811 	msr	BASEPRI, r3
}
 8006cac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3738      	adds	r7, #56	@ 0x38
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d006      	beq.n	8006cd6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	e001      	b.n	8006cda <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006cda:	68fb      	ldr	r3, [r7, #12]
	}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10d      	bne.n	8006d22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d14d      	bne.n	8006daa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 f8b8 	bl	8007e88 <xTaskPriorityDisinherit>
 8006d18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	609a      	str	r2, [r3, #8]
 8006d20:	e043      	b.n	8006daa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d119      	bne.n	8006d5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6858      	ldr	r0, [r3, #4]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d30:	461a      	mov	r2, r3
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	f002 fd0c 	bl	8009750 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d40:	441a      	add	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d32b      	bcc.n	8006daa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	605a      	str	r2, [r3, #4]
 8006d5a:	e026      	b.n	8006daa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	68d8      	ldr	r0, [r3, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d64:	461a      	mov	r2, r3
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	f002 fcf2 	bl	8009750 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d74:	425b      	negs	r3, r3
 8006d76:	441a      	add	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d207      	bcs.n	8006d98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d90:	425b      	negs	r3, r3
 8006d92:	441a      	add	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d105      	bne.n	8006daa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006db2:	697b      	ldr	r3, [r7, #20]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d018      	beq.n	8006e00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd6:	441a      	add	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d303      	bcc.n	8006df0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68d9      	ldr	r1, [r3, #12]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6838      	ldr	r0, [r7, #0]
 8006dfc:	f002 fca8 	bl	8009750 <memcpy>
	}
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e10:	f001 ff42 	bl	8008c98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e1c:	e011      	b.n	8006e42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d012      	beq.n	8006e4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	3324      	adds	r3, #36	@ 0x24
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fd72 	bl	8007914 <xTaskRemoveFromEventList>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e36:	f000 feaf 	bl	8007b98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	dce9      	bgt.n	8006e1e <prvUnlockQueue+0x16>
 8006e4a:	e000      	b.n	8006e4e <prvUnlockQueue+0x46>
					break;
 8006e4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	22ff      	movs	r2, #255	@ 0xff
 8006e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006e56:	f001 ff51 	bl	8008cfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e5a:	f001 ff1d 	bl	8008c98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e66:	e011      	b.n	8006e8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d012      	beq.n	8006e96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3310      	adds	r3, #16
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fd4d 	bl	8007914 <xTaskRemoveFromEventList>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e80:	f000 fe8a 	bl	8007b98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	dce9      	bgt.n	8006e68 <prvUnlockQueue+0x60>
 8006e94:	e000      	b.n	8006e98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	22ff      	movs	r2, #255	@ 0xff
 8006e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006ea0:	f001 ff2c 	bl	8008cfc <vPortExitCritical>
}
 8006ea4:	bf00      	nop
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006eb4:	f001 fef0 	bl	8008c98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d102      	bne.n	8006ec6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e001      	b.n	8006eca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eca:	f001 ff17 	bl	8008cfc <vPortExitCritical>

	return xReturn;
 8006ece:	68fb      	ldr	r3, [r7, #12]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ee0:	f001 feda 	bl	8008c98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d102      	bne.n	8006ef6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	e001      	b.n	8006efa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006efa:	f001 feff 	bl	8008cfc <vPortExitCritical>

	return xReturn;
 8006efe:	68fb      	ldr	r3, [r7, #12]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f12:	2300      	movs	r3, #0
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	e014      	b.n	8006f42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f18:	4a0f      	ldr	r2, [pc, #60]	@ (8006f58 <vQueueAddToRegistry+0x50>)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10b      	bne.n	8006f3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f24:	490c      	ldr	r1, [pc, #48]	@ (8006f58 <vQueueAddToRegistry+0x50>)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006f58 <vQueueAddToRegistry+0x50>)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	4413      	add	r3, r2
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f3a:	e006      	b.n	8006f4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2b07      	cmp	r3, #7
 8006f46:	d9e7      	bls.n	8006f18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	200010ac 	.word	0x200010ac

08006f5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f6c:	f001 fe94 	bl	8008c98 <vPortEnterCritical>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f76:	b25b      	sxtb	r3, r3
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7c:	d103      	bne.n	8006f86 <vQueueWaitForMessageRestricted+0x2a>
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f8c:	b25b      	sxtb	r3, r3
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d103      	bne.n	8006f9c <vQueueWaitForMessageRestricted+0x40>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f9c:	f001 feae 	bl	8008cfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d106      	bne.n	8006fb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	3324      	adds	r3, #36	@ 0x24
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fc83 	bl	80078bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fb6:	6978      	ldr	r0, [r7, #20]
 8006fb8:	f7ff ff26 	bl	8006e08 <prvUnlockQueue>
	}
 8006fbc:	bf00      	nop
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08e      	sub	sp, #56	@ 0x38
 8006fc8:	af04      	add	r7, sp, #16
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10b      	bne.n	8006ff0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	623b      	str	r3, [r7, #32]
}
 8006fea:	bf00      	nop
 8006fec:	bf00      	nop
 8006fee:	e7fd      	b.n	8006fec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10b      	bne.n	800700e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	61fb      	str	r3, [r7, #28]
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	e7fd      	b.n	800700a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800700e:	235c      	movs	r3, #92	@ 0x5c
 8007010:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b5c      	cmp	r3, #92	@ 0x5c
 8007016:	d00b      	beq.n	8007030 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	61bb      	str	r3, [r7, #24]
}
 800702a:	bf00      	nop
 800702c:	bf00      	nop
 800702e:	e7fd      	b.n	800702c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007030:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01e      	beq.n	8007076 <xTaskCreateStatic+0xb2>
 8007038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703a:	2b00      	cmp	r3, #0
 800703c:	d01b      	beq.n	8007076 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800703e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007040:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007044:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007046:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704a:	2202      	movs	r2, #2
 800704c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007050:	2300      	movs	r3, #0
 8007052:	9303      	str	r3, [sp, #12]
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	9302      	str	r3, [sp, #8]
 8007058:	f107 0314 	add.w	r3, r7, #20
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f850 	bl	800710e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800706e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007070:	f000 f8de 	bl	8007230 <prvAddNewTaskToReadyList>
 8007074:	e001      	b.n	800707a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007076:	2300      	movs	r3, #0
 8007078:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800707a:	697b      	ldr	r3, [r7, #20]
	}
 800707c:	4618      	mov	r0, r3
 800707e:	3728      	adds	r7, #40	@ 0x28
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08c      	sub	sp, #48	@ 0x30
 8007088:	af04      	add	r7, sp, #16
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	4613      	mov	r3, r2
 8007092:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007094:	88fb      	ldrh	r3, [r7, #6]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4618      	mov	r0, r3
 800709a:	f001 ff1f 	bl	8008edc <pvPortMalloc>
 800709e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00e      	beq.n	80070c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070a6:	205c      	movs	r0, #92	@ 0x5c
 80070a8:	f001 ff18 	bl	8008edc <pvPortMalloc>
 80070ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80070ba:	e005      	b.n	80070c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070bc:	6978      	ldr	r0, [r7, #20]
 80070be:	f001 ffdb 	bl	8009078 <vPortFree>
 80070c2:	e001      	b.n	80070c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d017      	beq.n	80070fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	2300      	movs	r3, #0
 80070da:	9303      	str	r3, [sp, #12]
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	9302      	str	r3, [sp, #8]
 80070e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f80e 	bl	800710e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070f2:	69f8      	ldr	r0, [r7, #28]
 80070f4:	f000 f89c 	bl	8007230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070f8:	2301      	movs	r3, #1
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e002      	b.n	8007104 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007102:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007104:	69bb      	ldr	r3, [r7, #24]
	}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b088      	sub	sp, #32
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
 800711a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	461a      	mov	r2, r3
 8007126:	21a5      	movs	r1, #165	@ 0xa5
 8007128:	f002 fa5e 	bl	80095e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800712c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007136:	3b01      	subs	r3, #1
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	f023 0307 	bic.w	r3, r3, #7
 8007144:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00b      	beq.n	8007168 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	617b      	str	r3, [r7, #20]
}
 8007162:	bf00      	nop
 8007164:	bf00      	nop
 8007166:	e7fd      	b.n	8007164 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d01f      	beq.n	80071ae <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800716e:	2300      	movs	r3, #0
 8007170:	61fb      	str	r3, [r7, #28]
 8007172:	e012      	b.n	800719a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	4413      	add	r3, r2
 800717a:	7819      	ldrb	r1, [r3, #0]
 800717c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	4413      	add	r3, r2
 8007182:	3334      	adds	r3, #52	@ 0x34
 8007184:	460a      	mov	r2, r1
 8007186:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	4413      	add	r3, r2
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d006      	beq.n	80071a2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	3301      	adds	r3, #1
 8007198:	61fb      	str	r3, [r7, #28]
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2b0f      	cmp	r3, #15
 800719e:	d9e9      	bls.n	8007174 <prvInitialiseNewTask+0x66>
 80071a0:	e000      	b.n	80071a4 <prvInitialiseNewTask+0x96>
			{
				break;
 80071a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071ac:	e003      	b.n	80071b6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b8:	2b37      	cmp	r3, #55	@ 0x37
 80071ba:	d901      	bls.n	80071c0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071bc:	2337      	movs	r3, #55	@ 0x37
 80071be:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071ca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	2200      	movs	r2, #0
 80071d0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d4:	3304      	adds	r3, #4
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fec8 	bl	8005f6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	3318      	adds	r3, #24
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fe fec3 	bl	8005f6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071fa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	2200      	movs	r2, #0
 8007200:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	68f9      	ldr	r1, [r7, #12]
 800720e:	69b8      	ldr	r0, [r7, #24]
 8007210:	f001 fc12 	bl	8008a38 <pxPortInitialiseStack>
 8007214:	4602      	mov	r2, r0
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800721a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007226:	bf00      	nop
 8007228:	3720      	adds	r7, #32
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
	...

08007230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007238:	f001 fd2e 	bl	8008c98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800723c:	4b2d      	ldr	r3, [pc, #180]	@ (80072f4 <prvAddNewTaskToReadyList+0xc4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3301      	adds	r3, #1
 8007242:	4a2c      	ldr	r2, [pc, #176]	@ (80072f4 <prvAddNewTaskToReadyList+0xc4>)
 8007244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007246:	4b2c      	ldr	r3, [pc, #176]	@ (80072f8 <prvAddNewTaskToReadyList+0xc8>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800724e:	4a2a      	ldr	r2, [pc, #168]	@ (80072f8 <prvAddNewTaskToReadyList+0xc8>)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007254:	4b27      	ldr	r3, [pc, #156]	@ (80072f4 <prvAddNewTaskToReadyList+0xc4>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d110      	bne.n	800727e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800725c:	f000 fcc0 	bl	8007be0 <prvInitialiseTaskLists>
 8007260:	e00d      	b.n	800727e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007262:	4b26      	ldr	r3, [pc, #152]	@ (80072fc <prvAddNewTaskToReadyList+0xcc>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800726a:	4b23      	ldr	r3, [pc, #140]	@ (80072f8 <prvAddNewTaskToReadyList+0xc8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007274:	429a      	cmp	r2, r3
 8007276:	d802      	bhi.n	800727e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007278:	4a1f      	ldr	r2, [pc, #124]	@ (80072f8 <prvAddNewTaskToReadyList+0xc8>)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800727e:	4b20      	ldr	r3, [pc, #128]	@ (8007300 <prvAddNewTaskToReadyList+0xd0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3301      	adds	r3, #1
 8007284:	4a1e      	ldr	r2, [pc, #120]	@ (8007300 <prvAddNewTaskToReadyList+0xd0>)
 8007286:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007288:	4b1d      	ldr	r3, [pc, #116]	@ (8007300 <prvAddNewTaskToReadyList+0xd0>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007294:	4b1b      	ldr	r3, [pc, #108]	@ (8007304 <prvAddNewTaskToReadyList+0xd4>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d903      	bls.n	80072a4 <prvAddNewTaskToReadyList+0x74>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	4a18      	ldr	r2, [pc, #96]	@ (8007304 <prvAddNewTaskToReadyList+0xd4>)
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4a15      	ldr	r2, [pc, #84]	@ (8007308 <prvAddNewTaskToReadyList+0xd8>)
 80072b2:	441a      	add	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f7fe fe63 	bl	8005f86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072c0:	f001 fd1c 	bl	8008cfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072c4:	4b0d      	ldr	r3, [pc, #52]	@ (80072fc <prvAddNewTaskToReadyList+0xcc>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00e      	beq.n	80072ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072cc:	4b0a      	ldr	r3, [pc, #40]	@ (80072f8 <prvAddNewTaskToReadyList+0xc8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d207      	bcs.n	80072ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072da:	4b0c      	ldr	r3, [pc, #48]	@ (800730c <prvAddNewTaskToReadyList+0xdc>)
 80072dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	200015c0 	.word	0x200015c0
 80072f8:	200010ec 	.word	0x200010ec
 80072fc:	200015cc 	.word	0x200015cc
 8007300:	200015dc 	.word	0x200015dc
 8007304:	200015c8 	.word	0x200015c8
 8007308:	200010f0 	.word	0x200010f0
 800730c:	e000ed04 	.word	0xe000ed04

08007310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007318:	2300      	movs	r3, #0
 800731a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d018      	beq.n	8007354 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007322:	4b14      	ldr	r3, [pc, #80]	@ (8007374 <vTaskDelay+0x64>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00b      	beq.n	8007342 <vTaskDelay+0x32>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	60bb      	str	r3, [r7, #8]
}
 800733c:	bf00      	nop
 800733e:	bf00      	nop
 8007340:	e7fd      	b.n	800733e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007342:	f000 f883 	bl	800744c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007346:	2100      	movs	r1, #0
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 febd 	bl	80080c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800734e:	f000 f88b 	bl	8007468 <xTaskResumeAll>
 8007352:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d107      	bne.n	800736a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800735a:	4b07      	ldr	r3, [pc, #28]	@ (8007378 <vTaskDelay+0x68>)
 800735c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	200015e8 	.word	0x200015e8
 8007378:	e000ed04 	.word	0xe000ed04

0800737c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	@ 0x28
 8007380:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007382:	2300      	movs	r3, #0
 8007384:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800738a:	463a      	mov	r2, r7
 800738c:	1d39      	adds	r1, r7, #4
 800738e:	f107 0308 	add.w	r3, r7, #8
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe fba0 	bl	8005ad8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	9202      	str	r2, [sp, #8]
 80073a0:	9301      	str	r3, [sp, #4]
 80073a2:	2300      	movs	r3, #0
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	2300      	movs	r3, #0
 80073a8:	460a      	mov	r2, r1
 80073aa:	4922      	ldr	r1, [pc, #136]	@ (8007434 <vTaskStartScheduler+0xb8>)
 80073ac:	4822      	ldr	r0, [pc, #136]	@ (8007438 <vTaskStartScheduler+0xbc>)
 80073ae:	f7ff fe09 	bl	8006fc4 <xTaskCreateStatic>
 80073b2:	4603      	mov	r3, r0
 80073b4:	4a21      	ldr	r2, [pc, #132]	@ (800743c <vTaskStartScheduler+0xc0>)
 80073b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073b8:	4b20      	ldr	r3, [pc, #128]	@ (800743c <vTaskStartScheduler+0xc0>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073c0:	2301      	movs	r3, #1
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	e001      	b.n	80073ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d102      	bne.n	80073d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073d0:	f000 fece 	bl	8008170 <xTimerCreateTimerTask>
 80073d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d116      	bne.n	800740a <vTaskStartScheduler+0x8e>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	613b      	str	r3, [r7, #16]
}
 80073ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073f0:	4b13      	ldr	r3, [pc, #76]	@ (8007440 <vTaskStartScheduler+0xc4>)
 80073f2:	f04f 32ff 	mov.w	r2, #4294967295
 80073f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073f8:	4b12      	ldr	r3, [pc, #72]	@ (8007444 <vTaskStartScheduler+0xc8>)
 80073fa:	2201      	movs	r2, #1
 80073fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073fe:	4b12      	ldr	r3, [pc, #72]	@ (8007448 <vTaskStartScheduler+0xcc>)
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007404:	f001 fba4 	bl	8008b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007408:	e00f      	b.n	800742a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007410:	d10b      	bne.n	800742a <vTaskStartScheduler+0xae>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	60fb      	str	r3, [r7, #12]
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop
 8007428:	e7fd      	b.n	8007426 <vTaskStartScheduler+0xaa>
}
 800742a:	bf00      	nop
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	0800a304 	.word	0x0800a304
 8007438:	08007bb1 	.word	0x08007bb1
 800743c:	200015e4 	.word	0x200015e4
 8007440:	200015e0 	.word	0x200015e0
 8007444:	200015cc 	.word	0x200015cc
 8007448:	200015c4 	.word	0x200015c4

0800744c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007450:	4b04      	ldr	r3, [pc, #16]	@ (8007464 <vTaskSuspendAll+0x18>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	4a03      	ldr	r2, [pc, #12]	@ (8007464 <vTaskSuspendAll+0x18>)
 8007458:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800745a:	bf00      	nop
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	200015e8 	.word	0x200015e8

08007468 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007472:	2300      	movs	r3, #0
 8007474:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007476:	4b42      	ldr	r3, [pc, #264]	@ (8007580 <xTaskResumeAll+0x118>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <xTaskResumeAll+0x2e>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	603b      	str	r3, [r7, #0]
}
 8007490:	bf00      	nop
 8007492:	bf00      	nop
 8007494:	e7fd      	b.n	8007492 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007496:	f001 fbff 	bl	8008c98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800749a:	4b39      	ldr	r3, [pc, #228]	@ (8007580 <xTaskResumeAll+0x118>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3b01      	subs	r3, #1
 80074a0:	4a37      	ldr	r2, [pc, #220]	@ (8007580 <xTaskResumeAll+0x118>)
 80074a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074a4:	4b36      	ldr	r3, [pc, #216]	@ (8007580 <xTaskResumeAll+0x118>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d162      	bne.n	8007572 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074ac:	4b35      	ldr	r3, [pc, #212]	@ (8007584 <xTaskResumeAll+0x11c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d05e      	beq.n	8007572 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074b4:	e02f      	b.n	8007516 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b6:	4b34      	ldr	r3, [pc, #208]	@ (8007588 <xTaskResumeAll+0x120>)
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3318      	adds	r3, #24
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fe fdbc 	bl	8006040 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fe fdb7 	bl	8006040 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d6:	4b2d      	ldr	r3, [pc, #180]	@ (800758c <xTaskResumeAll+0x124>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d903      	bls.n	80074e6 <xTaskResumeAll+0x7e>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e2:	4a2a      	ldr	r2, [pc, #168]	@ (800758c <xTaskResumeAll+0x124>)
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4a27      	ldr	r2, [pc, #156]	@ (8007590 <xTaskResumeAll+0x128>)
 80074f4:	441a      	add	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3304      	adds	r3, #4
 80074fa:	4619      	mov	r1, r3
 80074fc:	4610      	mov	r0, r2
 80074fe:	f7fe fd42 	bl	8005f86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007506:	4b23      	ldr	r3, [pc, #140]	@ (8007594 <xTaskResumeAll+0x12c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750c:	429a      	cmp	r2, r3
 800750e:	d302      	bcc.n	8007516 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007510:	4b21      	ldr	r3, [pc, #132]	@ (8007598 <xTaskResumeAll+0x130>)
 8007512:	2201      	movs	r2, #1
 8007514:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007516:	4b1c      	ldr	r3, [pc, #112]	@ (8007588 <xTaskResumeAll+0x120>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1cb      	bne.n	80074b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007524:	f000 fbfa 	bl	8007d1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007528:	4b1c      	ldr	r3, [pc, #112]	@ (800759c <xTaskResumeAll+0x134>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d010      	beq.n	8007556 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007534:	f000 f846 	bl	80075c4 <xTaskIncrementTick>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800753e:	4b16      	ldr	r3, [pc, #88]	@ (8007598 <xTaskResumeAll+0x130>)
 8007540:	2201      	movs	r2, #1
 8007542:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3b01      	subs	r3, #1
 8007548:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1f1      	bne.n	8007534 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007550:	4b12      	ldr	r3, [pc, #72]	@ (800759c <xTaskResumeAll+0x134>)
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007556:	4b10      	ldr	r3, [pc, #64]	@ (8007598 <xTaskResumeAll+0x130>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800755e:	2301      	movs	r3, #1
 8007560:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007562:	4b0f      	ldr	r3, [pc, #60]	@ (80075a0 <xTaskResumeAll+0x138>)
 8007564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007572:	f001 fbc3 	bl	8008cfc <vPortExitCritical>

	return xAlreadyYielded;
 8007576:	68bb      	ldr	r3, [r7, #8]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	200015e8 	.word	0x200015e8
 8007584:	200015c0 	.word	0x200015c0
 8007588:	20001580 	.word	0x20001580
 800758c:	200015c8 	.word	0x200015c8
 8007590:	200010f0 	.word	0x200010f0
 8007594:	200010ec 	.word	0x200010ec
 8007598:	200015d4 	.word	0x200015d4
 800759c:	200015d0 	.word	0x200015d0
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075aa:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <xTaskGetTickCount+0x1c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075b0:	687b      	ldr	r3, [r7, #4]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	200015c4 	.word	0x200015c4

080075c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075ca:	2300      	movs	r3, #0
 80075cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ce:	4b4f      	ldr	r3, [pc, #316]	@ (800770c <xTaskIncrementTick+0x148>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f040 8090 	bne.w	80076f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075d8:	4b4d      	ldr	r3, [pc, #308]	@ (8007710 <xTaskIncrementTick+0x14c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3301      	adds	r3, #1
 80075de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075e0:	4a4b      	ldr	r2, [pc, #300]	@ (8007710 <xTaskIncrementTick+0x14c>)
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d121      	bne.n	8007630 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80075ec:	4b49      	ldr	r3, [pc, #292]	@ (8007714 <xTaskIncrementTick+0x150>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <xTaskIncrementTick+0x4a>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	603b      	str	r3, [r7, #0]
}
 8007608:	bf00      	nop
 800760a:	bf00      	nop
 800760c:	e7fd      	b.n	800760a <xTaskIncrementTick+0x46>
 800760e:	4b41      	ldr	r3, [pc, #260]	@ (8007714 <xTaskIncrementTick+0x150>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	4b40      	ldr	r3, [pc, #256]	@ (8007718 <xTaskIncrementTick+0x154>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a3e      	ldr	r2, [pc, #248]	@ (8007714 <xTaskIncrementTick+0x150>)
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	4a3e      	ldr	r2, [pc, #248]	@ (8007718 <xTaskIncrementTick+0x154>)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	4b3e      	ldr	r3, [pc, #248]	@ (800771c <xTaskIncrementTick+0x158>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3301      	adds	r3, #1
 8007628:	4a3c      	ldr	r2, [pc, #240]	@ (800771c <xTaskIncrementTick+0x158>)
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	f000 fb76 	bl	8007d1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007630:	4b3b      	ldr	r3, [pc, #236]	@ (8007720 <xTaskIncrementTick+0x15c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	429a      	cmp	r2, r3
 8007638:	d349      	bcc.n	80076ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800763a:	4b36      	ldr	r3, [pc, #216]	@ (8007714 <xTaskIncrementTick+0x150>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d104      	bne.n	800764e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007644:	4b36      	ldr	r3, [pc, #216]	@ (8007720 <xTaskIncrementTick+0x15c>)
 8007646:	f04f 32ff 	mov.w	r2, #4294967295
 800764a:	601a      	str	r2, [r3, #0]
					break;
 800764c:	e03f      	b.n	80076ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800764e:	4b31      	ldr	r3, [pc, #196]	@ (8007714 <xTaskIncrementTick+0x150>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	429a      	cmp	r2, r3
 8007664:	d203      	bcs.n	800766e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007666:	4a2e      	ldr	r2, [pc, #184]	@ (8007720 <xTaskIncrementTick+0x15c>)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800766c:	e02f      	b.n	80076ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	3304      	adds	r3, #4
 8007672:	4618      	mov	r0, r3
 8007674:	f7fe fce4 	bl	8006040 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767c:	2b00      	cmp	r3, #0
 800767e:	d004      	beq.n	800768a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	3318      	adds	r3, #24
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe fcdb 	bl	8006040 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800768e:	4b25      	ldr	r3, [pc, #148]	@ (8007724 <xTaskIncrementTick+0x160>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d903      	bls.n	800769e <xTaskIncrementTick+0xda>
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769a:	4a22      	ldr	r2, [pc, #136]	@ (8007724 <xTaskIncrementTick+0x160>)
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a2:	4613      	mov	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007728 <xTaskIncrementTick+0x164>)
 80076ac:	441a      	add	r2, r3
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4619      	mov	r1, r3
 80076b4:	4610      	mov	r0, r2
 80076b6:	f7fe fc66 	bl	8005f86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076be:	4b1b      	ldr	r3, [pc, #108]	@ (800772c <xTaskIncrementTick+0x168>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d3b8      	bcc.n	800763a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80076c8:	2301      	movs	r3, #1
 80076ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076cc:	e7b5      	b.n	800763a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076ce:	4b17      	ldr	r3, [pc, #92]	@ (800772c <xTaskIncrementTick+0x168>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d4:	4914      	ldr	r1, [pc, #80]	@ (8007728 <xTaskIncrementTick+0x164>)
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	440b      	add	r3, r1
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d901      	bls.n	80076ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80076e6:	2301      	movs	r3, #1
 80076e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80076ea:	4b11      	ldr	r3, [pc, #68]	@ (8007730 <xTaskIncrementTick+0x16c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d007      	beq.n	8007702 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80076f2:	2301      	movs	r3, #1
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	e004      	b.n	8007702 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007734 <xTaskIncrementTick+0x170>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3301      	adds	r3, #1
 80076fe:	4a0d      	ldr	r2, [pc, #52]	@ (8007734 <xTaskIncrementTick+0x170>)
 8007700:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007702:	697b      	ldr	r3, [r7, #20]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	200015e8 	.word	0x200015e8
 8007710:	200015c4 	.word	0x200015c4
 8007714:	20001578 	.word	0x20001578
 8007718:	2000157c 	.word	0x2000157c
 800771c:	200015d8 	.word	0x200015d8
 8007720:	200015e0 	.word	0x200015e0
 8007724:	200015c8 	.word	0x200015c8
 8007728:	200010f0 	.word	0x200010f0
 800772c:	200010ec 	.word	0x200010ec
 8007730:	200015d4 	.word	0x200015d4
 8007734:	200015d0 	.word	0x200015d0

08007738 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800773e:	4b28      	ldr	r3, [pc, #160]	@ (80077e0 <vTaskSwitchContext+0xa8>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007746:	4b27      	ldr	r3, [pc, #156]	@ (80077e4 <vTaskSwitchContext+0xac>)
 8007748:	2201      	movs	r2, #1
 800774a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800774c:	e042      	b.n	80077d4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800774e:	4b25      	ldr	r3, [pc, #148]	@ (80077e4 <vTaskSwitchContext+0xac>)
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007754:	4b24      	ldr	r3, [pc, #144]	@ (80077e8 <vTaskSwitchContext+0xb0>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e011      	b.n	8007780 <vTaskSwitchContext+0x48>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10b      	bne.n	800777a <vTaskSwitchContext+0x42>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	607b      	str	r3, [r7, #4]
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop
 8007778:	e7fd      	b.n	8007776 <vTaskSwitchContext+0x3e>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3b01      	subs	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	491a      	ldr	r1, [pc, #104]	@ (80077ec <vTaskSwitchContext+0xb4>)
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	4613      	mov	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0e3      	beq.n	800775c <vTaskSwitchContext+0x24>
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4a13      	ldr	r2, [pc, #76]	@ (80077ec <vTaskSwitchContext+0xb4>)
 80077a0:	4413      	add	r3, r2
 80077a2:	60bb      	str	r3, [r7, #8]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	605a      	str	r2, [r3, #4]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	3308      	adds	r3, #8
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d104      	bne.n	80077c4 <vTaskSwitchContext+0x8c>
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	605a      	str	r2, [r3, #4]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	4a09      	ldr	r2, [pc, #36]	@ (80077f0 <vTaskSwitchContext+0xb8>)
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	4a06      	ldr	r2, [pc, #24]	@ (80077e8 <vTaskSwitchContext+0xb0>)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6013      	str	r3, [r2, #0]
}
 80077d4:	bf00      	nop
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	200015e8 	.word	0x200015e8
 80077e4:	200015d4 	.word	0x200015d4
 80077e8:	200015c8 	.word	0x200015c8
 80077ec:	200010f0 	.word	0x200010f0
 80077f0:	200010ec 	.word	0x200010ec

080077f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10b      	bne.n	800781c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	60fb      	str	r3, [r7, #12]
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	e7fd      	b.n	8007818 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800781c:	4b07      	ldr	r3, [pc, #28]	@ (800783c <vTaskPlaceOnEventList+0x48>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3318      	adds	r3, #24
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7fe fbd2 	bl	8005fce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800782a:	2101      	movs	r1, #1
 800782c:	6838      	ldr	r0, [r7, #0]
 800782e:	f000 fc4b 	bl	80080c8 <prvAddCurrentTaskToDelayedList>
}
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	200010ec 	.word	0x200010ec

08007840 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10b      	bne.n	800786a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	617b      	str	r3, [r7, #20]
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop
 8007868:	e7fd      	b.n	8007866 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800786a:	4b12      	ldr	r3, [pc, #72]	@ (80078b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10b      	bne.n	800788a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	613b      	str	r3, [r7, #16]
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop
 8007888:	e7fd      	b.n	8007886 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800788a:	4b0b      	ldr	r3, [pc, #44]	@ (80078b8 <vTaskPlaceOnUnorderedEventList+0x78>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007894:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007896:	4b08      	ldr	r3, [pc, #32]	@ (80078b8 <vTaskPlaceOnUnorderedEventList+0x78>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3318      	adds	r3, #24
 800789c:	4619      	mov	r1, r3
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f7fe fb71 	bl	8005f86 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078a4:	2101      	movs	r1, #1
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fc0e 	bl	80080c8 <prvAddCurrentTaskToDelayedList>
}
 80078ac:	bf00      	nop
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	200015e8 	.word	0x200015e8
 80078b8:	200010ec 	.word	0x200010ec

080078bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10b      	bne.n	80078e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	617b      	str	r3, [r7, #20]
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	e7fd      	b.n	80078e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007910 <vTaskPlaceOnEventListRestricted+0x54>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3318      	adds	r3, #24
 80078ec:	4619      	mov	r1, r3
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f7fe fb49 	bl	8005f86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80078fa:	f04f 33ff 	mov.w	r3, #4294967295
 80078fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	68b8      	ldr	r0, [r7, #8]
 8007904:	f000 fbe0 	bl	80080c8 <prvAddCurrentTaskToDelayedList>
	}
 8007908:	bf00      	nop
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	200010ec 	.word	0x200010ec

08007914 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10b      	bne.n	8007942 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	60fb      	str	r3, [r7, #12]
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	e7fd      	b.n	800793e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	3318      	adds	r3, #24
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fb7a 	bl	8006040 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800794c:	4b1d      	ldr	r3, [pc, #116]	@ (80079c4 <xTaskRemoveFromEventList+0xb0>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d11d      	bne.n	8007990 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	3304      	adds	r3, #4
 8007958:	4618      	mov	r0, r3
 800795a:	f7fe fb71 	bl	8006040 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007962:	4b19      	ldr	r3, [pc, #100]	@ (80079c8 <xTaskRemoveFromEventList+0xb4>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d903      	bls.n	8007972 <xTaskRemoveFromEventList+0x5e>
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796e:	4a16      	ldr	r2, [pc, #88]	@ (80079c8 <xTaskRemoveFromEventList+0xb4>)
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007976:	4613      	mov	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4a13      	ldr	r2, [pc, #76]	@ (80079cc <xTaskRemoveFromEventList+0xb8>)
 8007980:	441a      	add	r2, r3
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	3304      	adds	r3, #4
 8007986:	4619      	mov	r1, r3
 8007988:	4610      	mov	r0, r2
 800798a:	f7fe fafc 	bl	8005f86 <vListInsertEnd>
 800798e:	e005      	b.n	800799c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	3318      	adds	r3, #24
 8007994:	4619      	mov	r1, r3
 8007996:	480e      	ldr	r0, [pc, #56]	@ (80079d0 <xTaskRemoveFromEventList+0xbc>)
 8007998:	f7fe faf5 	bl	8005f86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a0:	4b0c      	ldr	r3, [pc, #48]	@ (80079d4 <xTaskRemoveFromEventList+0xc0>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d905      	bls.n	80079b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80079aa:	2301      	movs	r3, #1
 80079ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079ae:	4b0a      	ldr	r3, [pc, #40]	@ (80079d8 <xTaskRemoveFromEventList+0xc4>)
 80079b0:	2201      	movs	r2, #1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	e001      	b.n	80079ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80079b6:	2300      	movs	r3, #0
 80079b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80079ba:	697b      	ldr	r3, [r7, #20]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	200015e8 	.word	0x200015e8
 80079c8:	200015c8 	.word	0x200015c8
 80079cc:	200010f0 	.word	0x200010f0
 80079d0:	20001580 	.word	0x20001580
 80079d4:	200010ec 	.word	0x200010ec
 80079d8:	200015d4 	.word	0x200015d4

080079dc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80079e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007a90 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10b      	bne.n	8007a06 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	613b      	str	r3, [r7, #16]
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	e7fd      	b.n	8007a02 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10b      	bne.n	8007a34 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	60fb      	str	r3, [r7, #12]
}
 8007a2e:	bf00      	nop
 8007a30:	bf00      	nop
 8007a32:	e7fd      	b.n	8007a30 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7fe fb03 	bl	8006040 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fafe 	bl	8006040 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a48:	4b12      	ldr	r3, [pc, #72]	@ (8007a94 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d903      	bls.n	8007a58 <vTaskRemoveFromUnorderedEventList+0x7c>
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a54:	4a0f      	ldr	r2, [pc, #60]	@ (8007a94 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4a0c      	ldr	r2, [pc, #48]	@ (8007a98 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007a66:	441a      	add	r2, r3
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4610      	mov	r0, r2
 8007a70:	f7fe fa89 	bl	8005f86 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a78:	4b08      	ldr	r3, [pc, #32]	@ (8007a9c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d902      	bls.n	8007a88 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007a82:	4b07      	ldr	r3, [pc, #28]	@ (8007aa0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8007a84:	2201      	movs	r2, #1
 8007a86:	601a      	str	r2, [r3, #0]
	}
}
 8007a88:	bf00      	nop
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	200015e8 	.word	0x200015e8
 8007a94:	200015c8 	.word	0x200015c8
 8007a98:	200010f0 	.word	0x200010f0
 8007a9c:	200010ec 	.word	0x200010ec
 8007aa0:	200015d4 	.word	0x200015d4

08007aa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007aac:	4b06      	ldr	r3, [pc, #24]	@ (8007ac8 <vTaskInternalSetTimeOutState+0x24>)
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ab4:	4b05      	ldr	r3, [pc, #20]	@ (8007acc <vTaskInternalSetTimeOutState+0x28>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	605a      	str	r2, [r3, #4]
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	200015d8 	.word	0x200015d8
 8007acc:	200015c4 	.word	0x200015c4

08007ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10b      	bne.n	8007af8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	613b      	str	r3, [r7, #16]
}
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	e7fd      	b.n	8007af4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10b      	bne.n	8007b16 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	60fb      	str	r3, [r7, #12]
}
 8007b10:	bf00      	nop
 8007b12:	bf00      	nop
 8007b14:	e7fd      	b.n	8007b12 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007b16:	f001 f8bf 	bl	8008c98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8007b90 <xTaskCheckForTimeOut+0xc0>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b32:	d102      	bne.n	8007b3a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b34:	2300      	movs	r3, #0
 8007b36:	61fb      	str	r3, [r7, #28]
 8007b38:	e023      	b.n	8007b82 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	4b15      	ldr	r3, [pc, #84]	@ (8007b94 <xTaskCheckForTimeOut+0xc4>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d007      	beq.n	8007b56 <xTaskCheckForTimeOut+0x86>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d302      	bcc.n	8007b56 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b50:	2301      	movs	r3, #1
 8007b52:	61fb      	str	r3, [r7, #28]
 8007b54:	e015      	b.n	8007b82 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d20b      	bcs.n	8007b78 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	1ad2      	subs	r2, r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7ff ff99 	bl	8007aa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b72:	2300      	movs	r3, #0
 8007b74:	61fb      	str	r3, [r7, #28]
 8007b76:	e004      	b.n	8007b82 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b82:	f001 f8bb 	bl	8008cfc <vPortExitCritical>

	return xReturn;
 8007b86:	69fb      	ldr	r3, [r7, #28]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3720      	adds	r7, #32
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	200015c4 	.word	0x200015c4
 8007b94:	200015d8 	.word	0x200015d8

08007b98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b98:	b480      	push	{r7}
 8007b9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b9c:	4b03      	ldr	r3, [pc, #12]	@ (8007bac <vTaskMissedYield+0x14>)
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]
}
 8007ba2:	bf00      	nop
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	200015d4 	.word	0x200015d4

08007bb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bb8:	f000 f852 	bl	8007c60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bbc:	4b06      	ldr	r3, [pc, #24]	@ (8007bd8 <prvIdleTask+0x28>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d9f9      	bls.n	8007bb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bc4:	4b05      	ldr	r3, [pc, #20]	@ (8007bdc <prvIdleTask+0x2c>)
 8007bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007bd4:	e7f0      	b.n	8007bb8 <prvIdleTask+0x8>
 8007bd6:	bf00      	nop
 8007bd8:	200010f0 	.word	0x200010f0
 8007bdc:	e000ed04 	.word	0xe000ed04

08007be0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007be6:	2300      	movs	r3, #0
 8007be8:	607b      	str	r3, [r7, #4]
 8007bea:	e00c      	b.n	8007c06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4a12      	ldr	r2, [pc, #72]	@ (8007c40 <prvInitialiseTaskLists+0x60>)
 8007bf8:	4413      	add	r3, r2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe f996 	bl	8005f2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3301      	adds	r3, #1
 8007c04:	607b      	str	r3, [r7, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b37      	cmp	r3, #55	@ 0x37
 8007c0a:	d9ef      	bls.n	8007bec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c0c:	480d      	ldr	r0, [pc, #52]	@ (8007c44 <prvInitialiseTaskLists+0x64>)
 8007c0e:	f7fe f98d 	bl	8005f2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c12:	480d      	ldr	r0, [pc, #52]	@ (8007c48 <prvInitialiseTaskLists+0x68>)
 8007c14:	f7fe f98a 	bl	8005f2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c18:	480c      	ldr	r0, [pc, #48]	@ (8007c4c <prvInitialiseTaskLists+0x6c>)
 8007c1a:	f7fe f987 	bl	8005f2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c1e:	480c      	ldr	r0, [pc, #48]	@ (8007c50 <prvInitialiseTaskLists+0x70>)
 8007c20:	f7fe f984 	bl	8005f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c24:	480b      	ldr	r0, [pc, #44]	@ (8007c54 <prvInitialiseTaskLists+0x74>)
 8007c26:	f7fe f981 	bl	8005f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c58 <prvInitialiseTaskLists+0x78>)
 8007c2c:	4a05      	ldr	r2, [pc, #20]	@ (8007c44 <prvInitialiseTaskLists+0x64>)
 8007c2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c30:	4b0a      	ldr	r3, [pc, #40]	@ (8007c5c <prvInitialiseTaskLists+0x7c>)
 8007c32:	4a05      	ldr	r2, [pc, #20]	@ (8007c48 <prvInitialiseTaskLists+0x68>)
 8007c34:	601a      	str	r2, [r3, #0]
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	200010f0 	.word	0x200010f0
 8007c44:	20001550 	.word	0x20001550
 8007c48:	20001564 	.word	0x20001564
 8007c4c:	20001580 	.word	0x20001580
 8007c50:	20001594 	.word	0x20001594
 8007c54:	200015ac 	.word	0x200015ac
 8007c58:	20001578 	.word	0x20001578
 8007c5c:	2000157c 	.word	0x2000157c

08007c60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c66:	e019      	b.n	8007c9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c68:	f001 f816 	bl	8008c98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c6c:	4b10      	ldr	r3, [pc, #64]	@ (8007cb0 <prvCheckTasksWaitingTermination+0x50>)
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe f9e1 	bl	8006040 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb4 <prvCheckTasksWaitingTermination+0x54>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	4a0b      	ldr	r2, [pc, #44]	@ (8007cb4 <prvCheckTasksWaitingTermination+0x54>)
 8007c86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c88:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb8 <prvCheckTasksWaitingTermination+0x58>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8007cb8 <prvCheckTasksWaitingTermination+0x58>)
 8007c90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c92:	f001 f833 	bl	8008cfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f810 	bl	8007cbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c9c:	4b06      	ldr	r3, [pc, #24]	@ (8007cb8 <prvCheckTasksWaitingTermination+0x58>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e1      	bne.n	8007c68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	20001594 	.word	0x20001594
 8007cb4:	200015c0 	.word	0x200015c0
 8007cb8:	200015a8 	.word	0x200015a8

08007cbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d108      	bne.n	8007ce0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 f9d0 	bl	8009078 <vPortFree>
				vPortFree( pxTCB );
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f001 f9cd 	bl	8009078 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007cde:	e019      	b.n	8007d14 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d103      	bne.n	8007cf2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 f9c4 	bl	8009078 <vPortFree>
	}
 8007cf0:	e010      	b.n	8007d14 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d00b      	beq.n	8007d14 <prvDeleteTCB+0x58>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60fb      	str	r3, [r7, #12]
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	e7fd      	b.n	8007d10 <prvDeleteTCB+0x54>
	}
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d22:	4b0c      	ldr	r3, [pc, #48]	@ (8007d54 <prvResetNextTaskUnblockTime+0x38>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d104      	bne.n	8007d36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d58 <prvResetNextTaskUnblockTime+0x3c>)
 8007d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d34:	e008      	b.n	8007d48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d36:	4b07      	ldr	r3, [pc, #28]	@ (8007d54 <prvResetNextTaskUnblockTime+0x38>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	4a04      	ldr	r2, [pc, #16]	@ (8007d58 <prvResetNextTaskUnblockTime+0x3c>)
 8007d46:	6013      	str	r3, [r2, #0]
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	20001578 	.word	0x20001578
 8007d58:	200015e0 	.word	0x200015e0

08007d5c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007d62:	4b05      	ldr	r3, [pc, #20]	@ (8007d78 <xTaskGetCurrentTaskHandle+0x1c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007d68:	687b      	ldr	r3, [r7, #4]
	}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	200010ec 	.word	0x200010ec

08007d7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d82:	4b0b      	ldr	r3, [pc, #44]	@ (8007db0 <xTaskGetSchedulerState+0x34>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	607b      	str	r3, [r7, #4]
 8007d8e:	e008      	b.n	8007da2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d90:	4b08      	ldr	r3, [pc, #32]	@ (8007db4 <xTaskGetSchedulerState+0x38>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d102      	bne.n	8007d9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d98:	2302      	movs	r3, #2
 8007d9a:	607b      	str	r3, [r7, #4]
 8007d9c:	e001      	b.n	8007da2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007da2:	687b      	ldr	r3, [r7, #4]
	}
 8007da4:	4618      	mov	r0, r3
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	200015cc 	.word	0x200015cc
 8007db4:	200015e8 	.word	0x200015e8

08007db8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d051      	beq.n	8007e72 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8007e7c <xTaskPriorityInherit+0xc4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d241      	bcs.n	8007e60 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	db06      	blt.n	8007df2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007de4:	4b25      	ldr	r3, [pc, #148]	@ (8007e7c <xTaskPriorityInherit+0xc4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	6959      	ldr	r1, [r3, #20]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4a1f      	ldr	r2, [pc, #124]	@ (8007e80 <xTaskPriorityInherit+0xc8>)
 8007e04:	4413      	add	r3, r2
 8007e06:	4299      	cmp	r1, r3
 8007e08:	d122      	bne.n	8007e50 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe f916 	bl	8006040 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e14:	4b19      	ldr	r3, [pc, #100]	@ (8007e7c <xTaskPriorityInherit+0xc4>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e22:	4b18      	ldr	r3, [pc, #96]	@ (8007e84 <xTaskPriorityInherit+0xcc>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d903      	bls.n	8007e32 <xTaskPriorityInherit+0x7a>
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2e:	4a15      	ldr	r2, [pc, #84]	@ (8007e84 <xTaskPriorityInherit+0xcc>)
 8007e30:	6013      	str	r3, [r2, #0]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e36:	4613      	mov	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4a10      	ldr	r2, [pc, #64]	@ (8007e80 <xTaskPriorityInherit+0xc8>)
 8007e40:	441a      	add	r2, r3
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	3304      	adds	r3, #4
 8007e46:	4619      	mov	r1, r3
 8007e48:	4610      	mov	r0, r2
 8007e4a:	f7fe f89c 	bl	8005f86 <vListInsertEnd>
 8007e4e:	e004      	b.n	8007e5a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e50:	4b0a      	ldr	r3, [pc, #40]	@ (8007e7c <xTaskPriorityInherit+0xc4>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	e008      	b.n	8007e72 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e64:	4b05      	ldr	r3, [pc, #20]	@ (8007e7c <xTaskPriorityInherit+0xc4>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d201      	bcs.n	8007e72 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e72:	68fb      	ldr	r3, [r7, #12]
	}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	200010ec 	.word	0x200010ec
 8007e80:	200010f0 	.word	0x200010f0
 8007e84:	200015c8 	.word	0x200015c8

08007e88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d058      	beq.n	8007f50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8007f5c <xTaskPriorityDisinherit+0xd4>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d00b      	beq.n	8007ec0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	60fb      	str	r3, [r7, #12]
}
 8007eba:	bf00      	nop
 8007ebc:	bf00      	nop
 8007ebe:	e7fd      	b.n	8007ebc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10b      	bne.n	8007ee0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	60bb      	str	r3, [r7, #8]
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	e7fd      	b.n	8007edc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ee4:	1e5a      	subs	r2, r3, #1
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d02c      	beq.n	8007f50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d128      	bne.n	8007f50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	3304      	adds	r3, #4
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe f89c 	bl	8006040 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f20:	4b0f      	ldr	r3, [pc, #60]	@ (8007f60 <xTaskPriorityDisinherit+0xd8>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d903      	bls.n	8007f30 <xTaskPriorityDisinherit+0xa8>
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8007f60 <xTaskPriorityDisinherit+0xd8>)
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4a09      	ldr	r2, [pc, #36]	@ (8007f64 <xTaskPriorityDisinherit+0xdc>)
 8007f3e:	441a      	add	r2, r3
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	3304      	adds	r3, #4
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f7fe f81d 	bl	8005f86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f50:	697b      	ldr	r3, [r7, #20]
	}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	200010ec 	.word	0x200010ec
 8007f60:	200015c8 	.word	0x200015c8
 8007f64:	200010f0 	.word	0x200010f0

08007f68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007f76:	2301      	movs	r3, #1
 8007f78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d06c      	beq.n	800805a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10b      	bne.n	8007fa0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	60fb      	str	r3, [r7, #12]
}
 8007f9a:	bf00      	nop
 8007f9c:	bf00      	nop
 8007f9e:	e7fd      	b.n	8007f9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d902      	bls.n	8007fb0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	61fb      	str	r3, [r7, #28]
 8007fae:	e002      	b.n	8007fb6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fb4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d04c      	beq.n	800805a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d147      	bne.n	800805a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007fca:	4b26      	ldr	r3, [pc, #152]	@ (8008064 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d10b      	bne.n	8007fec <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	60bb      	str	r3, [r7, #8]
}
 8007fe6:	bf00      	nop
 8007fe8:	bf00      	nop
 8007fea:	e7fd      	b.n	8007fe8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	db04      	blt.n	800800a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	6959      	ldr	r1, [r3, #20]
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4a13      	ldr	r2, [pc, #76]	@ (8008068 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800801a:	4413      	add	r3, r2
 800801c:	4299      	cmp	r1, r3
 800801e:	d11c      	bne.n	800805a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	3304      	adds	r3, #4
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe f80b 	bl	8006040 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802e:	4b0f      	ldr	r3, [pc, #60]	@ (800806c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d903      	bls.n	800803e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803a:	4a0c      	ldr	r2, [pc, #48]	@ (800806c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4a07      	ldr	r2, [pc, #28]	@ (8008068 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800804c:	441a      	add	r2, r3
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	3304      	adds	r3, #4
 8008052:	4619      	mov	r1, r3
 8008054:	4610      	mov	r0, r2
 8008056:	f7fd ff96 	bl	8005f86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800805a:	bf00      	nop
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	200010ec 	.word	0x200010ec
 8008068:	200010f0 	.word	0x200010f0
 800806c:	200015c8 	.word	0x200015c8

08008070 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008076:	4b09      	ldr	r3, [pc, #36]	@ (800809c <uxTaskResetEventItemValue+0x2c>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800807e:	4b07      	ldr	r3, [pc, #28]	@ (800809c <uxTaskResetEventItemValue+0x2c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008084:	4b05      	ldr	r3, [pc, #20]	@ (800809c <uxTaskResetEventItemValue+0x2c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800808c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800808e:	687b      	ldr	r3, [r7, #4]
}
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	200010ec 	.word	0x200010ec

080080a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80080a0:	b480      	push	{r7}
 80080a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80080a4:	4b07      	ldr	r3, [pc, #28]	@ (80080c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d004      	beq.n	80080b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80080ac:	4b05      	ldr	r3, [pc, #20]	@ (80080c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080b2:	3201      	adds	r2, #1
 80080b4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80080b6:	4b03      	ldr	r3, [pc, #12]	@ (80080c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80080b8:	681b      	ldr	r3, [r3, #0]
	}
 80080ba:	4618      	mov	r0, r3
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	200010ec 	.word	0x200010ec

080080c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080d2:	4b21      	ldr	r3, [pc, #132]	@ (8008158 <prvAddCurrentTaskToDelayedList+0x90>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080d8:	4b20      	ldr	r3, [pc, #128]	@ (800815c <prvAddCurrentTaskToDelayedList+0x94>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3304      	adds	r3, #4
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fd ffae 	bl	8006040 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ea:	d10a      	bne.n	8008102 <prvAddCurrentTaskToDelayedList+0x3a>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d007      	beq.n	8008102 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080f2:	4b1a      	ldr	r3, [pc, #104]	@ (800815c <prvAddCurrentTaskToDelayedList+0x94>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4619      	mov	r1, r3
 80080fa:	4819      	ldr	r0, [pc, #100]	@ (8008160 <prvAddCurrentTaskToDelayedList+0x98>)
 80080fc:	f7fd ff43 	bl	8005f86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008100:	e026      	b.n	8008150 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4413      	add	r3, r2
 8008108:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800810a:	4b14      	ldr	r3, [pc, #80]	@ (800815c <prvAddCurrentTaskToDelayedList+0x94>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	429a      	cmp	r2, r3
 8008118:	d209      	bcs.n	800812e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800811a:	4b12      	ldr	r3, [pc, #72]	@ (8008164 <prvAddCurrentTaskToDelayedList+0x9c>)
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	4b0f      	ldr	r3, [pc, #60]	@ (800815c <prvAddCurrentTaskToDelayedList+0x94>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3304      	adds	r3, #4
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f7fd ff51 	bl	8005fce <vListInsert>
}
 800812c:	e010      	b.n	8008150 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800812e:	4b0e      	ldr	r3, [pc, #56]	@ (8008168 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	4b0a      	ldr	r3, [pc, #40]	@ (800815c <prvAddCurrentTaskToDelayedList+0x94>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3304      	adds	r3, #4
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f7fd ff47 	bl	8005fce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008140:	4b0a      	ldr	r3, [pc, #40]	@ (800816c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	429a      	cmp	r2, r3
 8008148:	d202      	bcs.n	8008150 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800814a:	4a08      	ldr	r2, [pc, #32]	@ (800816c <prvAddCurrentTaskToDelayedList+0xa4>)
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	6013      	str	r3, [r2, #0]
}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	200015c4 	.word	0x200015c4
 800815c:	200010ec 	.word	0x200010ec
 8008160:	200015ac 	.word	0x200015ac
 8008164:	2000157c 	.word	0x2000157c
 8008168:	20001578 	.word	0x20001578
 800816c:	200015e0 	.word	0x200015e0

08008170 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08a      	sub	sp, #40	@ 0x28
 8008174:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008176:	2300      	movs	r3, #0
 8008178:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800817a:	f000 fbb1 	bl	80088e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800817e:	4b1d      	ldr	r3, [pc, #116]	@ (80081f4 <xTimerCreateTimerTask+0x84>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d021      	beq.n	80081ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800818e:	1d3a      	adds	r2, r7, #4
 8008190:	f107 0108 	add.w	r1, r7, #8
 8008194:	f107 030c 	add.w	r3, r7, #12
 8008198:	4618      	mov	r0, r3
 800819a:	f7fd fcb7 	bl	8005b0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	9202      	str	r2, [sp, #8]
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	2302      	movs	r3, #2
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	2300      	movs	r3, #0
 80081ae:	460a      	mov	r2, r1
 80081b0:	4911      	ldr	r1, [pc, #68]	@ (80081f8 <xTimerCreateTimerTask+0x88>)
 80081b2:	4812      	ldr	r0, [pc, #72]	@ (80081fc <xTimerCreateTimerTask+0x8c>)
 80081b4:	f7fe ff06 	bl	8006fc4 <xTaskCreateStatic>
 80081b8:	4603      	mov	r3, r0
 80081ba:	4a11      	ldr	r2, [pc, #68]	@ (8008200 <xTimerCreateTimerTask+0x90>)
 80081bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081be:	4b10      	ldr	r3, [pc, #64]	@ (8008200 <xTimerCreateTimerTask+0x90>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081c6:	2301      	movs	r3, #1
 80081c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10b      	bne.n	80081e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	613b      	str	r3, [r7, #16]
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	e7fd      	b.n	80081e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80081e8:	697b      	ldr	r3, [r7, #20]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	2000161c 	.word	0x2000161c
 80081f8:	0800a30c 	.word	0x0800a30c
 80081fc:	08008479 	.word	0x08008479
 8008200:	20001620 	.word	0x20001620

08008204 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af02      	add	r7, sp, #8
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008212:	202c      	movs	r0, #44	@ 0x2c
 8008214:	f000 fe62 	bl	8008edc <pvPortMalloc>
 8008218:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00d      	beq.n	800823c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	68b9      	ldr	r1, [r7, #8]
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 f845 	bl	80082c6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800823c:	697b      	ldr	r3, [r7, #20]
	}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008246:	b580      	push	{r7, lr}
 8008248:	b08a      	sub	sp, #40	@ 0x28
 800824a:	af02      	add	r7, sp, #8
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	607a      	str	r2, [r7, #4]
 8008252:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008254:	232c      	movs	r3, #44	@ 0x2c
 8008256:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	2b2c      	cmp	r3, #44	@ 0x2c
 800825c:	d00b      	beq.n	8008276 <xTimerCreateStatic+0x30>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	61bb      	str	r3, [r7, #24]
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	e7fd      	b.n	8008272 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008276:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10b      	bne.n	8008296 <xTimerCreateStatic+0x50>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	617b      	str	r3, [r7, #20]
}
 8008290:	bf00      	nop
 8008292:	bf00      	nop
 8008294:	e7fd      	b.n	8008292 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008298:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00d      	beq.n	80082bc <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	2202      	movs	r2, #2
 80082a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	68b9      	ldr	r1, [r7, #8]
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 f805 	bl	80082c6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80082bc:	69fb      	ldr	r3, [r7, #28]
	}
 80082be:	4618      	mov	r0, r3
 80082c0:	3720      	adds	r7, #32
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b086      	sub	sp, #24
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	60b9      	str	r1, [r7, #8]
 80082d0:	607a      	str	r2, [r7, #4]
 80082d2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10b      	bne.n	80082f2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	617b      	str	r3, [r7, #20]
}
 80082ec:	bf00      	nop
 80082ee:	bf00      	nop
 80082f0:	e7fd      	b.n	80082ee <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01e      	beq.n	8008336 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80082f8:	f000 faf2 	bl	80088e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80082fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	6a3a      	ldr	r2, [r7, #32]
 8008312:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008316:	3304      	adds	r3, #4
 8008318:	4618      	mov	r0, r3
 800831a:	f7fd fe27 	bl	8005f6c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d008      	beq.n	8008336 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008326:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800832a:	f043 0304 	orr.w	r3, r3, #4
 800832e:	b2da      	uxtb	r2, r3
 8008330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008332:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008336:	bf00      	nop
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08a      	sub	sp, #40	@ 0x28
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800834e:	2300      	movs	r3, #0
 8008350:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10b      	bne.n	8008370 <xTimerGenericCommand+0x30>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	623b      	str	r3, [r7, #32]
}
 800836a:	bf00      	nop
 800836c:	bf00      	nop
 800836e:	e7fd      	b.n	800836c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008370:	4b19      	ldr	r3, [pc, #100]	@ (80083d8 <xTimerGenericCommand+0x98>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d02a      	beq.n	80083ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b05      	cmp	r3, #5
 8008388:	dc18      	bgt.n	80083bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800838a:	f7ff fcf7 	bl	8007d7c <xTaskGetSchedulerState>
 800838e:	4603      	mov	r3, r0
 8008390:	2b02      	cmp	r3, #2
 8008392:	d109      	bne.n	80083a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008394:	4b10      	ldr	r3, [pc, #64]	@ (80083d8 <xTimerGenericCommand+0x98>)
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	f107 0110 	add.w	r1, r7, #16
 800839c:	2300      	movs	r3, #0
 800839e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083a0:	f7fe f876 	bl	8006490 <xQueueGenericSend>
 80083a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80083a6:	e012      	b.n	80083ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083a8:	4b0b      	ldr	r3, [pc, #44]	@ (80083d8 <xTimerGenericCommand+0x98>)
 80083aa:	6818      	ldr	r0, [r3, #0]
 80083ac:	f107 0110 	add.w	r1, r7, #16
 80083b0:	2300      	movs	r3, #0
 80083b2:	2200      	movs	r2, #0
 80083b4:	f7fe f86c 	bl	8006490 <xQueueGenericSend>
 80083b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80083ba:	e008      	b.n	80083ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083bc:	4b06      	ldr	r3, [pc, #24]	@ (80083d8 <xTimerGenericCommand+0x98>)
 80083be:	6818      	ldr	r0, [r3, #0]
 80083c0:	f107 0110 	add.w	r1, r7, #16
 80083c4:	2300      	movs	r3, #0
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	f7fe f964 	bl	8006694 <xQueueGenericSendFromISR>
 80083cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3728      	adds	r7, #40	@ 0x28
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	2000161c 	.word	0x2000161c

080083dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e6:	4b23      	ldr	r3, [pc, #140]	@ (8008474 <prvProcessExpiredTimer+0x98>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	3304      	adds	r3, #4
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fd fe23 	bl	8006040 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	2b00      	cmp	r3, #0
 8008406:	d023      	beq.n	8008450 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	699a      	ldr	r2, [r3, #24]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	18d1      	adds	r1, r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	6978      	ldr	r0, [r7, #20]
 8008416:	f000 f8d5 	bl	80085c4 <prvInsertTimerInActiveList>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d020      	beq.n	8008462 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008420:	2300      	movs	r3, #0
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	2300      	movs	r3, #0
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	2100      	movs	r1, #0
 800842a:	6978      	ldr	r0, [r7, #20]
 800842c:	f7ff ff88 	bl	8008340 <xTimerGenericCommand>
 8008430:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d114      	bne.n	8008462 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	60fb      	str	r3, [r7, #12]
}
 800844a:	bf00      	nop
 800844c:	bf00      	nop
 800844e:	e7fd      	b.n	800844c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008456:	f023 0301 	bic.w	r3, r3, #1
 800845a:	b2da      	uxtb	r2, r3
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	6978      	ldr	r0, [r7, #20]
 8008468:	4798      	blx	r3
}
 800846a:	bf00      	nop
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20001614 	.word	0x20001614

08008478 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008480:	f107 0308 	add.w	r3, r7, #8
 8008484:	4618      	mov	r0, r3
 8008486:	f000 f859 	bl	800853c <prvGetNextExpireTime>
 800848a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	4619      	mov	r1, r3
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 f805 	bl	80084a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008496:	f000 f8d7 	bl	8008648 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800849a:	bf00      	nop
 800849c:	e7f0      	b.n	8008480 <prvTimerTask+0x8>
	...

080084a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084aa:	f7fe ffcf 	bl	800744c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084ae:	f107 0308 	add.w	r3, r7, #8
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f866 	bl	8008584 <prvSampleTimeNow>
 80084b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d130      	bne.n	8008522 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <prvProcessTimerOrBlockTask+0x3c>
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d806      	bhi.n	80084dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084ce:	f7fe ffcb 	bl	8007468 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084d2:	68f9      	ldr	r1, [r7, #12]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff ff81 	bl	80083dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084da:	e024      	b.n	8008526 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d008      	beq.n	80084f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084e2:	4b13      	ldr	r3, [pc, #76]	@ (8008530 <prvProcessTimerOrBlockTask+0x90>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <prvProcessTimerOrBlockTask+0x50>
 80084ec:	2301      	movs	r3, #1
 80084ee:	e000      	b.n	80084f2 <prvProcessTimerOrBlockTask+0x52>
 80084f0:	2300      	movs	r3, #0
 80084f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008534 <prvProcessTimerOrBlockTask+0x94>)
 80084f6:	6818      	ldr	r0, [r3, #0]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	4619      	mov	r1, r3
 8008502:	f7fe fd2b 	bl	8006f5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008506:	f7fe ffaf 	bl	8007468 <xTaskResumeAll>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008510:	4b09      	ldr	r3, [pc, #36]	@ (8008538 <prvProcessTimerOrBlockTask+0x98>)
 8008512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	f3bf 8f6f 	isb	sy
}
 8008520:	e001      	b.n	8008526 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008522:	f7fe ffa1 	bl	8007468 <xTaskResumeAll>
}
 8008526:	bf00      	nop
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20001618 	.word	0x20001618
 8008534:	2000161c 	.word	0x2000161c
 8008538:	e000ed04 	.word	0xe000ed04

0800853c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008544:	4b0e      	ldr	r3, [pc, #56]	@ (8008580 <prvGetNextExpireTime+0x44>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <prvGetNextExpireTime+0x16>
 800854e:	2201      	movs	r2, #1
 8008550:	e000      	b.n	8008554 <prvGetNextExpireTime+0x18>
 8008552:	2200      	movs	r2, #0
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d105      	bne.n	800856c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008560:	4b07      	ldr	r3, [pc, #28]	@ (8008580 <prvGetNextExpireTime+0x44>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	e001      	b.n	8008570 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008570:	68fb      	ldr	r3, [r7, #12]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20001614 	.word	0x20001614

08008584 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800858c:	f7ff f80a 	bl	80075a4 <xTaskGetTickCount>
 8008590:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008592:	4b0b      	ldr	r3, [pc, #44]	@ (80085c0 <prvSampleTimeNow+0x3c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	429a      	cmp	r2, r3
 800859a:	d205      	bcs.n	80085a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800859c:	f000 f93a 	bl	8008814 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	e002      	b.n	80085ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085ae:	4a04      	ldr	r2, [pc, #16]	@ (80085c0 <prvSampleTimeNow+0x3c>)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085b4:	68fb      	ldr	r3, [r7, #12]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20001624 	.word	0x20001624

080085c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085d2:	2300      	movs	r3, #0
 80085d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d812      	bhi.n	8008610 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	1ad2      	subs	r2, r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d302      	bcc.n	80085fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085f8:	2301      	movs	r3, #1
 80085fa:	617b      	str	r3, [r7, #20]
 80085fc:	e01b      	b.n	8008636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085fe:	4b10      	ldr	r3, [pc, #64]	@ (8008640 <prvInsertTimerInActiveList+0x7c>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3304      	adds	r3, #4
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f7fd fce0 	bl	8005fce <vListInsert>
 800860e:	e012      	b.n	8008636 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	429a      	cmp	r2, r3
 8008616:	d206      	bcs.n	8008626 <prvInsertTimerInActiveList+0x62>
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d302      	bcc.n	8008626 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008620:	2301      	movs	r3, #1
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	e007      	b.n	8008636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008626:	4b07      	ldr	r3, [pc, #28]	@ (8008644 <prvInsertTimerInActiveList+0x80>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3304      	adds	r3, #4
 800862e:	4619      	mov	r1, r3
 8008630:	4610      	mov	r0, r2
 8008632:	f7fd fccc 	bl	8005fce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008636:	697b      	ldr	r3, [r7, #20]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	20001618 	.word	0x20001618
 8008644:	20001614 	.word	0x20001614

08008648 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08e      	sub	sp, #56	@ 0x38
 800864c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800864e:	e0ce      	b.n	80087ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	da19      	bge.n	800868a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008656:	1d3b      	adds	r3, r7, #4
 8008658:	3304      	adds	r3, #4
 800865a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800865c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10b      	bne.n	800867a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	61fb      	str	r3, [r7, #28]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800867a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008680:	6850      	ldr	r0, [r2, #4]
 8008682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008684:	6892      	ldr	r2, [r2, #8]
 8008686:	4611      	mov	r1, r2
 8008688:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f2c0 80ae 	blt.w	80087ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d004      	beq.n	80086a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800869e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a0:	3304      	adds	r3, #4
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fd fccc 	bl	8006040 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086a8:	463b      	mov	r3, r7
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7ff ff6a 	bl	8008584 <prvSampleTimeNow>
 80086b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b09      	cmp	r3, #9
 80086b6:	f200 8097 	bhi.w	80087e8 <prvProcessReceivedCommands+0x1a0>
 80086ba:	a201      	add	r2, pc, #4	@ (adr r2, 80086c0 <prvProcessReceivedCommands+0x78>)
 80086bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c0:	080086e9 	.word	0x080086e9
 80086c4:	080086e9 	.word	0x080086e9
 80086c8:	080086e9 	.word	0x080086e9
 80086cc:	0800875f 	.word	0x0800875f
 80086d0:	08008773 	.word	0x08008773
 80086d4:	080087bf 	.word	0x080087bf
 80086d8:	080086e9 	.word	0x080086e9
 80086dc:	080086e9 	.word	0x080086e9
 80086e0:	0800875f 	.word	0x0800875f
 80086e4:	08008773 	.word	0x08008773
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086ee:	f043 0301 	orr.w	r3, r3, #1
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	18d1      	adds	r1, r2, r3
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008708:	f7ff ff5c 	bl	80085c4 <prvInsertTimerInActiveList>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d06c      	beq.n	80087ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008718:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800871a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d061      	beq.n	80087ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	441a      	add	r2, r3
 8008730:	2300      	movs	r3, #0
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	2300      	movs	r3, #0
 8008736:	2100      	movs	r1, #0
 8008738:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800873a:	f7ff fe01 	bl	8008340 <xTimerGenericCommand>
 800873e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d152      	bne.n	80087ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	61bb      	str	r3, [r7, #24]
}
 8008758:	bf00      	nop
 800875a:	bf00      	nop
 800875c:	e7fd      	b.n	800875a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800875e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008764:	f023 0301 	bic.w	r3, r3, #1
 8008768:	b2da      	uxtb	r2, r3
 800876a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008770:	e03d      	b.n	80087ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008774:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008778:	f043 0301 	orr.w	r3, r3, #1
 800877c:	b2da      	uxtb	r2, r3
 800877e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008780:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008788:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800878a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10b      	bne.n	80087aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	617b      	str	r3, [r7, #20]
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop
 80087a8:	e7fd      	b.n	80087a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ac:	699a      	ldr	r2, [r3, #24]
 80087ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b0:	18d1      	adds	r1, r2, r3
 80087b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087b8:	f7ff ff04 	bl	80085c4 <prvInsertTimerInActiveList>
					break;
 80087bc:	e017      	b.n	80087ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087c4:	f003 0302 	and.w	r3, r3, #2
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d103      	bne.n	80087d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80087cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087ce:	f000 fc53 	bl	8009078 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087d2:	e00c      	b.n	80087ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087da:	f023 0301 	bic.w	r3, r3, #1
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087e6:	e002      	b.n	80087ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80087e8:	bf00      	nop
 80087ea:	e000      	b.n	80087ee <prvProcessReceivedCommands+0x1a6>
					break;
 80087ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087ee:	4b08      	ldr	r3, [pc, #32]	@ (8008810 <prvProcessReceivedCommands+0x1c8>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	1d39      	adds	r1, r7, #4
 80087f4:	2200      	movs	r2, #0
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fd ffea 	bl	80067d0 <xQueueReceive>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f47f af26 	bne.w	8008650 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008804:	bf00      	nop
 8008806:	bf00      	nop
 8008808:	3730      	adds	r7, #48	@ 0x30
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	2000161c 	.word	0x2000161c

08008814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800881a:	e049      	b.n	80088b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800881c:	4b2e      	ldr	r3, [pc, #184]	@ (80088d8 <prvSwitchTimerLists+0xc4>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008826:	4b2c      	ldr	r3, [pc, #176]	@ (80088d8 <prvSwitchTimerLists+0xc4>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3304      	adds	r3, #4
 8008834:	4618      	mov	r0, r3
 8008836:	f7fd fc03 	bl	8006040 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d02f      	beq.n	80088b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	4413      	add	r3, r2
 8008858:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	429a      	cmp	r2, r3
 8008860:	d90e      	bls.n	8008880 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800886e:	4b1a      	ldr	r3, [pc, #104]	@ (80088d8 <prvSwitchTimerLists+0xc4>)
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	3304      	adds	r3, #4
 8008876:	4619      	mov	r1, r3
 8008878:	4610      	mov	r0, r2
 800887a:	f7fd fba8 	bl	8005fce <vListInsert>
 800887e:	e017      	b.n	80088b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008880:	2300      	movs	r3, #0
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	2300      	movs	r3, #0
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	2100      	movs	r1, #0
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f7ff fd58 	bl	8008340 <xTimerGenericCommand>
 8008890:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10b      	bne.n	80088b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	603b      	str	r3, [r7, #0]
}
 80088aa:	bf00      	nop
 80088ac:	bf00      	nop
 80088ae:	e7fd      	b.n	80088ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088b0:	4b09      	ldr	r3, [pc, #36]	@ (80088d8 <prvSwitchTimerLists+0xc4>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1b0      	bne.n	800881c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088ba:	4b07      	ldr	r3, [pc, #28]	@ (80088d8 <prvSwitchTimerLists+0xc4>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088c0:	4b06      	ldr	r3, [pc, #24]	@ (80088dc <prvSwitchTimerLists+0xc8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a04      	ldr	r2, [pc, #16]	@ (80088d8 <prvSwitchTimerLists+0xc4>)
 80088c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088c8:	4a04      	ldr	r2, [pc, #16]	@ (80088dc <prvSwitchTimerLists+0xc8>)
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	6013      	str	r3, [r2, #0]
}
 80088ce:	bf00      	nop
 80088d0:	3718      	adds	r7, #24
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20001614 	.word	0x20001614
 80088dc:	20001618 	.word	0x20001618

080088e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088e6:	f000 f9d7 	bl	8008c98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088ea:	4b15      	ldr	r3, [pc, #84]	@ (8008940 <prvCheckForValidListAndQueue+0x60>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d120      	bne.n	8008934 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088f2:	4814      	ldr	r0, [pc, #80]	@ (8008944 <prvCheckForValidListAndQueue+0x64>)
 80088f4:	f7fd fb1a 	bl	8005f2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088f8:	4813      	ldr	r0, [pc, #76]	@ (8008948 <prvCheckForValidListAndQueue+0x68>)
 80088fa:	f7fd fb17 	bl	8005f2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088fe:	4b13      	ldr	r3, [pc, #76]	@ (800894c <prvCheckForValidListAndQueue+0x6c>)
 8008900:	4a10      	ldr	r2, [pc, #64]	@ (8008944 <prvCheckForValidListAndQueue+0x64>)
 8008902:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008904:	4b12      	ldr	r3, [pc, #72]	@ (8008950 <prvCheckForValidListAndQueue+0x70>)
 8008906:	4a10      	ldr	r2, [pc, #64]	@ (8008948 <prvCheckForValidListAndQueue+0x68>)
 8008908:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800890a:	2300      	movs	r3, #0
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	4b11      	ldr	r3, [pc, #68]	@ (8008954 <prvCheckForValidListAndQueue+0x74>)
 8008910:	4a11      	ldr	r2, [pc, #68]	@ (8008958 <prvCheckForValidListAndQueue+0x78>)
 8008912:	2110      	movs	r1, #16
 8008914:	200a      	movs	r0, #10
 8008916:	f7fd fc27 	bl	8006168 <xQueueGenericCreateStatic>
 800891a:	4603      	mov	r3, r0
 800891c:	4a08      	ldr	r2, [pc, #32]	@ (8008940 <prvCheckForValidListAndQueue+0x60>)
 800891e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008920:	4b07      	ldr	r3, [pc, #28]	@ (8008940 <prvCheckForValidListAndQueue+0x60>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d005      	beq.n	8008934 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008928:	4b05      	ldr	r3, [pc, #20]	@ (8008940 <prvCheckForValidListAndQueue+0x60>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	490b      	ldr	r1, [pc, #44]	@ (800895c <prvCheckForValidListAndQueue+0x7c>)
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe faea 	bl	8006f08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008934:	f000 f9e2 	bl	8008cfc <vPortExitCritical>
}
 8008938:	bf00      	nop
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	2000161c 	.word	0x2000161c
 8008944:	200015ec 	.word	0x200015ec
 8008948:	20001600 	.word	0x20001600
 800894c:	20001614 	.word	0x20001614
 8008950:	20001618 	.word	0x20001618
 8008954:	200016c8 	.word	0x200016c8
 8008958:	20001628 	.word	0x20001628
 800895c:	0800a314 	.word	0x0800a314

08008960 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10b      	bne.n	800898a <xTimerIsTimerActive+0x2a>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	60fb      	str	r3, [r7, #12]
}
 8008984:	bf00      	nop
 8008986:	bf00      	nop
 8008988:	e7fd      	b.n	8008986 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800898a:	f000 f985 	bl	8008c98 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d102      	bne.n	80089a2 <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	e001      	b.n	80089a6 <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 80089a2:	2301      	movs	r3, #1
 80089a4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80089a6:	f000 f9a9 	bl	8008cfc <vPortExitCritical>

	return xReturn;
 80089aa:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10b      	bne.n	80089de <pvTimerGetTimerID+0x2a>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	60fb      	str	r3, [r7, #12]
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	e7fd      	b.n	80089da <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80089de:	f000 f95b 	bl	8008c98 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80089e8:	f000 f988 	bl	8008cfc <vPortExitCritical>

	return pvReturn;
 80089ec:	693b      	ldr	r3, [r7, #16]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08a      	sub	sp, #40	@ 0x28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008a06:	f06f 0301 	mvn.w	r3, #1
 8008a0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a18:	4b06      	ldr	r3, [pc, #24]	@ (8008a34 <xTimerPendFunctionCallFromISR+0x3c>)
 8008a1a:	6818      	ldr	r0, [r3, #0]
 8008a1c:	f107 0114 	add.w	r1, r7, #20
 8008a20:	2300      	movs	r3, #0
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	f7fd fe36 	bl	8006694 <xQueueGenericSendFromISR>
 8008a28:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3728      	adds	r7, #40	@ 0x28
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	2000161c 	.word	0x2000161c

08008a38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	3b04      	subs	r3, #4
 8008a48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3b04      	subs	r3, #4
 8008a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f023 0201 	bic.w	r2, r3, #1
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3b04      	subs	r3, #4
 8008a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a68:	4a0c      	ldr	r2, [pc, #48]	@ (8008a9c <pxPortInitialiseStack+0x64>)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3b14      	subs	r3, #20
 8008a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	3b04      	subs	r3, #4
 8008a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f06f 0202 	mvn.w	r2, #2
 8008a86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3b20      	subs	r3, #32
 8008a8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	08008aa1 	.word	0x08008aa1

08008aa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008aaa:	4b13      	ldr	r3, [pc, #76]	@ (8008af8 <prvTaskExitError+0x58>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab2:	d00b      	beq.n	8008acc <prvTaskExitError+0x2c>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	60fb      	str	r3, [r7, #12]
}
 8008ac6:	bf00      	nop
 8008ac8:	bf00      	nop
 8008aca:	e7fd      	b.n	8008ac8 <prvTaskExitError+0x28>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	60bb      	str	r3, [r7, #8]
}
 8008ade:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ae0:	bf00      	nop
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d0fc      	beq.n	8008ae2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ae8:	bf00      	nop
 8008aea:	bf00      	nop
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000030 	.word	0x20000030
 8008afc:	00000000 	.word	0x00000000

08008b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b00:	4b07      	ldr	r3, [pc, #28]	@ (8008b20 <pxCurrentTCBConst2>)
 8008b02:	6819      	ldr	r1, [r3, #0]
 8008b04:	6808      	ldr	r0, [r1, #0]
 8008b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0a:	f380 8809 	msr	PSP, r0
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f04f 0000 	mov.w	r0, #0
 8008b16:	f380 8811 	msr	BASEPRI, r0
 8008b1a:	4770      	bx	lr
 8008b1c:	f3af 8000 	nop.w

08008b20 <pxCurrentTCBConst2>:
 8008b20:	200010ec 	.word	0x200010ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop

08008b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b28:	4808      	ldr	r0, [pc, #32]	@ (8008b4c <prvPortStartFirstTask+0x24>)
 8008b2a:	6800      	ldr	r0, [r0, #0]
 8008b2c:	6800      	ldr	r0, [r0, #0]
 8008b2e:	f380 8808 	msr	MSP, r0
 8008b32:	f04f 0000 	mov.w	r0, #0
 8008b36:	f380 8814 	msr	CONTROL, r0
 8008b3a:	b662      	cpsie	i
 8008b3c:	b661      	cpsie	f
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	df00      	svc	0
 8008b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b4a:	bf00      	nop
 8008b4c:	e000ed08 	.word	0xe000ed08

08008b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b56:	4b47      	ldr	r3, [pc, #284]	@ (8008c74 <xPortStartScheduler+0x124>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a47      	ldr	r2, [pc, #284]	@ (8008c78 <xPortStartScheduler+0x128>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d10b      	bne.n	8008b78 <xPortStartScheduler+0x28>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	60fb      	str	r3, [r7, #12]
}
 8008b72:	bf00      	nop
 8008b74:	bf00      	nop
 8008b76:	e7fd      	b.n	8008b74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b78:	4b3e      	ldr	r3, [pc, #248]	@ (8008c74 <xPortStartScheduler+0x124>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a3f      	ldr	r2, [pc, #252]	@ (8008c7c <xPortStartScheduler+0x12c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d10b      	bne.n	8008b9a <xPortStartScheduler+0x4a>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	613b      	str	r3, [r7, #16]
}
 8008b94:	bf00      	nop
 8008b96:	bf00      	nop
 8008b98:	e7fd      	b.n	8008b96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b9a:	4b39      	ldr	r3, [pc, #228]	@ (8008c80 <xPortStartScheduler+0x130>)
 8008b9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	22ff      	movs	r2, #255	@ 0xff
 8008baa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008bb4:	78fb      	ldrb	r3, [r7, #3]
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	4b31      	ldr	r3, [pc, #196]	@ (8008c84 <xPortStartScheduler+0x134>)
 8008bc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008bc2:	4b31      	ldr	r3, [pc, #196]	@ (8008c88 <xPortStartScheduler+0x138>)
 8008bc4:	2207      	movs	r2, #7
 8008bc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bc8:	e009      	b.n	8008bde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008bca:	4b2f      	ldr	r3, [pc, #188]	@ (8008c88 <xPortStartScheduler+0x138>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8008c88 <xPortStartScheduler+0x138>)
 8008bd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008bd4:	78fb      	ldrb	r3, [r7, #3]
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	005b      	lsls	r3, r3, #1
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bde:	78fb      	ldrb	r3, [r7, #3]
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008be6:	2b80      	cmp	r3, #128	@ 0x80
 8008be8:	d0ef      	beq.n	8008bca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bea:	4b27      	ldr	r3, [pc, #156]	@ (8008c88 <xPortStartScheduler+0x138>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f1c3 0307 	rsb	r3, r3, #7
 8008bf2:	2b04      	cmp	r3, #4
 8008bf4:	d00b      	beq.n	8008c0e <xPortStartScheduler+0xbe>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	60bb      	str	r3, [r7, #8]
}
 8008c08:	bf00      	nop
 8008c0a:	bf00      	nop
 8008c0c:	e7fd      	b.n	8008c0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8008c88 <xPortStartScheduler+0x138>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	021b      	lsls	r3, r3, #8
 8008c14:	4a1c      	ldr	r2, [pc, #112]	@ (8008c88 <xPortStartScheduler+0x138>)
 8008c16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c18:	4b1b      	ldr	r3, [pc, #108]	@ (8008c88 <xPortStartScheduler+0x138>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c20:	4a19      	ldr	r2, [pc, #100]	@ (8008c88 <xPortStartScheduler+0x138>)
 8008c22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c2c:	4b17      	ldr	r3, [pc, #92]	@ (8008c8c <xPortStartScheduler+0x13c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a16      	ldr	r2, [pc, #88]	@ (8008c8c <xPortStartScheduler+0x13c>)
 8008c32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c38:	4b14      	ldr	r3, [pc, #80]	@ (8008c8c <xPortStartScheduler+0x13c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a13      	ldr	r2, [pc, #76]	@ (8008c8c <xPortStartScheduler+0x13c>)
 8008c3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008c42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c44:	f000 f8da 	bl	8008dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c48:	4b11      	ldr	r3, [pc, #68]	@ (8008c90 <xPortStartScheduler+0x140>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c4e:	f000 f8f9 	bl	8008e44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c52:	4b10      	ldr	r3, [pc, #64]	@ (8008c94 <xPortStartScheduler+0x144>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a0f      	ldr	r2, [pc, #60]	@ (8008c94 <xPortStartScheduler+0x144>)
 8008c58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008c5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c5e:	f7ff ff63 	bl	8008b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c62:	f7fe fd69 	bl	8007738 <vTaskSwitchContext>
	prvTaskExitError();
 8008c66:	f7ff ff1b 	bl	8008aa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3718      	adds	r7, #24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	e000ed00 	.word	0xe000ed00
 8008c78:	410fc271 	.word	0x410fc271
 8008c7c:	410fc270 	.word	0x410fc270
 8008c80:	e000e400 	.word	0xe000e400
 8008c84:	20001718 	.word	0x20001718
 8008c88:	2000171c 	.word	0x2000171c
 8008c8c:	e000ed20 	.word	0xe000ed20
 8008c90:	20000030 	.word	0x20000030
 8008c94:	e000ef34 	.word	0xe000ef34

08008c98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	607b      	str	r3, [r7, #4]
}
 8008cb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008cb2:	4b10      	ldr	r3, [pc, #64]	@ (8008cf4 <vPortEnterCritical+0x5c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8008cf4 <vPortEnterCritical+0x5c>)
 8008cba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf4 <vPortEnterCritical+0x5c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d110      	bne.n	8008ce6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf8 <vPortEnterCritical+0x60>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00b      	beq.n	8008ce6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	603b      	str	r3, [r7, #0]
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	e7fd      	b.n	8008ce2 <vPortEnterCritical+0x4a>
	}
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	20000030 	.word	0x20000030
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d02:	4b12      	ldr	r3, [pc, #72]	@ (8008d4c <vPortExitCritical+0x50>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10b      	bne.n	8008d22 <vPortExitCritical+0x26>
	__asm volatile
 8008d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	607b      	str	r3, [r7, #4]
}
 8008d1c:	bf00      	nop
 8008d1e:	bf00      	nop
 8008d20:	e7fd      	b.n	8008d1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d22:	4b0a      	ldr	r3, [pc, #40]	@ (8008d4c <vPortExitCritical+0x50>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	4a08      	ldr	r2, [pc, #32]	@ (8008d4c <vPortExitCritical+0x50>)
 8008d2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d2c:	4b07      	ldr	r3, [pc, #28]	@ (8008d4c <vPortExitCritical+0x50>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d105      	bne.n	8008d40 <vPortExitCritical+0x44>
 8008d34:	2300      	movs	r3, #0
 8008d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f383 8811 	msr	BASEPRI, r3
}
 8008d3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	20000030 	.word	0x20000030

08008d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d50:	f3ef 8009 	mrs	r0, PSP
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	4b15      	ldr	r3, [pc, #84]	@ (8008db0 <pxCurrentTCBConst>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	f01e 0f10 	tst.w	lr, #16
 8008d60:	bf08      	it	eq
 8008d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6a:	6010      	str	r0, [r2, #0]
 8008d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008d74:	f380 8811 	msr	BASEPRI, r0
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f7fe fcda 	bl	8007738 <vTaskSwitchContext>
 8008d84:	f04f 0000 	mov.w	r0, #0
 8008d88:	f380 8811 	msr	BASEPRI, r0
 8008d8c:	bc09      	pop	{r0, r3}
 8008d8e:	6819      	ldr	r1, [r3, #0]
 8008d90:	6808      	ldr	r0, [r1, #0]
 8008d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d96:	f01e 0f10 	tst.w	lr, #16
 8008d9a:	bf08      	it	eq
 8008d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008da0:	f380 8809 	msr	PSP, r0
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	f3af 8000 	nop.w

08008db0 <pxCurrentTCBConst>:
 8008db0:	200010ec 	.word	0x200010ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop

08008db8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	607b      	str	r3, [r7, #4]
}
 8008dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008dd2:	f7fe fbf7 	bl	80075c4 <xTaskIncrementTick>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ddc:	4b06      	ldr	r3, [pc, #24]	@ (8008df8 <xPortSysTickHandler+0x40>)
 8008dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	2300      	movs	r3, #0
 8008de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	f383 8811 	msr	BASEPRI, r3
}
 8008dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008df0:	bf00      	nop
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e00:	4b0b      	ldr	r3, [pc, #44]	@ (8008e30 <vPortSetupTimerInterrupt+0x34>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e06:	4b0b      	ldr	r3, [pc, #44]	@ (8008e34 <vPortSetupTimerInterrupt+0x38>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e38 <vPortSetupTimerInterrupt+0x3c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a0a      	ldr	r2, [pc, #40]	@ (8008e3c <vPortSetupTimerInterrupt+0x40>)
 8008e12:	fba2 2303 	umull	r2, r3, r2, r3
 8008e16:	099b      	lsrs	r3, r3, #6
 8008e18:	4a09      	ldr	r2, [pc, #36]	@ (8008e40 <vPortSetupTimerInterrupt+0x44>)
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e1e:	4b04      	ldr	r3, [pc, #16]	@ (8008e30 <vPortSetupTimerInterrupt+0x34>)
 8008e20:	2207      	movs	r2, #7
 8008e22:	601a      	str	r2, [r3, #0]
}
 8008e24:	bf00      	nop
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	e000e010 	.word	0xe000e010
 8008e34:	e000e018 	.word	0xe000e018
 8008e38:	20000024 	.word	0x20000024
 8008e3c:	10624dd3 	.word	0x10624dd3
 8008e40:	e000e014 	.word	0xe000e014

08008e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008e54 <vPortEnableVFP+0x10>
 8008e48:	6801      	ldr	r1, [r0, #0]
 8008e4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008e4e:	6001      	str	r1, [r0, #0]
 8008e50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e52:	bf00      	nop
 8008e54:	e000ed88 	.word	0xe000ed88

08008e58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e5e:	f3ef 8305 	mrs	r3, IPSR
 8008e62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2b0f      	cmp	r3, #15
 8008e68:	d915      	bls.n	8008e96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e6a:	4a18      	ldr	r2, [pc, #96]	@ (8008ecc <vPortValidateInterruptPriority+0x74>)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4413      	add	r3, r2
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e74:	4b16      	ldr	r3, [pc, #88]	@ (8008ed0 <vPortValidateInterruptPriority+0x78>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	7afa      	ldrb	r2, [r7, #11]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d20b      	bcs.n	8008e96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	607b      	str	r3, [r7, #4]
}
 8008e90:	bf00      	nop
 8008e92:	bf00      	nop
 8008e94:	e7fd      	b.n	8008e92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e96:	4b0f      	ldr	r3, [pc, #60]	@ (8008ed4 <vPortValidateInterruptPriority+0x7c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed8 <vPortValidateInterruptPriority+0x80>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d90b      	bls.n	8008ebe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	603b      	str	r3, [r7, #0]
}
 8008eb8:	bf00      	nop
 8008eba:	bf00      	nop
 8008ebc:	e7fd      	b.n	8008eba <vPortValidateInterruptPriority+0x62>
	}
 8008ebe:	bf00      	nop
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	e000e3f0 	.word	0xe000e3f0
 8008ed0:	20001718 	.word	0x20001718
 8008ed4:	e000ed0c 	.word	0xe000ed0c
 8008ed8:	2000171c 	.word	0x2000171c

08008edc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08a      	sub	sp, #40	@ 0x28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ee8:	f7fe fab0 	bl	800744c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008eec:	4b5c      	ldr	r3, [pc, #368]	@ (8009060 <pvPortMalloc+0x184>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ef4:	f000 f924 	bl	8009140 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ef8:	4b5a      	ldr	r3, [pc, #360]	@ (8009064 <pvPortMalloc+0x188>)
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4013      	ands	r3, r2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f040 8095 	bne.w	8009030 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d01e      	beq.n	8008f4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008f0c:	2208      	movs	r2, #8
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4413      	add	r3, r2
 8008f12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f003 0307 	and.w	r3, r3, #7
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d015      	beq.n	8008f4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f023 0307 	bic.w	r3, r3, #7
 8008f24:	3308      	adds	r3, #8
 8008f26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f003 0307 	and.w	r3, r3, #7
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00b      	beq.n	8008f4a <pvPortMalloc+0x6e>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	617b      	str	r3, [r7, #20]
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop
 8008f48:	e7fd      	b.n	8008f46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d06f      	beq.n	8009030 <pvPortMalloc+0x154>
 8008f50:	4b45      	ldr	r3, [pc, #276]	@ (8009068 <pvPortMalloc+0x18c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d86a      	bhi.n	8009030 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f5a:	4b44      	ldr	r3, [pc, #272]	@ (800906c <pvPortMalloc+0x190>)
 8008f5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f5e:	4b43      	ldr	r3, [pc, #268]	@ (800906c <pvPortMalloc+0x190>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f64:	e004      	b.n	8008f70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d903      	bls.n	8008f82 <pvPortMalloc+0xa6>
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1f1      	bne.n	8008f66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f82:	4b37      	ldr	r3, [pc, #220]	@ (8009060 <pvPortMalloc+0x184>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d051      	beq.n	8009030 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2208      	movs	r2, #8
 8008f92:	4413      	add	r3, r2
 8008f94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	1ad2      	subs	r2, r2, r3
 8008fa6:	2308      	movs	r3, #8
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d920      	bls.n	8008ff0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	f003 0307 	and.w	r3, r3, #7
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00b      	beq.n	8008fd8 <pvPortMalloc+0xfc>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	613b      	str	r3, [r7, #16]
}
 8008fd2:	bf00      	nop
 8008fd4:	bf00      	nop
 8008fd6:	e7fd      	b.n	8008fd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	1ad2      	subs	r2, r2, r3
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008fea:	69b8      	ldr	r0, [r7, #24]
 8008fec:	f000 f90a 	bl	8009204 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8009068 <pvPortMalloc+0x18c>)
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8009068 <pvPortMalloc+0x18c>)
 8008ffc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8009068 <pvPortMalloc+0x18c>)
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	4b1b      	ldr	r3, [pc, #108]	@ (8009070 <pvPortMalloc+0x194>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	429a      	cmp	r2, r3
 8009008:	d203      	bcs.n	8009012 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800900a:	4b17      	ldr	r3, [pc, #92]	@ (8009068 <pvPortMalloc+0x18c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a18      	ldr	r2, [pc, #96]	@ (8009070 <pvPortMalloc+0x194>)
 8009010:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	4b13      	ldr	r3, [pc, #76]	@ (8009064 <pvPortMalloc+0x188>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	431a      	orrs	r2, r3
 800901c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009022:	2200      	movs	r2, #0
 8009024:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009026:	4b13      	ldr	r3, [pc, #76]	@ (8009074 <pvPortMalloc+0x198>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3301      	adds	r3, #1
 800902c:	4a11      	ldr	r2, [pc, #68]	@ (8009074 <pvPortMalloc+0x198>)
 800902e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009030:	f7fe fa1a 	bl	8007468 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00b      	beq.n	8009056 <pvPortMalloc+0x17a>
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	60fb      	str	r3, [r7, #12]
}
 8009050:	bf00      	nop
 8009052:	bf00      	nop
 8009054:	e7fd      	b.n	8009052 <pvPortMalloc+0x176>
	return pvReturn;
 8009056:	69fb      	ldr	r3, [r7, #28]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3728      	adds	r7, #40	@ 0x28
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	20005328 	.word	0x20005328
 8009064:	2000533c 	.word	0x2000533c
 8009068:	2000532c 	.word	0x2000532c
 800906c:	20005320 	.word	0x20005320
 8009070:	20005330 	.word	0x20005330
 8009074:	20005334 	.word	0x20005334

08009078 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d04f      	beq.n	800912a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800908a:	2308      	movs	r3, #8
 800908c:	425b      	negs	r3, r3
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	4413      	add	r3, r2
 8009092:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	4b25      	ldr	r3, [pc, #148]	@ (8009134 <vPortFree+0xbc>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4013      	ands	r3, r2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10b      	bne.n	80090be <vPortFree+0x46>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	60fb      	str	r3, [r7, #12]
}
 80090b8:	bf00      	nop
 80090ba:	bf00      	nop
 80090bc:	e7fd      	b.n	80090ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00b      	beq.n	80090de <vPortFree+0x66>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	60bb      	str	r3, [r7, #8]
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	e7fd      	b.n	80090da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	4b14      	ldr	r3, [pc, #80]	@ (8009134 <vPortFree+0xbc>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4013      	ands	r3, r2
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d01e      	beq.n	800912a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d11a      	bne.n	800912a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009134 <vPortFree+0xbc>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	43db      	mvns	r3, r3
 80090fe:	401a      	ands	r2, r3
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009104:	f7fe f9a2 	bl	800744c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	4b0a      	ldr	r3, [pc, #40]	@ (8009138 <vPortFree+0xc0>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4413      	add	r3, r2
 8009112:	4a09      	ldr	r2, [pc, #36]	@ (8009138 <vPortFree+0xc0>)
 8009114:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009116:	6938      	ldr	r0, [r7, #16]
 8009118:	f000 f874 	bl	8009204 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800911c:	4b07      	ldr	r3, [pc, #28]	@ (800913c <vPortFree+0xc4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3301      	adds	r3, #1
 8009122:	4a06      	ldr	r2, [pc, #24]	@ (800913c <vPortFree+0xc4>)
 8009124:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009126:	f7fe f99f 	bl	8007468 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800912a:	bf00      	nop
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	2000533c 	.word	0x2000533c
 8009138:	2000532c 	.word	0x2000532c
 800913c:	20005338 	.word	0x20005338

08009140 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009146:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800914a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800914c:	4b27      	ldr	r3, [pc, #156]	@ (80091ec <prvHeapInit+0xac>)
 800914e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00c      	beq.n	8009174 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3307      	adds	r3, #7
 800915e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f023 0307 	bic.w	r3, r3, #7
 8009166:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	4a1f      	ldr	r2, [pc, #124]	@ (80091ec <prvHeapInit+0xac>)
 8009170:	4413      	add	r3, r2
 8009172:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009178:	4a1d      	ldr	r2, [pc, #116]	@ (80091f0 <prvHeapInit+0xb0>)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800917e:	4b1c      	ldr	r3, [pc, #112]	@ (80091f0 <prvHeapInit+0xb0>)
 8009180:	2200      	movs	r2, #0
 8009182:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	4413      	add	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800918c:	2208      	movs	r2, #8
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	1a9b      	subs	r3, r3, r2
 8009192:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f023 0307 	bic.w	r3, r3, #7
 800919a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4a15      	ldr	r2, [pc, #84]	@ (80091f4 <prvHeapInit+0xb4>)
 80091a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091a2:	4b14      	ldr	r3, [pc, #80]	@ (80091f4 <prvHeapInit+0xb4>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2200      	movs	r2, #0
 80091a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091aa:	4b12      	ldr	r3, [pc, #72]	@ (80091f4 <prvHeapInit+0xb4>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2200      	movs	r2, #0
 80091b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	1ad2      	subs	r2, r2, r3
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80091c0:	4b0c      	ldr	r3, [pc, #48]	@ (80091f4 <prvHeapInit+0xb4>)
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	4a0a      	ldr	r2, [pc, #40]	@ (80091f8 <prvHeapInit+0xb8>)
 80091ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	4a09      	ldr	r2, [pc, #36]	@ (80091fc <prvHeapInit+0xbc>)
 80091d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091d8:	4b09      	ldr	r3, [pc, #36]	@ (8009200 <prvHeapInit+0xc0>)
 80091da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80091de:	601a      	str	r2, [r3, #0]
}
 80091e0:	bf00      	nop
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	20001720 	.word	0x20001720
 80091f0:	20005320 	.word	0x20005320
 80091f4:	20005328 	.word	0x20005328
 80091f8:	20005330 	.word	0x20005330
 80091fc:	2000532c 	.word	0x2000532c
 8009200:	2000533c 	.word	0x2000533c

08009204 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800920c:	4b28      	ldr	r3, [pc, #160]	@ (80092b0 <prvInsertBlockIntoFreeList+0xac>)
 800920e:	60fb      	str	r3, [r7, #12]
 8009210:	e002      	b.n	8009218 <prvInsertBlockIntoFreeList+0x14>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	429a      	cmp	r2, r3
 8009220:	d8f7      	bhi.n	8009212 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	4413      	add	r3, r2
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	429a      	cmp	r2, r3
 8009232:	d108      	bne.n	8009246 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	441a      	add	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	441a      	add	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	429a      	cmp	r2, r3
 8009258:	d118      	bne.n	800928c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	4b15      	ldr	r3, [pc, #84]	@ (80092b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	429a      	cmp	r2, r3
 8009264:	d00d      	beq.n	8009282 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	441a      	add	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	e008      	b.n	8009294 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009282:	4b0c      	ldr	r3, [pc, #48]	@ (80092b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	601a      	str	r2, [r3, #0]
 800928a:	e003      	b.n	8009294 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	429a      	cmp	r2, r3
 800929a:	d002      	beq.n	80092a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092a2:	bf00      	nop
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	20005320 	.word	0x20005320
 80092b4:	20005328 	.word	0x20005328

080092b8 <atoi>:
 80092b8:	220a      	movs	r2, #10
 80092ba:	2100      	movs	r1, #0
 80092bc:	f000 b954 	b.w	8009568 <strtol>

080092c0 <calloc>:
 80092c0:	4b02      	ldr	r3, [pc, #8]	@ (80092cc <calloc+0xc>)
 80092c2:	460a      	mov	r2, r1
 80092c4:	4601      	mov	r1, r0
 80092c6:	6818      	ldr	r0, [r3, #0]
 80092c8:	f000 b802 	b.w	80092d0 <_calloc_r>
 80092cc:	20000034 	.word	0x20000034

080092d0 <_calloc_r>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	fba1 5402 	umull	r5, r4, r1, r2
 80092d6:	b934      	cbnz	r4, 80092e6 <_calloc_r+0x16>
 80092d8:	4629      	mov	r1, r5
 80092da:	f000 f83f 	bl	800935c <_malloc_r>
 80092de:	4606      	mov	r6, r0
 80092e0:	b928      	cbnz	r0, 80092ee <_calloc_r+0x1e>
 80092e2:	4630      	mov	r0, r6
 80092e4:	bd70      	pop	{r4, r5, r6, pc}
 80092e6:	220c      	movs	r2, #12
 80092e8:	6002      	str	r2, [r0, #0]
 80092ea:	2600      	movs	r6, #0
 80092ec:	e7f9      	b.n	80092e2 <_calloc_r+0x12>
 80092ee:	462a      	mov	r2, r5
 80092f0:	4621      	mov	r1, r4
 80092f2:	f000 f979 	bl	80095e8 <memset>
 80092f6:	e7f4      	b.n	80092e2 <_calloc_r+0x12>

080092f8 <malloc>:
 80092f8:	4b02      	ldr	r3, [pc, #8]	@ (8009304 <malloc+0xc>)
 80092fa:	4601      	mov	r1, r0
 80092fc:	6818      	ldr	r0, [r3, #0]
 80092fe:	f000 b82d 	b.w	800935c <_malloc_r>
 8009302:	bf00      	nop
 8009304:	20000034 	.word	0x20000034

08009308 <free>:
 8009308:	4b02      	ldr	r3, [pc, #8]	@ (8009314 <free+0xc>)
 800930a:	4601      	mov	r1, r0
 800930c:	6818      	ldr	r0, [r3, #0]
 800930e:	f000 ba2d 	b.w	800976c <_free_r>
 8009312:	bf00      	nop
 8009314:	20000034 	.word	0x20000034

08009318 <sbrk_aligned>:
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	4e0f      	ldr	r6, [pc, #60]	@ (8009358 <sbrk_aligned+0x40>)
 800931c:	460c      	mov	r4, r1
 800931e:	6831      	ldr	r1, [r6, #0]
 8009320:	4605      	mov	r5, r0
 8009322:	b911      	cbnz	r1, 800932a <sbrk_aligned+0x12>
 8009324:	f000 f9d8 	bl	80096d8 <_sbrk_r>
 8009328:	6030      	str	r0, [r6, #0]
 800932a:	4621      	mov	r1, r4
 800932c:	4628      	mov	r0, r5
 800932e:	f000 f9d3 	bl	80096d8 <_sbrk_r>
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	d103      	bne.n	800933e <sbrk_aligned+0x26>
 8009336:	f04f 34ff 	mov.w	r4, #4294967295
 800933a:	4620      	mov	r0, r4
 800933c:	bd70      	pop	{r4, r5, r6, pc}
 800933e:	1cc4      	adds	r4, r0, #3
 8009340:	f024 0403 	bic.w	r4, r4, #3
 8009344:	42a0      	cmp	r0, r4
 8009346:	d0f8      	beq.n	800933a <sbrk_aligned+0x22>
 8009348:	1a21      	subs	r1, r4, r0
 800934a:	4628      	mov	r0, r5
 800934c:	f000 f9c4 	bl	80096d8 <_sbrk_r>
 8009350:	3001      	adds	r0, #1
 8009352:	d1f2      	bne.n	800933a <sbrk_aligned+0x22>
 8009354:	e7ef      	b.n	8009336 <sbrk_aligned+0x1e>
 8009356:	bf00      	nop
 8009358:	20005340 	.word	0x20005340

0800935c <_malloc_r>:
 800935c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009360:	1ccd      	adds	r5, r1, #3
 8009362:	f025 0503 	bic.w	r5, r5, #3
 8009366:	3508      	adds	r5, #8
 8009368:	2d0c      	cmp	r5, #12
 800936a:	bf38      	it	cc
 800936c:	250c      	movcc	r5, #12
 800936e:	2d00      	cmp	r5, #0
 8009370:	4606      	mov	r6, r0
 8009372:	db01      	blt.n	8009378 <_malloc_r+0x1c>
 8009374:	42a9      	cmp	r1, r5
 8009376:	d904      	bls.n	8009382 <_malloc_r+0x26>
 8009378:	230c      	movs	r3, #12
 800937a:	6033      	str	r3, [r6, #0]
 800937c:	2000      	movs	r0, #0
 800937e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009382:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009458 <_malloc_r+0xfc>
 8009386:	f000 f869 	bl	800945c <__malloc_lock>
 800938a:	f8d8 3000 	ldr.w	r3, [r8]
 800938e:	461c      	mov	r4, r3
 8009390:	bb44      	cbnz	r4, 80093e4 <_malloc_r+0x88>
 8009392:	4629      	mov	r1, r5
 8009394:	4630      	mov	r0, r6
 8009396:	f7ff ffbf 	bl	8009318 <sbrk_aligned>
 800939a:	1c43      	adds	r3, r0, #1
 800939c:	4604      	mov	r4, r0
 800939e:	d158      	bne.n	8009452 <_malloc_r+0xf6>
 80093a0:	f8d8 4000 	ldr.w	r4, [r8]
 80093a4:	4627      	mov	r7, r4
 80093a6:	2f00      	cmp	r7, #0
 80093a8:	d143      	bne.n	8009432 <_malloc_r+0xd6>
 80093aa:	2c00      	cmp	r4, #0
 80093ac:	d04b      	beq.n	8009446 <_malloc_r+0xea>
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	4639      	mov	r1, r7
 80093b2:	4630      	mov	r0, r6
 80093b4:	eb04 0903 	add.w	r9, r4, r3
 80093b8:	f000 f98e 	bl	80096d8 <_sbrk_r>
 80093bc:	4581      	cmp	r9, r0
 80093be:	d142      	bne.n	8009446 <_malloc_r+0xea>
 80093c0:	6821      	ldr	r1, [r4, #0]
 80093c2:	1a6d      	subs	r5, r5, r1
 80093c4:	4629      	mov	r1, r5
 80093c6:	4630      	mov	r0, r6
 80093c8:	f7ff ffa6 	bl	8009318 <sbrk_aligned>
 80093cc:	3001      	adds	r0, #1
 80093ce:	d03a      	beq.n	8009446 <_malloc_r+0xea>
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	442b      	add	r3, r5
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	f8d8 3000 	ldr.w	r3, [r8]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	bb62      	cbnz	r2, 8009438 <_malloc_r+0xdc>
 80093de:	f8c8 7000 	str.w	r7, [r8]
 80093e2:	e00f      	b.n	8009404 <_malloc_r+0xa8>
 80093e4:	6822      	ldr	r2, [r4, #0]
 80093e6:	1b52      	subs	r2, r2, r5
 80093e8:	d420      	bmi.n	800942c <_malloc_r+0xd0>
 80093ea:	2a0b      	cmp	r2, #11
 80093ec:	d917      	bls.n	800941e <_malloc_r+0xc2>
 80093ee:	1961      	adds	r1, r4, r5
 80093f0:	42a3      	cmp	r3, r4
 80093f2:	6025      	str	r5, [r4, #0]
 80093f4:	bf18      	it	ne
 80093f6:	6059      	strne	r1, [r3, #4]
 80093f8:	6863      	ldr	r3, [r4, #4]
 80093fa:	bf08      	it	eq
 80093fc:	f8c8 1000 	streq.w	r1, [r8]
 8009400:	5162      	str	r2, [r4, r5]
 8009402:	604b      	str	r3, [r1, #4]
 8009404:	4630      	mov	r0, r6
 8009406:	f000 f82f 	bl	8009468 <__malloc_unlock>
 800940a:	f104 000b 	add.w	r0, r4, #11
 800940e:	1d23      	adds	r3, r4, #4
 8009410:	f020 0007 	bic.w	r0, r0, #7
 8009414:	1ac2      	subs	r2, r0, r3
 8009416:	bf1c      	itt	ne
 8009418:	1a1b      	subne	r3, r3, r0
 800941a:	50a3      	strne	r3, [r4, r2]
 800941c:	e7af      	b.n	800937e <_malloc_r+0x22>
 800941e:	6862      	ldr	r2, [r4, #4]
 8009420:	42a3      	cmp	r3, r4
 8009422:	bf0c      	ite	eq
 8009424:	f8c8 2000 	streq.w	r2, [r8]
 8009428:	605a      	strne	r2, [r3, #4]
 800942a:	e7eb      	b.n	8009404 <_malloc_r+0xa8>
 800942c:	4623      	mov	r3, r4
 800942e:	6864      	ldr	r4, [r4, #4]
 8009430:	e7ae      	b.n	8009390 <_malloc_r+0x34>
 8009432:	463c      	mov	r4, r7
 8009434:	687f      	ldr	r7, [r7, #4]
 8009436:	e7b6      	b.n	80093a6 <_malloc_r+0x4a>
 8009438:	461a      	mov	r2, r3
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	42a3      	cmp	r3, r4
 800943e:	d1fb      	bne.n	8009438 <_malloc_r+0xdc>
 8009440:	2300      	movs	r3, #0
 8009442:	6053      	str	r3, [r2, #4]
 8009444:	e7de      	b.n	8009404 <_malloc_r+0xa8>
 8009446:	230c      	movs	r3, #12
 8009448:	6033      	str	r3, [r6, #0]
 800944a:	4630      	mov	r0, r6
 800944c:	f000 f80c 	bl	8009468 <__malloc_unlock>
 8009450:	e794      	b.n	800937c <_malloc_r+0x20>
 8009452:	6005      	str	r5, [r0, #0]
 8009454:	e7d6      	b.n	8009404 <_malloc_r+0xa8>
 8009456:	bf00      	nop
 8009458:	20005344 	.word	0x20005344

0800945c <__malloc_lock>:
 800945c:	4801      	ldr	r0, [pc, #4]	@ (8009464 <__malloc_lock+0x8>)
 800945e:	f000 b975 	b.w	800974c <__retarget_lock_acquire_recursive>
 8009462:	bf00      	nop
 8009464:	20005484 	.word	0x20005484

08009468 <__malloc_unlock>:
 8009468:	4801      	ldr	r0, [pc, #4]	@ (8009470 <__malloc_unlock+0x8>)
 800946a:	f000 b970 	b.w	800974e <__retarget_lock_release_recursive>
 800946e:	bf00      	nop
 8009470:	20005484 	.word	0x20005484

08009474 <_strtol_l.isra.0>:
 8009474:	2b24      	cmp	r3, #36	@ 0x24
 8009476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800947a:	4686      	mov	lr, r0
 800947c:	4690      	mov	r8, r2
 800947e:	d801      	bhi.n	8009484 <_strtol_l.isra.0+0x10>
 8009480:	2b01      	cmp	r3, #1
 8009482:	d106      	bne.n	8009492 <_strtol_l.isra.0+0x1e>
 8009484:	f000 f938 	bl	80096f8 <__errno>
 8009488:	2316      	movs	r3, #22
 800948a:	6003      	str	r3, [r0, #0]
 800948c:	2000      	movs	r0, #0
 800948e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009492:	4834      	ldr	r0, [pc, #208]	@ (8009564 <_strtol_l.isra.0+0xf0>)
 8009494:	460d      	mov	r5, r1
 8009496:	462a      	mov	r2, r5
 8009498:	f815 4b01 	ldrb.w	r4, [r5], #1
 800949c:	5d06      	ldrb	r6, [r0, r4]
 800949e:	f016 0608 	ands.w	r6, r6, #8
 80094a2:	d1f8      	bne.n	8009496 <_strtol_l.isra.0+0x22>
 80094a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80094a6:	d110      	bne.n	80094ca <_strtol_l.isra.0+0x56>
 80094a8:	782c      	ldrb	r4, [r5, #0]
 80094aa:	2601      	movs	r6, #1
 80094ac:	1c95      	adds	r5, r2, #2
 80094ae:	f033 0210 	bics.w	r2, r3, #16
 80094b2:	d115      	bne.n	80094e0 <_strtol_l.isra.0+0x6c>
 80094b4:	2c30      	cmp	r4, #48	@ 0x30
 80094b6:	d10d      	bne.n	80094d4 <_strtol_l.isra.0+0x60>
 80094b8:	782a      	ldrb	r2, [r5, #0]
 80094ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80094be:	2a58      	cmp	r2, #88	@ 0x58
 80094c0:	d108      	bne.n	80094d4 <_strtol_l.isra.0+0x60>
 80094c2:	786c      	ldrb	r4, [r5, #1]
 80094c4:	3502      	adds	r5, #2
 80094c6:	2310      	movs	r3, #16
 80094c8:	e00a      	b.n	80094e0 <_strtol_l.isra.0+0x6c>
 80094ca:	2c2b      	cmp	r4, #43	@ 0x2b
 80094cc:	bf04      	itt	eq
 80094ce:	782c      	ldrbeq	r4, [r5, #0]
 80094d0:	1c95      	addeq	r5, r2, #2
 80094d2:	e7ec      	b.n	80094ae <_strtol_l.isra.0+0x3a>
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1f6      	bne.n	80094c6 <_strtol_l.isra.0+0x52>
 80094d8:	2c30      	cmp	r4, #48	@ 0x30
 80094da:	bf14      	ite	ne
 80094dc:	230a      	movne	r3, #10
 80094de:	2308      	moveq	r3, #8
 80094e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80094e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80094e8:	2200      	movs	r2, #0
 80094ea:	fbbc f9f3 	udiv	r9, ip, r3
 80094ee:	4610      	mov	r0, r2
 80094f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80094f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80094f8:	2f09      	cmp	r7, #9
 80094fa:	d80f      	bhi.n	800951c <_strtol_l.isra.0+0xa8>
 80094fc:	463c      	mov	r4, r7
 80094fe:	42a3      	cmp	r3, r4
 8009500:	dd1b      	ble.n	800953a <_strtol_l.isra.0+0xc6>
 8009502:	1c57      	adds	r7, r2, #1
 8009504:	d007      	beq.n	8009516 <_strtol_l.isra.0+0xa2>
 8009506:	4581      	cmp	r9, r0
 8009508:	d314      	bcc.n	8009534 <_strtol_l.isra.0+0xc0>
 800950a:	d101      	bne.n	8009510 <_strtol_l.isra.0+0x9c>
 800950c:	45a2      	cmp	sl, r4
 800950e:	db11      	blt.n	8009534 <_strtol_l.isra.0+0xc0>
 8009510:	fb00 4003 	mla	r0, r0, r3, r4
 8009514:	2201      	movs	r2, #1
 8009516:	f815 4b01 	ldrb.w	r4, [r5], #1
 800951a:	e7eb      	b.n	80094f4 <_strtol_l.isra.0+0x80>
 800951c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009520:	2f19      	cmp	r7, #25
 8009522:	d801      	bhi.n	8009528 <_strtol_l.isra.0+0xb4>
 8009524:	3c37      	subs	r4, #55	@ 0x37
 8009526:	e7ea      	b.n	80094fe <_strtol_l.isra.0+0x8a>
 8009528:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800952c:	2f19      	cmp	r7, #25
 800952e:	d804      	bhi.n	800953a <_strtol_l.isra.0+0xc6>
 8009530:	3c57      	subs	r4, #87	@ 0x57
 8009532:	e7e4      	b.n	80094fe <_strtol_l.isra.0+0x8a>
 8009534:	f04f 32ff 	mov.w	r2, #4294967295
 8009538:	e7ed      	b.n	8009516 <_strtol_l.isra.0+0xa2>
 800953a:	1c53      	adds	r3, r2, #1
 800953c:	d108      	bne.n	8009550 <_strtol_l.isra.0+0xdc>
 800953e:	2322      	movs	r3, #34	@ 0x22
 8009540:	f8ce 3000 	str.w	r3, [lr]
 8009544:	4660      	mov	r0, ip
 8009546:	f1b8 0f00 	cmp.w	r8, #0
 800954a:	d0a0      	beq.n	800948e <_strtol_l.isra.0+0x1a>
 800954c:	1e69      	subs	r1, r5, #1
 800954e:	e006      	b.n	800955e <_strtol_l.isra.0+0xea>
 8009550:	b106      	cbz	r6, 8009554 <_strtol_l.isra.0+0xe0>
 8009552:	4240      	negs	r0, r0
 8009554:	f1b8 0f00 	cmp.w	r8, #0
 8009558:	d099      	beq.n	800948e <_strtol_l.isra.0+0x1a>
 800955a:	2a00      	cmp	r2, #0
 800955c:	d1f6      	bne.n	800954c <_strtol_l.isra.0+0xd8>
 800955e:	f8c8 1000 	str.w	r1, [r8]
 8009562:	e794      	b.n	800948e <_strtol_l.isra.0+0x1a>
 8009564:	0800a725 	.word	0x0800a725

08009568 <strtol>:
 8009568:	4613      	mov	r3, r2
 800956a:	460a      	mov	r2, r1
 800956c:	4601      	mov	r1, r0
 800956e:	4802      	ldr	r0, [pc, #8]	@ (8009578 <strtol+0x10>)
 8009570:	6800      	ldr	r0, [r0, #0]
 8009572:	f7ff bf7f 	b.w	8009474 <_strtol_l.isra.0>
 8009576:	bf00      	nop
 8009578:	20000034 	.word	0x20000034

0800957c <sniprintf>:
 800957c:	b40c      	push	{r2, r3}
 800957e:	b530      	push	{r4, r5, lr}
 8009580:	4b18      	ldr	r3, [pc, #96]	@ (80095e4 <sniprintf+0x68>)
 8009582:	1e0c      	subs	r4, r1, #0
 8009584:	681d      	ldr	r5, [r3, #0]
 8009586:	b09d      	sub	sp, #116	@ 0x74
 8009588:	da08      	bge.n	800959c <sniprintf+0x20>
 800958a:	238b      	movs	r3, #139	@ 0x8b
 800958c:	602b      	str	r3, [r5, #0]
 800958e:	f04f 30ff 	mov.w	r0, #4294967295
 8009592:	b01d      	add	sp, #116	@ 0x74
 8009594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009598:	b002      	add	sp, #8
 800959a:	4770      	bx	lr
 800959c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80095a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80095a4:	f04f 0300 	mov.w	r3, #0
 80095a8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80095aa:	bf14      	ite	ne
 80095ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 80095b0:	4623      	moveq	r3, r4
 80095b2:	9304      	str	r3, [sp, #16]
 80095b4:	9307      	str	r3, [sp, #28]
 80095b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80095ba:	9002      	str	r0, [sp, #8]
 80095bc:	9006      	str	r0, [sp, #24]
 80095be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80095c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80095c4:	ab21      	add	r3, sp, #132	@ 0x84
 80095c6:	a902      	add	r1, sp, #8
 80095c8:	4628      	mov	r0, r5
 80095ca:	9301      	str	r3, [sp, #4]
 80095cc:	f000 f974 	bl	80098b8 <_svfiprintf_r>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	bfbc      	itt	lt
 80095d4:	238b      	movlt	r3, #139	@ 0x8b
 80095d6:	602b      	strlt	r3, [r5, #0]
 80095d8:	2c00      	cmp	r4, #0
 80095da:	d0da      	beq.n	8009592 <sniprintf+0x16>
 80095dc:	9b02      	ldr	r3, [sp, #8]
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
 80095e2:	e7d6      	b.n	8009592 <sniprintf+0x16>
 80095e4:	20000034 	.word	0x20000034

080095e8 <memset>:
 80095e8:	4402      	add	r2, r0
 80095ea:	4603      	mov	r3, r0
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d100      	bne.n	80095f2 <memset+0xa>
 80095f0:	4770      	bx	lr
 80095f2:	f803 1b01 	strb.w	r1, [r3], #1
 80095f6:	e7f9      	b.n	80095ec <memset+0x4>

080095f8 <strchr>:
 80095f8:	b2c9      	uxtb	r1, r1
 80095fa:	4603      	mov	r3, r0
 80095fc:	4618      	mov	r0, r3
 80095fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009602:	b112      	cbz	r2, 800960a <strchr+0x12>
 8009604:	428a      	cmp	r2, r1
 8009606:	d1f9      	bne.n	80095fc <strchr+0x4>
 8009608:	4770      	bx	lr
 800960a:	2900      	cmp	r1, #0
 800960c:	bf18      	it	ne
 800960e:	2000      	movne	r0, #0
 8009610:	4770      	bx	lr

08009612 <strncat>:
 8009612:	b530      	push	{r4, r5, lr}
 8009614:	4604      	mov	r4, r0
 8009616:	7825      	ldrb	r5, [r4, #0]
 8009618:	4623      	mov	r3, r4
 800961a:	3401      	adds	r4, #1
 800961c:	2d00      	cmp	r5, #0
 800961e:	d1fa      	bne.n	8009616 <strncat+0x4>
 8009620:	3a01      	subs	r2, #1
 8009622:	d304      	bcc.n	800962e <strncat+0x1c>
 8009624:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009628:	f803 4b01 	strb.w	r4, [r3], #1
 800962c:	b904      	cbnz	r4, 8009630 <strncat+0x1e>
 800962e:	bd30      	pop	{r4, r5, pc}
 8009630:	2a00      	cmp	r2, #0
 8009632:	d1f5      	bne.n	8009620 <strncat+0xe>
 8009634:	701a      	strb	r2, [r3, #0]
 8009636:	e7f3      	b.n	8009620 <strncat+0xe>

08009638 <strncmp>:
 8009638:	b510      	push	{r4, lr}
 800963a:	b16a      	cbz	r2, 8009658 <strncmp+0x20>
 800963c:	3901      	subs	r1, #1
 800963e:	1884      	adds	r4, r0, r2
 8009640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009644:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009648:	429a      	cmp	r2, r3
 800964a:	d103      	bne.n	8009654 <strncmp+0x1c>
 800964c:	42a0      	cmp	r0, r4
 800964e:	d001      	beq.n	8009654 <strncmp+0x1c>
 8009650:	2a00      	cmp	r2, #0
 8009652:	d1f5      	bne.n	8009640 <strncmp+0x8>
 8009654:	1ad0      	subs	r0, r2, r3
 8009656:	bd10      	pop	{r4, pc}
 8009658:	4610      	mov	r0, r2
 800965a:	e7fc      	b.n	8009656 <strncmp+0x1e>

0800965c <strncpy>:
 800965c:	b510      	push	{r4, lr}
 800965e:	3901      	subs	r1, #1
 8009660:	4603      	mov	r3, r0
 8009662:	b132      	cbz	r2, 8009672 <strncpy+0x16>
 8009664:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009668:	f803 4b01 	strb.w	r4, [r3], #1
 800966c:	3a01      	subs	r2, #1
 800966e:	2c00      	cmp	r4, #0
 8009670:	d1f7      	bne.n	8009662 <strncpy+0x6>
 8009672:	441a      	add	r2, r3
 8009674:	2100      	movs	r1, #0
 8009676:	4293      	cmp	r3, r2
 8009678:	d100      	bne.n	800967c <strncpy+0x20>
 800967a:	bd10      	pop	{r4, pc}
 800967c:	f803 1b01 	strb.w	r1, [r3], #1
 8009680:	e7f9      	b.n	8009676 <strncpy+0x1a>

08009682 <__strtok_r>:
 8009682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009684:	4604      	mov	r4, r0
 8009686:	b908      	cbnz	r0, 800968c <__strtok_r+0xa>
 8009688:	6814      	ldr	r4, [r2, #0]
 800968a:	b144      	cbz	r4, 800969e <__strtok_r+0x1c>
 800968c:	4620      	mov	r0, r4
 800968e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009692:	460f      	mov	r7, r1
 8009694:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009698:	b91e      	cbnz	r6, 80096a2 <__strtok_r+0x20>
 800969a:	b965      	cbnz	r5, 80096b6 <__strtok_r+0x34>
 800969c:	6015      	str	r5, [r2, #0]
 800969e:	2000      	movs	r0, #0
 80096a0:	e005      	b.n	80096ae <__strtok_r+0x2c>
 80096a2:	42b5      	cmp	r5, r6
 80096a4:	d1f6      	bne.n	8009694 <__strtok_r+0x12>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1f0      	bne.n	800968c <__strtok_r+0xa>
 80096aa:	6014      	str	r4, [r2, #0]
 80096ac:	7003      	strb	r3, [r0, #0]
 80096ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096b0:	461c      	mov	r4, r3
 80096b2:	e00c      	b.n	80096ce <__strtok_r+0x4c>
 80096b4:	b91d      	cbnz	r5, 80096be <__strtok_r+0x3c>
 80096b6:	4627      	mov	r7, r4
 80096b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096bc:	460e      	mov	r6, r1
 80096be:	f816 5b01 	ldrb.w	r5, [r6], #1
 80096c2:	42ab      	cmp	r3, r5
 80096c4:	d1f6      	bne.n	80096b4 <__strtok_r+0x32>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0f2      	beq.n	80096b0 <__strtok_r+0x2e>
 80096ca:	2300      	movs	r3, #0
 80096cc:	703b      	strb	r3, [r7, #0]
 80096ce:	6014      	str	r4, [r2, #0]
 80096d0:	e7ed      	b.n	80096ae <__strtok_r+0x2c>

080096d2 <strtok_r>:
 80096d2:	2301      	movs	r3, #1
 80096d4:	f7ff bfd5 	b.w	8009682 <__strtok_r>

080096d8 <_sbrk_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4d06      	ldr	r5, [pc, #24]	@ (80096f4 <_sbrk_r+0x1c>)
 80096dc:	2300      	movs	r3, #0
 80096de:	4604      	mov	r4, r0
 80096e0:	4608      	mov	r0, r1
 80096e2:	602b      	str	r3, [r5, #0]
 80096e4:	f7f8 fdec 	bl	80022c0 <_sbrk>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d102      	bne.n	80096f2 <_sbrk_r+0x1a>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	b103      	cbz	r3, 80096f2 <_sbrk_r+0x1a>
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	20005480 	.word	0x20005480

080096f8 <__errno>:
 80096f8:	4b01      	ldr	r3, [pc, #4]	@ (8009700 <__errno+0x8>)
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	20000034 	.word	0x20000034

08009704 <__libc_init_array>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	4d0d      	ldr	r5, [pc, #52]	@ (800973c <__libc_init_array+0x38>)
 8009708:	4c0d      	ldr	r4, [pc, #52]	@ (8009740 <__libc_init_array+0x3c>)
 800970a:	1b64      	subs	r4, r4, r5
 800970c:	10a4      	asrs	r4, r4, #2
 800970e:	2600      	movs	r6, #0
 8009710:	42a6      	cmp	r6, r4
 8009712:	d109      	bne.n	8009728 <__libc_init_array+0x24>
 8009714:	4d0b      	ldr	r5, [pc, #44]	@ (8009744 <__libc_init_array+0x40>)
 8009716:	4c0c      	ldr	r4, [pc, #48]	@ (8009748 <__libc_init_array+0x44>)
 8009718:	f000 fba6 	bl	8009e68 <_init>
 800971c:	1b64      	subs	r4, r4, r5
 800971e:	10a4      	asrs	r4, r4, #2
 8009720:	2600      	movs	r6, #0
 8009722:	42a6      	cmp	r6, r4
 8009724:	d105      	bne.n	8009732 <__libc_init_array+0x2e>
 8009726:	bd70      	pop	{r4, r5, r6, pc}
 8009728:	f855 3b04 	ldr.w	r3, [r5], #4
 800972c:	4798      	blx	r3
 800972e:	3601      	adds	r6, #1
 8009730:	e7ee      	b.n	8009710 <__libc_init_array+0xc>
 8009732:	f855 3b04 	ldr.w	r3, [r5], #4
 8009736:	4798      	blx	r3
 8009738:	3601      	adds	r6, #1
 800973a:	e7f2      	b.n	8009722 <__libc_init_array+0x1e>
 800973c:	0800a860 	.word	0x0800a860
 8009740:	0800a860 	.word	0x0800a860
 8009744:	0800a860 	.word	0x0800a860
 8009748:	0800a864 	.word	0x0800a864

0800974c <__retarget_lock_acquire_recursive>:
 800974c:	4770      	bx	lr

0800974e <__retarget_lock_release_recursive>:
 800974e:	4770      	bx	lr

08009750 <memcpy>:
 8009750:	440a      	add	r2, r1
 8009752:	4291      	cmp	r1, r2
 8009754:	f100 33ff 	add.w	r3, r0, #4294967295
 8009758:	d100      	bne.n	800975c <memcpy+0xc>
 800975a:	4770      	bx	lr
 800975c:	b510      	push	{r4, lr}
 800975e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009766:	4291      	cmp	r1, r2
 8009768:	d1f9      	bne.n	800975e <memcpy+0xe>
 800976a:	bd10      	pop	{r4, pc}

0800976c <_free_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4605      	mov	r5, r0
 8009770:	2900      	cmp	r1, #0
 8009772:	d041      	beq.n	80097f8 <_free_r+0x8c>
 8009774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009778:	1f0c      	subs	r4, r1, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	bfb8      	it	lt
 800977e:	18e4      	addlt	r4, r4, r3
 8009780:	f7ff fe6c 	bl	800945c <__malloc_lock>
 8009784:	4a1d      	ldr	r2, [pc, #116]	@ (80097fc <_free_r+0x90>)
 8009786:	6813      	ldr	r3, [r2, #0]
 8009788:	b933      	cbnz	r3, 8009798 <_free_r+0x2c>
 800978a:	6063      	str	r3, [r4, #4]
 800978c:	6014      	str	r4, [r2, #0]
 800978e:	4628      	mov	r0, r5
 8009790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009794:	f7ff be68 	b.w	8009468 <__malloc_unlock>
 8009798:	42a3      	cmp	r3, r4
 800979a:	d908      	bls.n	80097ae <_free_r+0x42>
 800979c:	6820      	ldr	r0, [r4, #0]
 800979e:	1821      	adds	r1, r4, r0
 80097a0:	428b      	cmp	r3, r1
 80097a2:	bf01      	itttt	eq
 80097a4:	6819      	ldreq	r1, [r3, #0]
 80097a6:	685b      	ldreq	r3, [r3, #4]
 80097a8:	1809      	addeq	r1, r1, r0
 80097aa:	6021      	streq	r1, [r4, #0]
 80097ac:	e7ed      	b.n	800978a <_free_r+0x1e>
 80097ae:	461a      	mov	r2, r3
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	b10b      	cbz	r3, 80097b8 <_free_r+0x4c>
 80097b4:	42a3      	cmp	r3, r4
 80097b6:	d9fa      	bls.n	80097ae <_free_r+0x42>
 80097b8:	6811      	ldr	r1, [r2, #0]
 80097ba:	1850      	adds	r0, r2, r1
 80097bc:	42a0      	cmp	r0, r4
 80097be:	d10b      	bne.n	80097d8 <_free_r+0x6c>
 80097c0:	6820      	ldr	r0, [r4, #0]
 80097c2:	4401      	add	r1, r0
 80097c4:	1850      	adds	r0, r2, r1
 80097c6:	4283      	cmp	r3, r0
 80097c8:	6011      	str	r1, [r2, #0]
 80097ca:	d1e0      	bne.n	800978e <_free_r+0x22>
 80097cc:	6818      	ldr	r0, [r3, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	6053      	str	r3, [r2, #4]
 80097d2:	4408      	add	r0, r1
 80097d4:	6010      	str	r0, [r2, #0]
 80097d6:	e7da      	b.n	800978e <_free_r+0x22>
 80097d8:	d902      	bls.n	80097e0 <_free_r+0x74>
 80097da:	230c      	movs	r3, #12
 80097dc:	602b      	str	r3, [r5, #0]
 80097de:	e7d6      	b.n	800978e <_free_r+0x22>
 80097e0:	6820      	ldr	r0, [r4, #0]
 80097e2:	1821      	adds	r1, r4, r0
 80097e4:	428b      	cmp	r3, r1
 80097e6:	bf04      	itt	eq
 80097e8:	6819      	ldreq	r1, [r3, #0]
 80097ea:	685b      	ldreq	r3, [r3, #4]
 80097ec:	6063      	str	r3, [r4, #4]
 80097ee:	bf04      	itt	eq
 80097f0:	1809      	addeq	r1, r1, r0
 80097f2:	6021      	streq	r1, [r4, #0]
 80097f4:	6054      	str	r4, [r2, #4]
 80097f6:	e7ca      	b.n	800978e <_free_r+0x22>
 80097f8:	bd38      	pop	{r3, r4, r5, pc}
 80097fa:	bf00      	nop
 80097fc:	20005344 	.word	0x20005344

08009800 <__ssputs_r>:
 8009800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009804:	688e      	ldr	r6, [r1, #8]
 8009806:	461f      	mov	r7, r3
 8009808:	42be      	cmp	r6, r7
 800980a:	680b      	ldr	r3, [r1, #0]
 800980c:	4682      	mov	sl, r0
 800980e:	460c      	mov	r4, r1
 8009810:	4690      	mov	r8, r2
 8009812:	d82d      	bhi.n	8009870 <__ssputs_r+0x70>
 8009814:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009818:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800981c:	d026      	beq.n	800986c <__ssputs_r+0x6c>
 800981e:	6965      	ldr	r5, [r4, #20]
 8009820:	6909      	ldr	r1, [r1, #16]
 8009822:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009826:	eba3 0901 	sub.w	r9, r3, r1
 800982a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800982e:	1c7b      	adds	r3, r7, #1
 8009830:	444b      	add	r3, r9
 8009832:	106d      	asrs	r5, r5, #1
 8009834:	429d      	cmp	r5, r3
 8009836:	bf38      	it	cc
 8009838:	461d      	movcc	r5, r3
 800983a:	0553      	lsls	r3, r2, #21
 800983c:	d527      	bpl.n	800988e <__ssputs_r+0x8e>
 800983e:	4629      	mov	r1, r5
 8009840:	f7ff fd8c 	bl	800935c <_malloc_r>
 8009844:	4606      	mov	r6, r0
 8009846:	b360      	cbz	r0, 80098a2 <__ssputs_r+0xa2>
 8009848:	6921      	ldr	r1, [r4, #16]
 800984a:	464a      	mov	r2, r9
 800984c:	f7ff ff80 	bl	8009750 <memcpy>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800985a:	81a3      	strh	r3, [r4, #12]
 800985c:	6126      	str	r6, [r4, #16]
 800985e:	6165      	str	r5, [r4, #20]
 8009860:	444e      	add	r6, r9
 8009862:	eba5 0509 	sub.w	r5, r5, r9
 8009866:	6026      	str	r6, [r4, #0]
 8009868:	60a5      	str	r5, [r4, #8]
 800986a:	463e      	mov	r6, r7
 800986c:	42be      	cmp	r6, r7
 800986e:	d900      	bls.n	8009872 <__ssputs_r+0x72>
 8009870:	463e      	mov	r6, r7
 8009872:	6820      	ldr	r0, [r4, #0]
 8009874:	4632      	mov	r2, r6
 8009876:	4641      	mov	r1, r8
 8009878:	f000 faa6 	bl	8009dc8 <memmove>
 800987c:	68a3      	ldr	r3, [r4, #8]
 800987e:	1b9b      	subs	r3, r3, r6
 8009880:	60a3      	str	r3, [r4, #8]
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	4433      	add	r3, r6
 8009886:	6023      	str	r3, [r4, #0]
 8009888:	2000      	movs	r0, #0
 800988a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988e:	462a      	mov	r2, r5
 8009890:	f000 fab4 	bl	8009dfc <_realloc_r>
 8009894:	4606      	mov	r6, r0
 8009896:	2800      	cmp	r0, #0
 8009898:	d1e0      	bne.n	800985c <__ssputs_r+0x5c>
 800989a:	6921      	ldr	r1, [r4, #16]
 800989c:	4650      	mov	r0, sl
 800989e:	f7ff ff65 	bl	800976c <_free_r>
 80098a2:	230c      	movs	r3, #12
 80098a4:	f8ca 3000 	str.w	r3, [sl]
 80098a8:	89a3      	ldrh	r3, [r4, #12]
 80098aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098ae:	81a3      	strh	r3, [r4, #12]
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295
 80098b4:	e7e9      	b.n	800988a <__ssputs_r+0x8a>
	...

080098b8 <_svfiprintf_r>:
 80098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	4698      	mov	r8, r3
 80098be:	898b      	ldrh	r3, [r1, #12]
 80098c0:	061b      	lsls	r3, r3, #24
 80098c2:	b09d      	sub	sp, #116	@ 0x74
 80098c4:	4607      	mov	r7, r0
 80098c6:	460d      	mov	r5, r1
 80098c8:	4614      	mov	r4, r2
 80098ca:	d510      	bpl.n	80098ee <_svfiprintf_r+0x36>
 80098cc:	690b      	ldr	r3, [r1, #16]
 80098ce:	b973      	cbnz	r3, 80098ee <_svfiprintf_r+0x36>
 80098d0:	2140      	movs	r1, #64	@ 0x40
 80098d2:	f7ff fd43 	bl	800935c <_malloc_r>
 80098d6:	6028      	str	r0, [r5, #0]
 80098d8:	6128      	str	r0, [r5, #16]
 80098da:	b930      	cbnz	r0, 80098ea <_svfiprintf_r+0x32>
 80098dc:	230c      	movs	r3, #12
 80098de:	603b      	str	r3, [r7, #0]
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295
 80098e4:	b01d      	add	sp, #116	@ 0x74
 80098e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ea:	2340      	movs	r3, #64	@ 0x40
 80098ec:	616b      	str	r3, [r5, #20]
 80098ee:	2300      	movs	r3, #0
 80098f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80098f2:	2320      	movs	r3, #32
 80098f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80098fc:	2330      	movs	r3, #48	@ 0x30
 80098fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a9c <_svfiprintf_r+0x1e4>
 8009902:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009906:	f04f 0901 	mov.w	r9, #1
 800990a:	4623      	mov	r3, r4
 800990c:	469a      	mov	sl, r3
 800990e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009912:	b10a      	cbz	r2, 8009918 <_svfiprintf_r+0x60>
 8009914:	2a25      	cmp	r2, #37	@ 0x25
 8009916:	d1f9      	bne.n	800990c <_svfiprintf_r+0x54>
 8009918:	ebba 0b04 	subs.w	fp, sl, r4
 800991c:	d00b      	beq.n	8009936 <_svfiprintf_r+0x7e>
 800991e:	465b      	mov	r3, fp
 8009920:	4622      	mov	r2, r4
 8009922:	4629      	mov	r1, r5
 8009924:	4638      	mov	r0, r7
 8009926:	f7ff ff6b 	bl	8009800 <__ssputs_r>
 800992a:	3001      	adds	r0, #1
 800992c:	f000 80a7 	beq.w	8009a7e <_svfiprintf_r+0x1c6>
 8009930:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009932:	445a      	add	r2, fp
 8009934:	9209      	str	r2, [sp, #36]	@ 0x24
 8009936:	f89a 3000 	ldrb.w	r3, [sl]
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 809f 	beq.w	8009a7e <_svfiprintf_r+0x1c6>
 8009940:	2300      	movs	r3, #0
 8009942:	f04f 32ff 	mov.w	r2, #4294967295
 8009946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800994a:	f10a 0a01 	add.w	sl, sl, #1
 800994e:	9304      	str	r3, [sp, #16]
 8009950:	9307      	str	r3, [sp, #28]
 8009952:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009956:	931a      	str	r3, [sp, #104]	@ 0x68
 8009958:	4654      	mov	r4, sl
 800995a:	2205      	movs	r2, #5
 800995c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009960:	484e      	ldr	r0, [pc, #312]	@ (8009a9c <_svfiprintf_r+0x1e4>)
 8009962:	f7f6 fc45 	bl	80001f0 <memchr>
 8009966:	9a04      	ldr	r2, [sp, #16]
 8009968:	b9d8      	cbnz	r0, 80099a2 <_svfiprintf_r+0xea>
 800996a:	06d0      	lsls	r0, r2, #27
 800996c:	bf44      	itt	mi
 800996e:	2320      	movmi	r3, #32
 8009970:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009974:	0711      	lsls	r1, r2, #28
 8009976:	bf44      	itt	mi
 8009978:	232b      	movmi	r3, #43	@ 0x2b
 800997a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800997e:	f89a 3000 	ldrb.w	r3, [sl]
 8009982:	2b2a      	cmp	r3, #42	@ 0x2a
 8009984:	d015      	beq.n	80099b2 <_svfiprintf_r+0xfa>
 8009986:	9a07      	ldr	r2, [sp, #28]
 8009988:	4654      	mov	r4, sl
 800998a:	2000      	movs	r0, #0
 800998c:	f04f 0c0a 	mov.w	ip, #10
 8009990:	4621      	mov	r1, r4
 8009992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009996:	3b30      	subs	r3, #48	@ 0x30
 8009998:	2b09      	cmp	r3, #9
 800999a:	d94b      	bls.n	8009a34 <_svfiprintf_r+0x17c>
 800999c:	b1b0      	cbz	r0, 80099cc <_svfiprintf_r+0x114>
 800999e:	9207      	str	r2, [sp, #28]
 80099a0:	e014      	b.n	80099cc <_svfiprintf_r+0x114>
 80099a2:	eba0 0308 	sub.w	r3, r0, r8
 80099a6:	fa09 f303 	lsl.w	r3, r9, r3
 80099aa:	4313      	orrs	r3, r2
 80099ac:	9304      	str	r3, [sp, #16]
 80099ae:	46a2      	mov	sl, r4
 80099b0:	e7d2      	b.n	8009958 <_svfiprintf_r+0xa0>
 80099b2:	9b03      	ldr	r3, [sp, #12]
 80099b4:	1d19      	adds	r1, r3, #4
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	9103      	str	r1, [sp, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	bfbb      	ittet	lt
 80099be:	425b      	neglt	r3, r3
 80099c0:	f042 0202 	orrlt.w	r2, r2, #2
 80099c4:	9307      	strge	r3, [sp, #28]
 80099c6:	9307      	strlt	r3, [sp, #28]
 80099c8:	bfb8      	it	lt
 80099ca:	9204      	strlt	r2, [sp, #16]
 80099cc:	7823      	ldrb	r3, [r4, #0]
 80099ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80099d0:	d10a      	bne.n	80099e8 <_svfiprintf_r+0x130>
 80099d2:	7863      	ldrb	r3, [r4, #1]
 80099d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80099d6:	d132      	bne.n	8009a3e <_svfiprintf_r+0x186>
 80099d8:	9b03      	ldr	r3, [sp, #12]
 80099da:	1d1a      	adds	r2, r3, #4
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	9203      	str	r2, [sp, #12]
 80099e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099e4:	3402      	adds	r4, #2
 80099e6:	9305      	str	r3, [sp, #20]
 80099e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009aac <_svfiprintf_r+0x1f4>
 80099ec:	7821      	ldrb	r1, [r4, #0]
 80099ee:	2203      	movs	r2, #3
 80099f0:	4650      	mov	r0, sl
 80099f2:	f7f6 fbfd 	bl	80001f0 <memchr>
 80099f6:	b138      	cbz	r0, 8009a08 <_svfiprintf_r+0x150>
 80099f8:	9b04      	ldr	r3, [sp, #16]
 80099fa:	eba0 000a 	sub.w	r0, r0, sl
 80099fe:	2240      	movs	r2, #64	@ 0x40
 8009a00:	4082      	lsls	r2, r0
 8009a02:	4313      	orrs	r3, r2
 8009a04:	3401      	adds	r4, #1
 8009a06:	9304      	str	r3, [sp, #16]
 8009a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a0c:	4824      	ldr	r0, [pc, #144]	@ (8009aa0 <_svfiprintf_r+0x1e8>)
 8009a0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a12:	2206      	movs	r2, #6
 8009a14:	f7f6 fbec 	bl	80001f0 <memchr>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d036      	beq.n	8009a8a <_svfiprintf_r+0x1d2>
 8009a1c:	4b21      	ldr	r3, [pc, #132]	@ (8009aa4 <_svfiprintf_r+0x1ec>)
 8009a1e:	bb1b      	cbnz	r3, 8009a68 <_svfiprintf_r+0x1b0>
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	3307      	adds	r3, #7
 8009a24:	f023 0307 	bic.w	r3, r3, #7
 8009a28:	3308      	adds	r3, #8
 8009a2a:	9303      	str	r3, [sp, #12]
 8009a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a2e:	4433      	add	r3, r6
 8009a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a32:	e76a      	b.n	800990a <_svfiprintf_r+0x52>
 8009a34:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a38:	460c      	mov	r4, r1
 8009a3a:	2001      	movs	r0, #1
 8009a3c:	e7a8      	b.n	8009990 <_svfiprintf_r+0xd8>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	3401      	adds	r4, #1
 8009a42:	9305      	str	r3, [sp, #20]
 8009a44:	4619      	mov	r1, r3
 8009a46:	f04f 0c0a 	mov.w	ip, #10
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a50:	3a30      	subs	r2, #48	@ 0x30
 8009a52:	2a09      	cmp	r2, #9
 8009a54:	d903      	bls.n	8009a5e <_svfiprintf_r+0x1a6>
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0c6      	beq.n	80099e8 <_svfiprintf_r+0x130>
 8009a5a:	9105      	str	r1, [sp, #20]
 8009a5c:	e7c4      	b.n	80099e8 <_svfiprintf_r+0x130>
 8009a5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a62:	4604      	mov	r4, r0
 8009a64:	2301      	movs	r3, #1
 8009a66:	e7f0      	b.n	8009a4a <_svfiprintf_r+0x192>
 8009a68:	ab03      	add	r3, sp, #12
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	462a      	mov	r2, r5
 8009a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009aa8 <_svfiprintf_r+0x1f0>)
 8009a70:	a904      	add	r1, sp, #16
 8009a72:	4638      	mov	r0, r7
 8009a74:	f3af 8000 	nop.w
 8009a78:	1c42      	adds	r2, r0, #1
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	d1d6      	bne.n	8009a2c <_svfiprintf_r+0x174>
 8009a7e:	89ab      	ldrh	r3, [r5, #12]
 8009a80:	065b      	lsls	r3, r3, #25
 8009a82:	f53f af2d 	bmi.w	80098e0 <_svfiprintf_r+0x28>
 8009a86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a88:	e72c      	b.n	80098e4 <_svfiprintf_r+0x2c>
 8009a8a:	ab03      	add	r3, sp, #12
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	462a      	mov	r2, r5
 8009a90:	4b05      	ldr	r3, [pc, #20]	@ (8009aa8 <_svfiprintf_r+0x1f0>)
 8009a92:	a904      	add	r1, sp, #16
 8009a94:	4638      	mov	r0, r7
 8009a96:	f000 f879 	bl	8009b8c <_printf_i>
 8009a9a:	e7ed      	b.n	8009a78 <_svfiprintf_r+0x1c0>
 8009a9c:	0800a825 	.word	0x0800a825
 8009aa0:	0800a82f 	.word	0x0800a82f
 8009aa4:	00000000 	.word	0x00000000
 8009aa8:	08009801 	.word	0x08009801
 8009aac:	0800a82b 	.word	0x0800a82b

08009ab0 <_printf_common>:
 8009ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab4:	4616      	mov	r6, r2
 8009ab6:	4698      	mov	r8, r3
 8009ab8:	688a      	ldr	r2, [r1, #8]
 8009aba:	690b      	ldr	r3, [r1, #16]
 8009abc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	bfb8      	it	lt
 8009ac4:	4613      	movlt	r3, r2
 8009ac6:	6033      	str	r3, [r6, #0]
 8009ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009acc:	4607      	mov	r7, r0
 8009ace:	460c      	mov	r4, r1
 8009ad0:	b10a      	cbz	r2, 8009ad6 <_printf_common+0x26>
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	6033      	str	r3, [r6, #0]
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	0699      	lsls	r1, r3, #26
 8009ada:	bf42      	ittt	mi
 8009adc:	6833      	ldrmi	r3, [r6, #0]
 8009ade:	3302      	addmi	r3, #2
 8009ae0:	6033      	strmi	r3, [r6, #0]
 8009ae2:	6825      	ldr	r5, [r4, #0]
 8009ae4:	f015 0506 	ands.w	r5, r5, #6
 8009ae8:	d106      	bne.n	8009af8 <_printf_common+0x48>
 8009aea:	f104 0a19 	add.w	sl, r4, #25
 8009aee:	68e3      	ldr	r3, [r4, #12]
 8009af0:	6832      	ldr	r2, [r6, #0]
 8009af2:	1a9b      	subs	r3, r3, r2
 8009af4:	42ab      	cmp	r3, r5
 8009af6:	dc26      	bgt.n	8009b46 <_printf_common+0x96>
 8009af8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009afc:	6822      	ldr	r2, [r4, #0]
 8009afe:	3b00      	subs	r3, #0
 8009b00:	bf18      	it	ne
 8009b02:	2301      	movne	r3, #1
 8009b04:	0692      	lsls	r2, r2, #26
 8009b06:	d42b      	bmi.n	8009b60 <_printf_common+0xb0>
 8009b08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b0c:	4641      	mov	r1, r8
 8009b0e:	4638      	mov	r0, r7
 8009b10:	47c8      	blx	r9
 8009b12:	3001      	adds	r0, #1
 8009b14:	d01e      	beq.n	8009b54 <_printf_common+0xa4>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	6922      	ldr	r2, [r4, #16]
 8009b1a:	f003 0306 	and.w	r3, r3, #6
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	bf02      	ittt	eq
 8009b22:	68e5      	ldreq	r5, [r4, #12]
 8009b24:	6833      	ldreq	r3, [r6, #0]
 8009b26:	1aed      	subeq	r5, r5, r3
 8009b28:	68a3      	ldr	r3, [r4, #8]
 8009b2a:	bf0c      	ite	eq
 8009b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b30:	2500      	movne	r5, #0
 8009b32:	4293      	cmp	r3, r2
 8009b34:	bfc4      	itt	gt
 8009b36:	1a9b      	subgt	r3, r3, r2
 8009b38:	18ed      	addgt	r5, r5, r3
 8009b3a:	2600      	movs	r6, #0
 8009b3c:	341a      	adds	r4, #26
 8009b3e:	42b5      	cmp	r5, r6
 8009b40:	d11a      	bne.n	8009b78 <_printf_common+0xc8>
 8009b42:	2000      	movs	r0, #0
 8009b44:	e008      	b.n	8009b58 <_printf_common+0xa8>
 8009b46:	2301      	movs	r3, #1
 8009b48:	4652      	mov	r2, sl
 8009b4a:	4641      	mov	r1, r8
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	47c8      	blx	r9
 8009b50:	3001      	adds	r0, #1
 8009b52:	d103      	bne.n	8009b5c <_printf_common+0xac>
 8009b54:	f04f 30ff 	mov.w	r0, #4294967295
 8009b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b5c:	3501      	adds	r5, #1
 8009b5e:	e7c6      	b.n	8009aee <_printf_common+0x3e>
 8009b60:	18e1      	adds	r1, r4, r3
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	2030      	movs	r0, #48	@ 0x30
 8009b66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b6a:	4422      	add	r2, r4
 8009b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b74:	3302      	adds	r3, #2
 8009b76:	e7c7      	b.n	8009b08 <_printf_common+0x58>
 8009b78:	2301      	movs	r3, #1
 8009b7a:	4622      	mov	r2, r4
 8009b7c:	4641      	mov	r1, r8
 8009b7e:	4638      	mov	r0, r7
 8009b80:	47c8      	blx	r9
 8009b82:	3001      	adds	r0, #1
 8009b84:	d0e6      	beq.n	8009b54 <_printf_common+0xa4>
 8009b86:	3601      	adds	r6, #1
 8009b88:	e7d9      	b.n	8009b3e <_printf_common+0x8e>
	...

08009b8c <_printf_i>:
 8009b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b90:	7e0f      	ldrb	r7, [r1, #24]
 8009b92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b94:	2f78      	cmp	r7, #120	@ 0x78
 8009b96:	4691      	mov	r9, r2
 8009b98:	4680      	mov	r8, r0
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	469a      	mov	sl, r3
 8009b9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ba2:	d807      	bhi.n	8009bb4 <_printf_i+0x28>
 8009ba4:	2f62      	cmp	r7, #98	@ 0x62
 8009ba6:	d80a      	bhi.n	8009bbe <_printf_i+0x32>
 8009ba8:	2f00      	cmp	r7, #0
 8009baa:	f000 80d1 	beq.w	8009d50 <_printf_i+0x1c4>
 8009bae:	2f58      	cmp	r7, #88	@ 0x58
 8009bb0:	f000 80b8 	beq.w	8009d24 <_printf_i+0x198>
 8009bb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009bb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009bbc:	e03a      	b.n	8009c34 <_printf_i+0xa8>
 8009bbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009bc2:	2b15      	cmp	r3, #21
 8009bc4:	d8f6      	bhi.n	8009bb4 <_printf_i+0x28>
 8009bc6:	a101      	add	r1, pc, #4	@ (adr r1, 8009bcc <_printf_i+0x40>)
 8009bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bcc:	08009c25 	.word	0x08009c25
 8009bd0:	08009c39 	.word	0x08009c39
 8009bd4:	08009bb5 	.word	0x08009bb5
 8009bd8:	08009bb5 	.word	0x08009bb5
 8009bdc:	08009bb5 	.word	0x08009bb5
 8009be0:	08009bb5 	.word	0x08009bb5
 8009be4:	08009c39 	.word	0x08009c39
 8009be8:	08009bb5 	.word	0x08009bb5
 8009bec:	08009bb5 	.word	0x08009bb5
 8009bf0:	08009bb5 	.word	0x08009bb5
 8009bf4:	08009bb5 	.word	0x08009bb5
 8009bf8:	08009d37 	.word	0x08009d37
 8009bfc:	08009c63 	.word	0x08009c63
 8009c00:	08009cf1 	.word	0x08009cf1
 8009c04:	08009bb5 	.word	0x08009bb5
 8009c08:	08009bb5 	.word	0x08009bb5
 8009c0c:	08009d59 	.word	0x08009d59
 8009c10:	08009bb5 	.word	0x08009bb5
 8009c14:	08009c63 	.word	0x08009c63
 8009c18:	08009bb5 	.word	0x08009bb5
 8009c1c:	08009bb5 	.word	0x08009bb5
 8009c20:	08009cf9 	.word	0x08009cf9
 8009c24:	6833      	ldr	r3, [r6, #0]
 8009c26:	1d1a      	adds	r2, r3, #4
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	6032      	str	r2, [r6, #0]
 8009c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c34:	2301      	movs	r3, #1
 8009c36:	e09c      	b.n	8009d72 <_printf_i+0x1e6>
 8009c38:	6833      	ldr	r3, [r6, #0]
 8009c3a:	6820      	ldr	r0, [r4, #0]
 8009c3c:	1d19      	adds	r1, r3, #4
 8009c3e:	6031      	str	r1, [r6, #0]
 8009c40:	0606      	lsls	r6, r0, #24
 8009c42:	d501      	bpl.n	8009c48 <_printf_i+0xbc>
 8009c44:	681d      	ldr	r5, [r3, #0]
 8009c46:	e003      	b.n	8009c50 <_printf_i+0xc4>
 8009c48:	0645      	lsls	r5, r0, #25
 8009c4a:	d5fb      	bpl.n	8009c44 <_printf_i+0xb8>
 8009c4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c50:	2d00      	cmp	r5, #0
 8009c52:	da03      	bge.n	8009c5c <_printf_i+0xd0>
 8009c54:	232d      	movs	r3, #45	@ 0x2d
 8009c56:	426d      	negs	r5, r5
 8009c58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c5c:	4858      	ldr	r0, [pc, #352]	@ (8009dc0 <_printf_i+0x234>)
 8009c5e:	230a      	movs	r3, #10
 8009c60:	e011      	b.n	8009c86 <_printf_i+0xfa>
 8009c62:	6821      	ldr	r1, [r4, #0]
 8009c64:	6833      	ldr	r3, [r6, #0]
 8009c66:	0608      	lsls	r0, r1, #24
 8009c68:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c6c:	d402      	bmi.n	8009c74 <_printf_i+0xe8>
 8009c6e:	0649      	lsls	r1, r1, #25
 8009c70:	bf48      	it	mi
 8009c72:	b2ad      	uxthmi	r5, r5
 8009c74:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c76:	4852      	ldr	r0, [pc, #328]	@ (8009dc0 <_printf_i+0x234>)
 8009c78:	6033      	str	r3, [r6, #0]
 8009c7a:	bf14      	ite	ne
 8009c7c:	230a      	movne	r3, #10
 8009c7e:	2308      	moveq	r3, #8
 8009c80:	2100      	movs	r1, #0
 8009c82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c86:	6866      	ldr	r6, [r4, #4]
 8009c88:	60a6      	str	r6, [r4, #8]
 8009c8a:	2e00      	cmp	r6, #0
 8009c8c:	db05      	blt.n	8009c9a <_printf_i+0x10e>
 8009c8e:	6821      	ldr	r1, [r4, #0]
 8009c90:	432e      	orrs	r6, r5
 8009c92:	f021 0104 	bic.w	r1, r1, #4
 8009c96:	6021      	str	r1, [r4, #0]
 8009c98:	d04b      	beq.n	8009d32 <_printf_i+0x1a6>
 8009c9a:	4616      	mov	r6, r2
 8009c9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ca0:	fb03 5711 	mls	r7, r3, r1, r5
 8009ca4:	5dc7      	ldrb	r7, [r0, r7]
 8009ca6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009caa:	462f      	mov	r7, r5
 8009cac:	42bb      	cmp	r3, r7
 8009cae:	460d      	mov	r5, r1
 8009cb0:	d9f4      	bls.n	8009c9c <_printf_i+0x110>
 8009cb2:	2b08      	cmp	r3, #8
 8009cb4:	d10b      	bne.n	8009cce <_printf_i+0x142>
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	07df      	lsls	r7, r3, #31
 8009cba:	d508      	bpl.n	8009cce <_printf_i+0x142>
 8009cbc:	6923      	ldr	r3, [r4, #16]
 8009cbe:	6861      	ldr	r1, [r4, #4]
 8009cc0:	4299      	cmp	r1, r3
 8009cc2:	bfde      	ittt	le
 8009cc4:	2330      	movle	r3, #48	@ 0x30
 8009cc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cce:	1b92      	subs	r2, r2, r6
 8009cd0:	6122      	str	r2, [r4, #16]
 8009cd2:	f8cd a000 	str.w	sl, [sp]
 8009cd6:	464b      	mov	r3, r9
 8009cd8:	aa03      	add	r2, sp, #12
 8009cda:	4621      	mov	r1, r4
 8009cdc:	4640      	mov	r0, r8
 8009cde:	f7ff fee7 	bl	8009ab0 <_printf_common>
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d14a      	bne.n	8009d7c <_printf_i+0x1f0>
 8009ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cea:	b004      	add	sp, #16
 8009cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	f043 0320 	orr.w	r3, r3, #32
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	4832      	ldr	r0, [pc, #200]	@ (8009dc4 <_printf_i+0x238>)
 8009cfa:	2778      	movs	r7, #120	@ 0x78
 8009cfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	6831      	ldr	r1, [r6, #0]
 8009d04:	061f      	lsls	r7, r3, #24
 8009d06:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d0a:	d402      	bmi.n	8009d12 <_printf_i+0x186>
 8009d0c:	065f      	lsls	r7, r3, #25
 8009d0e:	bf48      	it	mi
 8009d10:	b2ad      	uxthmi	r5, r5
 8009d12:	6031      	str	r1, [r6, #0]
 8009d14:	07d9      	lsls	r1, r3, #31
 8009d16:	bf44      	itt	mi
 8009d18:	f043 0320 	orrmi.w	r3, r3, #32
 8009d1c:	6023      	strmi	r3, [r4, #0]
 8009d1e:	b11d      	cbz	r5, 8009d28 <_printf_i+0x19c>
 8009d20:	2310      	movs	r3, #16
 8009d22:	e7ad      	b.n	8009c80 <_printf_i+0xf4>
 8009d24:	4826      	ldr	r0, [pc, #152]	@ (8009dc0 <_printf_i+0x234>)
 8009d26:	e7e9      	b.n	8009cfc <_printf_i+0x170>
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	f023 0320 	bic.w	r3, r3, #32
 8009d2e:	6023      	str	r3, [r4, #0]
 8009d30:	e7f6      	b.n	8009d20 <_printf_i+0x194>
 8009d32:	4616      	mov	r6, r2
 8009d34:	e7bd      	b.n	8009cb2 <_printf_i+0x126>
 8009d36:	6833      	ldr	r3, [r6, #0]
 8009d38:	6825      	ldr	r5, [r4, #0]
 8009d3a:	6961      	ldr	r1, [r4, #20]
 8009d3c:	1d18      	adds	r0, r3, #4
 8009d3e:	6030      	str	r0, [r6, #0]
 8009d40:	062e      	lsls	r6, r5, #24
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	d501      	bpl.n	8009d4a <_printf_i+0x1be>
 8009d46:	6019      	str	r1, [r3, #0]
 8009d48:	e002      	b.n	8009d50 <_printf_i+0x1c4>
 8009d4a:	0668      	lsls	r0, r5, #25
 8009d4c:	d5fb      	bpl.n	8009d46 <_printf_i+0x1ba>
 8009d4e:	8019      	strh	r1, [r3, #0]
 8009d50:	2300      	movs	r3, #0
 8009d52:	6123      	str	r3, [r4, #16]
 8009d54:	4616      	mov	r6, r2
 8009d56:	e7bc      	b.n	8009cd2 <_printf_i+0x146>
 8009d58:	6833      	ldr	r3, [r6, #0]
 8009d5a:	1d1a      	adds	r2, r3, #4
 8009d5c:	6032      	str	r2, [r6, #0]
 8009d5e:	681e      	ldr	r6, [r3, #0]
 8009d60:	6862      	ldr	r2, [r4, #4]
 8009d62:	2100      	movs	r1, #0
 8009d64:	4630      	mov	r0, r6
 8009d66:	f7f6 fa43 	bl	80001f0 <memchr>
 8009d6a:	b108      	cbz	r0, 8009d70 <_printf_i+0x1e4>
 8009d6c:	1b80      	subs	r0, r0, r6
 8009d6e:	6060      	str	r0, [r4, #4]
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	6123      	str	r3, [r4, #16]
 8009d74:	2300      	movs	r3, #0
 8009d76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d7a:	e7aa      	b.n	8009cd2 <_printf_i+0x146>
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	4632      	mov	r2, r6
 8009d80:	4649      	mov	r1, r9
 8009d82:	4640      	mov	r0, r8
 8009d84:	47d0      	blx	sl
 8009d86:	3001      	adds	r0, #1
 8009d88:	d0ad      	beq.n	8009ce6 <_printf_i+0x15a>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	079b      	lsls	r3, r3, #30
 8009d8e:	d413      	bmi.n	8009db8 <_printf_i+0x22c>
 8009d90:	68e0      	ldr	r0, [r4, #12]
 8009d92:	9b03      	ldr	r3, [sp, #12]
 8009d94:	4298      	cmp	r0, r3
 8009d96:	bfb8      	it	lt
 8009d98:	4618      	movlt	r0, r3
 8009d9a:	e7a6      	b.n	8009cea <_printf_i+0x15e>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	4632      	mov	r2, r6
 8009da0:	4649      	mov	r1, r9
 8009da2:	4640      	mov	r0, r8
 8009da4:	47d0      	blx	sl
 8009da6:	3001      	adds	r0, #1
 8009da8:	d09d      	beq.n	8009ce6 <_printf_i+0x15a>
 8009daa:	3501      	adds	r5, #1
 8009dac:	68e3      	ldr	r3, [r4, #12]
 8009dae:	9903      	ldr	r1, [sp, #12]
 8009db0:	1a5b      	subs	r3, r3, r1
 8009db2:	42ab      	cmp	r3, r5
 8009db4:	dcf2      	bgt.n	8009d9c <_printf_i+0x210>
 8009db6:	e7eb      	b.n	8009d90 <_printf_i+0x204>
 8009db8:	2500      	movs	r5, #0
 8009dba:	f104 0619 	add.w	r6, r4, #25
 8009dbe:	e7f5      	b.n	8009dac <_printf_i+0x220>
 8009dc0:	0800a836 	.word	0x0800a836
 8009dc4:	0800a847 	.word	0x0800a847

08009dc8 <memmove>:
 8009dc8:	4288      	cmp	r0, r1
 8009dca:	b510      	push	{r4, lr}
 8009dcc:	eb01 0402 	add.w	r4, r1, r2
 8009dd0:	d902      	bls.n	8009dd8 <memmove+0x10>
 8009dd2:	4284      	cmp	r4, r0
 8009dd4:	4623      	mov	r3, r4
 8009dd6:	d807      	bhi.n	8009de8 <memmove+0x20>
 8009dd8:	1e43      	subs	r3, r0, #1
 8009dda:	42a1      	cmp	r1, r4
 8009ddc:	d008      	beq.n	8009df0 <memmove+0x28>
 8009dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009de2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009de6:	e7f8      	b.n	8009dda <memmove+0x12>
 8009de8:	4402      	add	r2, r0
 8009dea:	4601      	mov	r1, r0
 8009dec:	428a      	cmp	r2, r1
 8009dee:	d100      	bne.n	8009df2 <memmove+0x2a>
 8009df0:	bd10      	pop	{r4, pc}
 8009df2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009df6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dfa:	e7f7      	b.n	8009dec <memmove+0x24>

08009dfc <_realloc_r>:
 8009dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e00:	4607      	mov	r7, r0
 8009e02:	4614      	mov	r4, r2
 8009e04:	460d      	mov	r5, r1
 8009e06:	b921      	cbnz	r1, 8009e12 <_realloc_r+0x16>
 8009e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	f7ff baa5 	b.w	800935c <_malloc_r>
 8009e12:	b92a      	cbnz	r2, 8009e20 <_realloc_r+0x24>
 8009e14:	f7ff fcaa 	bl	800976c <_free_r>
 8009e18:	4625      	mov	r5, r4
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e20:	f000 f81a 	bl	8009e58 <_malloc_usable_size_r>
 8009e24:	4284      	cmp	r4, r0
 8009e26:	4606      	mov	r6, r0
 8009e28:	d802      	bhi.n	8009e30 <_realloc_r+0x34>
 8009e2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e2e:	d8f4      	bhi.n	8009e1a <_realloc_r+0x1e>
 8009e30:	4621      	mov	r1, r4
 8009e32:	4638      	mov	r0, r7
 8009e34:	f7ff fa92 	bl	800935c <_malloc_r>
 8009e38:	4680      	mov	r8, r0
 8009e3a:	b908      	cbnz	r0, 8009e40 <_realloc_r+0x44>
 8009e3c:	4645      	mov	r5, r8
 8009e3e:	e7ec      	b.n	8009e1a <_realloc_r+0x1e>
 8009e40:	42b4      	cmp	r4, r6
 8009e42:	4622      	mov	r2, r4
 8009e44:	4629      	mov	r1, r5
 8009e46:	bf28      	it	cs
 8009e48:	4632      	movcs	r2, r6
 8009e4a:	f7ff fc81 	bl	8009750 <memcpy>
 8009e4e:	4629      	mov	r1, r5
 8009e50:	4638      	mov	r0, r7
 8009e52:	f7ff fc8b 	bl	800976c <_free_r>
 8009e56:	e7f1      	b.n	8009e3c <_realloc_r+0x40>

08009e58 <_malloc_usable_size_r>:
 8009e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e5c:	1f18      	subs	r0, r3, #4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	bfbc      	itt	lt
 8009e62:	580b      	ldrlt	r3, [r1, r0]
 8009e64:	18c0      	addlt	r0, r0, r3
 8009e66:	4770      	bx	lr

08009e68 <_init>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	bf00      	nop
 8009e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e6e:	bc08      	pop	{r3}
 8009e70:	469e      	mov	lr, r3
 8009e72:	4770      	bx	lr

08009e74 <_fini>:
 8009e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e76:	bf00      	nop
 8009e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7a:	bc08      	pop	{r3}
 8009e7c:	469e      	mov	lr, r3
 8009e7e:	4770      	bx	lr
