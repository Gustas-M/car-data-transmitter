
car-data-transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c940  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  0800cae0  0800cae0  0000dae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3a8  0800d3a8  0000f1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d3a8  0800d3a8  0000e3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3b0  0800d3b0  0000f1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3b0  0800d3b0  0000e3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d3b4  0800d3b4  0000e3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800d3b8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004de8  200001f0  0800d5a4  0000f1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004fd8  0800d5a4  0000ffd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d120  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e79  00000000  00000000  0002c33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b50  00000000  00000000  000311b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ef  00000000  00000000  00032d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000893f  00000000  00000000  000341f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001efda  00000000  00000000  0003cb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6e07  00000000  00000000  0005bb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102917  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008538  00000000  00000000  0010295c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0010ae94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cac8 	.word	0x0800cac8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800cac8 	.word	0x0800cac8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b9be 	b.w	8000f00 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f83c 	bl	8000c08 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2lz>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	f7ff ff99 	bl	8000adc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x1c>
 8000bac:	4620      	mov	r0, r4
 8000bae:	4629      	mov	r1, r5
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fd0f 	bl	80005f8 <__aeabi_dmul>
 8000bda:	f7ff ffa7 	bl	8000b2c <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc90 	bl	8000504 <__aeabi_ui2d>
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <__aeabi_d2ulz+0x38>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f7ff fd06 	bl	80005f8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fb48 	bl	8000288 <__aeabi_dsub>
 8000bf8:	f7ff ff98 	bl	8000b2c <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	468e      	mov	lr, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	4688      	mov	r8, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d962      	bls.n	8000ce4 <__udivmoddi4+0xdc>
 8000c1e:	fab2 f682 	clz	r6, r2
 8000c22:	b14e      	cbz	r6, 8000c38 <__udivmoddi4+0x30>
 8000c24:	f1c6 0320 	rsb	r3, r6, #32
 8000c28:	fa01 f806 	lsl.w	r8, r1, r6
 8000c2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c30:	40b7      	lsls	r7, r6
 8000c32:	ea43 0808 	orr.w	r8, r3, r8
 8000c36:	40b4      	lsls	r4, r6
 8000c38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c44:	0c23      	lsrs	r3, r4, #16
 8000c46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c5c:	f080 80ea 	bcs.w	8000e34 <__udivmoddi4+0x22c>
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f240 80e7 	bls.w	8000e34 <__udivmoddi4+0x22c>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443b      	add	r3, r7
 8000c6a:	1a9a      	subs	r2, r3, r2
 8000c6c:	b2a3      	uxth	r3, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7e:	459c      	cmp	ip, r3
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0x8e>
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c88:	f080 80d6 	bcs.w	8000e38 <__udivmoddi4+0x230>
 8000c8c:	459c      	cmp	ip, r3
 8000c8e:	f240 80d3 	bls.w	8000e38 <__udivmoddi4+0x230>
 8000c92:	443b      	add	r3, r7
 8000c94:	3802      	subs	r0, #2
 8000c96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9a:	eba3 030c 	sub.w	r3, r3, ip
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11d      	cbz	r5, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40f3      	lsrs	r3, r6
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e9c5 3200 	strd	r3, r2, [r5]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d905      	bls.n	8000cbe <__udivmoddi4+0xb6>
 8000cb2:	b10d      	cbz	r5, 8000cb8 <__udivmoddi4+0xb0>
 8000cb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e7f5      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cbe:	fab3 f183 	clz	r1, r3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d146      	bne.n	8000d54 <__udivmoddi4+0x14c>
 8000cc6:	4573      	cmp	r3, lr
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xc8>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 8105 	bhi.w	8000eda <__udivmoddi4+0x2d2>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	4690      	mov	r8, r2
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e5      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000cde:	e9c5 4800 	strd	r4, r8, [r5]
 8000ce2:	e7e2      	b.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f000 8090 	beq.w	8000e0a <__udivmoddi4+0x202>
 8000cea:	fab2 f682 	clz	r6, r2
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	f040 80a4 	bne.w	8000e3c <__udivmoddi4+0x234>
 8000cf4:	1a8a      	subs	r2, r1, r2
 8000cf6:	0c03      	lsrs	r3, r0, #16
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	b280      	uxth	r0, r0
 8000cfe:	b2bc      	uxth	r4, r7
 8000d00:	2101      	movs	r1, #1
 8000d02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x11e>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x11c>
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	f200 80e0 	bhi.w	8000ee4 <__udivmoddi4+0x2dc>
 8000d24:	46c4      	mov	ip, r8
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d34:	fb02 f404 	mul.w	r4, r2, r4
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x144>
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x142>
 8000d44:	429c      	cmp	r4, r3
 8000d46:	f200 80ca 	bhi.w	8000ede <__udivmoddi4+0x2d6>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	fa0e f401 	lsl.w	r4, lr, r1
 8000d64:	fa20 f306 	lsr.w	r3, r0, r6
 8000d68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d70:	4323      	orrs	r3, r4
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d7e:	0c1c      	lsrs	r4, r3, #16
 8000d80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x1a0>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d9a:	f080 809c 	bcs.w	8000ed6 <__udivmoddi4+0x2ce>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f240 8099 	bls.w	8000ed6 <__udivmoddi4+0x2ce>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 040e 	sub.w	r4, r4, lr
 8000dac:	fa1f fe83 	uxth.w	lr, r3
 8000db0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db4:	fb09 4413 	mls	r4, r9, r3, r4
 8000db8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dbc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc0:	45a4      	cmp	ip, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1ce>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dca:	f080 8082 	bcs.w	8000ed2 <__udivmoddi4+0x2ca>
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d97f      	bls.n	8000ed2 <__udivmoddi4+0x2ca>
 8000dd2:	3b02      	subs	r3, #2
 8000dd4:	443c      	add	r4, r7
 8000dd6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	fba0 ec02 	umull	lr, ip, r0, r2
 8000de2:	4564      	cmp	r4, ip
 8000de4:	4673      	mov	r3, lr
 8000de6:	46e1      	mov	r9, ip
 8000de8:	d362      	bcc.n	8000eb0 <__udivmoddi4+0x2a8>
 8000dea:	d05f      	beq.n	8000eac <__udivmoddi4+0x2a4>
 8000dec:	b15d      	cbz	r5, 8000e06 <__udivmoddi4+0x1fe>
 8000dee:	ebb8 0203 	subs.w	r2, r8, r3
 8000df2:	eb64 0409 	sbc.w	r4, r4, r9
 8000df6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfe:	431e      	orrs	r6, r3
 8000e00:	40cc      	lsrs	r4, r1
 8000e02:	e9c5 6400 	strd	r6, r4, [r5]
 8000e06:	2100      	movs	r1, #0
 8000e08:	e74f      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e0e:	0c01      	lsrs	r1, r0, #16
 8000e10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e14:	b280      	uxth	r0, r0
 8000e16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	463c      	mov	r4, r7
 8000e20:	46b8      	mov	r8, r7
 8000e22:	46be      	mov	lr, r7
 8000e24:	2620      	movs	r6, #32
 8000e26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e2a:	eba2 0208 	sub.w	r2, r2, r8
 8000e2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e32:	e766      	b.n	8000d02 <__udivmoddi4+0xfa>
 8000e34:	4601      	mov	r1, r0
 8000e36:	e718      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e72c      	b.n	8000c96 <__udivmoddi4+0x8e>
 8000e3c:	f1c6 0220 	rsb	r2, r6, #32
 8000e40:	fa2e f302 	lsr.w	r3, lr, r2
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	40b1      	lsls	r1, r6
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	430a      	orrs	r2, r1
 8000e52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e56:	b2bc      	uxth	r4, r7
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb08 f904 	mul.w	r9, r8, r4
 8000e66:	40b0      	lsls	r0, r6
 8000e68:	4589      	cmp	r9, r1
 8000e6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e6e:	b280      	uxth	r0, r0
 8000e70:	d93e      	bls.n	8000ef0 <__udivmoddi4+0x2e8>
 8000e72:	1879      	adds	r1, r7, r1
 8000e74:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e78:	d201      	bcs.n	8000e7e <__udivmoddi4+0x276>
 8000e7a:	4589      	cmp	r9, r1
 8000e7c:	d81f      	bhi.n	8000ebe <__udivmoddi4+0x2b6>
 8000e7e:	eba1 0109 	sub.w	r1, r1, r9
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	4542      	cmp	r2, r8
 8000e96:	d229      	bcs.n	8000eec <__udivmoddi4+0x2e4>
 8000e98:	18ba      	adds	r2, r7, r2
 8000e9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e9e:	d2c4      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea0:	4542      	cmp	r2, r8
 8000ea2:	d2c2      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ea8:	443a      	add	r2, r7
 8000eaa:	e7be      	b.n	8000e2a <__udivmoddi4+0x222>
 8000eac:	45f0      	cmp	r8, lr
 8000eae:	d29d      	bcs.n	8000dec <__udivmoddi4+0x1e4>
 8000eb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000eb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eb8:	3801      	subs	r0, #1
 8000eba:	46e1      	mov	r9, ip
 8000ebc:	e796      	b.n	8000dec <__udivmoddi4+0x1e4>
 8000ebe:	eba7 0909 	sub.w	r9, r7, r9
 8000ec2:	4449      	add	r1, r9
 8000ec4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ec8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ecc:	fb09 f804 	mul.w	r8, r9, r4
 8000ed0:	e7db      	b.n	8000e8a <__udivmoddi4+0x282>
 8000ed2:	4673      	mov	r3, lr
 8000ed4:	e77f      	b.n	8000dd6 <__udivmoddi4+0x1ce>
 8000ed6:	4650      	mov	r0, sl
 8000ed8:	e766      	b.n	8000da8 <__udivmoddi4+0x1a0>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e6fd      	b.n	8000cda <__udivmoddi4+0xd2>
 8000ede:	443b      	add	r3, r7
 8000ee0:	3a02      	subs	r2, #2
 8000ee2:	e733      	b.n	8000d4c <__udivmoddi4+0x144>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	443b      	add	r3, r7
 8000eea:	e71c      	b.n	8000d26 <__udivmoddi4+0x11e>
 8000eec:	4649      	mov	r1, r9
 8000eee:	e79c      	b.n	8000e2a <__udivmoddi4+0x222>
 8000ef0:	eba1 0109 	sub.w	r1, r1, r9
 8000ef4:	46c4      	mov	ip, r8
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fb09 f804 	mul.w	r8, r9, r4
 8000efe:	e7c4      	b.n	8000e8a <__udivmoddi4+0x282>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <ACCEL_API_Init>:
	}
};

static bool ACCEL_API_WriteConfiguration (void);

bool ACCEL_API_Init (void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	if (I2C_Driver_Init(ACCEL_I2C_PORT) == false) {
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f000 fdf9 	bl	8001b00 <I2C_Driver_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f083 0301 	eor.w	r3, r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <ACCEL_API_Init+0x1a>
		return false;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e00a      	b.n	8000f34 <ACCEL_API_Init+0x30>
	}

	if (ACCEL_API_WriteConfiguration() == false) {
 8000f1e:	f000 f80b 	bl	8000f38 <ACCEL_API_WriteConfiguration>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f083 0301 	eor.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <ACCEL_API_Init+0x2e>
		return false;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <ACCEL_API_Init+0x30>
	}

	return true;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <ACCEL_API_WriteConfiguration>:
	axis_val->z_val = raw_z_val * SCALE_FACTOR;

	return true;
}

static bool ACCEL_API_WriteConfiguration (void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	for (uint8_t reg_data_idx = eAccelApiConf_First; reg_data_idx < eAccelApiConf_Last; reg_data_idx++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	e025      	b.n	8000f90 <ACCEL_API_WriteConfiguration+0x58>
		if (I2C_Driver_Write(ACCEL_I2C_PORT, &static_accel_api_conf_lut[reg_data_idx].reg, 1) == false) {
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4a15      	ldr	r2, [pc, #84]	@ (8000fa0 <ACCEL_API_WriteConfiguration+0x68>)
 8000f4a:	4413      	add	r3, r2
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 fe91 	bl	8001c78 <I2C_Driver_Write>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f083 0301 	eor.w	r3, r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <ACCEL_API_WriteConfiguration+0x2e>
			return false;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e018      	b.n	8000f98 <ACCEL_API_WriteConfiguration+0x60>
		}
		if (I2C_Driver_Write(ACCEL_I2C_PORT, &static_accel_api_conf_lut[reg_data_idx].val, 1) == false) {
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <ACCEL_API_WriteConfiguration+0x68>)
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3301      	adds	r3, #1
 8000f70:	2201      	movs	r2, #1
 8000f72:	4619      	mov	r1, r3
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 fe7f 	bl	8001c78 <I2C_Driver_Write>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f083 0301 	eor.w	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <ACCEL_API_WriteConfiguration+0x52>
			return false;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e006      	b.n	8000f98 <ACCEL_API_WriteConfiguration+0x60>
	for (uint8_t reg_data_idx = eAccelApiConf_First; reg_data_idx < eAccelApiConf_Last; reg_data_idx++) {
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d9d6      	bls.n	8000f44 <ACCEL_API_WriteConfiguration+0xc>
		}
	}

	return true;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000000 	.word	0x20000000

08000fa4 <CMD_API_FindSeperator>:
 *********************************************************************************************************************/
int CMD_API_FindSeperator (uint8_t *message, uint8_t seperator);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
int CMD_API_FindSeperator (uint8_t *message, uint8_t seperator) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
    char *delimiter_pos = strchr((char*)message, seperator);
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f009 fd66 	bl	800aa86 <strchr>
 8000fba:	60f8      	str	r0, [r7, #12]

    if (delimiter_pos == NULL) {
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <CMD_API_FindSeperator+0x24>
        return NO_SEPERATOR;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e009      	b.n	8000fdc <CMD_API_FindSeperator+0x38>
    } else if ((uint8_t*)delimiter_pos == message) {
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d101      	bne.n	8000fd4 <CMD_API_FindSeperator+0x30>
        return EMPTY_MESSAGE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e003      	b.n	8000fdc <CMD_API_FindSeperator+0x38>
    }

    return (uint8_t*)delimiter_pos - message + 1;
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	3301      	adds	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <CMD_API_Process>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool CMD_API_Process (sMessage_t *received_message, sCmdLauncherParams_t *cmd_params) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
    if ((received_message->message == NULL) || (received_message->message_length <= 0)) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <CMD_API_Process+0x1a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <CMD_API_Process+0x1e>
        return false;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e077      	b.n	80010f2 <CMD_API_Process+0x10e>
    }

    for (size_t cmd = 0; cmd < cmd_params->command_table_size; cmd++) {
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
 8001006:	e066      	b.n	80010d6 <CMD_API_Process+0xf2>
        const sCommandDesc_t *command = &cmd_params->command_table[cmd];
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	4413      	add	r3, r2
 8001012:	623b      	str	r3, [r7, #32]
        int seperator_pos = CMD_API_FindSeperator(received_message->message, *command->separator);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	6a3b      	ldr	r3, [r7, #32]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	4610      	mov	r0, r2
 8001022:	f7ff ffbf 	bl	8000fa4 <CMD_API_FindSeperator>
 8001026:	61f8      	str	r0, [r7, #28]

		if (seperator_pos == NO_SEPERATOR) {
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102e:	d109      	bne.n	8001044 <CMD_API_Process+0x60>
			snprintf((char*)cmd_params->reply, cmd_params->reply_size, "No seperator was found\r\n");
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	6898      	ldr	r0, [r3, #8]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a30      	ldr	r2, [pc, #192]	@ (80010fc <CMD_API_Process+0x118>)
 800103a:	4619      	mov	r1, r3
 800103c:	f009 fca2 	bl	800a984 <sniprintf>
			return false;
 8001040:	2300      	movs	r3, #0
 8001042:	e056      	b.n	80010f2 <CMD_API_Process+0x10e>
		} else if (seperator_pos == EMPTY_MESSAGE) {
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d109      	bne.n	800105e <CMD_API_Process+0x7a>
			snprintf((char*)cmd_params->reply, cmd_params->reply_size, "An empty message was received\r\n");
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	6898      	ldr	r0, [r3, #8]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	4a2b      	ldr	r2, [pc, #172]	@ (8001100 <CMD_API_Process+0x11c>)
 8001054:	4619      	mov	r1, r3
 8001056:	f009 fc95 	bl	800a984 <sniprintf>
			return false;
 800105a:	2300      	movs	r3, #0
 800105c:	e049      	b.n	80010f2 <CMD_API_Process+0x10e>
		}

        if ((command->command_name_size + 1 == seperator_pos) && (strncmp((char*)command->command_name, (char*)received_message->message, command->command_name_size) == 0)) {
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	429a      	cmp	r2, r3
 8001068:	d132      	bne.n	80010d0 <CMD_API_Process+0xec>
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6819      	ldr	r1, [r3, #0]
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	461a      	mov	r2, r3
 8001078:	f009 fd25 	bl	800aac6 <strncmp>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d126      	bne.n	80010d0 <CMD_API_Process+0xec>
            if (command->function == NULL) {
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <CMD_API_Process+0xba>
                snprintf((char*)cmd_params->reply, cmd_params->reply_size, "Command does not have a function\r\n");
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	6898      	ldr	r0, [r3, #8]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	4a1c      	ldr	r2, [pc, #112]	@ (8001104 <CMD_API_Process+0x120>)
 8001094:	4619      	mov	r1, r3
 8001096:	f009 fc75 	bl	800a984 <sniprintf>
                return false;
 800109a:	2300      	movs	r3, #0
 800109c:	e029      	b.n	80010f2 <CMD_API_Process+0x10e>
            }

            sCommandParams_t params = {
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
                .params = received_message->message + seperator_pos,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	4413      	add	r3, r2
            sCommandParams_t params = {
 80010b4:	60fb      	str	r3, [r7, #12]
                .params_length = received_message->message_length - seperator_pos,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	1ad3      	subs	r3, r2, r3
            sCommandParams_t params = {
 80010be:	613b      	str	r3, [r7, #16]
            };

            command->function(&params);
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f107 020c 	add.w	r2, r7, #12
 80010c8:	4610      	mov	r0, r2
 80010ca:	4798      	blx	r3
            return true;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e010      	b.n	80010f2 <CMD_API_Process+0x10e>
    for (size_t cmd = 0; cmd < cmd_params->command_table_size; cmd++) {
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	3301      	adds	r3, #1
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010dc:	429a      	cmp	r2, r3
 80010de:	d393      	bcc.n	8001008 <CMD_API_Process+0x24>
        }
    }

    snprintf((char*)cmd_params->reply, cmd_params->reply_size, "Such command does not exist\r\n");
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	6898      	ldr	r0, [r3, #8]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <CMD_API_Process+0x124>)
 80010ea:	4619      	mov	r1, r3
 80010ec:	f009 fc4a 	bl	800a984 <sniprintf>
    return false;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3728      	adds	r7, #40	@ 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	0800cae0 	.word	0x0800cae0
 8001100:	0800cafc 	.word	0x0800cafc
 8001104:	0800cb1c 	.word	0x0800cb1c
 8001108:	0800cb40 	.word	0x0800cb40

0800110c <CMD_API_CheckParams>:

bool CMD_API_CheckParams (sCommandParams_t *cmd_params) {
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	if (cmd_params == NULL) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <CMD_API_CheckParams+0x12>
		return false;
 800111a:	2300      	movs	r3, #0
 800111c:	e00a      	b.n	8001134 <CMD_API_CheckParams+0x28>
	}

	if ((cmd_params->params == NULL) || (cmd_params->params_length == 0)) {
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <CMD_API_CheckParams+0x22>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <CMD_API_CheckParams+0x26>
		return false;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <CMD_API_CheckParams+0x28>
	}

	return true;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <GNSS_API_Init>:

static sGnssData_t current_gnss_data = {0};

static void GNSS_API_Task (void *argument);

bool GNSS_API_Init (void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	if (UART_API_Init(GNSS_UART_PORT, 0, GNSS_UART_DELIMITER, GNSS_UART_DELIMITER_LENGTH) == false) {
 8001144:	2302      	movs	r3, #2
 8001146:	4a11      	ldr	r2, [pc, #68]	@ (800118c <GNSS_API_Init+0x4c>)
 8001148:	2100      	movs	r1, #0
 800114a:	2000      	movs	r0, #0
 800114c:	f001 fe92 	bl	8002e74 <UART_API_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	f083 0301 	eor.w	r3, r3, #1
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <GNSS_API_Init+0x20>
		return false;
 800115c:	2300      	movs	r3, #0
 800115e:	e012      	b.n	8001186 <GNSS_API_Init+0x46>
	}

	if (gnss_api_thread == NULL) {
 8001160:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <GNSS_API_Init+0x50>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10d      	bne.n	8001184 <GNSS_API_Init+0x44>
		gnss_api_thread = osThreadNew(GNSS_API_Task, NULL, &gnss_api_thread_attr);
 8001168:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <GNSS_API_Init+0x54>)
 800116a:	2100      	movs	r1, #0
 800116c:	480a      	ldr	r0, [pc, #40]	@ (8001198 <GNSS_API_Init+0x58>)
 800116e:	f005 f8af 	bl	80062d0 <osThreadNew>
 8001172:	4603      	mov	r3, r0
 8001174:	4a06      	ldr	r2, [pc, #24]	@ (8001190 <GNSS_API_Init+0x50>)
 8001176:	6013      	str	r3, [r2, #0]
		if (gnss_api_thread == NULL) {
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <GNSS_API_Init+0x50>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <GNSS_API_Init+0x44>
			return false;
 8001180:	2300      	movs	r3, #0
 8001182:	e000      	b.n	8001186 <GNSS_API_Init+0x46>
		}
	}

	return true;
 8001184:	2301      	movs	r3, #1
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	0800cb84 	.word	0x0800cb84
 8001190:	2000020c 	.word	0x2000020c
 8001194:	0800cd28 	.word	0x0800cd28
 8001198:	0800119d 	.word	0x0800119d

0800119c <GNSS_API_Task>:

static void GNSS_API_Task (void *argument) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	while (1) {
		if (UART_API_Receive(GNSS_UART_PORT, &gnss_nmea_message, osWaitForever) == false) {
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	4913      	ldr	r1, [pc, #76]	@ (80011f8 <GNSS_API_Task+0x5c>)
 80011aa:	2000      	movs	r0, #0
 80011ac:	f001 ff86 	bl	80030bc <UART_API_Receive>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f083 0301 	eor.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d11a      	bne.n	80011f2 <GNSS_API_Task+0x56>
			continue;
		}

		if (CMD_API_Process(&gnss_nmea_message, &command_parser) == true) {
 80011bc:	490f      	ldr	r1, [pc, #60]	@ (80011fc <GNSS_API_Task+0x60>)
 80011be:	480e      	ldr	r0, [pc, #56]	@ (80011f8 <GNSS_API_Task+0x5c>)
 80011c0:	f7ff ff10 	bl	8000fe4 <CMD_API_Process>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10d      	bne.n	80011e6 <GNSS_API_Task+0x4a>

		} else {
			//debug_err
			sMessage_t reply = {.message = command_parser.reply, .message_length = command_parser.reply_size};
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <GNSS_API_Task+0x60>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <GNSS_API_Task+0x60>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60fb      	str	r3, [r7, #12]
			UART_API_Send(eUartApiPort_Usart2, &reply, osWaitForever);
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	f04f 32ff 	mov.w	r2, #4294967295
 80011de:	4619      	mov	r1, r3
 80011e0:	2001      	movs	r0, #1
 80011e2:	f001 ff09 	bl	8002ff8 <UART_API_Send>
		}

		HEAP_API_Free(gnss_nmea_message.message);
 80011e6:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <GNSS_API_Task+0x5c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fb60 	bl	80018b0 <HEAP_API_Free>
 80011f0:	e7d8      	b.n	80011a4 <GNSS_API_Task+0x8>
			continue;
 80011f2:	bf00      	nop
		if (UART_API_Receive(GNSS_UART_PORT, &gnss_nmea_message, osWaitForever) == false) {
 80011f4:	e7d6      	b.n	80011a4 <GNSS_API_Task+0x8>
 80011f6:	bf00      	nop
 80011f8:	20000210 	.word	0x20000210
 80011fc:	20000004 	.word	0x20000004

08001200 <GNSS_API_UpdateCoordinates>:
	}
}

void GNSS_API_UpdateCoordinates (double timestamp, double latitude, double longitude) {
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	ed87 0b04 	vstr	d0, [r7, #16]
 800120a:	ed87 1b02 	vstr	d1, [r7, #8]
 800120e:	ed87 2b00 	vstr	d2, [r7]
	current_gnss_data.timestamp = timestamp;
 8001212:	490a      	ldr	r1, [pc, #40]	@ (800123c <GNSS_API_UpdateCoordinates+0x3c>)
 8001214:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001218:	e9c1 2300 	strd	r2, r3, [r1]
	current_gnss_data.lat = latitude;
 800121c:	4907      	ldr	r1, [pc, #28]	@ (800123c <GNSS_API_UpdateCoordinates+0x3c>)
 800121e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001222:	e9c1 2302 	strd	r2, r3, [r1, #8]
	current_gnss_data.lon = longitude;
 8001226:	4905      	ldr	r1, [pc, #20]	@ (800123c <GNSS_API_UpdateCoordinates+0x3c>)
 8001228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800122c:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001230:	bf00      	nop
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000418 	.word	0x20000418

08001240 <GNSS_API_UpdateSpeed>:

void GNSS_API_UpdateSpeed (double speed) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	ed87 0b00 	vstr	d0, [r7]
	current_gnss_data.speed = speed;
 800124a:	4905      	ldr	r1, [pc, #20]	@ (8001260 <GNSS_API_UpdateSpeed+0x20>)
 800124c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001250:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	20000418 	.word	0x20000418

08001264 <GNSS_GnggaHandler>:
#define CHECKSUM_SYMBOL '*'
#define MESSAGE_LENGTH 64

static bool GNSS_IsNmeaValid (sCommandParams_t *cmd_params, eGnssCmd_t message_type);

bool GNSS_GnggaHandler (sCommandParams_t *cmd_params) {
 8001264:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001268:	b096      	sub	sp, #88	@ 0x58
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
	if (!CMD_API_CheckParams(cmd_params)) {
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff ff4c 	bl	800110c <CMD_API_CheckParams>
 8001274:	4603      	mov	r3, r0
 8001276:	f083 0301 	eor.w	r3, r3, #1
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d009      	beq.n	8001294 <GNSS_GnggaHandler+0x30>
		snprintf((char*)cmd_params->reply, cmd_params->reply_length, "Invalid command parameters.\r");
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6898      	ldr	r0, [r3, #8]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	4a99      	ldr	r2, [pc, #612]	@ (80014f0 <GNSS_GnggaHandler+0x28c>)
 800128a:	4619      	mov	r1, r3
 800128c:	f009 fb7a 	bl	800a984 <sniprintf>
		return false;
 8001290:	2300      	movs	r3, #0
 8001292:	e127      	b.n	80014e4 <GNSS_GnggaHandler+0x280>
	}

	if (GNSS_IsNmeaValid(cmd_params, eGnssCmd_Gngga) == false) {
 8001294:	2100      	movs	r1, #0
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f9ac 	bl	80015f4 <GNSS_IsNmeaValid>
 800129c:	4603      	mov	r3, r0
 800129e:	f083 0301 	eor.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d009      	beq.n	80012bc <GNSS_GnggaHandler+0x58>
		snprintf((char*)cmd_params->reply, cmd_params->reply_length, "NMEA message is invalid.\r\n");
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6898      	ldr	r0, [r3, #8]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4a90      	ldr	r2, [pc, #576]	@ (80014f4 <GNSS_GnggaHandler+0x290>)
 80012b2:	4619      	mov	r1, r3
 80012b4:	f009 fb66 	bl	800a984 <sniprintf>
		return false;
 80012b8:	2300      	movs	r3, #0
 80012ba:	e113      	b.n	80014e4 <GNSS_GnggaHandler+0x280>
	}

	const char *delimiter = ",";
 80012bc:	4b8e      	ldr	r3, [pc, #568]	@ (80014f8 <GNSS_GnggaHandler+0x294>)
 80012be:	647b      	str	r3, [r7, #68]	@ 0x44
	char *saveptr = NULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
	char *token = strtok_r((char*) cmd_params->params, delimiter, &saveptr);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f107 0214 	add.w	r2, r7, #20
 80012cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80012ce:	4618      	mov	r0, r3
 80012d0:	f009 fc5c 	bl	800ab8c <strtok_r>
 80012d4:	6438      	str	r0, [r7, #64]	@ 0x40
	if (token == NULL) {
 80012d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d109      	bne.n	80012f0 <GNSS_GnggaHandler+0x8c>
		snprintf((char*)cmd_params->reply, cmd_params->reply_length, "Missing timestamp parameter.\r");
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6898      	ldr	r0, [r3, #8]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	4a85      	ldr	r2, [pc, #532]	@ (80014fc <GNSS_GnggaHandler+0x298>)
 80012e6:	4619      	mov	r1, r3
 80012e8:	f009 fb4c 	bl	800a984 <sniprintf>
		return false;
 80012ec:	2300      	movs	r3, #0
 80012ee:	e0f9      	b.n	80014e4 <GNSS_GnggaHandler+0x280>
	}
	double timestamp = atof(token);
 80012f0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80012f2:	f008 fb11 	bl	8009918 <atof>
 80012f6:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
	token = strtok_r(NULL, delimiter, &saveptr);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	461a      	mov	r2, r3
 8001300:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001302:	2000      	movs	r0, #0
 8001304:	f009 fc42 	bl	800ab8c <strtok_r>
 8001308:	6438      	str	r0, [r7, #64]	@ 0x40
	if (token == NULL) {
 800130a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800130c:	2b00      	cmp	r3, #0
 800130e:	d109      	bne.n	8001324 <GNSS_GnggaHandler+0xc0>
		snprintf((char*)cmd_params->reply, cmd_params->reply_length, "Missing latitude parameter.\r");
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6898      	ldr	r0, [r3, #8]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	4a79      	ldr	r2, [pc, #484]	@ (8001500 <GNSS_GnggaHandler+0x29c>)
 800131a:	4619      	mov	r1, r3
 800131c:	f009 fb32 	bl	800a984 <sniprintf>
		return false;
 8001320:	2300      	movs	r3, #0
 8001322:	e0df      	b.n	80014e4 <GNSS_GnggaHandler+0x280>
	}
	double lat_deg = atoi(token) / 100;
 8001324:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001326:	f008 fafa 	bl	800991e <atoi>
 800132a:	4603      	mov	r3, r0
 800132c:	4a75      	ldr	r2, [pc, #468]	@ (8001504 <GNSS_GnggaHandler+0x2a0>)
 800132e:	fb82 1203 	smull	r1, r2, r2, r3
 8001332:	1152      	asrs	r2, r2, #5
 8001334:	17db      	asrs	r3, r3, #31
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f8f3 	bl	8000524 <__aeabi_i2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double lat_min = atof(token) - (lat_deg * 100);
 8001346:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001348:	f008 fae6 	bl	8009918 <atof>
 800134c:	ec59 8b10 	vmov	r8, r9, d0
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	4b6c      	ldr	r3, [pc, #432]	@ (8001508 <GNSS_GnggaHandler+0x2a4>)
 8001356:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800135a:	f7ff f94d 	bl	80005f8 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4640      	mov	r0, r8
 8001364:	4649      	mov	r1, r9
 8001366:	f7fe ff8f 	bl	8000288 <__aeabi_dsub>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double latitude = lat_deg + (lat_min / 60);
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b65      	ldr	r3, [pc, #404]	@ (800150c <GNSS_GnggaHandler+0x2a8>)
 8001378:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800137c:	f7ff fa66 	bl	800084c <__aeabi_ddiv>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001388:	f7fe ff80 	bl	800028c <__adddf3>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	token = strtok_r(NULL, delimiter, &saveptr);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	461a      	mov	r2, r3
 800139a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800139c:	2000      	movs	r0, #0
 800139e:	f009 fbf5 	bl	800ab8c <strtok_r>
 80013a2:	6438      	str	r0, [r7, #64]	@ 0x40
	if (token == NULL || (*token != 'N' && *token != 'S')) {
 80013a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <GNSS_GnggaHandler+0x156>
 80013aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b4e      	cmp	r3, #78	@ 0x4e
 80013b0:	d00d      	beq.n	80013ce <GNSS_GnggaHandler+0x16a>
 80013b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b53      	cmp	r3, #83	@ 0x53
 80013b8:	d009      	beq.n	80013ce <GNSS_GnggaHandler+0x16a>
		snprintf((char*)cmd_params->reply, cmd_params->reply_length, "Invalid latitude direction.\r");
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6898      	ldr	r0, [r3, #8]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	4a53      	ldr	r2, [pc, #332]	@ (8001510 <GNSS_GnggaHandler+0x2ac>)
 80013c4:	4619      	mov	r1, r3
 80013c6:	f009 fadd 	bl	800a984 <sniprintf>
		return false;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e08a      	b.n	80014e4 <GNSS_GnggaHandler+0x280>
	}
	if (*token == 'S') {
 80013ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b53      	cmp	r3, #83	@ 0x53
 80013d4:	d109      	bne.n	80013ea <GNSS_GnggaHandler+0x186>
		latitude = -latitude;
 80013d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	ed97 7b00 	vldr	d7, [r7]
 80013e6:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
	}
	token = strtok_r(NULL, delimiter, &saveptr);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	461a      	mov	r2, r3
 80013f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80013f2:	2000      	movs	r0, #0
 80013f4:	f009 fbca 	bl	800ab8c <strtok_r>
 80013f8:	6438      	str	r0, [r7, #64]	@ 0x40
	if (token == NULL) {
 80013fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d109      	bne.n	8001414 <GNSS_GnggaHandler+0x1b0>
		snprintf((char*)cmd_params->reply, cmd_params->reply_length, "Missing longitude parameter.\r");
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6898      	ldr	r0, [r3, #8]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	4a42      	ldr	r2, [pc, #264]	@ (8001514 <GNSS_GnggaHandler+0x2b0>)
 800140a:	4619      	mov	r1, r3
 800140c:	f009 faba 	bl	800a984 <sniprintf>
		return false;
 8001410:	2300      	movs	r3, #0
 8001412:	e067      	b.n	80014e4 <GNSS_GnggaHandler+0x280>
	}
	double lon_deg = atoi(token) / 100;
 8001414:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001416:	f008 fa82 	bl	800991e <atoi>
 800141a:	4603      	mov	r3, r0
 800141c:	4a39      	ldr	r2, [pc, #228]	@ (8001504 <GNSS_GnggaHandler+0x2a0>)
 800141e:	fb82 1203 	smull	r1, r2, r2, r3
 8001422:	1152      	asrs	r2, r2, #5
 8001424:	17db      	asrs	r3, r3, #31
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f87b 	bl	8000524 <__aeabi_i2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double lon_min = atof(token) - (lon_deg * 100);
 8001436:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001438:	f008 fa6e 	bl	8009918 <atof>
 800143c:	ec59 8b10 	vmov	r8, r9, d0
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	4b30      	ldr	r3, [pc, #192]	@ (8001508 <GNSS_GnggaHandler+0x2a4>)
 8001446:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800144a:	f7ff f8d5 	bl	80005f8 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4640      	mov	r0, r8
 8001454:	4649      	mov	r1, r9
 8001456:	f7fe ff17 	bl	8000288 <__aeabi_dsub>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double longitude = lon_deg + (lon_min / 60);
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b29      	ldr	r3, [pc, #164]	@ (800150c <GNSS_GnggaHandler+0x2a8>)
 8001468:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800146c:	f7ff f9ee 	bl	800084c <__aeabi_ddiv>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001478:	f7fe ff08 	bl	800028c <__adddf3>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	token = strtok_r(NULL, delimiter, &saveptr);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	461a      	mov	r2, r3
 800148a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800148c:	2000      	movs	r0, #0
 800148e:	f009 fb7d 	bl	800ab8c <strtok_r>
 8001492:	6438      	str	r0, [r7, #64]	@ 0x40
	if (token == NULL || (*token != 'E' && *token != 'W')) {
 8001494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <GNSS_GnggaHandler+0x246>
 800149a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b45      	cmp	r3, #69	@ 0x45
 80014a0:	d00d      	beq.n	80014be <GNSS_GnggaHandler+0x25a>
 80014a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b57      	cmp	r3, #87	@ 0x57
 80014a8:	d009      	beq.n	80014be <GNSS_GnggaHandler+0x25a>
		snprintf((char*)cmd_params->reply, cmd_params->reply_length, "Invalid longitude direction.\r");
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6898      	ldr	r0, [r3, #8]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	4a19      	ldr	r2, [pc, #100]	@ (8001518 <GNSS_GnggaHandler+0x2b4>)
 80014b4:	4619      	mov	r1, r3
 80014b6:	f009 fa65 	bl	800a984 <sniprintf>
		return false;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e012      	b.n	80014e4 <GNSS_GnggaHandler+0x280>
	}
	if (*token == 'W') {
 80014be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b57      	cmp	r3, #87	@ 0x57
 80014c4:	d105      	bne.n	80014d2 <GNSS_GnggaHandler+0x26e>
		longitude = -longitude;
 80014c6:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 80014c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014ca:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80014ce:	e9c7 4512 	strd	r4, r5, [r7, #72]	@ 0x48
	}

	GNSS_API_UpdateCoordinates(timestamp, latitude, longitude);
 80014d2:	ed97 2b12 	vldr	d2, [r7, #72]	@ 0x48
 80014d6:	ed97 1b14 	vldr	d1, [r7, #80]	@ 0x50
 80014da:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80014de:	f7ff fe8f 	bl	8001200 <GNSS_API_UpdateCoordinates>
	return true;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3758      	adds	r7, #88	@ 0x58
 80014e8:	46bd      	mov	sp, r7
 80014ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014ee:	bf00      	nop
 80014f0:	0800cb88 	.word	0x0800cb88
 80014f4:	0800cba8 	.word	0x0800cba8
 80014f8:	0800cbc4 	.word	0x0800cbc4
 80014fc:	0800cbc8 	.word	0x0800cbc8
 8001500:	0800cbe8 	.word	0x0800cbe8
 8001504:	51eb851f 	.word	0x51eb851f
 8001508:	40590000 	.word	0x40590000
 800150c:	404e0000 	.word	0x404e0000
 8001510:	0800cc08 	.word	0x0800cc08
 8001514:	0800cc28 	.word	0x0800cc28
 8001518:	0800cc48 	.word	0x0800cc48

0800151c <GNSS_GnvtgHandler>:

bool GNSS_GnvtgHandler (sCommandParams_t *cmd_params) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	@ 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	if (CMD_API_CheckParams(cmd_params) == false) {
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fdf1 	bl	800110c <CMD_API_CheckParams>
 800152a:	4603      	mov	r3, r0
 800152c:	f083 0301 	eor.w	r3, r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d009      	beq.n	800154a <GNSS_GnvtgHandler+0x2e>
		snprintf((char*)cmd_params->reply, cmd_params->reply_length, "Invalid command parameters.\r\n");
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6898      	ldr	r0, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	4a29      	ldr	r2, [pc, #164]	@ (80015e4 <GNSS_GnvtgHandler+0xc8>)
 8001540:	4619      	mov	r1, r3
 8001542:	f009 fa1f 	bl	800a984 <sniprintf>
		return false;
 8001546:	2300      	movs	r3, #0
 8001548:	e048      	b.n	80015dc <GNSS_GnvtgHandler+0xc0>
	}

	if (GNSS_IsNmeaValid(cmd_params, eGnssCmd_Gnvtg) == false) {
 800154a:	2101      	movs	r1, #1
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f851 	bl	80015f4 <GNSS_IsNmeaValid>
 8001552:	4603      	mov	r3, r0
 8001554:	f083 0301 	eor.w	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d009      	beq.n	8001572 <GNSS_GnvtgHandler+0x56>
		snprintf((char*)cmd_params->reply, cmd_params->reply_length, "NMEA message is invalid.\r\n");
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6898      	ldr	r0, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	4a20      	ldr	r2, [pc, #128]	@ (80015e8 <GNSS_GnvtgHandler+0xcc>)
 8001568:	4619      	mov	r1, r3
 800156a:	f009 fa0b 	bl	800a984 <sniprintf>
		return false;
 800156e:	2300      	movs	r3, #0
 8001570:	e034      	b.n	80015dc <GNSS_GnvtgHandler+0xc0>
	}

	const char *delimiter = ",";
 8001572:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <GNSS_GnvtgHandler+0xd0>)
 8001574:	61fb      	str	r3, [r7, #28]
	char *saveptr = NULL;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
	char *token = strtok_r((char*) cmd_params->params, delimiter, &saveptr);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f107 020c 	add.w	r2, r7, #12
 8001582:	69f9      	ldr	r1, [r7, #28]
 8001584:	4618      	mov	r0, r3
 8001586:	f009 fb01 	bl	800ab8c <strtok_r>
 800158a:	6278      	str	r0, [r7, #36]	@ 0x24
	for (size_t i = 0; i < SPEED_KMH_POS; i++) {
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
 8001590:	e00a      	b.n	80015a8 <GNSS_GnvtgHandler+0x8c>
		token = strtok_r(NULL, delimiter, &saveptr);
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	461a      	mov	r2, r3
 8001598:	69f9      	ldr	r1, [r7, #28]
 800159a:	2000      	movs	r0, #0
 800159c:	f009 faf6 	bl	800ab8c <strtok_r>
 80015a0:	6278      	str	r0, [r7, #36]	@ 0x24
	for (size_t i = 0; i < SPEED_KMH_POS; i++) {
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	3301      	adds	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d9f1      	bls.n	8001592 <GNSS_GnvtgHandler+0x76>
	}

	if (token == NULL) {
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <GNSS_GnvtgHandler+0xac>
		snprintf((char*)cmd_params->reply, cmd_params->reply_length, "Missing speed parameter.\r");
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6898      	ldr	r0, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4a0c      	ldr	r2, [pc, #48]	@ (80015f0 <GNSS_GnvtgHandler+0xd4>)
 80015be:	4619      	mov	r1, r3
 80015c0:	f009 f9e0 	bl	800a984 <sniprintf>
		return false;
 80015c4:	2300      	movs	r3, #0
 80015c6:	e009      	b.n	80015dc <GNSS_GnvtgHandler+0xc0>
	}

	double speed = atof(token);
 80015c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015ca:	f008 f9a5 	bl	8009918 <atof>
 80015ce:	ed87 0b04 	vstr	d0, [r7, #16]

	GNSS_API_UpdateSpeed(speed);
 80015d2:	ed97 0b04 	vldr	d0, [r7, #16]
 80015d6:	f7ff fe33 	bl	8001240 <GNSS_API_UpdateSpeed>
	return true;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3728      	adds	r7, #40	@ 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	0800cc68 	.word	0x0800cc68
 80015e8:	0800cba8 	.word	0x0800cba8
 80015ec:	0800cbc4 	.word	0x0800cbc4
 80015f0:	0800cc88 	.word	0x0800cc88

080015f4 <GNSS_IsNmeaValid>:


static bool GNSS_IsNmeaValid (sCommandParams_t *cmd_params, eGnssCmd_t message_type) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b096      	sub	sp, #88	@ 0x58
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
	char *checksum_pos = strrchr((char*)cmd_params->params, CHECKSUM_SYMBOL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	212a      	movs	r1, #42	@ 0x2a
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fa82 	bl	800ab10 <strrchr>
 800160c:	64f8      	str	r0, [r7, #76]	@ 0x4c
	checksum_pos++;
 800160e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001610:	3301      	adds	r3, #1
 8001612:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int checksum_val = (int)strtol(checksum_pos, NULL, 16);
 8001614:	2210      	movs	r2, #16
 8001616:	2100      	movs	r1, #0
 8001618:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800161a:	f009 f8e7 	bl	800a7ec <strtol>
 800161e:	64b8      	str	r0, [r7, #72]	@ 0x48

	if (checksum_pos == NULL) {
 8001620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <GNSS_IsNmeaValid+0x36>
		return false;
 8001626:	2300      	movs	r3, #0
 8001628:	e043      	b.n	80016b2 <GNSS_IsNmeaValid+0xbe>
	}

	char full_message[MESSAGE_LENGTH] = {0};
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	2240      	movs	r2, #64	@ 0x40
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f009 fa1f 	bl	800aa76 <memset>
	switch (message_type) {
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <GNSS_IsNmeaValid+0x50>
 800163e:	2b01      	cmp	r3, #1
 8001640:	d008      	beq.n	8001654 <GNSS_IsNmeaValid+0x60>
		case eGnssCmd_Gnvtg: {
			strncpy(full_message, "GNVTG,", MESSAGE_LENGTH);
			break;
		}
		default:
			break;
 8001642:	e00f      	b.n	8001664 <GNSS_IsNmeaValid+0x70>
			strncpy(full_message, "GNGGA,", MESSAGE_LENGTH);
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	2240      	movs	r2, #64	@ 0x40
 800164a:	491c      	ldr	r1, [pc, #112]	@ (80016bc <GNSS_IsNmeaValid+0xc8>)
 800164c:	4618      	mov	r0, r3
 800164e:	f009 fa4c 	bl	800aaea <strncpy>
			break;
 8001652:	e007      	b.n	8001664 <GNSS_IsNmeaValid+0x70>
			strncpy(full_message, "GNVTG,", MESSAGE_LENGTH);
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	2240      	movs	r2, #64	@ 0x40
 800165a:	4919      	ldr	r1, [pc, #100]	@ (80016c0 <GNSS_IsNmeaValid+0xcc>)
 800165c:	4618      	mov	r0, r3
 800165e:	f009 fa44 	bl	800aaea <strncpy>
			break;
 8001662:	bf00      	nop
	}

	strncat(full_message, (const char*)cmd_params->params, cmd_params->params_length);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4618      	mov	r0, r3
 8001672:	f009 fa15 	bl	800aaa0 <strncat>
	int checksum = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	657b      	str	r3, [r7, #84]	@ 0x54

	char *ptr = full_message;
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	653b      	str	r3, [r7, #80]	@ 0x50

	while (*ptr && (*ptr != CHECKSUM_SYMBOL)) {
 8001680:	e008      	b.n	8001694 <GNSS_IsNmeaValid+0xa0>
		checksum ^= (unsigned char)(*ptr);
 8001682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800168a:	4053      	eors	r3, r2
 800168c:	657b      	str	r3, [r7, #84]	@ 0x54
		ptr++;
 800168e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001690:	3301      	adds	r3, #1
 8001692:	653b      	str	r3, [r7, #80]	@ 0x50
	while (*ptr && (*ptr != CHECKSUM_SYMBOL)) {
 8001694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <GNSS_IsNmeaValid+0xb0>
 800169c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80016a2:	d1ee      	bne.n	8001682 <GNSS_IsNmeaValid+0x8e>
	}

	return (checksum == checksum_val);
 80016a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80016a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016a8:	429a      	cmp	r2, r3
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3758      	adds	r7, #88	@ 0x58
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	0800cca4 	.word	0x0800cca4
 80016c0:	0800ccac 	.word	0x0800ccac

080016c4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	041a      	lsls	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	619a      	str	r2, [r3, #24]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016f0:	4907      	ldr	r1, [pc, #28]	@ (8001710 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016f8:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4013      	ands	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40023800 	.word	0x40023800

08001714 <GPIO_Driver_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool GPIO_Driver_Init (void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
    LL_GPIO_InitTypeDef gpio_init_struct = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]
    bool is_init_successful = true;
 800172a:	2301      	movs	r3, #1
 800172c:	77fb      	strb	r3, [r7, #31]

    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 800172e:	2300      	movs	r3, #0
 8001730:	77bb      	strb	r3, [r7, #30]
 8001732:	e053      	b.n	80017dc <GPIO_Driver_Init+0xc8>
        LL_AHB1_GRP1_EnableClock(g_static_gpio_lut[pin].clock);
 8001734:	7fbb      	ldrb	r3, [r7, #30]
 8001736:	4a2d      	ldr	r2, [pc, #180]	@ (80017ec <GPIO_Driver_Init+0xd8>)
 8001738:	015b      	lsls	r3, r3, #5
 800173a:	4413      	add	r3, r2
 800173c:	3318      	adds	r3, #24
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ffcf 	bl	80016e4 <LL_AHB1_GRP1_EnableClock>
        LL_GPIO_ResetOutputPin(g_static_gpio_lut[pin].port, g_static_gpio_lut[pin].pin);
 8001746:	7fbb      	ldrb	r3, [r7, #30]
 8001748:	4a28      	ldr	r2, [pc, #160]	@ (80017ec <GPIO_Driver_Init+0xd8>)
 800174a:	015b      	lsls	r3, r3, #5
 800174c:	4413      	add	r3, r2
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	7fbb      	ldrb	r3, [r7, #30]
 8001752:	4926      	ldr	r1, [pc, #152]	@ (80017ec <GPIO_Driver_Init+0xd8>)
 8001754:	015b      	lsls	r3, r3, #5
 8001756:	440b      	add	r3, r1
 8001758:	3304      	adds	r3, #4
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	4610      	mov	r0, r2
 8001760:	f7ff ffb0 	bl	80016c4 <LL_GPIO_ResetOutputPin>

        gpio_init_struct.Pin = g_static_gpio_lut[pin].pin;
 8001764:	7fbb      	ldrb	r3, [r7, #30]
 8001766:	4a21      	ldr	r2, [pc, #132]	@ (80017ec <GPIO_Driver_Init+0xd8>)
 8001768:	015b      	lsls	r3, r3, #5
 800176a:	4413      	add	r3, r2
 800176c:	3304      	adds	r3, #4
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	607b      	str	r3, [r7, #4]
        gpio_init_struct.Mode = g_static_gpio_lut[pin].mode;
 8001772:	7fbb      	ldrb	r3, [r7, #30]
 8001774:	4a1d      	ldr	r2, [pc, #116]	@ (80017ec <GPIO_Driver_Init+0xd8>)
 8001776:	015b      	lsls	r3, r3, #5
 8001778:	4413      	add	r3, r2
 800177a:	3308      	adds	r3, #8
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	60bb      	str	r3, [r7, #8]
        gpio_init_struct.Speed = g_static_gpio_lut[pin].speed;
 8001780:	7fbb      	ldrb	r3, [r7, #30]
 8001782:	4a1a      	ldr	r2, [pc, #104]	@ (80017ec <GPIO_Driver_Init+0xd8>)
 8001784:	015b      	lsls	r3, r3, #5
 8001786:	4413      	add	r3, r2
 8001788:	330c      	adds	r3, #12
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
        gpio_init_struct.OutputType = g_static_gpio_lut[pin].output;
 800178e:	7fbb      	ldrb	r3, [r7, #30]
 8001790:	4a16      	ldr	r2, [pc, #88]	@ (80017ec <GPIO_Driver_Init+0xd8>)
 8001792:	015b      	lsls	r3, r3, #5
 8001794:	4413      	add	r3, r2
 8001796:	3310      	adds	r3, #16
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	613b      	str	r3, [r7, #16]
        gpio_init_struct.Pull = g_static_gpio_lut[pin].pull;
 800179c:	7fbb      	ldrb	r3, [r7, #30]
 800179e:	4a13      	ldr	r2, [pc, #76]	@ (80017ec <GPIO_Driver_Init+0xd8>)
 80017a0:	015b      	lsls	r3, r3, #5
 80017a2:	4413      	add	r3, r2
 80017a4:	3314      	adds	r3, #20
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	617b      	str	r3, [r7, #20]
        gpio_init_struct.Alternate = g_static_gpio_lut[pin].alternate;
 80017aa:	7fbb      	ldrb	r3, [r7, #30]
 80017ac:	4a0f      	ldr	r2, [pc, #60]	@ (80017ec <GPIO_Driver_Init+0xd8>)
 80017ae:	015b      	lsls	r3, r3, #5
 80017b0:	4413      	add	r3, r2
 80017b2:	331c      	adds	r3, #28
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	61bb      	str	r3, [r7, #24]

        if (LL_GPIO_Init(g_static_gpio_lut[pin].port, &gpio_init_struct) != SUCCESS) {
 80017b8:	7fbb      	ldrb	r3, [r7, #30]
 80017ba:	4a0c      	ldr	r2, [pc, #48]	@ (80017ec <GPIO_Driver_Init+0xd8>)
 80017bc:	015b      	lsls	r3, r3, #5
 80017be:	4413      	add	r3, r2
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	1d3a      	adds	r2, r7, #4
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 ff26 	bl	8005618 <LL_GPIO_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <GPIO_Driver_Init+0xc2>
            is_init_successful = false;
 80017d2:	2300      	movs	r3, #0
 80017d4:	77fb      	strb	r3, [r7, #31]
    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 80017d6:	7fbb      	ldrb	r3, [r7, #30]
 80017d8:	3301      	adds	r3, #1
 80017da:	77bb      	strb	r3, [r7, #30]
 80017dc:	7fbb      	ldrb	r3, [r7, #30]
 80017de:	2b05      	cmp	r3, #5
 80017e0:	d9a8      	bls.n	8001734 <GPIO_Driver_Init+0x20>
        }
    }

    return is_init_successful;
 80017e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	0800cd6c 	.word	0x0800cd6c

080017f0 <HEAP_API_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool HEAP_API_Init (void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
    if (heap_mutex != NULL) {
 80017f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <HEAP_API_Init+0x30>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HEAP_API_Init+0x10>
        return false;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e00c      	b.n	800181a <HEAP_API_Init+0x2a>
    }

    heap_mutex = osMutexNew(&g_static_uart_mutex_attr);
 8001800:	4808      	ldr	r0, [pc, #32]	@ (8001824 <HEAP_API_Init+0x34>)
 8001802:	f004 fe12 	bl	800642a <osMutexNew>
 8001806:	4603      	mov	r3, r0
 8001808:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <HEAP_API_Init+0x30>)
 800180a:	6013      	str	r3, [r2, #0]
    if (heap_mutex == NULL) {
 800180c:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <HEAP_API_Init+0x30>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HEAP_API_Init+0x28>
        return false;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <HEAP_API_Init+0x2a>
    }

    return true;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000438 	.word	0x20000438
 8001824:	0800ce2c 	.word	0x0800ce2c

08001828 <HEAP_API_Alloc>:

void *HEAP_API_Alloc (bool is_calloc, size_t number, size_t size) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	73fb      	strb	r3, [r7, #15]
    if ((number <= 0) || (size <= 0)) {
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <HEAP_API_Alloc+0x1a>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HEAP_API_Alloc+0x1e>
        return NULL;
 8001842:	2300      	movs	r3, #0
 8001844:	e02e      	b.n	80018a4 <HEAP_API_Alloc+0x7c>
    }

    if (heap_mutex == NULL) {
 8001846:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <HEAP_API_Alloc+0x84>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HEAP_API_Alloc+0x2a>
        return NULL;
 800184e:	2300      	movs	r3, #0
 8001850:	e028      	b.n	80018a4 <HEAP_API_Alloc+0x7c>
    }

    if (osMutexAcquire(heap_mutex, osWaitForever) != osOK) {
 8001852:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <HEAP_API_Alloc+0x84>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f04f 31ff 	mov.w	r1, #4294967295
 800185a:	4618      	mov	r0, r3
 800185c:	f004 fe6b 	bl	8006536 <osMutexAcquire>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HEAP_API_Alloc+0x42>
        return NULL;
 8001866:	2300      	movs	r3, #0
 8001868:	e01c      	b.n	80018a4 <HEAP_API_Alloc+0x7c>
    }

    void *ptr = is_calloc ? calloc(number, size) : malloc(number * size);
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HEAP_API_Alloc+0x54>
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	68b8      	ldr	r0, [r7, #8]
 8001874:	f008 f858 	bl	8009928 <calloc>
 8001878:	4603      	mov	r3, r0
 800187a:	e007      	b.n	800188c <HEAP_API_Alloc+0x64>
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f008 f86b 	bl	8009960 <malloc>
 800188a:	4603      	mov	r3, r0
 800188c:	617b      	str	r3, [r7, #20]

    if (osMutexRelease(heap_mutex) != osOK){
 800188e:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <HEAP_API_Alloc+0x84>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f004 fe9a 	bl	80065cc <osMutexRelease>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HEAP_API_Alloc+0x7a>
        return NULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HEAP_API_Alloc+0x7c>
    }

    return ptr;
 80018a2:	697b      	ldr	r3, [r7, #20]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000438 	.word	0x20000438

080018b0 <HEAP_API_Free>:

void HEAP_API_Free (void *memory_pointer) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    if (memory_pointer == NULL) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d018      	beq.n	80018f0 <HEAP_API_Free+0x40>
        return;
    }

    if (heap_mutex == NULL) {
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <HEAP_API_Free+0x50>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d016      	beq.n	80018f4 <HEAP_API_Free+0x44>
        return;
    }

    if (osMutexAcquire(heap_mutex, osWaitForever) != osOK) {
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <HEAP_API_Free+0x50>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f04f 31ff 	mov.w	r1, #4294967295
 80018ce:	4618      	mov	r0, r3
 80018d0:	f004 fe31 	bl	8006536 <osMutexAcquire>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10e      	bne.n	80018f8 <HEAP_API_Free+0x48>
        return;
    }

    free(memory_pointer);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f008 f848 	bl	8009970 <free>

    if (osMutexRelease(heap_mutex) != osOK) {
 80018e0:	4b07      	ldr	r3, [pc, #28]	@ (8001900 <HEAP_API_Free+0x50>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f004 fe71 	bl	80065cc <osMutexRelease>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	e004      	b.n	80018fa <HEAP_API_Free+0x4a>
        return;
 80018f0:	bf00      	nop
 80018f2:	e002      	b.n	80018fa <HEAP_API_Free+0x4a>
        return;
 80018f4:	bf00      	nop
 80018f6:	e000      	b.n	80018fa <HEAP_API_Free+0x4a>
        return;
 80018f8:	bf00      	nop
        return;
    }
}
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000438 	.word	0x20000438

08001904 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f043 0201 	orr.w	r2, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	601a      	str	r2, [r3, #0]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	601a      	str	r2, [r3, #0]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	601a      	str	r2, [r3, #0]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60da      	str	r2, [r3, #12]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f023 0201 	bic.w	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60da      	str	r2, [r3, #12]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ba:	2b80      	cmp	r3, #128	@ 0x80
 80019bc:	bf0c      	ite	eq
 80019be:	2301      	moveq	r3, #1
 80019c0:	2300      	movne	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	bf0c      	ite	eq
 8001a0a:	2301      	moveq	r3, #1
 8001a0c:	2300      	movne	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	bf0c      	ite	eq
 8001a30:	2301      	moveq	r3, #1
 8001a32:	2300      	movne	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001a50:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001a58:	68fb      	ldr	r3, [r7, #12]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	601a      	str	r2, [r3, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	611a      	str	r2, [r3, #16]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ada:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001adc:	4907      	ldr	r1, [pc, #28]	@ (8001afc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ae6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4013      	ands	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40023800 	.word	0x40023800

08001b00 <I2C_Driver_Init>:
		.enable_clock = LL_APB1_GRP1_EnableClock,
		.clock = LL_APB1_GRP1_PERIPH_I2C1
	}
};

bool I2C_Driver_Init (eI2cPort_t i2c_port) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	@ 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
	LL_I2C_InitTypeDef i2c_init_stuct = {0};
 8001b0a:	f107 0308 	add.w	r3, r7, #8
 8001b0e:	2220      	movs	r2, #32
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f008 ffaf 	bl	800aa76 <memset>

	g_static_i2c_lut[i2c_port].enable_clock(g_static_i2c_lut[i2c_port].clock);
 8001b18:	79fa      	ldrb	r2, [r7, #7]
 8001b1a:	4956      	ldr	r1, [pc, #344]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	440b      	add	r3, r1
 8001b26:	3328      	adds	r3, #40	@ 0x28
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4798      	blx	r3

	LL_I2C_DisableOwnAddress2(g_static_i2c_lut[i2c_port].port);
 8001b32:	79fa      	ldrb	r2, [r7, #7]
 8001b34:	494f      	ldr	r1, [pc, #316]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	440b      	add	r3, r1
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff21 	bl	800198a <LL_I2C_DisableOwnAddress2>
	LL_I2C_DisableGeneralCall(g_static_i2c_lut[i2c_port].port);
 8001b48:	79fa      	ldrb	r2, [r7, #7]
 8001b4a:	494a      	ldr	r1, [pc, #296]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	440b      	add	r3, r1
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fef3 	bl	8001944 <LL_I2C_DisableGeneralCall>
	LL_I2C_EnableClockStretching(g_static_i2c_lut[i2c_port].port);
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	4944      	ldr	r1, [pc, #272]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	440b      	add	r3, r1
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fed8 	bl	8001924 <LL_I2C_EnableClockStretching>

	i2c_init_stuct.PeripheralMode = g_static_i2c_lut[i2c_port].periph_mode;
 8001b74:	79fa      	ldrb	r2, [r7, #7]
 8001b76:	493f      	ldr	r1, [pc, #252]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	440b      	add	r3, r1
 8001b82:	3304      	adds	r3, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60bb      	str	r3, [r7, #8]
	i2c_init_stuct.ClockSpeed = g_static_i2c_lut[i2c_port].clock_speed;
 8001b88:	79fa      	ldrb	r2, [r7, #7]
 8001b8a:	493a      	ldr	r1, [pc, #232]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	440b      	add	r3, r1
 8001b96:	3308      	adds	r3, #8
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	60fb      	str	r3, [r7, #12]
	i2c_init_stuct.DutyCycle = g_static_i2c_lut[i2c_port].duty_cycle;
 8001b9c:	79fa      	ldrb	r2, [r7, #7]
 8001b9e:	4935      	ldr	r1, [pc, #212]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	440b      	add	r3, r1
 8001baa:	330c      	adds	r3, #12
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	613b      	str	r3, [r7, #16]
	i2c_init_stuct.AnalogFilter = g_static_i2c_lut[i2c_port].analog_filter;
 8001bb0:	79fa      	ldrb	r2, [r7, #7]
 8001bb2:	4930      	ldr	r1, [pc, #192]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3310      	adds	r3, #16
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	617b      	str	r3, [r7, #20]
	i2c_init_stuct.DigitalFilter = g_static_i2c_lut[i2c_port].digital_filter;
 8001bc4:	79fa      	ldrb	r2, [r7, #7]
 8001bc6:	492b      	ldr	r1, [pc, #172]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3314      	adds	r3, #20
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	61bb      	str	r3, [r7, #24]
	i2c_init_stuct.OwnAddress1 = g_static_i2c_lut[i2c_port].own_address;
 8001bd8:	79fa      	ldrb	r2, [r7, #7]
 8001bda:	4926      	ldr	r1, [pc, #152]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	440b      	add	r3, r1
 8001be6:	3318      	adds	r3, #24
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	61fb      	str	r3, [r7, #28]
	i2c_init_stuct.TypeAcknowledge = g_static_i2c_lut[i2c_port].type_acknowledge;
 8001bec:	79fa      	ldrb	r2, [r7, #7]
 8001bee:	4921      	ldr	r1, [pc, #132]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	440b      	add	r3, r1
 8001bfa:	331c      	adds	r3, #28
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	623b      	str	r3, [r7, #32]
	i2c_init_stuct.OwnAddrSize = g_static_i2c_lut[i2c_port].own_addr_size;
 8001c00:	79fa      	ldrb	r2, [r7, #7]
 8001c02:	491c      	ldr	r1, [pc, #112]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3320      	adds	r3, #32
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24

	if (LL_I2C_Init(g_static_i2c_lut[i2c_port].port, &i2c_init_stuct) != SUCCESS ) {
 8001c14:	79fa      	ldrb	r2, [r7, #7]
 8001c16:	4917      	ldr	r1, [pc, #92]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	440b      	add	r3, r1
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f107 0208 	add.w	r2, r7, #8
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fe82 	bl	8005934 <LL_I2C_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <I2C_Driver_Init+0x13a>
		return false;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e017      	b.n	8001c6a <I2C_Driver_Init+0x16a>
	}

	LL_I2C_SetOwnAddress2(g_static_i2c_lut[i2c_port].port, 0);
 8001c3a:	79fa      	ldrb	r2, [r7, #7]
 8001c3c:	490d      	ldr	r1, [pc, #52]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	440b      	add	r3, r1
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fe89 	bl	8001964 <LL_I2C_SetOwnAddress2>
	LL_I2C_Enable(g_static_i2c_lut[i2c_port].port);
 8001c52:	79fa      	ldrb	r2, [r7, #7]
 8001c54:	4907      	ldr	r1, [pc, #28]	@ (8001c74 <I2C_Driver_Init+0x174>)
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	440b      	add	r3, r1
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fe4e 	bl	8001904 <LL_I2C_Enable>

	return true;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3728      	adds	r7, #40	@ 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	0800ce3c 	.word	0x0800ce3c

08001c78 <I2C_Driver_Write>:

bool I2C_Driver_Write (eI2cPort_t i2c, uint8_t *buffer, size_t byte_count) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	73fb      	strb	r3, [r7, #15]
    if ((i2c >= eI2cPort_Last) || (buffer == NULL) || (byte_count == 0)) {
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <I2C_Driver_Write+0x20>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <I2C_Driver_Write+0x20>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <I2C_Driver_Write+0x24>
        return false;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e09e      	b.n	8001dda <I2C_Driver_Write+0x162>
    }

    uint8_t address = g_static_i2c_lut[i2c].dev_addr << 1;
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	4951      	ldr	r1, [pc, #324]	@ (8001de4 <I2C_Driver_Write+0x16c>)
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	440b      	add	r3, r1
 8001caa:	3324      	adds	r3, #36	@ 0x24
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	75fb      	strb	r3, [r7, #23]
    uint8_t address_w = address | 0;
 8001cb2:	7dfb      	ldrb	r3, [r7, #23]
 8001cb4:	75bb      	strb	r3, [r7, #22]

    LL_I2C_GenerateStartCondition(g_static_i2c_lut[i2c].port);
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	494a      	ldr	r1, [pc, #296]	@ (8001de4 <I2C_Driver_Write+0x16c>)
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	440b      	add	r3, r1
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fecd 	bl	8001a66 <LL_I2C_GenerateStartCondition>
    while (!LL_I2C_IsActiveFlag_SB(g_static_i2c_lut[i2c].port)) {};
 8001ccc:	bf00      	nop
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	4944      	ldr	r1, [pc, #272]	@ (8001de4 <I2C_Driver_Write+0x16c>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	440b      	add	r3, r1
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fe89 	bl	80019f6 <LL_I2C_IsActiveFlag_SB>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f1      	beq.n	8001cce <I2C_Driver_Write+0x56>

    LL_I2C_TransmitData8(g_static_i2c_lut[i2c].port, address_w);
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	493d      	ldr	r1, [pc, #244]	@ (8001de4 <I2C_Driver_Write+0x16c>)
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	440b      	add	r3, r1
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	7dba      	ldrb	r2, [r7, #22]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fed1 	bl	8001aa6 <LL_I2C_TransmitData8>
    while (!LL_I2C_IsActiveFlag_ADDR(g_static_i2c_lut[i2c].port)) {};
 8001d04:	bf00      	nop
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	4936      	ldr	r1, [pc, #216]	@ (8001de4 <I2C_Driver_Write+0x16c>)
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	440b      	add	r3, r1
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fe80 	bl	8001a1c <LL_I2C_IsActiveFlag_ADDR>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f1      	beq.n	8001d06 <I2C_Driver_Write+0x8e>
    LL_I2C_ClearFlag_ADDR(g_static_i2c_lut[i2c].port);
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	492f      	ldr	r1, [pc, #188]	@ (8001de4 <I2C_Driver_Write+0x16c>)
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	440b      	add	r3, r1
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fe85 	bl	8001a42 <LL_I2C_ClearFlag_ADDR>

    while (byte_count > 0) {
 8001d38:	e022      	b.n	8001d80 <I2C_Driver_Write+0x108>
        while (!LL_I2C_IsActiveFlag_TXE(g_static_i2c_lut[i2c].port)) {};
 8001d3a:	bf00      	nop
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	4929      	ldr	r1, [pc, #164]	@ (8001de4 <I2C_Driver_Write+0x16c>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	440b      	add	r3, r1
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fe2c 	bl	80019aa <LL_I2C_IsActiveFlag_TXE>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f1      	beq.n	8001d3c <I2C_Driver_Write+0xc4>

        LL_I2C_TransmitData8(g_static_i2c_lut[i2c].port, *buffer);
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	4922      	ldr	r1, [pc, #136]	@ (8001de4 <I2C_Driver_Write+0x16c>)
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	440b      	add	r3, r1
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f7ff fe99 	bl	8001aa6 <LL_I2C_TransmitData8>
        buffer++;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	3301      	adds	r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
        byte_count--;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
    while (byte_count > 0) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1d9      	bne.n	8001d3a <I2C_Driver_Write+0xc2>
    }

    while (!LL_I2C_IsActiveFlag_TXE(g_static_i2c_lut[i2c].port)) {};
 8001d86:	bf00      	nop
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	4916      	ldr	r1, [pc, #88]	@ (8001de4 <I2C_Driver_Write+0x16c>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	440b      	add	r3, r1
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fe06 	bl	80019aa <LL_I2C_IsActiveFlag_TXE>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f1      	beq.n	8001d88 <I2C_Driver_Write+0x110>
	while (!LL_I2C_IsActiveFlag_BTF(g_static_i2c_lut[i2c].port)) {};
 8001da4:	bf00      	nop
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	490e      	ldr	r1, [pc, #56]	@ (8001de4 <I2C_Driver_Write+0x16c>)
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	440b      	add	r3, r1
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fe0a 	bl	80019d0 <LL_I2C_IsActiveFlag_BTF>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f1      	beq.n	8001da6 <I2C_Driver_Write+0x12e>

    LL_I2C_GenerateStopCondition(g_static_i2c_lut[i2c].port);
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	4907      	ldr	r1, [pc, #28]	@ (8001de4 <I2C_Driver_Write+0x16c>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	440b      	add	r3, r1
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fe57 	bl	8001a86 <LL_I2C_GenerateStopCondition>

    return true;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	0800ce3c 	.word	0x0800ce3c

08001de8 <LL_I2C_EnableClockStretching>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	601a      	str	r2, [r3, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_I2C_DisableGeneralCall>:
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	601a      	str	r2, [r3, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_I2C_SetOwnAddress2>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60da      	str	r2, [r3, #12]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_I2C_DisableOwnAddress2>:
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f023 0201 	bic.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60da      	str	r2, [r3, #12]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	60da      	str	r2, [r3, #12]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	615a      	str	r2, [r3, #20]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001ec6:	4a17      	ldr	r2, [pc, #92]	@ (8001f24 <LL_SYSCFG_SetEXTISource+0x68>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	3302      	adds	r3, #2
 8001ece:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	0c1b      	lsrs	r3, r3, #16
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	ea02 0103 	and.w	r1, r2, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	0c1b      	lsrs	r3, r3, #16
 8001ee0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	e003      	b.n	8001f00 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	fa03 f202 	lsl.w	r2, r3, r2
 8001f08:	4806      	ldr	r0, [pc, #24]	@ (8001f24 <LL_SYSCFG_SetEXTISource+0x68>)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	3302      	adds	r3, #2
 8001f12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40013800 	.word	0x40013800

08001f28 <LL_GPIO_SetPinMode>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b08b      	sub	sp, #44	@ 0x2c
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	613b      	str	r3, [r7, #16]
  return result;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e003      	b.n	8001f5a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2103      	movs	r1, #3
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	401a      	ands	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	61fb      	str	r3, [r7, #28]
  return result;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	e003      	b.n	8001f88 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	431a      	orrs	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	601a      	str	r2, [r3, #0]
}
 8001f96:	bf00      	nop
 8001f98:	372c      	adds	r7, #44	@ 0x2c
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_GPIO_SetPinPull>:
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b08b      	sub	sp, #44	@ 0x2c
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	613b      	str	r3, [r7, #16]
  return result;
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001fc8:	2320      	movs	r3, #32
 8001fca:	e003      	b.n	8001fd4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2103      	movs	r1, #3
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	401a      	ands	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	61fb      	str	r3, [r7, #28]
  return result;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e003      	b.n	8002002 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	431a      	orrs	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	60da      	str	r2, [r3, #12]
}
 8002010:	bf00      	nop
 8002012:	372c      	adds	r7, #44	@ 0x2c
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_GPIO_ResetOutputPin>:
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	041a      	lsls	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	619a      	str	r2, [r3, #24]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <LL_AHB1_GRP1_EnableClock>:
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002044:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002048:	4907      	ldr	r1, [pc, #28]	@ (8002068 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4313      	orrs	r3, r2
 800204e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002052:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4013      	ands	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	40023800 	.word	0x40023800

0800206c <LL_APB1_GRP1_EnableClock>:
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002074:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002076:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002078:	4907      	ldr	r1, [pc, #28]	@ (8002098 <LL_APB1_GRP1_EnableClock+0x2c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4313      	orrs	r3, r2
 800207e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002080:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002082:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4013      	ands	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40023800 	.word	0x40023800

0800209c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80020a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020a8:	4907      	ldr	r1, [pc, #28]	@ (80020c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80020b0:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80020b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4013      	ands	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40023800 	.word	0x40023800

080020cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d0:	f001 fb9c 	bl	800380c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d4:	f000 f856 	bl	8002184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020d8:	f000 f9e0 	bl	800249c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020dc:	f000 f964 	bl	80023a8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80020e0:	f000 f8bc 	bl	800225c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80020e4:	f000 f910 	bl	8002308 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80020e8:	f000 f9ae 	bl	8002448 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  if (HEAP_API_Init() == false) {
 80020ec:	f7ff fb80 	bl	80017f0 <HEAP_API_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f083 0301 	eor.w	r3, r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <main+0x34>
	  Error_Handler();
 80020fc:	f000 fa40 	bl	8002580 <Error_Handler>
  }
  if (GPIO_Driver_Init() == false) {
 8002100:	f7ff fb08 	bl	8001714 <GPIO_Driver_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	f083 0301 	eor.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <main+0x48>
	  Error_Handler();
 8002110:	f000 fa36 	bl	8002580 <Error_Handler>
  }
  if (ACCEL_API_Init() == false) {
 8002114:	f7fe fef6 	bl	8000f04 <ACCEL_API_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	f083 0301 	eor.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <main+0x5c>
	  Error_Handler();
 8002124:	f000 fa2c 	bl	8002580 <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002128:	f004 f888 	bl	800623c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800212c:	4a11      	ldr	r2, [pc, #68]	@ (8002174 <main+0xa8>)
 800212e:	2100      	movs	r1, #0
 8002130:	4811      	ldr	r0, [pc, #68]	@ (8002178 <main+0xac>)
 8002132:	f004 f8cd 	bl	80062d0 <osThreadNew>
 8002136:	4603      	mov	r3, r0
 8002138:	4a10      	ldr	r2, [pc, #64]	@ (800217c <main+0xb0>)
 800213a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if (UART_API_Init(eUartApiPort_Usart2, 0, "\r\n", 2) == false) {
 800213c:	2302      	movs	r3, #2
 800213e:	4a10      	ldr	r2, [pc, #64]	@ (8002180 <main+0xb4>)
 8002140:	2100      	movs	r1, #0
 8002142:	2001      	movs	r0, #1
 8002144:	f000 fe96 	bl	8002e74 <UART_API_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	f083 0301 	eor.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <main+0x8c>
	  Error_Handler();
 8002154:	f000 fa14 	bl	8002580 <Error_Handler>
  }
  if (GNSS_API_Init() == false) {
 8002158:	f7fe fff2 	bl	8001140 <GNSS_API_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	f083 0301 	eor.w	r3, r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <main+0xa0>
	  Error_Handler();
 8002168:	f000 fa0a 	bl	8002580 <Error_Handler>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800216c:	f004 f88a 	bl	8006284 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <main+0xa4>
 8002174:	0800ce6c 	.word	0x0800ce6c
 8002178:	0800254d 	.word	0x0800254d
 800217c:	20000484 	.word	0x20000484
 8002180:	0800ccd0 	.word	0x0800ccd0

08002184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b094      	sub	sp, #80	@ 0x50
 8002188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218a:	f107 0320 	add.w	r3, r7, #32
 800218e:	2230      	movs	r2, #48	@ 0x30
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f008 fc6f 	bl	800aa76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	4b29      	ldr	r3, [pc, #164]	@ (8002254 <SystemClock_Config+0xd0>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	4a28      	ldr	r2, [pc, #160]	@ (8002254 <SystemClock_Config+0xd0>)
 80021b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b8:	4b26      	ldr	r3, [pc, #152]	@ (8002254 <SystemClock_Config+0xd0>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80021c4:	2300      	movs	r3, #0
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	4b23      	ldr	r3, [pc, #140]	@ (8002258 <SystemClock_Config+0xd4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80021d0:	4a21      	ldr	r2, [pc, #132]	@ (8002258 <SystemClock_Config+0xd4>)
 80021d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002258 <SystemClock_Config+0xd4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021e4:	2302      	movs	r3, #2
 80021e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021e8:	2301      	movs	r3, #1
 80021ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021ec:	2310      	movs	r3, #16
 80021ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f0:	2302      	movs	r3, #2
 80021f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021f4:	2300      	movs	r3, #0
 80021f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80021f8:	2310      	movs	r3, #16
 80021fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002200:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002202:	2304      	movs	r3, #4
 8002204:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002206:	2307      	movs	r3, #7
 8002208:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800220a:	f107 0320 	add.w	r3, r7, #32
 800220e:	4618      	mov	r0, r3
 8002210:	f001 fda4 	bl	8003d5c <HAL_RCC_OscConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800221a:	f000 f9b1 	bl	8002580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800221e:	230f      	movs	r3, #15
 8002220:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002222:	2302      	movs	r3, #2
 8002224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800222a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800222e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	2102      	movs	r1, #2
 800223a:	4618      	mov	r0, r3
 800223c:	f002 f806 	bl	800424c <HAL_RCC_ClockConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002246:	f000 f99b 	bl	8002580 <Error_Handler>
  }
}
 800224a:	bf00      	nop
 800224c:	3750      	adds	r7, #80	@ 0x50
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40007000 	.word	0x40007000

0800225c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08e      	sub	sp, #56	@ 0x38
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002262:	f107 0318 	add.w	r3, r7, #24
 8002266:	2220      	movs	r2, #32
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f008 fc03 	bl	800aa76 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	463b      	mov	r3, r7
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]
 800227e:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002280:	2002      	movs	r0, #2
 8002282:	f7ff fedb 	bl	800203c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002286:	23c0      	movs	r3, #192	@ 0xc0
 8002288:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800228a:	2302      	movs	r3, #2
 800228c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800228e:	2303      	movs	r3, #3
 8002290:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002292:	2301      	movs	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800229a:	2304      	movs	r3, #4
 800229c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229e:	463b      	mov	r3, r7
 80022a0:	4619      	mov	r1, r3
 80022a2:	4816      	ldr	r0, [pc, #88]	@ (80022fc <MX_I2C1_Init+0xa0>)
 80022a4:	f003 f9b8 	bl	8005618 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80022a8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80022ac:	f7ff fede 	bl	800206c <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80022b0:	4813      	ldr	r0, [pc, #76]	@ (8002300 <MX_I2C1_Init+0xa4>)
 80022b2:	f7ff fdcc 	bl	8001e4e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80022b6:	4812      	ldr	r0, [pc, #72]	@ (8002300 <MX_I2C1_Init+0xa4>)
 80022b8:	f7ff fda6 	bl	8001e08 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80022bc:	4810      	ldr	r0, [pc, #64]	@ (8002300 <MX_I2C1_Init+0xa4>)
 80022be:	f7ff fd93 	bl	8001de8 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80022c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002304 <MX_I2C1_Init+0xa8>)
 80022c8:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80022d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022d6:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80022d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022dc:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80022de:	f107 0318 	add.w	r3, r7, #24
 80022e2:	4619      	mov	r1, r3
 80022e4:	4806      	ldr	r0, [pc, #24]	@ (8002300 <MX_I2C1_Init+0xa4>)
 80022e6:	f003 fb25 	bl	8005934 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80022ea:	2100      	movs	r1, #0
 80022ec:	4804      	ldr	r0, [pc, #16]	@ (8002300 <MX_I2C1_Init+0xa4>)
 80022ee:	f7ff fd9b 	bl	8001e28 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	3738      	adds	r7, #56	@ 0x38
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40020400 	.word	0x40020400
 8002300:	40005400 	.word	0x40005400
 8002304:	000186a0 	.word	0x000186a0

08002308 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08e      	sub	sp, #56	@ 0x38
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800230e:	f107 031c 	add.w	r3, r7, #28
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	611a      	str	r2, [r3, #16]
 800231e:	615a      	str	r2, [r3, #20]
 8002320:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
 8002330:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002332:	2010      	movs	r0, #16
 8002334:	f7ff feb2 	bl	800209c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002338:	2001      	movs	r0, #1
 800233a:	f7ff fe7f 	bl	800203c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800233e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002342:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002344:	2302      	movs	r3, #2
 8002346:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002348:	2303      	movs	r3, #3
 800234a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002354:	2307      	movs	r3, #7
 8002356:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	4619      	mov	r1, r3
 800235c:	4810      	ldr	r0, [pc, #64]	@ (80023a0 <MX_USART1_UART_Init+0x98>)
 800235e:	f003 f95b 	bl	8005618 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002362:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002366:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002370:	2300      	movs	r3, #0
 8002372:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002374:	230c      	movs	r3, #12
 8002376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002378:	2300      	movs	r3, #0
 800237a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800237c:	2300      	movs	r3, #0
 800237e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002380:	f107 031c 	add.w	r3, r7, #28
 8002384:	4619      	mov	r1, r3
 8002386:	4807      	ldr	r0, [pc, #28]	@ (80023a4 <MX_USART1_UART_Init+0x9c>)
 8002388:	f003 feb0 	bl	80060ec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800238c:	4805      	ldr	r0, [pc, #20]	@ (80023a4 <MX_USART1_UART_Init+0x9c>)
 800238e:	f7ff fd7e 	bl	8001e8e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002392:	4804      	ldr	r0, [pc, #16]	@ (80023a4 <MX_USART1_UART_Init+0x9c>)
 8002394:	f7ff fd6b 	bl	8001e6e <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002398:	bf00      	nop
 800239a:	3738      	adds	r7, #56	@ 0x38
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40011000 	.word	0x40011000

080023a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08e      	sub	sp, #56	@ 0x38
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80023ae:	f107 031c 	add.w	r3, r7, #28
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]
 80023bc:	611a      	str	r2, [r3, #16]
 80023be:	615a      	str	r2, [r3, #20]
 80023c0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
 80023d0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80023d2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80023d6:	f7ff fe49 	bl	800206c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80023da:	2001      	movs	r0, #1
 80023dc:	f7ff fe2e 	bl	800203c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023e0:	230c      	movs	r3, #12
 80023e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023e4:	2302      	movs	r3, #2
 80023e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80023f4:	2307      	movs	r3, #7
 80023f6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	4619      	mov	r1, r3
 80023fc:	4810      	ldr	r0, [pc, #64]	@ (8002440 <MX_USART2_UART_Init+0x98>)
 80023fe:	f003 f90b 	bl	8005618 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002402:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002406:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002408:	2300      	movs	r3, #0
 800240a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002410:	2300      	movs	r3, #0
 8002412:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002414:	230c      	movs	r3, #12
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002418:	2300      	movs	r3, #0
 800241a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800241c:	2300      	movs	r3, #0
 800241e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	4619      	mov	r1, r3
 8002426:	4807      	ldr	r0, [pc, #28]	@ (8002444 <MX_USART2_UART_Init+0x9c>)
 8002428:	f003 fe60 	bl	80060ec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800242c:	4805      	ldr	r0, [pc, #20]	@ (8002444 <MX_USART2_UART_Init+0x9c>)
 800242e:	f7ff fd2e 	bl	8001e8e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002432:	4804      	ldr	r0, [pc, #16]	@ (8002444 <MX_USART2_UART_Init+0x9c>)
 8002434:	f7ff fd1b 	bl	8001e6e <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002438:	bf00      	nop
 800243a:	3738      	adds	r7, #56	@ 0x38
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40020000 	.word	0x40020000
 8002444:	40004400 	.word	0x40004400

08002448 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <MX_USART6_UART_Init+0x4c>)
 800244e:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <MX_USART6_UART_Init+0x50>)
 8002450:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <MX_USART6_UART_Init+0x4c>)
 8002454:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002458:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800245a:	4b0e      	ldr	r3, [pc, #56]	@ (8002494 <MX_USART6_UART_Init+0x4c>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002460:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <MX_USART6_UART_Init+0x4c>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002466:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <MX_USART6_UART_Init+0x4c>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800246c:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <MX_USART6_UART_Init+0x4c>)
 800246e:	220c      	movs	r2, #12
 8002470:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002472:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <MX_USART6_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002478:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <MX_USART6_UART_Init+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800247e:	4805      	ldr	r0, [pc, #20]	@ (8002494 <MX_USART6_UART_Init+0x4c>)
 8002480:	f002 fba4 	bl	8004bcc <HAL_UART_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800248a:	f000 f879 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2000043c 	.word	0x2000043c
 8002498:	40011400 	.word	0x40011400

0800249c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80024a2:	f107 0318 	add.w	r3, r7, #24
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	463b      	mov	r3, r7
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]
 80024ba:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80024bc:	2004      	movs	r0, #4
 80024be:	f7ff fdbd 	bl	800203c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80024c2:	2080      	movs	r0, #128	@ 0x80
 80024c4:	f7ff fdba 	bl	800203c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80024c8:	2001      	movs	r0, #1
 80024ca:	f7ff fdb7 	bl	800203c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80024ce:	2002      	movs	r0, #2
 80024d0:	f7ff fdb4 	bl	800203c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80024d4:	2120      	movs	r1, #32
 80024d6:	481a      	ldr	r0, [pc, #104]	@ (8002540 <MX_GPIO_Init+0xa4>)
 80024d8:	f7ff fda0 	bl	800201c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80024dc:	4919      	ldr	r1, [pc, #100]	@ (8002544 <MX_GPIO_Init+0xa8>)
 80024de:	2002      	movs	r0, #2
 80024e0:	f7ff fcec 	bl	8001ebc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80024e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024e8:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80024ea:	2301      	movs	r3, #1
 80024ec:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80024ee:	2300      	movs	r3, #0
 80024f0:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80024f2:	2302      	movs	r3, #2
 80024f4:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 fec2 	bl	8005284 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8002500:	2200      	movs	r2, #0
 8002502:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002506:	4810      	ldr	r0, [pc, #64]	@ (8002548 <MX_GPIO_Init+0xac>)
 8002508:	f7ff fd4b 	bl	8001fa2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800250c:	2200      	movs	r2, #0
 800250e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002512:	480d      	ldr	r0, [pc, #52]	@ (8002548 <MX_GPIO_Init+0xac>)
 8002514:	f7ff fd08 	bl	8001f28 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8002518:	2320      	movs	r3, #32
 800251a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800251c:	2301      	movs	r3, #1
 800251e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800252c:	463b      	mov	r3, r7
 800252e:	4619      	mov	r1, r3
 8002530:	4803      	ldr	r0, [pc, #12]	@ (8002540 <MX_GPIO_Init+0xa4>)
 8002532:	f003 f871 	bl	8005618 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002536:	bf00      	nop
 8002538:	3720      	adds	r7, #32
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40020000 	.word	0x40020000
 8002544:	00f00003 	.word	0x00f00003
 8002548:	40020800 	.word	0x40020800

0800254c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002554:	2001      	movs	r0, #1
 8002556:	f003 ff4d 	bl	80063f4 <osDelay>
 800255a:	e7fb      	b.n	8002554 <StartDefaultTask+0x8>

0800255c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a04      	ldr	r2, [pc, #16]	@ (800257c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800256e:	f001 f96f 	bl	8003850 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40000400 	.word	0x40000400

08002580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002584:	b672      	cpsid	i
}
 8002586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <Error_Handler+0x8>

0800258c <RingBufferInit>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
sRingBuffer_t *RingBufferInit (size_t capacity) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
    if (capacity <= 0) {
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <RingBufferInit+0x12>
        return NULL;
 800259a:	2300      	movs	r3, #0
 800259c:	e028      	b.n	80025f0 <RingBufferInit+0x64>
    }

    sRingBuffer_t *r_buffer = (sRingBuffer_t *)calloc(1, sizeof(sRingBuffer_t));
 800259e:	2114      	movs	r1, #20
 80025a0:	2001      	movs	r0, #1
 80025a2:	f007 f9c1 	bl	8009928 <calloc>
 80025a6:	4603      	mov	r3, r0
 80025a8:	60fb      	str	r3, [r7, #12]
    if (r_buffer == NULL) {
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <RingBufferInit+0x28>
        return NULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e01d      	b.n	80025f0 <RingBufferInit+0x64>
    }

    r_buffer->buffer = (uint8_t *)calloc(capacity, sizeof(uint8_t));
 80025b4:	2101      	movs	r1, #1
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f007 f9b6 	bl	8009928 <calloc>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	601a      	str	r2, [r3, #0]
    if (r_buffer->buffer == NULL) {
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d104      	bne.n	80025d6 <RingBufferInit+0x4a>
        free(r_buffer);
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f007 f9cf 	bl	8009970 <free>
        return NULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e00c      	b.n	80025f0 <RingBufferInit+0x64>
    }

    r_buffer->capacity = capacity;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	605a      	str	r2, [r3, #4]
    r_buffer->head = 0;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
    r_buffer->tail = 0;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	60da      	str	r2, [r3, #12]
    r_buffer->count = 0;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]

    return r_buffer;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <RingBufferIsEmpty>:


bool RingBufferIsEmpty (sRingBuffer_t *r_buffer) {
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
    if (r_buffer == NULL) {
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <RingBufferIsEmpty+0x12>
        return true;
 8002606:	2301      	movs	r3, #1
 8002608:	e006      	b.n	8002618 <RingBufferIsEmpty+0x20>
    }

    return r_buffer->count == 0;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <RingBufferIsFull>:

bool RingBufferIsFull (sRingBuffer_t *r_buffer) {
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
    if (r_buffer == NULL) {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <RingBufferIsFull+0x12>
        return true;
 8002632:	2301      	movs	r3, #1
 8002634:	e008      	b.n	8002648 <RingBufferIsFull+0x24>
    }

    return r_buffer->count == r_buffer->capacity;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	429a      	cmp	r2, r3
 8002640:	bf0c      	ite	eq
 8002642:	2301      	moveq	r3, #1
 8002644:	2300      	movne	r3, #0
 8002646:	b2db      	uxtb	r3, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <RingBufferEnqueue>:


bool RingBufferEnqueue (sRingBuffer_t *r_buffer, uint8_t data) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
    if (r_buffer == NULL) {
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <RingBufferEnqueue+0x16>
        return false;
 8002666:	2300      	movs	r3, #0
 8002668:	e030      	b.n	80026cc <RingBufferEnqueue+0x78>
    }

    if (RingBufferIsFull(r_buffer)) {
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffda 	bl	8002624 <RingBufferIsFull>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <RingBufferEnqueue+0x3a>
        r_buffer->tail = (r_buffer->tail + 1) % r_buffer->capacity;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	3301      	adds	r3, #1
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6852      	ldr	r2, [r2, #4]
 8002680:	fbb3 f1f2 	udiv	r1, r3, r2
 8002684:	fb01 f202 	mul.w	r2, r1, r2
 8002688:	1a9a      	subs	r2, r3, r2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60da      	str	r2, [r3, #12]
    }

    r_buffer->buffer[r_buffer->head] = data;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	4413      	add	r3, r2
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	701a      	strb	r2, [r3, #0]
    r_buffer->head = (r_buffer->head + 1) % r_buffer->capacity;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	3301      	adds	r3, #1
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6852      	ldr	r2, [r2, #4]
 80026a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80026aa:	fb01 f202 	mul.w	r2, r1, r2
 80026ae:	1a9a      	subs	r2, r3, r2
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	609a      	str	r2, [r3, #8]

    if (r_buffer->count < r_buffer->capacity) {
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d204      	bcs.n	80026ca <RingBufferEnqueue+0x76>
        r_buffer->count++;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	611a      	str	r2, [r3, #16]
    }

    return true;
 80026ca:	2301      	movs	r3, #1
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <RingBufferDequeue>:

bool RingBufferDequeue (sRingBuffer_t *r_buffer, uint8_t *data) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
    if ((RingBufferIsEmpty(r_buffer)) || (data == NULL)) {
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ff8a 	bl	80025f8 <RingBufferIsEmpty>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <RingBufferDequeue+0x1c>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <RingBufferDequeue+0x20>
        return false;
 80026f0:	2300      	movs	r3, #0
 80026f2:	e019      	b.n	8002728 <RingBufferDequeue+0x54>
    }

    *data = r_buffer->buffer[r_buffer->tail];
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4413      	add	r3, r2
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	701a      	strb	r2, [r3, #0]
    r_buffer->tail = (r_buffer->tail + 1) % r_buffer->capacity;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	3301      	adds	r3, #1
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6852      	ldr	r2, [r2, #4]
 800270e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002712:	fb01 f202 	mul.w	r2, r1, r2
 8002716:	1a9a      	subs	r2, r3, r2
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	60da      	str	r2, [r3, #12]
    r_buffer->count--;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	611a      	str	r2, [r3, #16]

    return true;
 8002726:	2301      	movs	r3, #1
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	4b12      	ldr	r3, [pc, #72]	@ (8002784 <HAL_MspInit+0x54>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	4a11      	ldr	r2, [pc, #68]	@ (8002784 <HAL_MspInit+0x54>)
 8002740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002744:	6453      	str	r3, [r2, #68]	@ 0x44
 8002746:	4b0f      	ldr	r3, [pc, #60]	@ (8002784 <HAL_MspInit+0x54>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <HAL_MspInit+0x54>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	4a0a      	ldr	r2, [pc, #40]	@ (8002784 <HAL_MspInit+0x54>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	@ 0x40
 8002762:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <HAL_MspInit+0x54>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	210f      	movs	r1, #15
 8002772:	f06f 0001 	mvn.w	r0, #1
 8002776:	f001 f943 	bl	8003a00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800

08002788 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	@ 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a19      	ldr	r2, [pc, #100]	@ (800280c <HAL_UART_MspInit+0x84>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d12b      	bne.n	8002802 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	4b18      	ldr	r3, [pc, #96]	@ (8002810 <HAL_UART_MspInit+0x88>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	4a17      	ldr	r2, [pc, #92]	@ (8002810 <HAL_UART_MspInit+0x88>)
 80027b4:	f043 0320 	orr.w	r3, r3, #32
 80027b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <HAL_UART_MspInit+0x88>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <HAL_UART_MspInit+0x88>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	4a10      	ldr	r2, [pc, #64]	@ (8002810 <HAL_UART_MspInit+0x88>)
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <HAL_UART_MspInit+0x88>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027e2:	23c0      	movs	r3, #192	@ 0xc0
 80027e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027f2:	2308      	movs	r3, #8
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	4805      	ldr	r0, [pc, #20]	@ (8002814 <HAL_UART_MspInit+0x8c>)
 80027fe:	f001 f929 	bl	8003a54 <HAL_GPIO_Init>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8002802:	bf00      	nop
 8002804:	3728      	adds	r7, #40	@ 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40011400 	.word	0x40011400
 8002810:	40023800 	.word	0x40023800
 8002814:	40020800 	.word	0x40020800

08002818 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08e      	sub	sp, #56	@ 0x38
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	4b33      	ldr	r3, [pc, #204]	@ (80028fc <HAL_InitTick+0xe4>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002830:	4a32      	ldr	r2, [pc, #200]	@ (80028fc <HAL_InitTick+0xe4>)
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	6413      	str	r3, [r2, #64]	@ 0x40
 8002838:	4b30      	ldr	r3, [pc, #192]	@ (80028fc <HAL_InitTick+0xe4>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002844:	f107 0210 	add.w	r2, r7, #16
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f001 ff1c 	bl	800468c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800285e:	f001 feed 	bl	800463c <HAL_RCC_GetPCLK1Freq>
 8002862:	6378      	str	r0, [r7, #52]	@ 0x34
 8002864:	e004      	b.n	8002870 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002866:	f001 fee9 	bl	800463c <HAL_RCC_GetPCLK1Freq>
 800286a:	4603      	mov	r3, r0
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002872:	4a23      	ldr	r2, [pc, #140]	@ (8002900 <HAL_InitTick+0xe8>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	0c9b      	lsrs	r3, r3, #18
 800287a:	3b01      	subs	r3, #1
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800287e:	4b21      	ldr	r3, [pc, #132]	@ (8002904 <HAL_InitTick+0xec>)
 8002880:	4a21      	ldr	r2, [pc, #132]	@ (8002908 <HAL_InitTick+0xf0>)
 8002882:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002884:	4b1f      	ldr	r3, [pc, #124]	@ (8002904 <HAL_InitTick+0xec>)
 8002886:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800288a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800288c:	4a1d      	ldr	r2, [pc, #116]	@ (8002904 <HAL_InitTick+0xec>)
 800288e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002890:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002892:	4b1c      	ldr	r3, [pc, #112]	@ (8002904 <HAL_InitTick+0xec>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002898:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <HAL_InitTick+0xec>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289e:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <HAL_InitTick+0xec>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80028a4:	4817      	ldr	r0, [pc, #92]	@ (8002904 <HAL_InitTick+0xec>)
 80028a6:	f001 ff23 	bl	80046f0 <HAL_TIM_Base_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80028b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d11b      	bne.n	80028f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80028b8:	4812      	ldr	r0, [pc, #72]	@ (8002904 <HAL_InitTick+0xec>)
 80028ba:	f001 ff73 	bl	80047a4 <HAL_TIM_Base_Start_IT>
 80028be:	4603      	mov	r3, r0
 80028c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80028c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d111      	bne.n	80028f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028cc:	201d      	movs	r0, #29
 80028ce:	f001 f8b3 	bl	8003a38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0f      	cmp	r3, #15
 80028d6:	d808      	bhi.n	80028ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80028d8:	2200      	movs	r2, #0
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	201d      	movs	r0, #29
 80028de:	f001 f88f 	bl	8003a00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028e2:	4a0a      	ldr	r2, [pc, #40]	@ (800290c <HAL_InitTick+0xf4>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	e002      	b.n	80028f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80028f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3738      	adds	r7, #56	@ 0x38
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	431bde83 	.word	0x431bde83
 8002904:	20000488 	.word	0x20000488
 8002908:	40000400 	.word	0x40000400
 800290c:	20000018 	.word	0x20000018

08002910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002914:	bf00      	nop
 8002916:	e7fd      	b.n	8002914 <NMI_Handler+0x4>

08002918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <HardFault_Handler+0x4>

08002920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <MemManage_Handler+0x4>

08002928 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800292c:	bf00      	nop
 800292e:	e7fd      	b.n	800292c <BusFault_Handler+0x4>

08002930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002934:	bf00      	nop
 8002936:	e7fd      	b.n	8002934 <UsageFault_Handler+0x4>

08002938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800294c:	4802      	ldr	r0, [pc, #8]	@ (8002958 <TIM3_IRQHandler+0x10>)
 800294e:	f001 ff8b 	bl	8004868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000488 	.word	0x20000488

0800295c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return 1;
 8002960:	2301      	movs	r3, #1
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <_kill>:

int _kill(int pid, int sig)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002976:	f008 f963 	bl	800ac40 <__errno>
 800297a:	4603      	mov	r3, r0
 800297c:	2216      	movs	r2, #22
 800297e:	601a      	str	r2, [r3, #0]
  return -1;
 8002980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <_exit>:

void _exit (int status)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002994:	f04f 31ff 	mov.w	r1, #4294967295
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ffe7 	bl	800296c <_kill>
  while (1) {}    /* Make sure we hang here */
 800299e:	bf00      	nop
 80029a0:	e7fd      	b.n	800299e <_exit+0x12>

080029a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e00a      	b.n	80029ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029b4:	f3af 8000 	nop.w
 80029b8:	4601      	mov	r1, r0
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	60ba      	str	r2, [r7, #8]
 80029c0:	b2ca      	uxtb	r2, r1
 80029c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3301      	adds	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	dbf0      	blt.n	80029b4 <_read+0x12>
  }

  return len;
 80029d2:	687b      	ldr	r3, [r7, #4]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e009      	b.n	8002a02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	60ba      	str	r2, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3301      	adds	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	dbf1      	blt.n	80029ee <_write+0x12>
  }
  return len;
 8002a0a:	687b      	ldr	r3, [r7, #4]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <_close>:

int _close(int file)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a3c:	605a      	str	r2, [r3, #4]
  return 0;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_isatty>:

int _isatty(int file)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a54:	2301      	movs	r3, #1
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a84:	4a14      	ldr	r2, [pc, #80]	@ (8002ad8 <_sbrk+0x5c>)
 8002a86:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <_sbrk+0x60>)
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a90:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <_sbrk+0x64>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d102      	bne.n	8002a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a98:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <_sbrk+0x64>)
 8002a9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ae4 <_sbrk+0x68>)
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <_sbrk+0x64>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d207      	bcs.n	8002abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aac:	f008 f8c8 	bl	800ac40 <__errno>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aba:	e009      	b.n	8002ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002abc:	4b08      	ldr	r3, [pc, #32]	@ (8002ae0 <_sbrk+0x64>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ac2:	4b07      	ldr	r3, [pc, #28]	@ (8002ae0 <_sbrk+0x64>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	4a05      	ldr	r2, [pc, #20]	@ (8002ae0 <_sbrk+0x64>)
 8002acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ace:	68fb      	ldr	r3, [r7, #12]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20018000 	.word	0x20018000
 8002adc:	00000400 	.word	0x00000400
 8002ae0:	200004d0 	.word	0x200004d0
 8002ae4:	20004fd8 	.word	0x20004fd8

08002ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <SystemInit+0x20>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af2:	4a05      	ldr	r2, [pc, #20]	@ (8002b08 <SystemInit+0x20>)
 8002af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <UART_API_Task>:
static void UART_API_Task (void *argument);
static bool UART_API_IsDelimiterReceived (sUartApiTaskData_t *task_data);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void UART_API_Task (void *argument) {
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b089      	sub	sp, #36	@ 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
    while (1) {
        for (eUartApiPort_t port = eUartApiPort_First; port < eUartApiPort_Last; port++) {
 8002b14:	2300      	movs	r3, #0
 8002b16:	77fb      	strb	r3, [r7, #31]
 8002b18:	e16f      	b.n	8002dfa <UART_API_Task+0x2ee>
            if (g_dynamic_uart_api_lut[port].is_initialized == false) {
 8002b1a:	7ffa      	ldrb	r2, [r7, #31]
 8002b1c:	49b9      	ldr	r1, [pc, #740]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3315      	adds	r3, #21
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	f083 0301 	eor.w	r3, r3, #1
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 8155 	bne.w	8002de2 <UART_API_Task+0x2d6>
                continue;
            }

            switch (g_dynamic_uart_api_lut[port].state) {
 8002b38:	7ffa      	ldrb	r2, [r7, #31]
 8002b3a:	49b2      	ldr	r1, [pc, #712]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3314      	adds	r3, #20
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	f000 8117 	beq.w	8002d7e <UART_API_Task+0x272>
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	f300 8148 	bgt.w	8002de6 <UART_API_Task+0x2da>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <UART_API_Task+0x56>
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	f000 80f7 	beq.w	8002d4e <UART_API_Task+0x242>

                    g_dynamic_uart_api_lut[port].state = eUartApiState_Initialize;
                    break;
                }
                default: {
                    break;
 8002b60:	e141      	b.n	8002de6 <UART_API_Task+0x2da>
                    g_dynamic_uart_api_lut[port].buffer = HEAP_API_Calloc(g_static_uart_api_lut[port].buffer_size, sizeof(char));
 8002b62:	7ffa      	ldrb	r2, [r7, #31]
 8002b64:	49a8      	ldr	r1, [pc, #672]	@ (8002e08 <UART_API_Task+0x2fc>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	440b      	add	r3, r1
 8002b70:	3304      	adds	r3, #4
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	7ffc      	ldrb	r4, [r7, #31]
 8002b76:	2201      	movs	r2, #1
 8002b78:	4619      	mov	r1, r3
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f7fe fe54 	bl	8001828 <HEAP_API_Alloc>
 8002b80:	4602      	mov	r2, r0
 8002b82:	49a0      	ldr	r1, [pc, #640]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002b84:	4623      	mov	r3, r4
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	1b1b      	subs	r3, r3, r4
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3304      	adds	r3, #4
 8002b90:	601a      	str	r2, [r3, #0]
                    if (g_dynamic_uart_api_lut[port].buffer == NULL) {
 8002b92:	7ffa      	ldrb	r2, [r7, #31]
 8002b94:	499b      	ldr	r1, [pc, #620]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8120 	beq.w	8002dea <UART_API_Task+0x2de>
                    g_dynamic_uart_api_lut[port].index = 0;
 8002baa:	7ffa      	ldrb	r2, [r7, #31]
 8002bac:	4995      	ldr	r1, [pc, #596]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3308      	adds	r3, #8
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
                    g_dynamic_uart_api_lut[port].state = eUartApiState_Collect;
 8002bbe:	7ffa      	ldrb	r2, [r7, #31]
 8002bc0:	4990      	ldr	r1, [pc, #576]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	3314      	adds	r3, #20
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]
                    while (UART_Driver_Read(port, &symbol) == true) {
 8002bd2:	e0bc      	b.n	8002d4e <UART_API_Task+0x242>
                        g_dynamic_uart_api_lut[port].buffer[g_dynamic_uart_api_lut[port].index] = symbol;
 8002bd4:	7ffa      	ldrb	r2, [r7, #31]
 8002bd6:	498b      	ldr	r1, [pc, #556]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3304      	adds	r3, #4
 8002be4:	6819      	ldr	r1, [r3, #0]
 8002be6:	7ffa      	ldrb	r2, [r7, #31]
 8002be8:	4886      	ldr	r0, [pc, #536]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4403      	add	r3, r0
 8002bf4:	3308      	adds	r3, #8
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	440b      	add	r3, r1
 8002bfa:	7dfa      	ldrb	r2, [r7, #23]
 8002bfc:	701a      	strb	r2, [r3, #0]
                        g_dynamic_uart_api_lut[port].index++;
 8002bfe:	7ffa      	ldrb	r2, [r7, #31]
 8002c00:	4980      	ldr	r1, [pc, #512]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3308      	adds	r3, #8
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	1c59      	adds	r1, r3, #1
 8002c12:	487c      	ldr	r0, [pc, #496]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4403      	add	r3, r0
 8002c1e:	3308      	adds	r3, #8
 8002c20:	6019      	str	r1, [r3, #0]
                        if (g_dynamic_uart_api_lut[port].index >= g_static_uart_api_lut[port].buffer_size) {
 8002c22:	7ffa      	ldrb	r2, [r7, #31]
 8002c24:	4977      	ldr	r1, [pc, #476]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002c26:	4613      	mov	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	3308      	adds	r3, #8
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	7ffa      	ldrb	r2, [r7, #31]
 8002c36:	4874      	ldr	r0, [pc, #464]	@ (8002e08 <UART_API_Task+0x2fc>)
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	4403      	add	r3, r0
 8002c42:	3304      	adds	r3, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4299      	cmp	r1, r3
 8002c48:	d320      	bcc.n	8002c8c <UART_API_Task+0x180>
                            memset(g_dynamic_uart_api_lut[port].buffer, 0, g_static_uart_api_lut[port].buffer_size);
 8002c4a:	7ffa      	ldrb	r2, [r7, #31]
 8002c4c:	496d      	ldr	r1, [pc, #436]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	3304      	adds	r3, #4
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	7ffa      	ldrb	r2, [r7, #31]
 8002c5e:	496a      	ldr	r1, [pc, #424]	@ (8002e08 <UART_API_Task+0x2fc>)
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	440b      	add	r3, r1
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2100      	movs	r1, #0
 8002c72:	f007 ff00 	bl	800aa76 <memset>
                            g_dynamic_uart_api_lut[port].index = 0;
 8002c76:	7ffa      	ldrb	r2, [r7, #31]
 8002c78:	4962      	ldr	r1, [pc, #392]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	3308      	adds	r3, #8
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
                            break;
 8002c8a:	e06d      	b.n	8002d68 <UART_API_Task+0x25c>
                        if (symbol != g_dynamic_uart_api_lut[port].delimiter[g_dynamic_uart_api_lut[port].delimiter_length - 1]) {
 8002c8c:	7ffa      	ldrb	r2, [r7, #31]
 8002c8e:	495d      	ldr	r1, [pc, #372]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	330c      	adds	r3, #12
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	7ffa      	ldrb	r2, [r7, #31]
 8002ca0:	4858      	ldr	r0, [pc, #352]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4403      	add	r3, r0
 8002cac:	3310      	adds	r3, #16
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	440b      	add	r3, r1
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d154      	bne.n	8002d66 <UART_API_Task+0x25a>
                        if (UART_API_IsDelimiterReceived(&g_dynamic_uart_api_lut[port]) == true) {
 8002cbc:	7ffa      	ldrb	r2, [r7, #31]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4a4f      	ldr	r2, [pc, #316]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002cc8:	4413      	add	r3, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f89e 	bl	8002e0c <UART_API_IsDelimiterReceived>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d03b      	beq.n	8002d4e <UART_API_Task+0x242>
                        	g_dynamic_uart_api_lut[port].index -= g_dynamic_uart_api_lut[port].delimiter_length;
 8002cd6:	7ffa      	ldrb	r2, [r7, #31]
 8002cd8:	494a      	ldr	r1, [pc, #296]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	6819      	ldr	r1, [r3, #0]
 8002ce8:	7ffa      	ldrb	r2, [r7, #31]
 8002cea:	4846      	ldr	r0, [pc, #280]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4403      	add	r3, r0
 8002cf6:	3310      	adds	r3, #16
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	7ffa      	ldrb	r2, [r7, #31]
 8002cfc:	1ac9      	subs	r1, r1, r3
 8002cfe:	4841      	ldr	r0, [pc, #260]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4403      	add	r3, r0
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	6019      	str	r1, [r3, #0]
                        	g_dynamic_uart_api_lut[port].buffer[g_dynamic_uart_api_lut[port].index] = '\0';
 8002d0e:	7ffa      	ldrb	r2, [r7, #31]
 8002d10:	493c      	ldr	r1, [pc, #240]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	7ffa      	ldrb	r2, [r7, #31]
 8002d22:	4838      	ldr	r0, [pc, #224]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4403      	add	r3, r0
 8002d2e:	3308      	adds	r3, #8
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	440b      	add	r3, r1
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
                            g_dynamic_uart_api_lut[port].state = eUartApiState_Flush;
 8002d38:	7ffa      	ldrb	r2, [r7, #31]
 8002d3a:	4932      	ldr	r1, [pc, #200]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	3314      	adds	r3, #20
 8002d48:	2202      	movs	r2, #2
 8002d4a:	701a      	strb	r2, [r3, #0]
                            break;
 8002d4c:	e00c      	b.n	8002d68 <UART_API_Task+0x25c>
                    while (UART_Driver_Read(port, &symbol) == true) {
 8002d4e:	f107 0217 	add.w	r2, r7, #23
 8002d52:	7ffb      	ldrb	r3, [r7, #31]
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fd0a 	bl	8003770 <UART_Driver_Read>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f47f af38 	bne.w	8002bd4 <UART_API_Task+0xc8>
 8002d64:	e000      	b.n	8002d68 <UART_API_Task+0x25c>
                            break;
 8002d66:	bf00      	nop
                    if (g_dynamic_uart_api_lut[port].state != eUartApiState_Flush) {
 8002d68:	7ffa      	ldrb	r2, [r7, #31]
 8002d6a:	4926      	ldr	r1, [pc, #152]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3314      	adds	r3, #20
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d137      	bne.n	8002dee <UART_API_Task+0x2e2>
                    sMessage_t message = {.message = g_dynamic_uart_api_lut[port].buffer, .message_length = g_dynamic_uart_api_lut[port].index};
 8002d7e:	7ffa      	ldrb	r2, [r7, #31]
 8002d80:	4920      	ldr	r1, [pc, #128]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	7ffa      	ldrb	r2, [r7, #31]
 8002d94:	491b      	ldr	r1, [pc, #108]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3308      	adds	r3, #8
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	613b      	str	r3, [r7, #16]
                    osStatus_t status = osMessageQueuePut(g_dynamic_uart_api_lut[port].message_queue_id, &message, MESSAGE_PRIORITY, osWaitForever);
 8002da6:	7ffa      	ldrb	r2, [r7, #31]
 8002da8:	4916      	ldr	r1, [pc, #88]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002daa:	4613      	mov	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	f107 010c 	add.w	r1, r7, #12
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f003 fcb4 	bl	800672c <osMessageQueuePut>
 8002dc4:	61b8      	str	r0, [r7, #24]
                    if (status != osOK) {
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d112      	bne.n	8002df2 <UART_API_Task+0x2e6>
                    g_dynamic_uart_api_lut[port].state = eUartApiState_Initialize;
 8002dcc:	7ffa      	ldrb	r2, [r7, #31]
 8002dce:	490d      	ldr	r1, [pc, #52]	@ (8002e04 <UART_API_Task+0x2f8>)
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	3314      	adds	r3, #20
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
                    break;
 8002de0:	e008      	b.n	8002df4 <UART_API_Task+0x2e8>
                continue;
 8002de2:	bf00      	nop
 8002de4:	e006      	b.n	8002df4 <UART_API_Task+0x2e8>
                    break;
 8002de6:	bf00      	nop
 8002de8:	e004      	b.n	8002df4 <UART_API_Task+0x2e8>
                        continue;
 8002dea:	bf00      	nop
 8002dec:	e002      	b.n	8002df4 <UART_API_Task+0x2e8>
                        break;
 8002dee:	bf00      	nop
 8002df0:	e000      	b.n	8002df4 <UART_API_Task+0x2e8>
                        break;
 8002df2:	bf00      	nop
        for (eUartApiPort_t port = eUartApiPort_First; port < eUartApiPort_Last; port++) {
 8002df4:	7ffb      	ldrb	r3, [r7, #31]
 8002df6:	3301      	adds	r3, #1
 8002df8:	77fb      	strb	r3, [r7, #31]
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	f67f ae8c 	bls.w	8002b1a <UART_API_Task+0xe>
 8002e02:	e687      	b.n	8002b14 <UART_API_Task+0x8>
 8002e04:	200004d8 	.word	0x200004d8
 8002e08:	0800cecc 	.word	0x0800cecc

08002e0c <UART_API_IsDelimiterReceived>:

        }
    }
}

static bool UART_API_IsDelimiterReceived (sUartApiTaskData_t *task_data) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
    if ((task_data->buffer == NULL) || (task_data->index < task_data->delimiter_length) || (task_data->delimiter == NULL) || (task_data->delimiter_length <= 0)) {
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00d      	beq.n	8002e38 <UART_API_IsDelimiterReceived+0x2c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d307      	bcc.n	8002e38 <UART_API_IsDelimiterReceived+0x2c>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <UART_API_IsDelimiterReceived+0x2c>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <UART_API_IsDelimiterReceived+0x30>
        return false;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e016      	b.n	8002e6a <UART_API_IsDelimiterReceived+0x5e>
    }

    const char *start_index = (char*)task_data->buffer + task_data->index - task_data->delimiter_length;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6899      	ldr	r1, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	1acb      	subs	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

    return strncmp(start_index, (char*)task_data->delimiter, task_data->delimiter_length) == 0;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68d9      	ldr	r1, [r3, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	461a      	mov	r2, r3
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f007 fe34 	bl	800aac6 <strncmp>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <UART_API_Init>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool UART_API_Init (eUartApiPort_t port, uint32_t baudrate, const char *delimiter, size_t delimiter_length) {
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4603      	mov	r3, r0
 8002e82:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartApiPort_First) || (port >= eUartApiPort_Last)) {
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <UART_API_Init+0x1a>
        return false;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e0a6      	b.n	8002fdc <UART_API_Init+0x168>
    }

    if (UART_Driver_Init(port, baudrate) == false) {
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fb04 	bl	80034a0 <UART_Driver_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f083 0301 	eor.w	r3, r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <UART_API_Init+0x34>
        return false;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e099      	b.n	8002fdc <UART_API_Init+0x168>
    }

    if (delimiter_length <= 0) {
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <UART_API_Init+0x3e>
        return false;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e094      	b.n	8002fdc <UART_API_Init+0x168>
    }

    g_dynamic_uart_api_lut[port].delimiter = HEAP_API_Calloc(delimiter_length, sizeof(char));
 8002eb2:	7bfc      	ldrb	r4, [r7, #15]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	6839      	ldr	r1, [r7, #0]
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f7fe fcb5 	bl	8001828 <HEAP_API_Alloc>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	4948      	ldr	r1, [pc, #288]	@ (8002fe4 <UART_API_Init+0x170>)
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	1b1b      	subs	r3, r3, r4
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	330c      	adds	r3, #12
 8002ece:	601a      	str	r2, [r3, #0]
    if (g_dynamic_uart_api_lut[port].delimiter == NULL) {
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	4944      	ldr	r1, [pc, #272]	@ (8002fe4 <UART_API_Init+0x170>)
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	330c      	adds	r3, #12
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <UART_API_Init+0x76>
            return false;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e078      	b.n	8002fdc <UART_API_Init+0x168>
    }
	memcpy(g_dynamic_uart_api_lut[port].delimiter, delimiter, delimiter_length);
 8002eea:	7bfa      	ldrb	r2, [r7, #15]
 8002eec:	493d      	ldr	r1, [pc, #244]	@ (8002fe4 <UART_API_Init+0x170>)
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	330c      	adds	r3, #12
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f007 feca 	bl	800ac9a <memcpy>

    g_dynamic_uart_api_lut[port].delimiter_length = delimiter_length;
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	4936      	ldr	r1, [pc, #216]	@ (8002fe4 <UART_API_Init+0x170>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	3310      	adds	r3, #16
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	601a      	str	r2, [r3, #0]

    g_dynamic_uart_api_lut[port].message_queue_id = osMessageQueueNew(MESSAGE_QUEUE_SIZE, sizeof(sMessage_t), &g_static_uart_api_lut[port].queue_attributes);
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	3308      	adds	r3, #8
 8002f26:	4a30      	ldr	r2, [pc, #192]	@ (8002fe8 <UART_API_Init+0x174>)
 8002f28:	4413      	add	r3, r2
 8002f2a:	7bfc      	ldrb	r4, [r7, #15]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2108      	movs	r1, #8
 8002f30:	2008      	movs	r0, #8
 8002f32:	f003 fb88 	bl	8006646 <osMessageQueueNew>
 8002f36:	4602      	mov	r2, r0
 8002f38:	492a      	ldr	r1, [pc, #168]	@ (8002fe4 <UART_API_Init+0x170>)
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	1b1b      	subs	r3, r3, r4
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	601a      	str	r2, [r3, #0]
    if (g_dynamic_uart_api_lut[port].message_queue_id == NULL) {
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	4926      	ldr	r1, [pc, #152]	@ (8002fe4 <UART_API_Init+0x170>)
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <UART_API_Init+0xea>
        return false;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e03e      	b.n	8002fdc <UART_API_Init+0x168>
    }

    g_dynamic_uart_api_lut[port].mutex_id = osMutexNew(&g_static_uart_api_lut[port].mutex_attributes);
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	3320      	adds	r3, #32
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe8 <UART_API_Init+0x174>)
 8002f6c:	4413      	add	r3, r2
 8002f6e:	7bfc      	ldrb	r4, [r7, #15]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f003 fa5a 	bl	800642a <osMutexNew>
 8002f76:	4602      	mov	r2, r0
 8002f78:	491a      	ldr	r1, [pc, #104]	@ (8002fe4 <UART_API_Init+0x170>)
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	1b1b      	subs	r3, r3, r4
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3318      	adds	r3, #24
 8002f86:	601a      	str	r2, [r3, #0]
    if (g_dynamic_uart_api_lut[port].mutex_id == NULL) {
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	4916      	ldr	r1, [pc, #88]	@ (8002fe4 <UART_API_Init+0x170>)
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	3318      	adds	r3, #24
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <UART_API_Init+0x12e>
        return false;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e01c      	b.n	8002fdc <UART_API_Init+0x168>
    }

    if (g_uart_api_task_handle == NULL) {
 8002fa2:	4b12      	ldr	r3, [pc, #72]	@ (8002fec <UART_API_Init+0x178>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10d      	bne.n	8002fc6 <UART_API_Init+0x152>
        g_uart_api_task_handle = osThreadNew(UART_API_Task, NULL, &g_uart_api_task_attr);
 8002faa:	4a11      	ldr	r2, [pc, #68]	@ (8002ff0 <UART_API_Init+0x17c>)
 8002fac:	2100      	movs	r1, #0
 8002fae:	4811      	ldr	r0, [pc, #68]	@ (8002ff4 <UART_API_Init+0x180>)
 8002fb0:	f003 f98e 	bl	80062d0 <osThreadNew>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8002fec <UART_API_Init+0x178>)
 8002fb8:	6013      	str	r3, [r2, #0]
        if (g_uart_api_task_handle == NULL) {
 8002fba:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <UART_API_Init+0x178>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <UART_API_Init+0x152>
            return false;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e00a      	b.n	8002fdc <UART_API_Init+0x168>
        }
    }

    g_dynamic_uart_api_lut[port].is_initialized = true;
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	4906      	ldr	r1, [pc, #24]	@ (8002fe4 <UART_API_Init+0x170>)
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3315      	adds	r3, #21
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
    return true;
 8002fda:	2301      	movs	r3, #1
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd90      	pop	{r4, r7, pc}
 8002fe4:	200004d8 	.word	0x200004d8
 8002fe8:	0800cecc 	.word	0x0800cecc
 8002fec:	200004d4 	.word	0x200004d4
 8002ff0:	0800cea8 	.word	0x0800cea8
 8002ff4:	08002b0d 	.word	0x08002b0d

08002ff8 <UART_API_Send>:

bool UART_API_Send (eUartApiPort_t port, sMessage_t *message, uint32_t wait_time) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartApiPort_First) || (port >= eUartApiPort_Last) || (message == NULL)) {
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d802      	bhi.n	8003012 <UART_API_Send+0x1a>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <UART_API_Send+0x1e>
        return false;
 8003012:	2300      	movs	r3, #0
 8003014:	e04c      	b.n	80030b0 <UART_API_Send+0xb8>
    }

    if (g_dynamic_uart_api_lut[port].mutex_id == NULL) {
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	4927      	ldr	r1, [pc, #156]	@ (80030b8 <UART_API_Send+0xc0>)
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3318      	adds	r3, #24
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <UART_API_Send+0x38>
    	return false;
 800302c:	2300      	movs	r3, #0
 800302e:	e03f      	b.n	80030b0 <UART_API_Send+0xb8>
    }

    if (osMutexAcquire(g_dynamic_uart_api_lut[port].mutex_id, wait_time) != osOK) {
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	4921      	ldr	r1, [pc, #132]	@ (80030b8 <UART_API_Send+0xc0>)
 8003034:	4613      	mov	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	3318      	adds	r3, #24
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	f003 fa76 	bl	8006536 <osMutexAcquire>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <UART_API_Send+0x5c>
    	return false;
 8003050:	2300      	movs	r3, #0
 8003052:	e02d      	b.n	80030b0 <UART_API_Send+0xb8>
    }

    if (UART_Driver_TransmitMultipleBytes(port, message->message, message->message_length) == false) {
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fb5c 	bl	800371c <UART_Driver_TransmitMultipleBytes>
 8003064:	4603      	mov	r3, r0
 8003066:	f083 0301 	eor.w	r3, r3, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <UART_API_Send+0x94>
        osMutexRelease(g_dynamic_uart_api_lut[port].mutex_id);
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	4911      	ldr	r1, [pc, #68]	@ (80030b8 <UART_API_Send+0xc0>)
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	3318      	adds	r3, #24
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f003 faa2 	bl	80065cc <osMutexRelease>
    	return false;
 8003088:	2300      	movs	r3, #0
 800308a:	e011      	b.n	80030b0 <UART_API_Send+0xb8>
    }

    if (osMutexRelease(g_dynamic_uart_api_lut[port].mutex_id) != osOK) {
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	490a      	ldr	r1, [pc, #40]	@ (80030b8 <UART_API_Send+0xc0>)
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3318      	adds	r3, #24
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f003 fa94 	bl	80065cc <osMutexRelease>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <UART_API_Send+0xb6>
    	return false;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <UART_API_Send+0xb8>
    }

    return true;
 80030ae:	2301      	movs	r3, #1
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	200004d8 	.word	0x200004d8

080030bc <UART_API_Receive>:


bool UART_API_Receive (eUartApiPort_t port, sMessage_t *message, uint32_t wait_time) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartApiPort_First) || (port >= eUartApiPort_Last) || (message == NULL) || (wait_time <= 0)) {
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d805      	bhi.n	80030dc <UART_API_Receive+0x20>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <UART_API_Receive+0x20>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <UART_API_Receive+0x24>
        return false;
 80030dc:	2300      	movs	r3, #0
 80030de:	e013      	b.n	8003108 <UART_API_Receive+0x4c>
    }

    osStatus_t status = osMessageQueueGet(g_dynamic_uart_api_lut[port].message_queue_id, message, MESSAGE_PRIORITY, wait_time);
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	490b      	ldr	r1, [pc, #44]	@ (8003110 <UART_API_Receive+0x54>)
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	f003 fb79 	bl	80067ec <osMessageQueueGet>
 80030fa:	6178      	str	r0, [r7, #20]
    if (status != osOK) {
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <UART_API_Receive+0x4a>
        return false;
 8003102:	2300      	movs	r3, #0
 8003104:	e000      	b.n	8003108 <UART_API_Receive+0x4c>
    }

    return true;
 8003106:	2301      	movs	r3, #1
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	200004d8 	.word	0x200004d8

08003114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003118:	4b04      	ldr	r3, [pc, #16]	@ (800312c <__NVIC_GetPriorityGrouping+0x18>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	f003 0307 	and.w	r3, r3, #7
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	2b00      	cmp	r3, #0
 8003140:	db0b      	blt.n	800315a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	f003 021f 	and.w	r2, r3, #31
 8003148:	4907      	ldr	r1, [pc, #28]	@ (8003168 <__NVIC_EnableIRQ+0x38>)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	2001      	movs	r0, #1
 8003152:	fa00 f202 	lsl.w	r2, r0, r2
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	e000e100 	.word	0xe000e100

0800316c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	6039      	str	r1, [r7, #0]
 8003176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	2b00      	cmp	r3, #0
 800317e:	db0a      	blt.n	8003196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	490c      	ldr	r1, [pc, #48]	@ (80031b8 <__NVIC_SetPriority+0x4c>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	0112      	lsls	r2, r2, #4
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	440b      	add	r3, r1
 8003190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003194:	e00a      	b.n	80031ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4908      	ldr	r1, [pc, #32]	@ (80031bc <__NVIC_SetPriority+0x50>)
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	3b04      	subs	r3, #4
 80031a4:	0112      	lsls	r2, r2, #4
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	440b      	add	r3, r1
 80031aa:	761a      	strb	r2, [r3, #24]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000e100 	.word	0xe000e100
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	@ 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f1c3 0307 	rsb	r3, r3, #7
 80031da:	2b04      	cmp	r3, #4
 80031dc:	bf28      	it	cs
 80031de:	2304      	movcs	r3, #4
 80031e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3304      	adds	r3, #4
 80031e6:	2b06      	cmp	r3, #6
 80031e8:	d902      	bls.n	80031f0 <NVIC_EncodePriority+0x30>
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3b03      	subs	r3, #3
 80031ee:	e000      	b.n	80031f2 <NVIC_EncodePriority+0x32>
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	f04f 32ff 	mov.w	r2, #4294967295
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43da      	mvns	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	401a      	ands	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003208:	f04f 31ff 	mov.w	r1, #4294967295
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	43d9      	mvns	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	4313      	orrs	r3, r2
         );
}
 800321a:	4618      	mov	r0, r3
 800321c:	3724      	adds	r7, #36	@ 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <LL_USART_Enable>:
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	60da      	str	r2, [r3, #12]
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_USART_IsEnabled>:
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_USART_ConfigAsyncMode>:
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	615a      	str	r2, [r3, #20]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	bf0c      	ite	eq
 80032ae:	2301      	moveq	r3, #1
 80032b0:	2300      	movne	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d0:	2b80      	cmp	r3, #128	@ 0x80
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b089      	sub	sp, #36	@ 0x24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	330c      	adds	r3, #12
 80032f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	e853 3f00 	ldrex	r3, [r3]
 80032fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f043 0320 	orr.w	r3, r3, #32
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	330c      	adds	r3, #12
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	61ba      	str	r2, [r7, #24]
 800330c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	6979      	ldr	r1, [r7, #20]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	e841 2300 	strex	r3, r2, [r1]
 8003316:	613b      	str	r3, [r7, #16]
   return(result);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e7      	bne.n	80032ee <LL_USART_EnableIT_RXNE+0x8>
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	3724      	adds	r7, #36	@ 0x24
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b20      	cmp	r3, #32
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	b2db      	uxtb	r3, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	605a      	str	r2, [r3, #4]
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <LL_APB1_GRP1_EnableClock>:
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003394:	4b08      	ldr	r3, [pc, #32]	@ (80033b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003398:	4907      	ldr	r1, [pc, #28]	@ (80033b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4313      	orrs	r3, r2
 800339e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80033a0:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80033a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4013      	ands	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033aa:	68fb      	ldr	r3, [r7, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	40023800 	.word	0x40023800

080033bc <LL_APB2_GRP1_EnableClock>:
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80033c4:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80033c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033c8:	4907      	ldr	r1, [pc, #28]	@ (80033e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80033d0:	4b05      	ldr	r3, [pc, #20]	@ (80033e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80033d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4013      	ands	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033da:	68fb      	ldr	r3, [r7, #12]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40023800 	.word	0x40023800

080033ec <UART_Driver_IRQReceive>:
 *********************************************************************************************************************/
static void UART_Driver_IRQReceive (eUartPort_t port);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void UART_Driver_IRQReceive (eUartPort_t port) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
    if ((port < eUartPort_First) || (port >= eUartPort_Last)) {
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d838      	bhi.n	800346e <UART_Driver_IRQReceive+0x82>
        return;
    }

    if (g_static_uart_rb[port] != NULL) {
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4a1f      	ldr	r2, [pc, #124]	@ (800347c <UART_Driver_IRQReceive+0x90>)
 8003400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d034      	beq.n	8003472 <UART_Driver_IRQReceive+0x86>
        if ((LL_USART_IsActiveFlag_RXNE(g_static_uart_lut[port].port)) && (LL_USART_IsEnabledIT_RXNE(g_static_uart_lut[port].port))) {
 8003408:	79fa      	ldrb	r2, [r7, #7]
 800340a:	491d      	ldr	r1, [pc, #116]	@ (8003480 <UART_Driver_IRQReceive+0x94>)
 800340c:	4613      	mov	r3, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4413      	add	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	440b      	add	r3, r1
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff ff3e 	bl	800329a <LL_USART_IsActiveFlag_RXNE>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d026      	beq.n	8003472 <UART_Driver_IRQReceive+0x86>
 8003424:	79fa      	ldrb	r2, [r7, #7]
 8003426:	4916      	ldr	r1, [pc, #88]	@ (8003480 <UART_Driver_IRQReceive+0x94>)
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	440b      	add	r3, r1
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff79 	bl	800332c <LL_USART_IsEnabledIT_RXNE>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d018      	beq.n	8003472 <UART_Driver_IRQReceive+0x86>
            uint8_t data = LL_USART_ReceiveData8(g_static_uart_lut[port].port);
 8003440:	79fa      	ldrb	r2, [r7, #7]
 8003442:	490f      	ldr	r1, [pc, #60]	@ (8003480 <UART_Driver_IRQReceive+0x94>)
 8003444:	4613      	mov	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	440b      	add	r3, r1
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff7e 	bl	8003352 <LL_USART_ReceiveData8>
 8003456:	4603      	mov	r3, r0
 8003458:	73fb      	strb	r3, [r7, #15]
            RingBufferEnqueue(g_static_uart_rb[port], data);
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	4a07      	ldr	r2, [pc, #28]	@ (800347c <UART_Driver_IRQReceive+0x90>)
 800345e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff f8f4 	bl	8002654 <RingBufferEnqueue>
//            	LL_USART_TransmitData8(USART2, data);
//            }
        }
    }

    return;
 800346c:	e001      	b.n	8003472 <UART_Driver_IRQReceive+0x86>
        return;
 800346e:	bf00      	nop
 8003470:	e000      	b.n	8003474 <UART_Driver_IRQReceive+0x88>
    return;
 8003472:	bf00      	nop
}
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	2000052c 	.word	0x2000052c
 8003480:	0800cf5c 	.word	0x0800cf5c

08003484 <USART1_IRQHandler>:

void USART1_IRQHandler (void) {
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
    UART_Driver_IRQReceive(eUartPort_Usart1);
 8003488:	2000      	movs	r0, #0
 800348a:	f7ff ffaf 	bl	80033ec <UART_Driver_IRQReceive>
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}

08003492 <USART2_IRQHandler>:

void USART2_IRQHandler (void) {
 8003492:	b580      	push	{r7, lr}
 8003494:	af00      	add	r7, sp, #0
    UART_Driver_IRQReceive(eUartPort_Usart2);
 8003496:	2001      	movs	r0, #1
 8003498:	f7ff ffa8 	bl	80033ec <UART_Driver_IRQReceive>
}
 800349c:	bf00      	nop
 800349e:	bd80      	pop	{r7, pc}

080034a0 <UART_Driver_Init>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool UART_Driver_Init (eUartPort_t port, uint32_t baudrate) {
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b08b      	sub	sp, #44	@ 0x2c
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	6039      	str	r1, [r7, #0]
 80034aa:	71fb      	strb	r3, [r7, #7]
    if ((port < eUartPort_First) || (port >= eUartPort_Last)) {
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <UART_Driver_Init+0x16>
        return false;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e0fa      	b.n	80036ac <UART_Driver_Init+0x20c>
    }

    LL_USART_InitTypeDef usart_init_struct = {0};
 80034b6:	f107 030c 	add.w	r3, r7, #12
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	60da      	str	r2, [r3, #12]
 80034c4:	611a      	str	r2, [r3, #16]
 80034c6:	615a      	str	r2, [r3, #20]
 80034c8:	619a      	str	r2, [r3, #24]

    g_static_uart_lut[port].enable_clock(g_static_uart_lut[port].clock);
 80034ca:	79fa      	ldrb	r2, [r7, #7]
 80034cc:	4979      	ldr	r1, [pc, #484]	@ (80036b4 <UART_Driver_Init+0x214>)
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	440b      	add	r3, r1
 80034d8:	3328      	adds	r3, #40	@ 0x28
 80034da:	6819      	ldr	r1, [r3, #0]
 80034dc:	79fa      	ldrb	r2, [r7, #7]
 80034de:	4875      	ldr	r0, [pc, #468]	@ (80036b4 <UART_Driver_Init+0x214>)
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	4403      	add	r3, r0
 80034ea:	332c      	adds	r3, #44	@ 0x2c
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	4788      	blx	r1

    usart_init_struct.BaudRate = (baudrate == 0) ? g_static_uart_lut[port].baud_rate : baudrate;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <UART_Driver_Init+0x6c>
 80034f8:	79fa      	ldrb	r2, [r7, #7]
 80034fa:	496e      	ldr	r1, [pc, #440]	@ (80036b4 <UART_Driver_Init+0x214>)
 80034fc:	4613      	mov	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4413      	add	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	440b      	add	r3, r1
 8003506:	3304      	adds	r3, #4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	e000      	b.n	800350e <UART_Driver_Init+0x6e>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	60fb      	str	r3, [r7, #12]
    usart_init_struct.DataWidth = g_static_uart_lut[port].data_width;
 8003510:	79fa      	ldrb	r2, [r7, #7]
 8003512:	4968      	ldr	r1, [pc, #416]	@ (80036b4 <UART_Driver_Init+0x214>)
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	440b      	add	r3, r1
 800351e:	3308      	adds	r3, #8
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	613b      	str	r3, [r7, #16]
    usart_init_struct.StopBits = g_static_uart_lut[port].stop_bits;
 8003524:	79fa      	ldrb	r2, [r7, #7]
 8003526:	4963      	ldr	r1, [pc, #396]	@ (80036b4 <UART_Driver_Init+0x214>)
 8003528:	4613      	mov	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4413      	add	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	440b      	add	r3, r1
 8003532:	330c      	adds	r3, #12
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	617b      	str	r3, [r7, #20]
    usart_init_struct.Parity = g_static_uart_lut[port].parity;
 8003538:	79fa      	ldrb	r2, [r7, #7]
 800353a:	495e      	ldr	r1, [pc, #376]	@ (80036b4 <UART_Driver_Init+0x214>)
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	440b      	add	r3, r1
 8003546:	3310      	adds	r3, #16
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	61bb      	str	r3, [r7, #24]
    usart_init_struct.TransferDirection = g_static_uart_lut[port].transfer_direction;
 800354c:	79fa      	ldrb	r2, [r7, #7]
 800354e:	4959      	ldr	r1, [pc, #356]	@ (80036b4 <UART_Driver_Init+0x214>)
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	440b      	add	r3, r1
 800355a:	3314      	adds	r3, #20
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	61fb      	str	r3, [r7, #28]
    usart_init_struct.HardwareFlowControl = g_static_uart_lut[port].hardware_flow_control;
 8003560:	79fa      	ldrb	r2, [r7, #7]
 8003562:	4954      	ldr	r1, [pc, #336]	@ (80036b4 <UART_Driver_Init+0x214>)
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	440b      	add	r3, r1
 800356e:	3318      	adds	r3, #24
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	623b      	str	r3, [r7, #32]
    usart_init_struct.OverSampling = g_static_uart_lut[port].over_sampling;
 8003574:	79fa      	ldrb	r2, [r7, #7]
 8003576:	494f      	ldr	r1, [pc, #316]	@ (80036b4 <UART_Driver_Init+0x214>)
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	440b      	add	r3, r1
 8003582:	331c      	adds	r3, #28
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24

    NVIC_SetPriority(g_static_uart_lut[port].irqn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8003588:	79fa      	ldrb	r2, [r7, #7]
 800358a:	494a      	ldr	r1, [pc, #296]	@ (80036b4 <UART_Driver_Init+0x214>)
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	440b      	add	r3, r1
 8003596:	3324      	adds	r3, #36	@ 0x24
 8003598:	f993 4000 	ldrsb.w	r4, [r3]
 800359c:	f7ff fdba 	bl	8003114 <__NVIC_GetPriorityGrouping>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fe0a 	bl	80031c0 <NVIC_EncodePriority>
 80035ac:	4603      	mov	r3, r0
 80035ae:	4619      	mov	r1, r3
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7ff fddb 	bl	800316c <__NVIC_SetPriority>
    NVIC_EnableIRQ(g_static_uart_lut[port].irqn);
 80035b6:	79fa      	ldrb	r2, [r7, #7]
 80035b8:	493e      	ldr	r1, [pc, #248]	@ (80036b4 <UART_Driver_Init+0x214>)
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	440b      	add	r3, r1
 80035c4:	3324      	adds	r3, #36	@ 0x24
 80035c6:	f993 3000 	ldrsb.w	r3, [r3]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fdb0 	bl	8003130 <__NVIC_EnableIRQ>

    if (LL_USART_Init(g_static_uart_lut[port].port, &usart_init_struct) != SUCCESS) {
 80035d0:	79fa      	ldrb	r2, [r7, #7]
 80035d2:	4938      	ldr	r1, [pc, #224]	@ (80036b4 <UART_Driver_Init+0x214>)
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	440b      	add	r3, r1
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f107 020c 	add.w	r2, r7, #12
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f002 fd80 	bl	80060ec <LL_USART_Init>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <UART_Driver_Init+0x156>
        return false;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e05a      	b.n	80036ac <UART_Driver_Init+0x20c>
    }
    LL_USART_ConfigAsyncMode(g_static_uart_lut[port].port);
 80035f6:	79fa      	ldrb	r2, [r7, #7]
 80035f8:	492e      	ldr	r1, [pc, #184]	@ (80036b4 <UART_Driver_Init+0x214>)
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	440b      	add	r3, r1
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fe31 	bl	800326e <LL_USART_ConfigAsyncMode>
    LL_USART_EnableIT_RXNE(g_static_uart_lut[port].port);
 800360c:	79fa      	ldrb	r2, [r7, #7]
 800360e:	4929      	ldr	r1, [pc, #164]	@ (80036b4 <UART_Driver_Init+0x214>)
 8003610:	4613      	mov	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4413      	add	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	440b      	add	r3, r1
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fe62 	bl	80032e6 <LL_USART_EnableIT_RXNE>
    LL_USART_Enable(g_static_uart_lut[port].port);
 8003622:	79fa      	ldrb	r2, [r7, #7]
 8003624:	4923      	ldr	r1, [pc, #140]	@ (80036b4 <UART_Driver_Init+0x214>)
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	440b      	add	r3, r1
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fdf7 	bl	8003226 <LL_USART_Enable>

    if (LL_USART_IsEnabledIT_RXNE(g_static_uart_lut[port].port) == 0) {
 8003638:	79fa      	ldrb	r2, [r7, #7]
 800363a:	491e      	ldr	r1, [pc, #120]	@ (80036b4 <UART_Driver_Init+0x214>)
 800363c:	4613      	mov	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	440b      	add	r3, r1
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fe6f 	bl	800332c <LL_USART_IsEnabledIT_RXNE>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <UART_Driver_Init+0x1b8>
        return false;
 8003654:	2300      	movs	r3, #0
 8003656:	e029      	b.n	80036ac <UART_Driver_Init+0x20c>
    }

    g_static_uart_rb[port] = RingBufferInit(g_static_uart_lut[port].ringbuffer_capacity);
 8003658:	79fa      	ldrb	r2, [r7, #7]
 800365a:	4916      	ldr	r1, [pc, #88]	@ (80036b4 <UART_Driver_Init+0x214>)
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	440b      	add	r3, r1
 8003666:	3320      	adds	r3, #32
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	79fc      	ldrb	r4, [r7, #7]
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe ff8d 	bl	800258c <RingBufferInit>
 8003672:	4603      	mov	r3, r0
 8003674:	4a10      	ldr	r2, [pc, #64]	@ (80036b8 <UART_Driver_Init+0x218>)
 8003676:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (g_static_uart_rb[port] == NULL) {
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	4a0e      	ldr	r2, [pc, #56]	@ (80036b8 <UART_Driver_Init+0x218>)
 800367e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <UART_Driver_Init+0x1ea>
        return false;
 8003686:	2300      	movs	r3, #0
 8003688:	e010      	b.n	80036ac <UART_Driver_Init+0x20c>
    }

    if (LL_USART_IsEnabled(g_static_uart_lut[port].port) == 0) {
 800368a:	79fa      	ldrb	r2, [r7, #7]
 800368c:	4909      	ldr	r1, [pc, #36]	@ (80036b4 <UART_Driver_Init+0x214>)
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	440b      	add	r3, r1
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fdd3 	bl	8003246 <LL_USART_IsEnabled>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <UART_Driver_Init+0x20a>
        return false;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <UART_Driver_Init+0x20c>
    }

    return true;
 80036aa:	2301      	movs	r3, #1
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	372c      	adds	r7, #44	@ 0x2c
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd90      	pop	{r4, r7, pc}
 80036b4:	0800cf5c 	.word	0x0800cf5c
 80036b8:	2000052c 	.word	0x2000052c

080036bc <UART_Driver_TransmitByte>:

bool UART_Driver_TransmitByte (eUartPort_t port, uint8_t data) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	460a      	mov	r2, r1
 80036c6:	71fb      	strb	r3, [r7, #7]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71bb      	strb	r3, [r7, #6]
    if ((port < eUartPort_First) || (port >= eUartPort_Last)) {
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <UART_Driver_TransmitByte+0x1a>
        return false;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e01c      	b.n	8003710 <UART_Driver_TransmitByte+0x54>
    }

    while (!LL_USART_IsActiveFlag_TXE(g_static_uart_lut[port].port)) {};
 80036d6:	bf00      	nop
 80036d8:	79fa      	ldrb	r2, [r7, #7]
 80036da:	490f      	ldr	r1, [pc, #60]	@ (8003718 <UART_Driver_TransmitByte+0x5c>)
 80036dc:	4613      	mov	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4413      	add	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	440b      	add	r3, r1
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fde9 	bl	80032c0 <LL_USART_IsActiveFlag_TXE>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f1      	beq.n	80036d8 <UART_Driver_TransmitByte+0x1c>
    LL_USART_TransmitData8(g_static_uart_lut[port].port, data);
 80036f4:	79fa      	ldrb	r2, [r7, #7]
 80036f6:	4908      	ldr	r1, [pc, #32]	@ (8003718 <UART_Driver_TransmitByte+0x5c>)
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	440b      	add	r3, r1
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	79ba      	ldrb	r2, [r7, #6]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fe2f 	bl	800336c <LL_USART_TransmitData8>

    return true;
 800370e:	2301      	movs	r3, #1
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	0800cf5c 	.word	0x0800cf5c

0800371c <UART_Driver_TransmitMultipleBytes>:

bool UART_Driver_TransmitMultipleBytes (eUartPort_t port, uint8_t *data, size_t size) {
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartPort_First) || (port >= eUartPort_Last) || (data == NULL) || (size == 0)) {
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d805      	bhi.n	800373c <UART_Driver_TransmitMultipleBytes+0x20>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <UART_Driver_TransmitMultipleBytes+0x20>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <UART_Driver_TransmitMultipleBytes+0x24>
        return false;
 800373c:	2300      	movs	r3, #0
 800373e:	e013      	b.n	8003768 <UART_Driver_TransmitMultipleBytes+0x4c>
    }

    for (size_t i = 0; i < size; i++) {
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e00b      	b.n	800375e <UART_Driver_TransmitMultipleBytes+0x42>
        UART_Driver_TransmitByte(port, data[i]);
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	4413      	add	r3, r2
 800374c:	781a      	ldrb	r2, [r3, #0]
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff ffb2 	bl	80036bc <UART_Driver_TransmitByte>
    for (size_t i = 0; i < size; i++) {
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3301      	adds	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d3ef      	bcc.n	8003746 <UART_Driver_TransmitMultipleBytes+0x2a>
    }

    return true;
 8003766:	2301      	movs	r3, #1
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <UART_Driver_Read>:


bool UART_Driver_Read (eUartPort_t port, uint8_t *data) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	6039      	str	r1, [r7, #0]
 800377a:	71fb      	strb	r3, [r7, #7]
    if ((port < eUartPort_First) || (port >= eUartPort_Last) || (g_static_uart_rb[port] == NULL) || (data == NULL)) {
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d808      	bhi.n	8003794 <UART_Driver_Read+0x24>
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	4a0b      	ldr	r2, [pc, #44]	@ (80037b4 <UART_Driver_Read+0x44>)
 8003786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <UART_Driver_Read+0x24>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <UART_Driver_Read+0x28>
        return false;
 8003794:	2300      	movs	r3, #0
 8003796:	e008      	b.n	80037aa <UART_Driver_Read+0x3a>
    }

    return RingBufferDequeue(g_static_uart_rb[port], data);
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	4a06      	ldr	r2, [pc, #24]	@ (80037b4 <UART_Driver_Read+0x44>)
 800379c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a0:	6839      	ldr	r1, [r7, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe ff96 	bl	80026d4 <RingBufferDequeue>
 80037a8:	4603      	mov	r3, r0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	2000052c 	.word	0x2000052c

080037b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80037b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80037bc:	f7ff f994 	bl	8002ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037c0:	480c      	ldr	r0, [pc, #48]	@ (80037f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037c2:	490d      	ldr	r1, [pc, #52]	@ (80037f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037c4:	4a0d      	ldr	r2, [pc, #52]	@ (80037fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037c8:	e002      	b.n	80037d0 <LoopCopyDataInit>

080037ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ce:	3304      	adds	r3, #4

080037d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037d4:	d3f9      	bcc.n	80037ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037dc:	e001      	b.n	80037e2 <LoopFillZerobss>

080037de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037e0:	3204      	adds	r2, #4

080037e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037e4:	d3fb      	bcc.n	80037de <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80037e6:	f007 fa31 	bl	800ac4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ea:	f7fe fc6f 	bl	80020cc <main>
  bx  lr    
 80037ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80037f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80037f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037f8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80037fc:	0800d3b8 	.word	0x0800d3b8
  ldr r2, =_sbss
 8003800:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003804:	20004fd8 	.word	0x20004fd8

08003808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003808:	e7fe      	b.n	8003808 <ADC_IRQHandler>
	...

0800380c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003810:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <HAL_Init+0x40>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a0d      	ldr	r2, [pc, #52]	@ (800384c <HAL_Init+0x40>)
 8003816:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800381a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800381c:	4b0b      	ldr	r3, [pc, #44]	@ (800384c <HAL_Init+0x40>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0a      	ldr	r2, [pc, #40]	@ (800384c <HAL_Init+0x40>)
 8003822:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003828:	4b08      	ldr	r3, [pc, #32]	@ (800384c <HAL_Init+0x40>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a07      	ldr	r2, [pc, #28]	@ (800384c <HAL_Init+0x40>)
 800382e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003834:	2003      	movs	r0, #3
 8003836:	f000 f8d8 	bl	80039ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800383a:	200f      	movs	r0, #15
 800383c:	f7fe ffec 	bl	8002818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003840:	f7fe ff76 	bl	8002730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023c00 	.word	0x40023c00

08003850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003854:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <HAL_IncTick+0x20>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <HAL_IncTick+0x24>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4413      	add	r3, r2
 8003860:	4a04      	ldr	r2, [pc, #16]	@ (8003874 <HAL_IncTick+0x24>)
 8003862:	6013      	str	r3, [r2, #0]
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	2000001c 	.word	0x2000001c
 8003874:	20000538 	.word	0x20000538

08003878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  return uwTick;
 800387c:	4b03      	ldr	r3, [pc, #12]	@ (800388c <HAL_GetTick+0x14>)
 800387e:	681b      	ldr	r3, [r3, #0]
}
 8003880:	4618      	mov	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000538 	.word	0x20000538

08003890 <__NVIC_SetPriorityGrouping>:
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a0:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <__NVIC_SetPriorityGrouping+0x44>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038ac:	4013      	ands	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038c2:	4a04      	ldr	r2, [pc, #16]	@ (80038d4 <__NVIC_SetPriorityGrouping+0x44>)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	60d3      	str	r3, [r2, #12]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <__NVIC_GetPriorityGrouping>:
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038dc:	4b04      	ldr	r3, [pc, #16]	@ (80038f0 <__NVIC_GetPriorityGrouping+0x18>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	0a1b      	lsrs	r3, r3, #8
 80038e2:	f003 0307 	and.w	r3, r3, #7
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <__NVIC_EnableIRQ>:
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	2b00      	cmp	r3, #0
 8003904:	db0b      	blt.n	800391e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	f003 021f 	and.w	r2, r3, #31
 800390c:	4907      	ldr	r1, [pc, #28]	@ (800392c <__NVIC_EnableIRQ+0x38>)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2001      	movs	r0, #1
 8003916:	fa00 f202 	lsl.w	r2, r0, r2
 800391a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000e100 	.word	0xe000e100

08003930 <__NVIC_SetPriority>:
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	6039      	str	r1, [r7, #0]
 800393a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003940:	2b00      	cmp	r3, #0
 8003942:	db0a      	blt.n	800395a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	490c      	ldr	r1, [pc, #48]	@ (800397c <__NVIC_SetPriority+0x4c>)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	0112      	lsls	r2, r2, #4
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	440b      	add	r3, r1
 8003954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003958:	e00a      	b.n	8003970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	4908      	ldr	r1, [pc, #32]	@ (8003980 <__NVIC_SetPriority+0x50>)
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	3b04      	subs	r3, #4
 8003968:	0112      	lsls	r2, r2, #4
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	440b      	add	r3, r1
 800396e:	761a      	strb	r2, [r3, #24]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000e100 	.word	0xe000e100
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <NVIC_EncodePriority>:
{
 8003984:	b480      	push	{r7}
 8003986:	b089      	sub	sp, #36	@ 0x24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f1c3 0307 	rsb	r3, r3, #7
 800399e:	2b04      	cmp	r3, #4
 80039a0:	bf28      	it	cs
 80039a2:	2304      	movcs	r3, #4
 80039a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3304      	adds	r3, #4
 80039aa:	2b06      	cmp	r3, #6
 80039ac:	d902      	bls.n	80039b4 <NVIC_EncodePriority+0x30>
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3b03      	subs	r3, #3
 80039b2:	e000      	b.n	80039b6 <NVIC_EncodePriority+0x32>
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b8:	f04f 32ff 	mov.w	r2, #4294967295
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43da      	mvns	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	401a      	ands	r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039cc:	f04f 31ff 	mov.w	r1, #4294967295
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	fa01 f303 	lsl.w	r3, r1, r3
 80039d6:	43d9      	mvns	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039dc:	4313      	orrs	r3, r2
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3724      	adds	r7, #36	@ 0x24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff ff4c 	bl	8003890 <__NVIC_SetPriorityGrouping>
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a12:	f7ff ff61 	bl	80038d8 <__NVIC_GetPriorityGrouping>
 8003a16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	6978      	ldr	r0, [r7, #20]
 8003a1e:	f7ff ffb1 	bl	8003984 <NVIC_EncodePriority>
 8003a22:	4602      	mov	r2, r0
 8003a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff ff80 	bl	8003930 <__NVIC_SetPriority>
}
 8003a30:	bf00      	nop
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff ff54 	bl	80038f4 <__NVIC_EnableIRQ>
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	@ 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	e159      	b.n	8003d24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a70:	2201      	movs	r2, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	f040 8148 	bne.w	8003d1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d005      	beq.n	8003aa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d130      	bne.n	8003b08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003adc:	2201      	movs	r2, #1
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 0201 	and.w	r2, r3, #1
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d017      	beq.n	8003b44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	2203      	movs	r2, #3
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d123      	bne.n	8003b98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	08da      	lsrs	r2, r3, #3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3208      	adds	r2, #8
 8003b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	220f      	movs	r2, #15
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	08da      	lsrs	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3208      	adds	r2, #8
 8003b92:	69b9      	ldr	r1, [r7, #24]
 8003b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0203 	and.w	r2, r3, #3
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80a2 	beq.w	8003d1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	4b57      	ldr	r3, [pc, #348]	@ (8003d3c <HAL_GPIO_Init+0x2e8>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	4a56      	ldr	r2, [pc, #344]	@ (8003d3c <HAL_GPIO_Init+0x2e8>)
 8003be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bea:	4b54      	ldr	r3, [pc, #336]	@ (8003d3c <HAL_GPIO_Init+0x2e8>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bf6:	4a52      	ldr	r2, [pc, #328]	@ (8003d40 <HAL_GPIO_Init+0x2ec>)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	089b      	lsrs	r3, r3, #2
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	220f      	movs	r2, #15
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a49      	ldr	r2, [pc, #292]	@ (8003d44 <HAL_GPIO_Init+0x2f0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d019      	beq.n	8003c56 <HAL_GPIO_Init+0x202>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a48      	ldr	r2, [pc, #288]	@ (8003d48 <HAL_GPIO_Init+0x2f4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0x1fe>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a47      	ldr	r2, [pc, #284]	@ (8003d4c <HAL_GPIO_Init+0x2f8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00d      	beq.n	8003c4e <HAL_GPIO_Init+0x1fa>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a46      	ldr	r2, [pc, #280]	@ (8003d50 <HAL_GPIO_Init+0x2fc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_GPIO_Init+0x1f6>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a45      	ldr	r2, [pc, #276]	@ (8003d54 <HAL_GPIO_Init+0x300>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_Init+0x1f2>
 8003c42:	2304      	movs	r3, #4
 8003c44:	e008      	b.n	8003c58 <HAL_GPIO_Init+0x204>
 8003c46:	2307      	movs	r3, #7
 8003c48:	e006      	b.n	8003c58 <HAL_GPIO_Init+0x204>
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e004      	b.n	8003c58 <HAL_GPIO_Init+0x204>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e002      	b.n	8003c58 <HAL_GPIO_Init+0x204>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <HAL_GPIO_Init+0x204>
 8003c56:	2300      	movs	r3, #0
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	f002 0203 	and.w	r2, r2, #3
 8003c5e:	0092      	lsls	r2, r2, #2
 8003c60:	4093      	lsls	r3, r2
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c68:	4935      	ldr	r1, [pc, #212]	@ (8003d40 <HAL_GPIO_Init+0x2ec>)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	089b      	lsrs	r3, r3, #2
 8003c6e:	3302      	adds	r3, #2
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c76:	4b38      	ldr	r3, [pc, #224]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4013      	ands	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cc4:	4a24      	ldr	r2, [pc, #144]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cca:	4b23      	ldr	r3, [pc, #140]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cee:	4a1a      	ldr	r2, [pc, #104]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cf4:	4b18      	ldr	r3, [pc, #96]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d18:	4a0f      	ldr	r2, [pc, #60]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3301      	adds	r3, #1
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b0f      	cmp	r3, #15
 8003d28:	f67f aea2 	bls.w	8003a70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	3724      	adds	r7, #36	@ 0x24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40013800 	.word	0x40013800
 8003d44:	40020000 	.word	0x40020000
 8003d48:	40020400 	.word	0x40020400
 8003d4c:	40020800 	.word	0x40020800
 8003d50:	40020c00 	.word	0x40020c00
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40013c00 	.word	0x40013c00

08003d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e267      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d075      	beq.n	8003e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d7a:	4b88      	ldr	r3, [pc, #544]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d00c      	beq.n	8003da0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d86:	4b85      	ldr	r3, [pc, #532]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d112      	bne.n	8003db8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d92:	4b82      	ldr	r3, [pc, #520]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d9e:	d10b      	bne.n	8003db8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da0:	4b7e      	ldr	r3, [pc, #504]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d05b      	beq.n	8003e64 <HAL_RCC_OscConfig+0x108>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d157      	bne.n	8003e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e242      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc0:	d106      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x74>
 8003dc2:	4b76      	ldr	r3, [pc, #472]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a75      	ldr	r2, [pc, #468]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e01d      	b.n	8003e0c <HAL_RCC_OscConfig+0xb0>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCC_OscConfig+0x98>
 8003dda:	4b70      	ldr	r3, [pc, #448]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a6f      	ldr	r2, [pc, #444]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4b6d      	ldr	r3, [pc, #436]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a6c      	ldr	r2, [pc, #432]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	e00b      	b.n	8003e0c <HAL_RCC_OscConfig+0xb0>
 8003df4:	4b69      	ldr	r3, [pc, #420]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a68      	ldr	r2, [pc, #416]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4b66      	ldr	r3, [pc, #408]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a65      	ldr	r2, [pc, #404]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d013      	beq.n	8003e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7ff fd30 	bl	8003878 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7ff fd2c 	bl	8003878 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	@ 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e207      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0xc0>
 8003e3a:	e014      	b.n	8003e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3c:	f7ff fd1c 	bl	8003878 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e44:	f7ff fd18 	bl	8003878 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	@ 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e1f3      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e56:	4b51      	ldr	r3, [pc, #324]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0xe8>
 8003e62:	e000      	b.n	8003e66 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d063      	beq.n	8003f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e72:	4b4a      	ldr	r3, [pc, #296]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e7e:	4b47      	ldr	r3, [pc, #284]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d11c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e8a:	4b44      	ldr	r3, [pc, #272]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d116      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e96:	4b41      	ldr	r3, [pc, #260]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_RCC_OscConfig+0x152>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d001      	beq.n	8003eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e1c7      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eae:	4b3b      	ldr	r3, [pc, #236]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4937      	ldr	r1, [pc, #220]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec2:	e03a      	b.n	8003f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d020      	beq.n	8003f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ecc:	4b34      	ldr	r3, [pc, #208]	@ (8003fa0 <HAL_RCC_OscConfig+0x244>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed2:	f7ff fcd1 	bl	8003878 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eda:	f7ff fccd 	bl	8003878 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e1a8      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eec:	4b2b      	ldr	r3, [pc, #172]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef8:	4b28      	ldr	r3, [pc, #160]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4925      	ldr	r1, [pc, #148]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	600b      	str	r3, [r1, #0]
 8003f0c:	e015      	b.n	8003f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f0e:	4b24      	ldr	r3, [pc, #144]	@ (8003fa0 <HAL_RCC_OscConfig+0x244>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7ff fcb0 	bl	8003878 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f1c:	f7ff fcac 	bl	8003878 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e187      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d036      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d016      	beq.n	8003f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4e:	4b15      	ldr	r3, [pc, #84]	@ (8003fa4 <HAL_RCC_OscConfig+0x248>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f54:	f7ff fc90 	bl	8003878 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5c:	f7ff fc8c 	bl	8003878 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e167      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <HAL_RCC_OscConfig+0x240>)
 8003f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0x200>
 8003f7a:	e01b      	b.n	8003fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7c:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <HAL_RCC_OscConfig+0x248>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f82:	f7ff fc79 	bl	8003878 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f88:	e00e      	b.n	8003fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f8a:	f7ff fc75 	bl	8003878 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d907      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e150      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	42470000 	.word	0x42470000
 8003fa4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa8:	4b88      	ldr	r3, [pc, #544]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 8003faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1ea      	bne.n	8003f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 8097 	beq.w	80040f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc6:	4b81      	ldr	r3, [pc, #516]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10f      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	4b7d      	ldr	r3, [pc, #500]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	4a7c      	ldr	r2, [pc, #496]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 8003fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fe2:	4b7a      	ldr	r3, [pc, #488]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff2:	4b77      	ldr	r3, [pc, #476]	@ (80041d0 <HAL_RCC_OscConfig+0x474>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d118      	bne.n	8004030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ffe:	4b74      	ldr	r3, [pc, #464]	@ (80041d0 <HAL_RCC_OscConfig+0x474>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a73      	ldr	r2, [pc, #460]	@ (80041d0 <HAL_RCC_OscConfig+0x474>)
 8004004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400a:	f7ff fc35 	bl	8003878 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004012:	f7ff fc31 	bl	8003878 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e10c      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004024:	4b6a      	ldr	r3, [pc, #424]	@ (80041d0 <HAL_RCC_OscConfig+0x474>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f0      	beq.n	8004012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d106      	bne.n	8004046 <HAL_RCC_OscConfig+0x2ea>
 8004038:	4b64      	ldr	r3, [pc, #400]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403c:	4a63      	ldr	r2, [pc, #396]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6713      	str	r3, [r2, #112]	@ 0x70
 8004044:	e01c      	b.n	8004080 <HAL_RCC_OscConfig+0x324>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b05      	cmp	r3, #5
 800404c:	d10c      	bne.n	8004068 <HAL_RCC_OscConfig+0x30c>
 800404e:	4b5f      	ldr	r3, [pc, #380]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004052:	4a5e      	ldr	r2, [pc, #376]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 8004054:	f043 0304 	orr.w	r3, r3, #4
 8004058:	6713      	str	r3, [r2, #112]	@ 0x70
 800405a:	4b5c      	ldr	r3, [pc, #368]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405e:	4a5b      	ldr	r2, [pc, #364]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	6713      	str	r3, [r2, #112]	@ 0x70
 8004066:	e00b      	b.n	8004080 <HAL_RCC_OscConfig+0x324>
 8004068:	4b58      	ldr	r3, [pc, #352]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406c:	4a57      	ldr	r2, [pc, #348]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 800406e:	f023 0301 	bic.w	r3, r3, #1
 8004072:	6713      	str	r3, [r2, #112]	@ 0x70
 8004074:	4b55      	ldr	r3, [pc, #340]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004078:	4a54      	ldr	r2, [pc, #336]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 800407a:	f023 0304 	bic.w	r3, r3, #4
 800407e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d015      	beq.n	80040b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004088:	f7ff fbf6 	bl	8003878 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408e:	e00a      	b.n	80040a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004090:	f7ff fbf2 	bl	8003878 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e0cb      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a6:	4b49      	ldr	r3, [pc, #292]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0ee      	beq.n	8004090 <HAL_RCC_OscConfig+0x334>
 80040b2:	e014      	b.n	80040de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b4:	f7ff fbe0 	bl	8003878 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040bc:	f7ff fbdc 	bl	8003878 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e0b5      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d2:	4b3e      	ldr	r3, [pc, #248]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1ee      	bne.n	80040bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040de:	7dfb      	ldrb	r3, [r7, #23]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d105      	bne.n	80040f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e4:	4b39      	ldr	r3, [pc, #228]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	4a38      	ldr	r2, [pc, #224]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 80040ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 80a1 	beq.w	800423c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040fa:	4b34      	ldr	r3, [pc, #208]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b08      	cmp	r3, #8
 8004104:	d05c      	beq.n	80041c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d141      	bne.n	8004192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410e:	4b31      	ldr	r3, [pc, #196]	@ (80041d4 <HAL_RCC_OscConfig+0x478>)
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004114:	f7ff fbb0 	bl	8003878 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411c:	f7ff fbac 	bl	8003878 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e087      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412e:	4b27      	ldr	r3, [pc, #156]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69da      	ldr	r2, [r3, #28]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	3b01      	subs	r3, #1
 8004154:	041b      	lsls	r3, r3, #16
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415c:	061b      	lsls	r3, r3, #24
 800415e:	491b      	ldr	r1, [pc, #108]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 8004160:	4313      	orrs	r3, r2
 8004162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004164:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <HAL_RCC_OscConfig+0x478>)
 8004166:	2201      	movs	r2, #1
 8004168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416a:	f7ff fb85 	bl	8003878 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004172:	f7ff fb81 	bl	8003878 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e05c      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004184:	4b11      	ldr	r3, [pc, #68]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x416>
 8004190:	e054      	b.n	800423c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004192:	4b10      	ldr	r3, [pc, #64]	@ (80041d4 <HAL_RCC_OscConfig+0x478>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004198:	f7ff fb6e 	bl	8003878 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a0:	f7ff fb6a 	bl	8003878 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e045      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <HAL_RCC_OscConfig+0x470>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x444>
 80041be:	e03d      	b.n	800423c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e038      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40007000 	.word	0x40007000
 80041d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004248 <HAL_RCC_OscConfig+0x4ec>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d028      	beq.n	8004238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d121      	bne.n	8004238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d11a      	bne.n	8004238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004208:	4013      	ands	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800420e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004210:	4293      	cmp	r3, r2
 8004212:	d111      	bne.n	8004238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421e:	085b      	lsrs	r3, r3, #1
 8004220:	3b01      	subs	r3, #1
 8004222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d107      	bne.n	8004238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40023800 	.word	0x40023800

0800424c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0cc      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004260:	4b68      	ldr	r3, [pc, #416]	@ (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d90c      	bls.n	8004288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b65      	ldr	r3, [pc, #404]	@ (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b63      	ldr	r3, [pc, #396]	@ (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0b8      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d020      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a0:	4b59      	ldr	r3, [pc, #356]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4a58      	ldr	r2, [pc, #352]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b8:	4b53      	ldr	r3, [pc, #332]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4a52      	ldr	r2, [pc, #328]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c4:	4b50      	ldr	r3, [pc, #320]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	494d      	ldr	r1, [pc, #308]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d044      	beq.n	800436c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	4b47      	ldr	r3, [pc, #284]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d119      	bne.n	800432a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e07f      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d003      	beq.n	800430a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004306:	2b03      	cmp	r3, #3
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430a:	4b3f      	ldr	r3, [pc, #252]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e06f      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431a:	4b3b      	ldr	r3, [pc, #236]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e067      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800432a:	4b37      	ldr	r3, [pc, #220]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f023 0203 	bic.w	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4934      	ldr	r1, [pc, #208]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	4313      	orrs	r3, r2
 800433a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800433c:	f7ff fa9c 	bl	8003878 <HAL_GetTick>
 8004340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	e00a      	b.n	800435a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004344:	f7ff fa98 	bl	8003878 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e04f      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	4b2b      	ldr	r3, [pc, #172]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 020c 	and.w	r2, r3, #12
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	429a      	cmp	r2, r3
 800436a:	d1eb      	bne.n	8004344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800436c:	4b25      	ldr	r3, [pc, #148]	@ (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d20c      	bcs.n	8004394 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b22      	ldr	r3, [pc, #136]	@ (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004382:	4b20      	ldr	r3, [pc, #128]	@ (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d001      	beq.n	8004394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e032      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a0:	4b19      	ldr	r3, [pc, #100]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4916      	ldr	r1, [pc, #88]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043be:	4b12      	ldr	r3, [pc, #72]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	490e      	ldr	r1, [pc, #56]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043d2:	f000 f821 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80043d6:	4602      	mov	r2, r0
 80043d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	490a      	ldr	r1, [pc, #40]	@ (800440c <HAL_RCC_ClockConfig+0x1c0>)
 80043e4:	5ccb      	ldrb	r3, [r1, r3]
 80043e6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ea:	4a09      	ldr	r2, [pc, #36]	@ (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80043ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80043ee:	4b09      	ldr	r3, [pc, #36]	@ (8004414 <HAL_RCC_ClockConfig+0x1c8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe fa10 	bl	8002818 <HAL_InitTick>

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40023c00 	.word	0x40023c00
 8004408:	40023800 	.word	0x40023800
 800440c:	0800ce90 	.word	0x0800ce90
 8004410:	20000014 	.word	0x20000014
 8004414:	20000018 	.word	0x20000018

08004418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800441c:	b094      	sub	sp, #80	@ 0x50
 800441e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004430:	4b79      	ldr	r3, [pc, #484]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x200>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 030c 	and.w	r3, r3, #12
 8004438:	2b08      	cmp	r3, #8
 800443a:	d00d      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0x40>
 800443c:	2b08      	cmp	r3, #8
 800443e:	f200 80e1 	bhi.w	8004604 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x34>
 8004446:	2b04      	cmp	r3, #4
 8004448:	d003      	beq.n	8004452 <HAL_RCC_GetSysClockFreq+0x3a>
 800444a:	e0db      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800444c:	4b73      	ldr	r3, [pc, #460]	@ (800461c <HAL_RCC_GetSysClockFreq+0x204>)
 800444e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004450:	e0db      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004452:	4b73      	ldr	r3, [pc, #460]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x208>)
 8004454:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004456:	e0d8      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004458:	4b6f      	ldr	r3, [pc, #444]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x200>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004460:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004462:	4b6d      	ldr	r3, [pc, #436]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x200>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d063      	beq.n	8004536 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446e:	4b6a      	ldr	r3, [pc, #424]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x200>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	099b      	lsrs	r3, r3, #6
 8004474:	2200      	movs	r2, #0
 8004476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004478:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004480:	633b      	str	r3, [r7, #48]	@ 0x30
 8004482:	2300      	movs	r3, #0
 8004484:	637b      	str	r3, [r7, #52]	@ 0x34
 8004486:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800448a:	4622      	mov	r2, r4
 800448c:	462b      	mov	r3, r5
 800448e:	f04f 0000 	mov.w	r0, #0
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	0159      	lsls	r1, r3, #5
 8004498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800449c:	0150      	lsls	r0, r2, #5
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4621      	mov	r1, r4
 80044a4:	1a51      	subs	r1, r2, r1
 80044a6:	6139      	str	r1, [r7, #16]
 80044a8:	4629      	mov	r1, r5
 80044aa:	eb63 0301 	sbc.w	r3, r3, r1
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044bc:	4659      	mov	r1, fp
 80044be:	018b      	lsls	r3, r1, #6
 80044c0:	4651      	mov	r1, sl
 80044c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044c6:	4651      	mov	r1, sl
 80044c8:	018a      	lsls	r2, r1, #6
 80044ca:	4651      	mov	r1, sl
 80044cc:	ebb2 0801 	subs.w	r8, r2, r1
 80044d0:	4659      	mov	r1, fp
 80044d2:	eb63 0901 	sbc.w	r9, r3, r1
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ea:	4690      	mov	r8, r2
 80044ec:	4699      	mov	r9, r3
 80044ee:	4623      	mov	r3, r4
 80044f0:	eb18 0303 	adds.w	r3, r8, r3
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	462b      	mov	r3, r5
 80044f8:	eb49 0303 	adc.w	r3, r9, r3
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800450a:	4629      	mov	r1, r5
 800450c:	024b      	lsls	r3, r1, #9
 800450e:	4621      	mov	r1, r4
 8004510:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004514:	4621      	mov	r1, r4
 8004516:	024a      	lsls	r2, r1, #9
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800451e:	2200      	movs	r2, #0
 8004520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004528:	f7fc fb20 	bl	8000b6c <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4613      	mov	r3, r2
 8004532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004534:	e058      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004536:	4b38      	ldr	r3, [pc, #224]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x200>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	099b      	lsrs	r3, r3, #6
 800453c:	2200      	movs	r2, #0
 800453e:	4618      	mov	r0, r3
 8004540:	4611      	mov	r1, r2
 8004542:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004546:	623b      	str	r3, [r7, #32]
 8004548:	2300      	movs	r3, #0
 800454a:	627b      	str	r3, [r7, #36]	@ 0x24
 800454c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004550:	4642      	mov	r2, r8
 8004552:	464b      	mov	r3, r9
 8004554:	f04f 0000 	mov.w	r0, #0
 8004558:	f04f 0100 	mov.w	r1, #0
 800455c:	0159      	lsls	r1, r3, #5
 800455e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004562:	0150      	lsls	r0, r2, #5
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4641      	mov	r1, r8
 800456a:	ebb2 0a01 	subs.w	sl, r2, r1
 800456e:	4649      	mov	r1, r9
 8004570:	eb63 0b01 	sbc.w	fp, r3, r1
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004580:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004584:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004588:	ebb2 040a 	subs.w	r4, r2, sl
 800458c:	eb63 050b 	sbc.w	r5, r3, fp
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	00eb      	lsls	r3, r5, #3
 800459a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800459e:	00e2      	lsls	r2, r4, #3
 80045a0:	4614      	mov	r4, r2
 80045a2:	461d      	mov	r5, r3
 80045a4:	4643      	mov	r3, r8
 80045a6:	18e3      	adds	r3, r4, r3
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	464b      	mov	r3, r9
 80045ac:	eb45 0303 	adc.w	r3, r5, r3
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045be:	4629      	mov	r1, r5
 80045c0:	028b      	lsls	r3, r1, #10
 80045c2:	4621      	mov	r1, r4
 80045c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045c8:	4621      	mov	r1, r4
 80045ca:	028a      	lsls	r2, r1, #10
 80045cc:	4610      	mov	r0, r2
 80045ce:	4619      	mov	r1, r3
 80045d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d2:	2200      	movs	r2, #0
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	61fa      	str	r2, [r7, #28]
 80045d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045dc:	f7fc fac6 	bl	8000b6c <__aeabi_uldivmod>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4613      	mov	r3, r2
 80045e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	3301      	adds	r3, #1
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80045f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004600:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004602:	e002      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004604:	4b05      	ldr	r3, [pc, #20]	@ (800461c <HAL_RCC_GetSysClockFreq+0x204>)
 8004606:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800460a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800460c:	4618      	mov	r0, r3
 800460e:	3750      	adds	r7, #80	@ 0x50
 8004610:	46bd      	mov	sp, r7
 8004612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800
 800461c:	00f42400 	.word	0x00f42400
 8004620:	007a1200 	.word	0x007a1200

08004624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004628:	4b03      	ldr	r3, [pc, #12]	@ (8004638 <HAL_RCC_GetHCLKFreq+0x14>)
 800462a:	681b      	ldr	r3, [r3, #0]
}
 800462c:	4618      	mov	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	20000014 	.word	0x20000014

0800463c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004640:	f7ff fff0 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 8004644:	4602      	mov	r2, r0
 8004646:	4b05      	ldr	r3, [pc, #20]	@ (800465c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	0a9b      	lsrs	r3, r3, #10
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	4903      	ldr	r1, [pc, #12]	@ (8004660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004652:	5ccb      	ldrb	r3, [r1, r3]
 8004654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004658:	4618      	mov	r0, r3
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40023800 	.word	0x40023800
 8004660:	0800cea0 	.word	0x0800cea0

08004664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004668:	f7ff ffdc 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 800466c:	4602      	mov	r2, r0
 800466e:	4b05      	ldr	r3, [pc, #20]	@ (8004684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	0b5b      	lsrs	r3, r3, #13
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	4903      	ldr	r1, [pc, #12]	@ (8004688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800467a:	5ccb      	ldrb	r3, [r1, r3]
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40023800 	.word	0x40023800
 8004688:	0800cea0 	.word	0x0800cea0

0800468c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	220f      	movs	r2, #15
 800469a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800469c:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <HAL_RCC_GetClockConfig+0x5c>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 0203 	and.w	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046a8:	4b0f      	ldr	r3, [pc, #60]	@ (80046e8 <HAL_RCC_GetClockConfig+0x5c>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046b4:	4b0c      	ldr	r3, [pc, #48]	@ (80046e8 <HAL_RCC_GetClockConfig+0x5c>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046c0:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <HAL_RCC_GetClockConfig+0x5c>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	08db      	lsrs	r3, r3, #3
 80046c6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046ce:	4b07      	ldr	r3, [pc, #28]	@ (80046ec <HAL_RCC_GetClockConfig+0x60>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0207 	and.w	r2, r3, #7
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	601a      	str	r2, [r3, #0]
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40023c00 	.word	0x40023c00

080046f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e041      	b.n	8004786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f839 	bl	800478e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f000 f9b2 	bl	8004a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d001      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e044      	b.n	8004846 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004854 <HAL_TIM_Base_Start_IT+0xb0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x6c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e6:	d013      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x6c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004858 <HAL_TIM_Base_Start_IT+0xb4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x6c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a19      	ldr	r2, [pc, #100]	@ (800485c <HAL_TIM_Base_Start_IT+0xb8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x6c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a17      	ldr	r2, [pc, #92]	@ (8004860 <HAL_TIM_Base_Start_IT+0xbc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x6c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a16      	ldr	r2, [pc, #88]	@ (8004864 <HAL_TIM_Base_Start_IT+0xc0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d111      	bne.n	8004834 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b06      	cmp	r3, #6
 8004820:	d010      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004832:	e007      	b.n	8004844 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40010000 	.word	0x40010000
 8004858:	40000400 	.word	0x40000400
 800485c:	40000800 	.word	0x40000800
 8004860:	40000c00 	.word	0x40000c00
 8004864:	40014000 	.word	0x40014000

08004868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d020      	beq.n	80048cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01b      	beq.n	80048cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0202 	mvn.w	r2, #2
 800489c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f8d2 	bl	8004a5c <HAL_TIM_IC_CaptureCallback>
 80048b8:	e005      	b.n	80048c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f8c4 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f8d5 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d020      	beq.n	8004918 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01b      	beq.n	8004918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0204 	mvn.w	r2, #4
 80048e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8ac 	bl	8004a5c <HAL_TIM_IC_CaptureCallback>
 8004904:	e005      	b.n	8004912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f89e 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8af 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d020      	beq.n	8004964 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01b      	beq.n	8004964 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0208 	mvn.w	r2, #8
 8004934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2204      	movs	r2, #4
 800493a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f886 	bl	8004a5c <HAL_TIM_IC_CaptureCallback>
 8004950:	e005      	b.n	800495e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f878 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f889 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	d020      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01b      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0210 	mvn.w	r2, #16
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2208      	movs	r2, #8
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f860 	bl	8004a5c <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f852 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f863 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00c      	beq.n	80049d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0201 	mvn.w	r2, #1
 80049cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fd fdc4 	bl	800255c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00c      	beq.n	80049f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f8e0 	bl	8004bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00c      	beq.n	8004a1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d007      	beq.n	8004a1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f834 	bl	8004a84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00c      	beq.n	8004a40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d007      	beq.n	8004a40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0220 	mvn.w	r2, #32
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f8b2 	bl	8004ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a40:	bf00      	nop
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a37      	ldr	r2, [pc, #220]	@ (8004b88 <TIM_Base_SetConfig+0xf0>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00f      	beq.n	8004ad0 <TIM_Base_SetConfig+0x38>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab6:	d00b      	beq.n	8004ad0 <TIM_Base_SetConfig+0x38>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a34      	ldr	r2, [pc, #208]	@ (8004b8c <TIM_Base_SetConfig+0xf4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d007      	beq.n	8004ad0 <TIM_Base_SetConfig+0x38>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a33      	ldr	r2, [pc, #204]	@ (8004b90 <TIM_Base_SetConfig+0xf8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_Base_SetConfig+0x38>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a32      	ldr	r2, [pc, #200]	@ (8004b94 <TIM_Base_SetConfig+0xfc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d108      	bne.n	8004ae2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a28      	ldr	r2, [pc, #160]	@ (8004b88 <TIM_Base_SetConfig+0xf0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d01b      	beq.n	8004b22 <TIM_Base_SetConfig+0x8a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af0:	d017      	beq.n	8004b22 <TIM_Base_SetConfig+0x8a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a25      	ldr	r2, [pc, #148]	@ (8004b8c <TIM_Base_SetConfig+0xf4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <TIM_Base_SetConfig+0x8a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a24      	ldr	r2, [pc, #144]	@ (8004b90 <TIM_Base_SetConfig+0xf8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00f      	beq.n	8004b22 <TIM_Base_SetConfig+0x8a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a23      	ldr	r2, [pc, #140]	@ (8004b94 <TIM_Base_SetConfig+0xfc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00b      	beq.n	8004b22 <TIM_Base_SetConfig+0x8a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a22      	ldr	r2, [pc, #136]	@ (8004b98 <TIM_Base_SetConfig+0x100>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d007      	beq.n	8004b22 <TIM_Base_SetConfig+0x8a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a21      	ldr	r2, [pc, #132]	@ (8004b9c <TIM_Base_SetConfig+0x104>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d003      	beq.n	8004b22 <TIM_Base_SetConfig+0x8a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	@ (8004ba0 <TIM_Base_SetConfig+0x108>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d108      	bne.n	8004b34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a0c      	ldr	r2, [pc, #48]	@ (8004b88 <TIM_Base_SetConfig+0xf0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d103      	bne.n	8004b62 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f043 0204 	orr.w	r2, r3, #4
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	601a      	str	r2, [r3, #0]
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40010000 	.word	0x40010000
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40000800 	.word	0x40000800
 8004b94:	40000c00 	.word	0x40000c00
 8004b98:	40014000 	.word	0x40014000
 8004b9c:	40014400 	.word	0x40014400
 8004ba0:	40014800 	.word	0x40014800

08004ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e042      	b.n	8004c64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fd fdc8 	bl	8002788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2224      	movs	r2, #36	@ 0x24
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f82b 	bl	8004c6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695a      	ldr	r2, [r3, #20]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c70:	b0c0      	sub	sp, #256	@ 0x100
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	68d9      	ldr	r1, [r3, #12]
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	ea40 0301 	orr.w	r3, r0, r1
 8004c94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004cc4:	f021 010c 	bic.w	r1, r1, #12
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce6:	6999      	ldr	r1, [r3, #24]
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	ea40 0301 	orr.w	r3, r0, r1
 8004cf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4b8f      	ldr	r3, [pc, #572]	@ (8004f38 <UART_SetConfig+0x2cc>)
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d005      	beq.n	8004d0c <UART_SetConfig+0xa0>
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4b8d      	ldr	r3, [pc, #564]	@ (8004f3c <UART_SetConfig+0x2d0>)
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d104      	bne.n	8004d16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d0c:	f7ff fcaa 	bl	8004664 <HAL_RCC_GetPCLK2Freq>
 8004d10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d14:	e003      	b.n	8004d1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d16:	f7ff fc91 	bl	800463c <HAL_RCC_GetPCLK1Freq>
 8004d1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d28:	f040 810c 	bne.w	8004f44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d30:	2200      	movs	r2, #0
 8004d32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d3e:	4622      	mov	r2, r4
 8004d40:	462b      	mov	r3, r5
 8004d42:	1891      	adds	r1, r2, r2
 8004d44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d46:	415b      	adcs	r3, r3
 8004d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d4e:	4621      	mov	r1, r4
 8004d50:	eb12 0801 	adds.w	r8, r2, r1
 8004d54:	4629      	mov	r1, r5
 8004d56:	eb43 0901 	adc.w	r9, r3, r1
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d6e:	4690      	mov	r8, r2
 8004d70:	4699      	mov	r9, r3
 8004d72:	4623      	mov	r3, r4
 8004d74:	eb18 0303 	adds.w	r3, r8, r3
 8004d78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d7c:	462b      	mov	r3, r5
 8004d7e:	eb49 0303 	adc.w	r3, r9, r3
 8004d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	18db      	adds	r3, r3, r3
 8004d9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004da0:	4613      	mov	r3, r2
 8004da2:	eb42 0303 	adc.w	r3, r2, r3
 8004da6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004da8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004dac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004db0:	f7fb fedc 	bl	8000b6c <__aeabi_uldivmod>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4b61      	ldr	r3, [pc, #388]	@ (8004f40 <UART_SetConfig+0x2d4>)
 8004dba:	fba3 2302 	umull	r2, r3, r3, r2
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	011c      	lsls	r4, r3, #4
 8004dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dcc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004dd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	1891      	adds	r1, r2, r2
 8004dda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ddc:	415b      	adcs	r3, r3
 8004dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004de4:	4641      	mov	r1, r8
 8004de6:	eb12 0a01 	adds.w	sl, r2, r1
 8004dea:	4649      	mov	r1, r9
 8004dec:	eb43 0b01 	adc.w	fp, r3, r1
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e04:	4692      	mov	sl, r2
 8004e06:	469b      	mov	fp, r3
 8004e08:	4643      	mov	r3, r8
 8004e0a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e12:	464b      	mov	r3, r9
 8004e14:	eb4b 0303 	adc.w	r3, fp, r3
 8004e18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e30:	460b      	mov	r3, r1
 8004e32:	18db      	adds	r3, r3, r3
 8004e34:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e36:	4613      	mov	r3, r2
 8004e38:	eb42 0303 	adc.w	r3, r2, r3
 8004e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e46:	f7fb fe91 	bl	8000b6c <__aeabi_uldivmod>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	4b3b      	ldr	r3, [pc, #236]	@ (8004f40 <UART_SetConfig+0x2d4>)
 8004e52:	fba3 2301 	umull	r2, r3, r3, r1
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	2264      	movs	r2, #100	@ 0x64
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	1acb      	subs	r3, r1, r3
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e66:	4b36      	ldr	r3, [pc, #216]	@ (8004f40 <UART_SetConfig+0x2d4>)
 8004e68:	fba3 2302 	umull	r2, r3, r3, r2
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e74:	441c      	add	r4, r3
 8004e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e88:	4642      	mov	r2, r8
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	1891      	adds	r1, r2, r2
 8004e8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e90:	415b      	adcs	r3, r3
 8004e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e98:	4641      	mov	r1, r8
 8004e9a:	1851      	adds	r1, r2, r1
 8004e9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	414b      	adcs	r3, r1
 8004ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004eb0:	4659      	mov	r1, fp
 8004eb2:	00cb      	lsls	r3, r1, #3
 8004eb4:	4651      	mov	r1, sl
 8004eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eba:	4651      	mov	r1, sl
 8004ebc:	00ca      	lsls	r2, r1, #3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ecc:	464b      	mov	r3, r9
 8004ece:	460a      	mov	r2, r1
 8004ed0:	eb42 0303 	adc.w	r3, r2, r3
 8004ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ee4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ee8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004eec:	460b      	mov	r3, r1
 8004eee:	18db      	adds	r3, r3, r3
 8004ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	eb42 0303 	adc.w	r3, r2, r3
 8004ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004efa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004efe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f02:	f7fb fe33 	bl	8000b6c <__aeabi_uldivmod>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f40 <UART_SetConfig+0x2d4>)
 8004f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f10:	095b      	lsrs	r3, r3, #5
 8004f12:	2164      	movs	r1, #100	@ 0x64
 8004f14:	fb01 f303 	mul.w	r3, r1, r3
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	3332      	adds	r3, #50	@ 0x32
 8004f1e:	4a08      	ldr	r2, [pc, #32]	@ (8004f40 <UART_SetConfig+0x2d4>)
 8004f20:	fba2 2303 	umull	r2, r3, r2, r3
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	f003 0207 	and.w	r2, r3, #7
 8004f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4422      	add	r2, r4
 8004f32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f34:	e106      	b.n	8005144 <UART_SetConfig+0x4d8>
 8004f36:	bf00      	nop
 8004f38:	40011000 	.word	0x40011000
 8004f3c:	40011400 	.word	0x40011400
 8004f40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f56:	4642      	mov	r2, r8
 8004f58:	464b      	mov	r3, r9
 8004f5a:	1891      	adds	r1, r2, r2
 8004f5c:	6239      	str	r1, [r7, #32]
 8004f5e:	415b      	adcs	r3, r3
 8004f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f66:	4641      	mov	r1, r8
 8004f68:	1854      	adds	r4, r2, r1
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	eb43 0501 	adc.w	r5, r3, r1
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	00eb      	lsls	r3, r5, #3
 8004f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f7e:	00e2      	lsls	r2, r4, #3
 8004f80:	4614      	mov	r4, r2
 8004f82:	461d      	mov	r5, r3
 8004f84:	4643      	mov	r3, r8
 8004f86:	18e3      	adds	r3, r4, r3
 8004f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f8c:	464b      	mov	r3, r9
 8004f8e:	eb45 0303 	adc.w	r3, r5, r3
 8004f92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fa2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	008b      	lsls	r3, r1, #2
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	008a      	lsls	r2, r1, #2
 8004fc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004fc4:	f7fb fdd2 	bl	8000b6c <__aeabi_uldivmod>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4b60      	ldr	r3, [pc, #384]	@ (8005150 <UART_SetConfig+0x4e4>)
 8004fce:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	011c      	lsls	r4, r3, #4
 8004fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fe0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fe4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004fe8:	4642      	mov	r2, r8
 8004fea:	464b      	mov	r3, r9
 8004fec:	1891      	adds	r1, r2, r2
 8004fee:	61b9      	str	r1, [r7, #24]
 8004ff0:	415b      	adcs	r3, r3
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	1851      	adds	r1, r2, r1
 8004ffc:	6139      	str	r1, [r7, #16]
 8004ffe:	4649      	mov	r1, r9
 8005000:	414b      	adcs	r3, r1
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005010:	4659      	mov	r1, fp
 8005012:	00cb      	lsls	r3, r1, #3
 8005014:	4651      	mov	r1, sl
 8005016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800501a:	4651      	mov	r1, sl
 800501c:	00ca      	lsls	r2, r1, #3
 800501e:	4610      	mov	r0, r2
 8005020:	4619      	mov	r1, r3
 8005022:	4603      	mov	r3, r0
 8005024:	4642      	mov	r2, r8
 8005026:	189b      	adds	r3, r3, r2
 8005028:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800502c:	464b      	mov	r3, r9
 800502e:	460a      	mov	r2, r1
 8005030:	eb42 0303 	adc.w	r3, r2, r3
 8005034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005042:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005050:	4649      	mov	r1, r9
 8005052:	008b      	lsls	r3, r1, #2
 8005054:	4641      	mov	r1, r8
 8005056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800505a:	4641      	mov	r1, r8
 800505c:	008a      	lsls	r2, r1, #2
 800505e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005062:	f7fb fd83 	bl	8000b6c <__aeabi_uldivmod>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4611      	mov	r1, r2
 800506c:	4b38      	ldr	r3, [pc, #224]	@ (8005150 <UART_SetConfig+0x4e4>)
 800506e:	fba3 2301 	umull	r2, r3, r3, r1
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	2264      	movs	r2, #100	@ 0x64
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	1acb      	subs	r3, r1, r3
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	3332      	adds	r3, #50	@ 0x32
 8005080:	4a33      	ldr	r2, [pc, #204]	@ (8005150 <UART_SetConfig+0x4e4>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800508c:	441c      	add	r4, r3
 800508e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005092:	2200      	movs	r2, #0
 8005094:	673b      	str	r3, [r7, #112]	@ 0x70
 8005096:	677a      	str	r2, [r7, #116]	@ 0x74
 8005098:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	1891      	adds	r1, r2, r2
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	415b      	adcs	r3, r3
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050ac:	4641      	mov	r1, r8
 80050ae:	1851      	adds	r1, r2, r1
 80050b0:	6039      	str	r1, [r7, #0]
 80050b2:	4649      	mov	r1, r9
 80050b4:	414b      	adcs	r3, r1
 80050b6:	607b      	str	r3, [r7, #4]
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050c4:	4659      	mov	r1, fp
 80050c6:	00cb      	lsls	r3, r1, #3
 80050c8:	4651      	mov	r1, sl
 80050ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ce:	4651      	mov	r1, sl
 80050d0:	00ca      	lsls	r2, r1, #3
 80050d2:	4610      	mov	r0, r2
 80050d4:	4619      	mov	r1, r3
 80050d6:	4603      	mov	r3, r0
 80050d8:	4642      	mov	r2, r8
 80050da:	189b      	adds	r3, r3, r2
 80050dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050de:	464b      	mov	r3, r9
 80050e0:	460a      	mov	r2, r1
 80050e2:	eb42 0303 	adc.w	r3, r2, r3
 80050e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80050f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005100:	4649      	mov	r1, r9
 8005102:	008b      	lsls	r3, r1, #2
 8005104:	4641      	mov	r1, r8
 8005106:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800510a:	4641      	mov	r1, r8
 800510c:	008a      	lsls	r2, r1, #2
 800510e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005112:	f7fb fd2b 	bl	8000b6c <__aeabi_uldivmod>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4b0d      	ldr	r3, [pc, #52]	@ (8005150 <UART_SetConfig+0x4e4>)
 800511c:	fba3 1302 	umull	r1, r3, r3, r2
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	2164      	movs	r1, #100	@ 0x64
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	3332      	adds	r3, #50	@ 0x32
 800512e:	4a08      	ldr	r2, [pc, #32]	@ (8005150 <UART_SetConfig+0x4e4>)
 8005130:	fba2 2303 	umull	r2, r3, r2, r3
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	f003 020f 	and.w	r2, r3, #15
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4422      	add	r2, r4
 8005142:	609a      	str	r2, [r3, #8]
}
 8005144:	bf00      	nop
 8005146:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800514a:	46bd      	mov	sp, r7
 800514c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005150:	51eb851f 	.word	0x51eb851f

08005154 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800515c:	4b05      	ldr	r3, [pc, #20]	@ (8005174 <LL_EXTI_EnableIT_0_31+0x20>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	4904      	ldr	r1, [pc, #16]	@ (8005174 <LL_EXTI_EnableIT_0_31+0x20>)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4313      	orrs	r3, r2
 8005166:	600b      	str	r3, [r1, #0]
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	40013c00 	.word	0x40013c00

08005178 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8005180:	4b06      	ldr	r3, [pc, #24]	@ (800519c <LL_EXTI_DisableIT_0_31+0x24>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	43db      	mvns	r3, r3
 8005188:	4904      	ldr	r1, [pc, #16]	@ (800519c <LL_EXTI_DisableIT_0_31+0x24>)
 800518a:	4013      	ands	r3, r2
 800518c:	600b      	str	r3, [r1, #0]
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40013c00 	.word	0x40013c00

080051a0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80051a8:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	4904      	ldr	r1, [pc, #16]	@ (80051c0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	604b      	str	r3, [r1, #4]

}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40013c00 	.word	0x40013c00

080051c4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80051cc:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	43db      	mvns	r3, r3
 80051d4:	4904      	ldr	r1, [pc, #16]	@ (80051e8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	604b      	str	r3, [r1, #4]
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40013c00 	.word	0x40013c00

080051ec <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80051f4:	4b05      	ldr	r3, [pc, #20]	@ (800520c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	4904      	ldr	r1, [pc, #16]	@ (800520c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	608b      	str	r3, [r1, #8]

}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40013c00 	.word	0x40013c00

08005210 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8005218:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	43db      	mvns	r3, r3
 8005220:	4904      	ldr	r1, [pc, #16]	@ (8005234 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005222:	4013      	ands	r3, r2
 8005224:	608b      	str	r3, [r1, #8]

}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40013c00 	.word	0x40013c00

08005238 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005240:	4b05      	ldr	r3, [pc, #20]	@ (8005258 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	4904      	ldr	r1, [pc, #16]	@ (8005258 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4313      	orrs	r3, r2
 800524a:	60cb      	str	r3, [r1, #12]
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	40013c00 	.word	0x40013c00

0800525c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8005264:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	43db      	mvns	r3, r3
 800526c:	4904      	ldr	r1, [pc, #16]	@ (8005280 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800526e:	4013      	ands	r3, r2
 8005270:	60cb      	str	r3, [r1, #12]
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40013c00 	.word	0x40013c00

08005284 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800528c:	2300      	movs	r3, #0
 800528e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	791b      	ldrb	r3, [r3, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d065      	beq.n	8005364 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d06b      	beq.n	8005378 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	795b      	ldrb	r3, [r3, #5]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d01c      	beq.n	80052e2 <LL_EXTI_Init+0x5e>
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	dc25      	bgt.n	80052f8 <LL_EXTI_Init+0x74>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <LL_EXTI_Init+0x32>
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d00b      	beq.n	80052cc <LL_EXTI_Init+0x48>
 80052b4:	e020      	b.n	80052f8 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff ff82 	bl	80051c4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff ff45 	bl	8005154 <LL_EXTI_EnableIT_0_31>
          break;
 80052ca:	e018      	b.n	80052fe <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff ff51 	bl	8005178 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff ff60 	bl	80051a0 <LL_EXTI_EnableEvent_0_31>
          break;
 80052e0:	e00d      	b.n	80052fe <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff ff34 	bl	8005154 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ff55 	bl	80051a0 <LL_EXTI_EnableEvent_0_31>
          break;
 80052f6:	e002      	b.n	80052fe <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	73fb      	strb	r3, [r7, #15]
          break;
 80052fc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	799b      	ldrb	r3, [r3, #6]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d038      	beq.n	8005378 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	799b      	ldrb	r3, [r3, #6]
 800530a:	2b03      	cmp	r3, #3
 800530c:	d01c      	beq.n	8005348 <LL_EXTI_Init+0xc4>
 800530e:	2b03      	cmp	r3, #3
 8005310:	dc25      	bgt.n	800535e <LL_EXTI_Init+0xda>
 8005312:	2b01      	cmp	r3, #1
 8005314:	d002      	beq.n	800531c <LL_EXTI_Init+0x98>
 8005316:	2b02      	cmp	r3, #2
 8005318:	d00b      	beq.n	8005332 <LL_EXTI_Init+0xae>
 800531a:	e020      	b.n	800535e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff ff9b 	bl	800525c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff ff5e 	bl	80051ec <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8005330:	e022      	b.n	8005378 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff ff6a 	bl	8005210 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff ff79 	bl	8005238 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005346:	e017      	b.n	8005378 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff ff4d 	bl	80051ec <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff ff6e 	bl	8005238 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800535c:	e00c      	b.n	8005378 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
            break;
 8005362:	e009      	b.n	8005378 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff ff05 	bl	8005178 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff ff26 	bl	80051c4 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <LL_GPIO_SetPinMode>:
{
 8005382:	b480      	push	{r7}
 8005384:	b08b      	sub	sp, #44	@ 0x2c
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	fa93 f3a3 	rbit	r3, r3
 800539c:	613b      	str	r3, [r7, #16]
  return result;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80053a8:	2320      	movs	r3, #32
 80053aa:	e003      	b.n	80053b4 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	fab3 f383 	clz	r3, r3
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	2103      	movs	r1, #3
 80053b8:	fa01 f303 	lsl.w	r3, r1, r3
 80053bc:	43db      	mvns	r3, r3
 80053be:	401a      	ands	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	fa93 f3a3 	rbit	r3, r3
 80053ca:	61fb      	str	r3, [r7, #28]
  return result;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80053d6:	2320      	movs	r3, #32
 80053d8:	e003      	b.n	80053e2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	fab3 f383 	clz	r3, r3
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	431a      	orrs	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	601a      	str	r2, [r3, #0]
}
 80053f0:	bf00      	nop
 80053f2:	372c      	adds	r7, #44	@ 0x2c
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <LL_GPIO_SetPinOutputType>:
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	43db      	mvns	r3, r3
 8005410:	401a      	ands	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	fb01 f303 	mul.w	r3, r1, r3
 800541a:	431a      	orrs	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	605a      	str	r2, [r3, #4]
}
 8005420:	bf00      	nop
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <LL_GPIO_SetPinSpeed>:
{
 800542c:	b480      	push	{r7}
 800542e:	b08b      	sub	sp, #44	@ 0x2c
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	fa93 f3a3 	rbit	r3, r3
 8005446:	613b      	str	r3, [r7, #16]
  return result;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005452:	2320      	movs	r3, #32
 8005454:	e003      	b.n	800545e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	fab3 f383 	clz	r3, r3
 800545c:	b2db      	uxtb	r3, r3
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	2103      	movs	r1, #3
 8005462:	fa01 f303 	lsl.w	r3, r1, r3
 8005466:	43db      	mvns	r3, r3
 8005468:	401a      	ands	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	fa93 f3a3 	rbit	r3, r3
 8005474:	61fb      	str	r3, [r7, #28]
  return result;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005480:	2320      	movs	r3, #32
 8005482:	e003      	b.n	800548c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005486:	fab3 f383 	clz	r3, r3
 800548a:	b2db      	uxtb	r3, r3
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	fa01 f303 	lsl.w	r3, r1, r3
 8005494:	431a      	orrs	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	609a      	str	r2, [r3, #8]
}
 800549a:	bf00      	nop
 800549c:	372c      	adds	r7, #44	@ 0x2c
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <LL_GPIO_SetPinPull>:
{
 80054a6:	b480      	push	{r7}
 80054a8:	b08b      	sub	sp, #44	@ 0x2c
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	fa93 f3a3 	rbit	r3, r3
 80054c0:	613b      	str	r3, [r7, #16]
  return result;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80054cc:	2320      	movs	r3, #32
 80054ce:	e003      	b.n	80054d8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	fab3 f383 	clz	r3, r3
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	2103      	movs	r1, #3
 80054dc:	fa01 f303 	lsl.w	r3, r1, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	401a      	ands	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	fa93 f3a3 	rbit	r3, r3
 80054ee:	61fb      	str	r3, [r7, #28]
  return result;
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80054fa:	2320      	movs	r3, #32
 80054fc:	e003      	b.n	8005506 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	fab3 f383 	clz	r3, r3
 8005504:	b2db      	uxtb	r3, r3
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	fa01 f303 	lsl.w	r3, r1, r3
 800550e:	431a      	orrs	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	60da      	str	r2, [r3, #12]
}
 8005514:	bf00      	nop
 8005516:	372c      	adds	r7, #44	@ 0x2c
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <LL_GPIO_SetAFPin_0_7>:
{
 8005520:	b480      	push	{r7}
 8005522:	b08b      	sub	sp, #44	@ 0x2c
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a1a      	ldr	r2, [r3, #32]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	fa93 f3a3 	rbit	r3, r3
 800553a:	613b      	str	r3, [r7, #16]
  return result;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005546:	2320      	movs	r3, #32
 8005548:	e003      	b.n	8005552 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	fab3 f383 	clz	r3, r3
 8005550:	b2db      	uxtb	r3, r3
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	210f      	movs	r1, #15
 8005556:	fa01 f303 	lsl.w	r3, r1, r3
 800555a:	43db      	mvns	r3, r3
 800555c:	401a      	ands	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	fa93 f3a3 	rbit	r3, r3
 8005568:	61fb      	str	r3, [r7, #28]
  return result;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005574:	2320      	movs	r3, #32
 8005576:	e003      	b.n	8005580 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	fab3 f383 	clz	r3, r3
 800557e:	b2db      	uxtb	r3, r3
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	fa01 f303 	lsl.w	r3, r1, r3
 8005588:	431a      	orrs	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	372c      	adds	r7, #44	@ 0x2c
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <LL_GPIO_SetAFPin_8_15>:
{
 800559a:	b480      	push	{r7}
 800559c:	b08b      	sub	sp, #44	@ 0x2c
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	0a1b      	lsrs	r3, r3, #8
 80055ae:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	fa93 f3a3 	rbit	r3, r3
 80055b6:	613b      	str	r3, [r7, #16]
  return result;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80055c2:	2320      	movs	r3, #32
 80055c4:	e003      	b.n	80055ce <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	fab3 f383 	clz	r3, r3
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	210f      	movs	r1, #15
 80055d2:	fa01 f303 	lsl.w	r3, r1, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	401a      	ands	r2, r3
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	fa93 f3a3 	rbit	r3, r3
 80055e6:	61fb      	str	r3, [r7, #28]
  return result;
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80055f2:	2320      	movs	r3, #32
 80055f4:	e003      	b.n	80055fe <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	fab3 f383 	clz	r3, r3
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	fa01 f303 	lsl.w	r3, r1, r3
 8005606:	431a      	orrs	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800560c:	bf00      	nop
 800560e:	372c      	adds	r7, #44	@ 0x2c
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08a      	sub	sp, #40	@ 0x28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005622:	2300      	movs	r3, #0
 8005624:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8005626:	2300      	movs	r3, #0
 8005628:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	fa93 f3a3 	rbit	r3, r3
 8005636:	617b      	str	r3, [r7, #20]
  return result;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <LL_GPIO_Init+0x2e>
    return 32U;
 8005642:	2320      	movs	r3, #32
 8005644:	e003      	b.n	800564e <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	fab3 f383 	clz	r3, r3
 800564c:	b2db      	uxtb	r3, r3
 800564e:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005650:	e057      	b.n	8005702 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	2101      	movs	r1, #1
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	fa01 f303 	lsl.w	r3, r1, r3
 800565e:	4013      	ands	r3, r2
 8005660:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d049      	beq.n	80056fc <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d003      	beq.n	8005678 <LL_GPIO_Init+0x60>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b02      	cmp	r3, #2
 8005676:	d10d      	bne.n	8005694 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	461a      	mov	r2, r3
 800567e:	6a39      	ldr	r1, [r7, #32]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff fed3 	bl	800542c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	461a      	mov	r2, r3
 800568c:	6a39      	ldr	r1, [r7, #32]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff feb4 	bl	80053fc <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	461a      	mov	r2, r3
 800569a:	6a39      	ldr	r1, [r7, #32]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ff02 	bl	80054a6 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d121      	bne.n	80056ee <LL_GPIO_Init+0xd6>
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	fa93 f3a3 	rbit	r3, r3
 80056b4:	60bb      	str	r3, [r7, #8]
  return result;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <LL_GPIO_Init+0xac>
    return 32U;
 80056c0:	2320      	movs	r3, #32
 80056c2:	e003      	b.n	80056cc <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	fab3 f383 	clz	r3, r3
 80056ca:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80056cc:	2b07      	cmp	r3, #7
 80056ce:	d807      	bhi.n	80056e0 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	461a      	mov	r2, r3
 80056d6:	6a39      	ldr	r1, [r7, #32]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff ff21 	bl	8005520 <LL_GPIO_SetAFPin_0_7>
 80056de:	e006      	b.n	80056ee <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6a39      	ldr	r1, [r7, #32]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff ff56 	bl	800559a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	461a      	mov	r2, r3
 80056f4:	6a39      	ldr	r1, [r7, #32]
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff fe43 	bl	8005382 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	3301      	adds	r3, #1
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1a0      	bne.n	8005652 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3728      	adds	r7, #40	@ 0x28
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <LL_I2C_Enable>:
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f043 0201 	orr.w	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	601a      	str	r2, [r3, #0]
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <LL_I2C_Disable>:
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 0201 	bic.w	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	601a      	str	r2, [r3, #0]
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <LL_I2C_ConfigFilters>:
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576a:	f023 021f 	bic.w	r2, r3, #31
 800576e:	68b9      	ldr	r1, [r7, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	430b      	orrs	r3, r1
 8005774:	431a      	orrs	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <LL_I2C_SetOwnAddress1>:
{
 8005786:	b480      	push	{r7}
 8005788:	b085      	sub	sp, #20
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800579a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	431a      	orrs	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	609a      	str	r2, [r3, #8]
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <LL_I2C_ConfigSpeed>:
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4a42      	ldr	r2, [pc, #264]	@ (80058dc <LL_I2C_ConfigSpeed+0x124>)
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	0c9b      	lsrs	r3, r3, #18
 80057d8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	431a      	orrs	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	493a      	ldr	r1, [pc, #232]	@ (80058e0 <LL_I2C_ConfigSpeed+0x128>)
 80057f6:	428b      	cmp	r3, r1
 80057f8:	d802      	bhi.n	8005800 <LL_I2C_ConfigSpeed+0x48>
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	3301      	adds	r3, #1
 80057fe:	e009      	b.n	8005814 <LL_I2C_ConfigSpeed+0x5c>
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	4936      	ldr	r1, [pc, #216]	@ (80058e4 <LL_I2C_ConfigSpeed+0x12c>)
 800580c:	fba1 1303 	umull	r1, r3, r1, r3
 8005810:	099b      	lsrs	r3, r3, #6
 8005812:	3301      	adds	r3, #1
 8005814:	431a      	orrs	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a30      	ldr	r2, [pc, #192]	@ (80058e0 <LL_I2C_ConfigSpeed+0x128>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d939      	bls.n	8005896 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d117      	bne.n	8005858 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	4413      	add	r3, r2
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	fbb2 f3f3 	udiv	r3, r2, r3
 8005836:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800583a:	2b00      	cmp	r3, #0
 800583c:	d009      	beq.n	8005852 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4613      	mov	r3, r2
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	4413      	add	r3, r2
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800584c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005850:	e01d      	b.n	800588e <LL_I2C_ConfigSpeed+0xd6>
 8005852:	f248 0301 	movw	r3, #32769	@ 0x8001
 8005856:	e01a      	b.n	800588e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	009a      	lsls	r2, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	fbb2 f3f3 	udiv	r3, r2, r3
 800586a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	009a      	lsls	r2, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005888:	e001      	b.n	800588e <LL_I2C_ConfigSpeed+0xd6>
 800588a:	f248 0301 	movw	r3, #32769	@ 0x8001
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e011      	b.n	80058ba <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	fbb2 f2f3 	udiv	r2, r2, r3
 80058a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80058a4:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b4:	e000      	b.n	80058b8 <LL_I2C_ConfigSpeed+0x100>
 80058b6:	2304      	movs	r3, #4
 80058b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 80058c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	431a      	orrs	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	61da      	str	r2, [r3, #28]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	431bde83 	.word	0x431bde83
 80058e0:	000186a0 	.word	0x000186a0
 80058e4:	10624dd3 	.word	0x10624dd3

080058e8 <LL_I2C_SetMode>:
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f023 021a 	bic.w	r2, r3, #26
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	601a      	str	r2, [r3, #0]
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <LL_I2C_AcknowledgeNextData>:
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	601a      	str	r2, [r3, #0]
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff fefb 	bl	800573a <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005944:	f107 0308 	add.w	r3, r7, #8
 8005948:	4618      	mov	r0, r3
 800594a:	f000 f89d 	bl	8005a88 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68d9      	ldr	r1, [r3, #12]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	461a      	mov	r2, r3
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff fefe 	bl	800575a <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800595e:	6939      	ldr	r1, [r7, #16]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff ff25 	bl	80057b8 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	6959      	ldr	r1, [r3, #20]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	461a      	mov	r2, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff ff04 	bl	8005786 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff ffaf 	bl	80058e8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff fec5 	bl	800571a <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff ffb9 	bl	800590e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80059ac:	4b04      	ldr	r3, [pc, #16]	@ (80059c0 <LL_RCC_GetSysClkSource+0x18>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 030c 	and.w	r3, r3, #12
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40023800 	.word	0x40023800

080059c4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80059c8:	4b04      	ldr	r3, [pc, #16]	@ (80059dc <LL_RCC_GetAHBPrescaler+0x18>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40023800 	.word	0x40023800

080059e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80059e4:	4b04      	ldr	r3, [pc, #16]	@ (80059f8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40023800 	.word	0x40023800

080059fc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005a00:	4b04      	ldr	r3, [pc, #16]	@ (8005a14 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40023800 	.word	0x40023800

08005a18 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005a1c:	4b04      	ldr	r3, [pc, #16]	@ (8005a30 <LL_RCC_PLL_GetMainSource+0x18>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40023800 	.word	0x40023800

08005a34 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005a38:	4b04      	ldr	r3, [pc, #16]	@ (8005a4c <LL_RCC_PLL_GetN+0x18>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	099b      	lsrs	r3, r3, #6
 8005a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	40023800 	.word	0x40023800

08005a50 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005a54:	4b04      	ldr	r3, [pc, #16]	@ (8005a68 <LL_RCC_PLL_GetP+0x18>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40023800 	.word	0x40023800

08005a6c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005a70:	4b04      	ldr	r3, [pc, #16]	@ (8005a84 <LL_RCC_PLL_GetDivider+0x18>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40023800 	.word	0x40023800

08005a88 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005a90:	f000 f820 	bl	8005ad4 <RCC_GetSystemClockFreq>
 8005a94:	4602      	mov	r2, r0
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 f840 	bl	8005b24 <RCC_GetHCLKClockFreq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 f84e 	bl	8005b50 <RCC_GetPCLK1ClockFreq>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f85a 	bl	8005b78 <RCC_GetPCLK2ClockFreq>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60da      	str	r2, [r3, #12]
}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005ade:	f7ff ff63 	bl	80059a8 <LL_RCC_GetSysClkSource>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d00c      	beq.n	8005b02 <RCC_GetSystemClockFreq+0x2e>
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d80f      	bhi.n	8005b0c <RCC_GetSystemClockFreq+0x38>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <RCC_GetSystemClockFreq+0x22>
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d003      	beq.n	8005afc <RCC_GetSystemClockFreq+0x28>
 8005af4:	e00a      	b.n	8005b0c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005af6:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <RCC_GetSystemClockFreq+0x48>)
 8005af8:	607b      	str	r3, [r7, #4]
      break;
 8005afa:	e00a      	b.n	8005b12 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005afc:	4b08      	ldr	r3, [pc, #32]	@ (8005b20 <RCC_GetSystemClockFreq+0x4c>)
 8005afe:	607b      	str	r3, [r7, #4]
      break;
 8005b00:	e007      	b.n	8005b12 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005b02:	2008      	movs	r0, #8
 8005b04:	f000 f84c 	bl	8005ba0 <RCC_PLL_GetFreqDomain_SYS>
 8005b08:	6078      	str	r0, [r7, #4]
      break;
 8005b0a:	e002      	b.n	8005b12 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005b0c:	4b03      	ldr	r3, [pc, #12]	@ (8005b1c <RCC_GetSystemClockFreq+0x48>)
 8005b0e:	607b      	str	r3, [r7, #4]
      break;
 8005b10:	bf00      	nop
  }

  return frequency;
 8005b12:	687b      	ldr	r3, [r7, #4]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	00f42400 	.word	0x00f42400
 8005b20:	007a1200 	.word	0x007a1200

08005b24 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005b2c:	f7ff ff4a 	bl	80059c4 <LL_RCC_GetAHBPrescaler>
 8005b30:	4603      	mov	r3, r0
 8005b32:	091b      	lsrs	r3, r3, #4
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	4a04      	ldr	r2, [pc, #16]	@ (8005b4c <RCC_GetHCLKClockFreq+0x28>)
 8005b3a:	5cd3      	ldrb	r3, [r2, r3]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	40d3      	lsrs	r3, r2
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	0800ce90 	.word	0x0800ce90

08005b50 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005b58:	f7ff ff42 	bl	80059e0 <LL_RCC_GetAPB1Prescaler>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	0a9b      	lsrs	r3, r3, #10
 8005b60:	4a04      	ldr	r2, [pc, #16]	@ (8005b74 <RCC_GetPCLK1ClockFreq+0x24>)
 8005b62:	5cd3      	ldrb	r3, [r2, r3]
 8005b64:	461a      	mov	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	40d3      	lsrs	r3, r2
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	0800cea0 	.word	0x0800cea0

08005b78 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005b80:	f7ff ff3c 	bl	80059fc <LL_RCC_GetAPB2Prescaler>
 8005b84:	4603      	mov	r3, r0
 8005b86:	0b5b      	lsrs	r3, r3, #13
 8005b88:	4a04      	ldr	r2, [pc, #16]	@ (8005b9c <RCC_GetPCLK2ClockFreq+0x24>)
 8005b8a:	5cd3      	ldrb	r3, [r2, r3]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	40d3      	lsrs	r3, r2
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	0800cea0 	.word	0x0800cea0

08005ba0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005ba0:	b590      	push	{r4, r7, lr}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005bb4:	f7ff ff30 	bl	8005a18 <LL_RCC_PLL_GetMainSource>
 8005bb8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d004      	beq.n	8005bca <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bc6:	d003      	beq.n	8005bd0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005bc8:	e005      	b.n	8005bd6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005bca:	4b12      	ldr	r3, [pc, #72]	@ (8005c14 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005bcc:	617b      	str	r3, [r7, #20]
      break;
 8005bce:	e005      	b.n	8005bdc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005bd0:	4b11      	ldr	r3, [pc, #68]	@ (8005c18 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8005bd2:	617b      	str	r3, [r7, #20]
      break;
 8005bd4:	e002      	b.n	8005bdc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c14 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005bd8:	617b      	str	r3, [r7, #20]
      break;
 8005bda:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d113      	bne.n	8005c0a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005be2:	f7ff ff43 	bl	8005a6c <LL_RCC_PLL_GetDivider>
 8005be6:	4602      	mov	r2, r0
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	fbb3 f4f2 	udiv	r4, r3, r2
 8005bee:	f7ff ff21 	bl	8005a34 <LL_RCC_PLL_GetN>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	fb03 f404 	mul.w	r4, r3, r4
 8005bf8:	f7ff ff2a 	bl	8005a50 <LL_RCC_PLL_GetP>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	0c1b      	lsrs	r3, r3, #16
 8005c00:	3301      	adds	r3, #1
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c08:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8005c0a:	693b      	ldr	r3, [r7, #16]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd90      	pop	{r4, r7, pc}
 8005c14:	00f42400 	.word	0x00f42400
 8005c18:	007a1200 	.word	0x007a1200

08005c1c <LL_USART_IsEnabled>:
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c30:	bf0c      	ite	eq
 8005c32:	2301      	moveq	r3, #1
 8005c34:	2300      	movne	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <LL_USART_SetStopBitsLength>:
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	611a      	str	r2, [r3, #16]
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <LL_USART_SetHWFlowCtrl>:
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	615a      	str	r2, [r3, #20]
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <LL_USART_SetBaudRate>:
{
 8005c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c94:	b0c0      	sub	sp, #256	@ 0x100
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c9c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8005ca0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8005ca4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cb0:	f040 810c 	bne.w	8005ecc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005cb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005cbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005cc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	462b      	mov	r3, r5
 8005cca:	1891      	adds	r1, r2, r2
 8005ccc:	6639      	str	r1, [r7, #96]	@ 0x60
 8005cce:	415b      	adcs	r3, r3
 8005cd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cd2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	eb12 0801 	adds.w	r8, r2, r1
 8005cdc:	4629      	mov	r1, r5
 8005cde:	eb43 0901 	adc.w	r9, r3, r1
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cf6:	4690      	mov	r8, r2
 8005cf8:	4699      	mov	r9, r3
 8005cfa:	4623      	mov	r3, r4
 8005cfc:	eb18 0303 	adds.w	r3, r8, r3
 8005d00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d04:	462b      	mov	r3, r5
 8005d06:	eb49 0303 	adc.w	r3, r9, r3
 8005d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d12:	2200      	movs	r2, #0
 8005d14:	469a      	mov	sl, r3
 8005d16:	4693      	mov	fp, r2
 8005d18:	eb1a 030a 	adds.w	r3, sl, sl
 8005d1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d1e:	eb4b 030b 	adc.w	r3, fp, fp
 8005d22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d2c:	f7fa ff1e 	bl	8000b6c <__aeabi_uldivmod>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4b64      	ldr	r3, [pc, #400]	@ (8005ec8 <LL_USART_SetBaudRate+0x238>)
 8005d36:	fba3 2302 	umull	r2, r3, r3, r2
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	b29c      	uxth	r4, r3
 8005d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d4c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d50:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005d54:	4642      	mov	r2, r8
 8005d56:	464b      	mov	r3, r9
 8005d58:	1891      	adds	r1, r2, r2
 8005d5a:	6539      	str	r1, [r7, #80]	@ 0x50
 8005d5c:	415b      	adcs	r3, r3
 8005d5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d64:	4641      	mov	r1, r8
 8005d66:	1851      	adds	r1, r2, r1
 8005d68:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	414b      	adcs	r3, r1
 8005d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	f04f 0300 	mov.w	r3, #0
 8005d78:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8005d7c:	4659      	mov	r1, fp
 8005d7e:	00cb      	lsls	r3, r1, #3
 8005d80:	4651      	mov	r1, sl
 8005d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d86:	4651      	mov	r1, sl
 8005d88:	00ca      	lsls	r2, r1, #3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4603      	mov	r3, r0
 8005d90:	4642      	mov	r2, r8
 8005d92:	189b      	adds	r3, r3, r2
 8005d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d98:	464b      	mov	r3, r9
 8005d9a:	460a      	mov	r2, r1
 8005d9c:	eb42 0303 	adc.w	r3, r2, r3
 8005da0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005da4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005da8:	2200      	movs	r2, #0
 8005daa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dae:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8005db2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005db6:	460b      	mov	r3, r1
 8005db8:	18db      	adds	r3, r3, r3
 8005dba:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	eb42 0303 	adc.w	r3, r2, r3
 8005dc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005dc8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8005dcc:	f7fa fece 	bl	8000b6c <__aeabi_uldivmod>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4b3c      	ldr	r3, [pc, #240]	@ (8005ec8 <LL_USART_SetBaudRate+0x238>)
 8005dd8:	fba3 2301 	umull	r2, r3, r3, r1
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	2264      	movs	r2, #100	@ 0x64
 8005de0:	fb02 f303 	mul.w	r3, r2, r3
 8005de4:	1acb      	subs	r3, r1, r3
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005dec:	4b36      	ldr	r3, [pc, #216]	@ (8005ec8 <LL_USART_SetBaudRate+0x238>)
 8005dee:	fba3 2302 	umull	r2, r3, r3, r2
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	4423      	add	r3, r4
 8005e02:	b29c      	uxth	r4, r3
 8005e04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e0e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e12:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8005e16:	4642      	mov	r2, r8
 8005e18:	464b      	mov	r3, r9
 8005e1a:	1891      	adds	r1, r2, r2
 8005e1c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e1e:	415b      	adcs	r3, r3
 8005e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e22:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e26:	4641      	mov	r1, r8
 8005e28:	1851      	adds	r1, r2, r1
 8005e2a:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	414b      	adcs	r3, r1
 8005e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e3e:	4659      	mov	r1, fp
 8005e40:	00cb      	lsls	r3, r1, #3
 8005e42:	4651      	mov	r1, sl
 8005e44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e48:	4651      	mov	r1, sl
 8005e4a:	00ca      	lsls	r2, r1, #3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4603      	mov	r3, r0
 8005e52:	4642      	mov	r2, r8
 8005e54:	189b      	adds	r3, r3, r2
 8005e56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	460a      	mov	r2, r1
 8005e5e:	eb42 0303 	adc.w	r3, r2, r3
 8005e62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005e66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e70:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005e74:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	18db      	adds	r3, r3, r3
 8005e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e7e:	4613      	mov	r3, r2
 8005e80:	eb42 0303 	adc.w	r3, r2, r3
 8005e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e8a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005e8e:	f7fa fe6d 	bl	8000b6c <__aeabi_uldivmod>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec8 <LL_USART_SetBaudRate+0x238>)
 8005e98:	fba3 1302 	umull	r1, r3, r3, r2
 8005e9c:	095b      	lsrs	r3, r3, #5
 8005e9e:	2164      	movs	r1, #100	@ 0x64
 8005ea0:	fb01 f303 	mul.w	r3, r1, r3
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	3332      	adds	r3, #50	@ 0x32
 8005eaa:	4a07      	ldr	r2, [pc, #28]	@ (8005ec8 <LL_USART_SetBaudRate+0x238>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	4423      	add	r3, r4
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ec4:	609a      	str	r2, [r3, #8]
}
 8005ec6:	e108      	b.n	80060da <LL_USART_SetBaudRate+0x44a>
 8005ec8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005ecc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ed6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005eda:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8005ede:	4642      	mov	r2, r8
 8005ee0:	464b      	mov	r3, r9
 8005ee2:	1891      	adds	r1, r2, r2
 8005ee4:	6239      	str	r1, [r7, #32]
 8005ee6:	415b      	adcs	r3, r3
 8005ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eee:	4641      	mov	r1, r8
 8005ef0:	1854      	adds	r4, r2, r1
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	eb43 0501 	adc.w	r5, r3, r1
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	f04f 0300 	mov.w	r3, #0
 8005f00:	00eb      	lsls	r3, r5, #3
 8005f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f06:	00e2      	lsls	r2, r4, #3
 8005f08:	4614      	mov	r4, r2
 8005f0a:	461d      	mov	r5, r3
 8005f0c:	4643      	mov	r3, r8
 8005f0e:	18e3      	adds	r3, r4, r3
 8005f10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f14:	464b      	mov	r3, r9
 8005f16:	eb45 0303 	adc.w	r3, r5, r3
 8005f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005f22:	2200      	movs	r2, #0
 8005f24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f28:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8005f38:	4629      	mov	r1, r5
 8005f3a:	008b      	lsls	r3, r1, #2
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f42:	4621      	mov	r1, r4
 8005f44:	008a      	lsls	r2, r1, #2
 8005f46:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8005f4a:	f7fa fe0f 	bl	8000b6c <__aeabi_uldivmod>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4b65      	ldr	r3, [pc, #404]	@ (80060e8 <LL_USART_SetBaudRate+0x458>)
 8005f54:	fba3 2302 	umull	r2, r3, r3, r2
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	b29c      	uxth	r4, r3
 8005f60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f64:	2200      	movs	r2, #0
 8005f66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f6e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8005f72:	4642      	mov	r2, r8
 8005f74:	464b      	mov	r3, r9
 8005f76:	1891      	adds	r1, r2, r2
 8005f78:	61b9      	str	r1, [r7, #24]
 8005f7a:	415b      	adcs	r3, r3
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f82:	4641      	mov	r1, r8
 8005f84:	1851      	adds	r1, r2, r1
 8005f86:	6139      	str	r1, [r7, #16]
 8005f88:	4649      	mov	r1, r9
 8005f8a:	414b      	adcs	r3, r1
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f9a:	4659      	mov	r1, fp
 8005f9c:	00cb      	lsls	r3, r1, #3
 8005f9e:	4651      	mov	r1, sl
 8005fa0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fa4:	4651      	mov	r1, sl
 8005fa6:	00ca      	lsls	r2, r1, #3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	4603      	mov	r3, r0
 8005fae:	4642      	mov	r2, r8
 8005fb0:	189b      	adds	r3, r3, r2
 8005fb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	460a      	mov	r2, r1
 8005fba:	eb42 0303 	adc.w	r3, r2, r3
 8005fbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005fc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fcc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8005fdc:	4649      	mov	r1, r9
 8005fde:	008b      	lsls	r3, r1, #2
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fe6:	4641      	mov	r1, r8
 8005fe8:	008a      	lsls	r2, r1, #2
 8005fea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005fee:	f7fa fdbd 	bl	8000b6c <__aeabi_uldivmod>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80060e8 <LL_USART_SetBaudRate+0x458>)
 8005ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	2264      	movs	r2, #100	@ 0x64
 8006002:	fb02 f303 	mul.w	r3, r2, r3
 8006006:	1acb      	subs	r3, r1, r3
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	3332      	adds	r3, #50	@ 0x32
 800600c:	4a36      	ldr	r2, [pc, #216]	@ (80060e8 <LL_USART_SetBaudRate+0x458>)
 800600e:	fba2 2303 	umull	r2, r3, r2, r3
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	b29b      	uxth	r3, r3
 8006016:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800601a:	b29b      	uxth	r3, r3
 800601c:	4423      	add	r3, r4
 800601e:	b29c      	uxth	r4, r3
 8006020:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006024:	2200      	movs	r2, #0
 8006026:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006028:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800602a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800602e:	4642      	mov	r2, r8
 8006030:	464b      	mov	r3, r9
 8006032:	1891      	adds	r1, r2, r2
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	415b      	adcs	r3, r3
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800603e:	4641      	mov	r1, r8
 8006040:	1851      	adds	r1, r2, r1
 8006042:	6039      	str	r1, [r7, #0]
 8006044:	4649      	mov	r1, r9
 8006046:	414b      	adcs	r3, r1
 8006048:	607b      	str	r3, [r7, #4]
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006056:	4659      	mov	r1, fp
 8006058:	00cb      	lsls	r3, r1, #3
 800605a:	4651      	mov	r1, sl
 800605c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006060:	4651      	mov	r1, sl
 8006062:	00ca      	lsls	r2, r1, #3
 8006064:	4610      	mov	r0, r2
 8006066:	4619      	mov	r1, r3
 8006068:	4603      	mov	r3, r0
 800606a:	4642      	mov	r2, r8
 800606c:	189b      	adds	r3, r3, r2
 800606e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006070:	464b      	mov	r3, r9
 8006072:	460a      	mov	r2, r1
 8006074:	eb42 0303 	adc.w	r3, r2, r3
 8006078:	677b      	str	r3, [r7, #116]	@ 0x74
 800607a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800607e:	2200      	movs	r2, #0
 8006080:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006082:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	f04f 0300 	mov.w	r3, #0
 800608c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8006090:	4649      	mov	r1, r9
 8006092:	008b      	lsls	r3, r1, #2
 8006094:	4641      	mov	r1, r8
 8006096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800609a:	4641      	mov	r1, r8
 800609c:	008a      	lsls	r2, r1, #2
 800609e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80060a2:	f7fa fd63 	bl	8000b6c <__aeabi_uldivmod>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4b0f      	ldr	r3, [pc, #60]	@ (80060e8 <LL_USART_SetBaudRate+0x458>)
 80060ac:	fba3 1302 	umull	r1, r3, r3, r2
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	2164      	movs	r1, #100	@ 0x64
 80060b4:	fb01 f303 	mul.w	r3, r1, r3
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	3332      	adds	r3, #50	@ 0x32
 80060be:	4a0a      	ldr	r2, [pc, #40]	@ (80060e8 <LL_USART_SetBaudRate+0x458>)
 80060c0:	fba2 2303 	umull	r2, r3, r2, r3
 80060c4:	095b      	lsrs	r3, r3, #5
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	4423      	add	r3, r4
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060d8:	609a      	str	r2, [r3, #8]
}
 80060da:	bf00      	nop
 80060dc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80060e0:	46bd      	mov	sp, r7
 80060e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060e6:	bf00      	nop
 80060e8:	51eb851f 	.word	0x51eb851f

080060ec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff fd8c 	bl	8005c1c <LL_USART_IsEnabled>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d149      	bne.n	800619e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006112:	f023 030c 	bic.w	r3, r3, #12
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	6851      	ldr	r1, [r2, #4]
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	68d2      	ldr	r2, [r2, #12]
 800611e:	4311      	orrs	r1, r2
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	6912      	ldr	r2, [r2, #16]
 8006124:	4311      	orrs	r1, r2
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	6992      	ldr	r2, [r2, #24]
 800612a:	430a      	orrs	r2, r1
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff fd83 	bl	8005c44 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff fd90 	bl	8005c6a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800614a:	f107 0308 	add.w	r3, r7, #8
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fc9a 	bl	8005a88 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a14      	ldr	r2, [pc, #80]	@ (80061a8 <LL_USART_Init+0xbc>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d102      	bne.n	8006162 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	61bb      	str	r3, [r7, #24]
 8006160:	e00c      	b.n	800617c <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a11      	ldr	r2, [pc, #68]	@ (80061ac <LL_USART_Init+0xc0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d102      	bne.n	8006170 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	e005      	b.n	800617c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a0f      	ldr	r2, [pc, #60]	@ (80061b0 <LL_USART_Init+0xc4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d101      	bne.n	800617c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00d      	beq.n	800619e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 800618a:	2300      	movs	r3, #0
 800618c:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8006196:	69b9      	ldr	r1, [r7, #24]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff fd79 	bl	8005c90 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800619e:	7ffb      	ldrb	r3, [r7, #31]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3720      	adds	r7, #32
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40011000 	.word	0x40011000
 80061ac:	40004400 	.word	0x40004400
 80061b0:	40011400 	.word	0x40011400

080061b4 <__NVIC_SetPriority>:
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	6039      	str	r1, [r7, #0]
 80061be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	db0a      	blt.n	80061de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	490c      	ldr	r1, [pc, #48]	@ (8006200 <__NVIC_SetPriority+0x4c>)
 80061ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061d2:	0112      	lsls	r2, r2, #4
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	440b      	add	r3, r1
 80061d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80061dc:	e00a      	b.n	80061f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	4908      	ldr	r1, [pc, #32]	@ (8006204 <__NVIC_SetPriority+0x50>)
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	3b04      	subs	r3, #4
 80061ec:	0112      	lsls	r2, r2, #4
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	440b      	add	r3, r1
 80061f2:	761a      	strb	r2, [r3, #24]
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	e000e100 	.word	0xe000e100
 8006204:	e000ed00 	.word	0xe000ed00

08006208 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006208:	b580      	push	{r7, lr}
 800620a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800620c:	4b05      	ldr	r3, [pc, #20]	@ (8006224 <SysTick_Handler+0x1c>)
 800620e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006210:	f002 fa04 	bl	800861c <xTaskGetSchedulerState>
 8006214:	4603      	mov	r3, r0
 8006216:	2b01      	cmp	r3, #1
 8006218:	d001      	beq.n	800621e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800621a:	f003 f8fd 	bl	8009418 <xPortSysTickHandler>
  }
}
 800621e:	bf00      	nop
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	e000e010 	.word	0xe000e010

08006228 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800622c:	2100      	movs	r1, #0
 800622e:	f06f 0004 	mvn.w	r0, #4
 8006232:	f7ff ffbf 	bl	80061b4 <__NVIC_SetPriority>
#endif
}
 8006236:	bf00      	nop
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006242:	f3ef 8305 	mrs	r3, IPSR
 8006246:	603b      	str	r3, [r7, #0]
  return(result);
 8006248:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800624e:	f06f 0305 	mvn.w	r3, #5
 8006252:	607b      	str	r3, [r7, #4]
 8006254:	e00c      	b.n	8006270 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006256:	4b0a      	ldr	r3, [pc, #40]	@ (8006280 <osKernelInitialize+0x44>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d105      	bne.n	800626a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800625e:	4b08      	ldr	r3, [pc, #32]	@ (8006280 <osKernelInitialize+0x44>)
 8006260:	2201      	movs	r2, #1
 8006262:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006264:	2300      	movs	r3, #0
 8006266:	607b      	str	r3, [r7, #4]
 8006268:	e002      	b.n	8006270 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800626a:	f04f 33ff 	mov.w	r3, #4294967295
 800626e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006270:	687b      	ldr	r3, [r7, #4]
}
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	2000053c 	.word	0x2000053c

08006284 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800628a:	f3ef 8305 	mrs	r3, IPSR
 800628e:	603b      	str	r3, [r7, #0]
  return(result);
 8006290:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006296:	f06f 0305 	mvn.w	r3, #5
 800629a:	607b      	str	r3, [r7, #4]
 800629c:	e010      	b.n	80062c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800629e:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <osKernelStart+0x48>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d109      	bne.n	80062ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80062a6:	f7ff ffbf 	bl	8006228 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80062aa:	4b08      	ldr	r3, [pc, #32]	@ (80062cc <osKernelStart+0x48>)
 80062ac:	2202      	movs	r2, #2
 80062ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80062b0:	f001 fd56 	bl	8007d60 <vTaskStartScheduler>
      stat = osOK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	607b      	str	r3, [r7, #4]
 80062b8:	e002      	b.n	80062c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80062ba:	f04f 33ff 	mov.w	r3, #4294967295
 80062be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062c0:	687b      	ldr	r3, [r7, #4]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	2000053c 	.word	0x2000053c

080062d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08e      	sub	sp, #56	@ 0x38
 80062d4:	af04      	add	r7, sp, #16
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e0:	f3ef 8305 	mrs	r3, IPSR
 80062e4:	617b      	str	r3, [r7, #20]
  return(result);
 80062e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d17e      	bne.n	80063ea <osThreadNew+0x11a>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d07b      	beq.n	80063ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80062f2:	2380      	movs	r3, #128	@ 0x80
 80062f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80062f6:	2318      	movs	r3, #24
 80062f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80062fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006302:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d045      	beq.n	8006396 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <osThreadNew+0x48>
        name = attr->name;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d008      	beq.n	800633e <osThreadNew+0x6e>
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b38      	cmp	r3, #56	@ 0x38
 8006330:	d805      	bhi.n	800633e <osThreadNew+0x6e>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <osThreadNew+0x72>
        return (NULL);
 800633e:	2300      	movs	r3, #0
 8006340:	e054      	b.n	80063ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	089b      	lsrs	r3, r3, #2
 8006350:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00e      	beq.n	8006378 <osThreadNew+0xa8>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	2b5b      	cmp	r3, #91	@ 0x5b
 8006360:	d90a      	bls.n	8006378 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006366:	2b00      	cmp	r3, #0
 8006368:	d006      	beq.n	8006378 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <osThreadNew+0xa8>
        mem = 1;
 8006372:	2301      	movs	r3, #1
 8006374:	61bb      	str	r3, [r7, #24]
 8006376:	e010      	b.n	800639a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10c      	bne.n	800639a <osThreadNew+0xca>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d108      	bne.n	800639a <osThreadNew+0xca>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <osThreadNew+0xca>
          mem = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	61bb      	str	r3, [r7, #24]
 8006394:	e001      	b.n	800639a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d110      	bne.n	80063c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063a8:	9202      	str	r2, [sp, #8]
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	6a3a      	ldr	r2, [r7, #32]
 80063b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f001 faf6 	bl	80079a8 <xTaskCreateStatic>
 80063bc:	4603      	mov	r3, r0
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	e013      	b.n	80063ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d110      	bne.n	80063ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	f107 0310 	add.w	r3, r7, #16
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f001 fb44 	bl	8007a68 <xTaskCreate>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d001      	beq.n	80063ea <osThreadNew+0x11a>
            hTask = NULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063ea:	693b      	ldr	r3, [r7, #16]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3728      	adds	r7, #40	@ 0x28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063fc:	f3ef 8305 	mrs	r3, IPSR
 8006400:	60bb      	str	r3, [r7, #8]
  return(result);
 8006402:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <osDelay+0x1c>
    stat = osErrorISR;
 8006408:	f06f 0305 	mvn.w	r3, #5
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	e007      	b.n	8006420 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <osDelay+0x2c>
      vTaskDelay(ticks);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f001 fc6a 	bl	8007cf4 <vTaskDelay>
    }
  }

  return (stat);
 8006420:	68fb      	ldr	r3, [r7, #12]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800642a:	b580      	push	{r7, lr}
 800642c:	b088      	sub	sp, #32
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006436:	f3ef 8305 	mrs	r3, IPSR
 800643a:	60bb      	str	r3, [r7, #8]
  return(result);
 800643c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800643e:	2b00      	cmp	r3, #0
 8006440:	d174      	bne.n	800652c <osMutexNew+0x102>
    if (attr != NULL) {
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	e001      	b.n	8006454 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <osMutexNew+0x3a>
      rmtx = 1U;
 800645e:	2301      	movs	r3, #1
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	e001      	b.n	8006468 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f003 0308 	and.w	r3, r3, #8
 800646e:	2b00      	cmp	r3, #0
 8006470:	d15c      	bne.n	800652c <osMutexNew+0x102>
      mem = -1;
 8006472:	f04f 33ff 	mov.w	r3, #4294967295
 8006476:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d015      	beq.n	80064aa <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d006      	beq.n	8006494 <osMutexNew+0x6a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	2b4f      	cmp	r3, #79	@ 0x4f
 800648c:	d902      	bls.n	8006494 <osMutexNew+0x6a>
          mem = 1;
 800648e:	2301      	movs	r3, #1
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	e00c      	b.n	80064ae <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d108      	bne.n	80064ae <osMutexNew+0x84>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <osMutexNew+0x84>
            mem = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	613b      	str	r3, [r7, #16]
 80064a8:	e001      	b.n	80064ae <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d112      	bne.n	80064da <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d007      	beq.n	80064ca <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	4619      	mov	r1, r3
 80064c0:	2004      	movs	r0, #4
 80064c2:	f000 fc50 	bl	8006d66 <xQueueCreateMutexStatic>
 80064c6:	61f8      	str	r0, [r7, #28]
 80064c8:	e016      	b.n	80064f8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	4619      	mov	r1, r3
 80064d0:	2001      	movs	r0, #1
 80064d2:	f000 fc48 	bl	8006d66 <xQueueCreateMutexStatic>
 80064d6:	61f8      	str	r0, [r7, #28]
 80064d8:	e00e      	b.n	80064f8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10b      	bne.n	80064f8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80064e6:	2004      	movs	r0, #4
 80064e8:	f000 fc25 	bl	8006d36 <xQueueCreateMutex>
 80064ec:	61f8      	str	r0, [r7, #28]
 80064ee:	e003      	b.n	80064f8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80064f0:	2001      	movs	r0, #1
 80064f2:	f000 fc20 	bl	8006d36 <xQueueCreateMutex>
 80064f6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00c      	beq.n	8006518 <osMutexNew+0xee>
        if (attr != NULL) {
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <osMutexNew+0xe2>
          name = attr->name;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	e001      	b.n	8006510 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006510:	68f9      	ldr	r1, [r7, #12]
 8006512:	69f8      	ldr	r0, [r7, #28]
 8006514:	f001 f9ea 	bl	80078ec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d006      	beq.n	800652c <osMutexNew+0x102>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	f043 0301 	orr.w	r3, r3, #1
 800652a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800652c:	69fb      	ldr	r3, [r7, #28]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3720      	adds	r7, #32
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006536:	b580      	push	{r7, lr}
 8006538:	b086      	sub	sp, #24
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f023 0301 	bic.w	r3, r3, #1
 8006546:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006554:	f3ef 8305 	mrs	r3, IPSR
 8006558:	60bb      	str	r3, [r7, #8]
  return(result);
 800655a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006560:	f06f 0305 	mvn.w	r3, #5
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	e02c      	b.n	80065c2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d103      	bne.n	8006576 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800656e:	f06f 0303 	mvn.w	r3, #3
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	e025      	b.n	80065c2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d011      	beq.n	80065a0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6938      	ldr	r0, [r7, #16]
 8006580:	f000 fc41 	bl	8006e06 <xQueueTakeMutexRecursive>
 8006584:	4603      	mov	r3, r0
 8006586:	2b01      	cmp	r3, #1
 8006588:	d01b      	beq.n	80065c2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006590:	f06f 0301 	mvn.w	r3, #1
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	e014      	b.n	80065c2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006598:	f06f 0302 	mvn.w	r3, #2
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	e010      	b.n	80065c2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6938      	ldr	r0, [r7, #16]
 80065a4:	f000 fee8 	bl	8007378 <xQueueSemaphoreTake>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d009      	beq.n	80065c2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80065b4:	f06f 0301 	mvn.w	r3, #1
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	e002      	b.n	80065c2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80065bc:	f06f 0302 	mvn.w	r3, #2
 80065c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80065c2:	697b      	ldr	r3, [r7, #20]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065e8:	f3ef 8305 	mrs	r3, IPSR
 80065ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80065ee:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <osMutexRelease+0x30>
    stat = osErrorISR;
 80065f4:	f06f 0305 	mvn.w	r3, #5
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	e01f      	b.n	800663c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d103      	bne.n	800660a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006602:	f06f 0303 	mvn.w	r3, #3
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	e018      	b.n	800663c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006610:	6938      	ldr	r0, [r7, #16]
 8006612:	f000 fbc3 	bl	8006d9c <xQueueGiveMutexRecursive>
 8006616:	4603      	mov	r3, r0
 8006618:	2b01      	cmp	r3, #1
 800661a:	d00f      	beq.n	800663c <osMutexRelease+0x70>
        stat = osErrorResource;
 800661c:	f06f 0302 	mvn.w	r3, #2
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	e00b      	b.n	800663c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006624:	2300      	movs	r3, #0
 8006626:	2200      	movs	r2, #0
 8006628:	2100      	movs	r1, #0
 800662a:	6938      	ldr	r0, [r7, #16]
 800662c:	f000 fc22 	bl	8006e74 <xQueueGenericSend>
 8006630:	4603      	mov	r3, r0
 8006632:	2b01      	cmp	r3, #1
 8006634:	d002      	beq.n	800663c <osMutexRelease+0x70>
        stat = osErrorResource;
 8006636:	f06f 0302 	mvn.w	r3, #2
 800663a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800663c:	697b      	ldr	r3, [r7, #20]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006646:	b580      	push	{r7, lr}
 8006648:	b08a      	sub	sp, #40	@ 0x28
 800664a:	af02      	add	r7, sp, #8
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006656:	f3ef 8305 	mrs	r3, IPSR
 800665a:	613b      	str	r3, [r7, #16]
  return(result);
 800665c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800665e:	2b00      	cmp	r3, #0
 8006660:	d15f      	bne.n	8006722 <osMessageQueueNew+0xdc>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d05c      	beq.n	8006722 <osMessageQueueNew+0xdc>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d059      	beq.n	8006722 <osMessageQueueNew+0xdc>
    mem = -1;
 800666e:	f04f 33ff 	mov.w	r3, #4294967295
 8006672:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d029      	beq.n	80066ce <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d012      	beq.n	80066a8 <osMessageQueueNew+0x62>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	2b4f      	cmp	r3, #79	@ 0x4f
 8006688:	d90e      	bls.n	80066a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695a      	ldr	r2, [r3, #20]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	68b9      	ldr	r1, [r7, #8]
 800669a:	fb01 f303 	mul.w	r3, r1, r3
 800669e:	429a      	cmp	r2, r3
 80066a0:	d302      	bcc.n	80066a8 <osMessageQueueNew+0x62>
        mem = 1;
 80066a2:	2301      	movs	r3, #1
 80066a4:	61bb      	str	r3, [r7, #24]
 80066a6:	e014      	b.n	80066d2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d110      	bne.n	80066d2 <osMessageQueueNew+0x8c>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10c      	bne.n	80066d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d108      	bne.n	80066d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <osMessageQueueNew+0x8c>
          mem = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	61bb      	str	r3, [r7, #24]
 80066cc:	e001      	b.n	80066d2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d10b      	bne.n	80066f0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	2100      	movs	r1, #0
 80066e2:	9100      	str	r1, [sp, #0]
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 fa30 	bl	8006b4c <xQueueGenericCreateStatic>
 80066ec:	61f8      	str	r0, [r7, #28]
 80066ee:	e008      	b.n	8006702 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d105      	bne.n	8006702 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80066f6:	2200      	movs	r2, #0
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 faa3 	bl	8006c46 <xQueueGenericCreate>
 8006700:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00c      	beq.n	8006722 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <osMessageQueueNew+0xd0>
        name = attr->name;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	e001      	b.n	800671a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800671a:	6979      	ldr	r1, [r7, #20]
 800671c:	69f8      	ldr	r0, [r7, #28]
 800671e:	f001 f8e5 	bl	80078ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006722:	69fb      	ldr	r3, [r7, #28]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3720      	adds	r7, #32
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	603b      	str	r3, [r7, #0]
 8006738:	4613      	mov	r3, r2
 800673a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006744:	f3ef 8305 	mrs	r3, IPSR
 8006748:	617b      	str	r3, [r7, #20]
  return(result);
 800674a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800674c:	2b00      	cmp	r3, #0
 800674e:	d028      	beq.n	80067a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <osMessageQueuePut+0x36>
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <osMessageQueuePut+0x36>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006762:	f06f 0303 	mvn.w	r3, #3
 8006766:	61fb      	str	r3, [r7, #28]
 8006768:	e038      	b.n	80067dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800676a:	2300      	movs	r3, #0
 800676c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800676e:	f107 0210 	add.w	r2, r7, #16
 8006772:	2300      	movs	r3, #0
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	69b8      	ldr	r0, [r7, #24]
 8006778:	f000 fc7e 	bl	8007078 <xQueueGenericSendFromISR>
 800677c:	4603      	mov	r3, r0
 800677e:	2b01      	cmp	r3, #1
 8006780:	d003      	beq.n	800678a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006782:	f06f 0302 	mvn.w	r3, #2
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	e028      	b.n	80067dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d025      	beq.n	80067dc <osMessageQueuePut+0xb0>
 8006790:	4b15      	ldr	r3, [pc, #84]	@ (80067e8 <osMessageQueuePut+0xbc>)
 8006792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	e01c      	b.n	80067dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <osMessageQueuePut+0x82>
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80067ae:	f06f 0303 	mvn.w	r3, #3
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	e012      	b.n	80067dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80067b6:	2300      	movs	r3, #0
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	69b8      	ldr	r0, [r7, #24]
 80067be:	f000 fb59 	bl	8006e74 <xQueueGenericSend>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d009      	beq.n	80067dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80067ce:	f06f 0301 	mvn.w	r3, #1
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	e002      	b.n	80067dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80067d6:	f06f 0302 	mvn.w	r3, #2
 80067da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80067dc:	69fb      	ldr	r3, [r7, #28]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3720      	adds	r7, #32
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006802:	f3ef 8305 	mrs	r3, IPSR
 8006806:	617b      	str	r3, [r7, #20]
  return(result);
 8006808:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800680a:	2b00      	cmp	r3, #0
 800680c:	d028      	beq.n	8006860 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <osMessageQueueGet+0x34>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <osMessageQueueGet+0x34>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006820:	f06f 0303 	mvn.w	r3, #3
 8006824:	61fb      	str	r3, [r7, #28]
 8006826:	e037      	b.n	8006898 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006828:	2300      	movs	r3, #0
 800682a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800682c:	f107 0310 	add.w	r3, r7, #16
 8006830:	461a      	mov	r2, r3
 8006832:	68b9      	ldr	r1, [r7, #8]
 8006834:	69b8      	ldr	r0, [r7, #24]
 8006836:	f000 feaf 	bl	8007598 <xQueueReceiveFromISR>
 800683a:	4603      	mov	r3, r0
 800683c:	2b01      	cmp	r3, #1
 800683e:	d003      	beq.n	8006848 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006840:	f06f 0302 	mvn.w	r3, #2
 8006844:	61fb      	str	r3, [r7, #28]
 8006846:	e027      	b.n	8006898 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d024      	beq.n	8006898 <osMessageQueueGet+0xac>
 800684e:	4b15      	ldr	r3, [pc, #84]	@ (80068a4 <osMessageQueueGet+0xb8>)
 8006850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	e01b      	b.n	8006898 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <osMessageQueueGet+0x80>
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d103      	bne.n	8006874 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800686c:	f06f 0303 	mvn.w	r3, #3
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	e011      	b.n	8006898 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	68b9      	ldr	r1, [r7, #8]
 8006878:	69b8      	ldr	r0, [r7, #24]
 800687a:	f000 fc9b 	bl	80071b4 <xQueueReceive>
 800687e:	4603      	mov	r3, r0
 8006880:	2b01      	cmp	r3, #1
 8006882:	d009      	beq.n	8006898 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800688a:	f06f 0301 	mvn.w	r3, #1
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	e002      	b.n	8006898 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006892:	f06f 0302 	mvn.w	r3, #2
 8006896:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006898:	69fb      	ldr	r3, [r7, #28]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3720      	adds	r7, #32
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	e000ed04 	.word	0xe000ed04

080068a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4a07      	ldr	r2, [pc, #28]	@ (80068d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80068b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4a06      	ldr	r2, [pc, #24]	@ (80068d8 <vApplicationGetIdleTaskMemory+0x30>)
 80068be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2280      	movs	r2, #128	@ 0x80
 80068c4:	601a      	str	r2, [r3, #0]
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20000540 	.word	0x20000540
 80068d8:	2000059c 	.word	0x2000059c

080068dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4a07      	ldr	r2, [pc, #28]	@ (8006908 <vApplicationGetTimerTaskMemory+0x2c>)
 80068ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4a06      	ldr	r2, [pc, #24]	@ (800690c <vApplicationGetTimerTaskMemory+0x30>)
 80068f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068fa:	601a      	str	r2, [r3, #0]
}
 80068fc:	bf00      	nop
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	2000079c 	.word	0x2000079c
 800690c:	200007f8 	.word	0x200007f8

08006910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f103 0208 	add.w	r2, r3, #8
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f04f 32ff 	mov.w	r2, #4294967295
 8006928:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f103 0208 	add.w	r2, r3, #8
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f103 0208 	add.w	r2, r3, #8
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	601a      	str	r2, [r3, #0]
}
 80069a6:	bf00      	nop
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069b2:	b480      	push	{r7}
 80069b4:	b085      	sub	sp, #20
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c8:	d103      	bne.n	80069d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	e00c      	b.n	80069ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3308      	adds	r3, #8
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	e002      	b.n	80069e0 <vListInsert+0x2e>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d2f6      	bcs.n	80069da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	601a      	str	r2, [r3, #0]
}
 8006a18:	bf00      	nop
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	6892      	ldr	r2, [r2, #8]
 8006a3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6852      	ldr	r2, [r2, #4]
 8006a44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d103      	bne.n	8006a58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	1e5a      	subs	r2, r3, #1
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10b      	bne.n	8006aa4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
 8006aa2:	e7fd      	b.n	8006aa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006aa4:	f002 fc28 	bl	80092f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab0:	68f9      	ldr	r1, [r7, #12]
 8006ab2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ab4:	fb01 f303 	mul.w	r3, r1, r3
 8006ab8:	441a      	add	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	68f9      	ldr	r1, [r7, #12]
 8006ad8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ada:	fb01 f303 	mul.w	r3, r1, r3
 8006ade:	441a      	add	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	22ff      	movs	r2, #255	@ 0xff
 8006ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	22ff      	movs	r2, #255	@ 0xff
 8006af0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d114      	bne.n	8006b24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01a      	beq.n	8006b38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3310      	adds	r3, #16
 8006b06:	4618      	mov	r0, r3
 8006b08:	f001 fbb8 	bl	800827c <xTaskRemoveFromEventList>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d012      	beq.n	8006b38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b12:	4b0d      	ldr	r3, [pc, #52]	@ (8006b48 <xQueueGenericReset+0xd0>)
 8006b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	e009      	b.n	8006b38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3310      	adds	r3, #16
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff fef1 	bl	8006910 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3324      	adds	r3, #36	@ 0x24
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7ff feec 	bl	8006910 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b38:	f002 fc10 	bl	800935c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b3c:	2301      	movs	r3, #1
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	e000ed04 	.word	0xe000ed04

08006b4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08e      	sub	sp, #56	@ 0x38
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10b      	bne.n	8006b78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b72:	bf00      	nop
 8006b74:	bf00      	nop
 8006b76:	e7fd      	b.n	8006b74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10b      	bne.n	8006b96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	e7fd      	b.n	8006b92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <xQueueGenericCreateStatic+0x56>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <xQueueGenericCreateStatic+0x5a>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <xQueueGenericCreateStatic+0x5c>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10b      	bne.n	8006bc4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	623b      	str	r3, [r7, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	bf00      	nop
 8006bc2:	e7fd      	b.n	8006bc0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d102      	bne.n	8006bd0 <xQueueGenericCreateStatic+0x84>
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <xQueueGenericCreateStatic+0x88>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <xQueueGenericCreateStatic+0x8a>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10b      	bne.n	8006bf2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	61fb      	str	r3, [r7, #28]
}
 8006bec:	bf00      	nop
 8006bee:	bf00      	nop
 8006bf0:	e7fd      	b.n	8006bee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bf2:	2350      	movs	r3, #80	@ 0x50
 8006bf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b50      	cmp	r3, #80	@ 0x50
 8006bfa:	d00b      	beq.n	8006c14 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	61bb      	str	r3, [r7, #24]
}
 8006c0e:	bf00      	nop
 8006c10:	bf00      	nop
 8006c12:	e7fd      	b.n	8006c10 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00d      	beq.n	8006c3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c28:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4613      	mov	r3, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 f840 	bl	8006cbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3730      	adds	r7, #48	@ 0x30
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b08a      	sub	sp, #40	@ 0x28
 8006c4a:	af02      	add	r7, sp, #8
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	4613      	mov	r3, r2
 8006c52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10b      	bne.n	8006c72 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	613b      	str	r3, [r7, #16]
}
 8006c6c:	bf00      	nop
 8006c6e:	bf00      	nop
 8006c70:	e7fd      	b.n	8006c6e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	fb02 f303 	mul.w	r3, r2, r3
 8006c7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	3350      	adds	r3, #80	@ 0x50
 8006c80:	4618      	mov	r0, r3
 8006c82:	f002 fc5b 	bl	800953c <pvPortMalloc>
 8006c86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d011      	beq.n	8006cb2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	3350      	adds	r3, #80	@ 0x50
 8006c96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ca0:	79fa      	ldrb	r2, [r7, #7]
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f805 	bl	8006cbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
	}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3720      	adds	r7, #32
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d103      	bne.n	8006cd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	601a      	str	r2, [r3, #0]
 8006cd6:	e002      	b.n	8006cde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cea:	2101      	movs	r1, #1
 8006cec:	69b8      	ldr	r0, [r7, #24]
 8006cee:	f7ff fec3 	bl	8006a78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	78fa      	ldrb	r2, [r7, #3]
 8006cf6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cfa:	bf00      	nop
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00e      	beq.n	8006d2e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006d22:	2300      	movs	r3, #0
 8006d24:	2200      	movs	r2, #0
 8006d26:	2100      	movs	r1, #0
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f8a3 	bl	8006e74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006d2e:	bf00      	nop
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b086      	sub	sp, #24
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d40:	2301      	movs	r3, #1
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	2300      	movs	r3, #0
 8006d46:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006d48:	79fb      	ldrb	r3, [r7, #7]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	6939      	ldr	r1, [r7, #16]
 8006d4e:	6978      	ldr	r0, [r7, #20]
 8006d50:	f7ff ff79 	bl	8006c46 <xQueueGenericCreate>
 8006d54:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7ff ffd3 	bl	8006d02 <prvInitialiseMutex>

		return xNewQueue;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
	}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b088      	sub	sp, #32
 8006d6a:	af02      	add	r7, sp, #8
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	6039      	str	r1, [r7, #0]
 8006d70:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d72:	2301      	movs	r3, #1
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2200      	movs	r2, #0
 8006d82:	6939      	ldr	r1, [r7, #16]
 8006d84:	6978      	ldr	r0, [r7, #20]
 8006d86:	f7ff fee1 	bl	8006b4c <xQueueGenericCreateStatic>
 8006d8a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff ffb8 	bl	8006d02 <prvInitialiseMutex>

		return xNewQueue;
 8006d92:	68fb      	ldr	r3, [r7, #12]
	}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006d9c:	b590      	push	{r4, r7, lr}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10b      	bne.n	8006dc6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	60fb      	str	r3, [r7, #12]
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	e7fd      	b.n	8006dc2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	689c      	ldr	r4, [r3, #8]
 8006dca:	f001 fc17 	bl	80085fc <xTaskGetCurrentTaskHandle>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	429c      	cmp	r4, r3
 8006dd2:	d111      	bne.n	8006df8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	1e5a      	subs	r2, r3, #1
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d105      	bne.n	8006df2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006de6:	2300      	movs	r3, #0
 8006de8:	2200      	movs	r2, #0
 8006dea:	2100      	movs	r1, #0
 8006dec:	6938      	ldr	r0, [r7, #16]
 8006dee:	f000 f841 	bl	8006e74 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006df2:	2301      	movs	r3, #1
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	e001      	b.n	8006dfc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006dfc:	697b      	ldr	r3, [r7, #20]
	}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	371c      	adds	r7, #28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd90      	pop	{r4, r7, pc}

08006e06 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006e06:	b590      	push	{r4, r7, lr}
 8006e08:	b087      	sub	sp, #28
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10b      	bne.n	8006e32 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	60fb      	str	r3, [r7, #12]
}
 8006e2c:	bf00      	nop
 8006e2e:	bf00      	nop
 8006e30:	e7fd      	b.n	8006e2e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	689c      	ldr	r4, [r3, #8]
 8006e36:	f001 fbe1 	bl	80085fc <xTaskGetCurrentTaskHandle>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	d107      	bne.n	8006e50 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	e00c      	b.n	8006e6a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6938      	ldr	r0, [r7, #16]
 8006e54:	f000 fa90 	bl	8007378 <xQueueSemaphoreTake>
 8006e58:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d004      	beq.n	8006e6a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006e6a:	697b      	ldr	r3, [r7, #20]
	}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	371c      	adds	r7, #28
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd90      	pop	{r4, r7, pc}

08006e74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08e      	sub	sp, #56	@ 0x38
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e82:	2300      	movs	r3, #0
 8006e84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10b      	bne.n	8006ea8 <xQueueGenericSend+0x34>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	e7fd      	b.n	8006ea4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d103      	bne.n	8006eb6 <xQueueGenericSend+0x42>
 8006eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <xQueueGenericSend+0x46>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <xQueueGenericSend+0x48>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10b      	bne.n	8006ed8 <xQueueGenericSend+0x64>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	e7fd      	b.n	8006ed4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d103      	bne.n	8006ee6 <xQueueGenericSend+0x72>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d101      	bne.n	8006eea <xQueueGenericSend+0x76>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <xQueueGenericSend+0x78>
 8006eea:	2300      	movs	r3, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10b      	bne.n	8006f08 <xQueueGenericSend+0x94>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	623b      	str	r3, [r7, #32]
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	e7fd      	b.n	8006f04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f08:	f001 fb88 	bl	800861c <xTaskGetSchedulerState>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d102      	bne.n	8006f18 <xQueueGenericSend+0xa4>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <xQueueGenericSend+0xa8>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <xQueueGenericSend+0xaa>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10b      	bne.n	8006f3a <xQueueGenericSend+0xc6>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	61fb      	str	r3, [r7, #28]
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	e7fd      	b.n	8006f36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f3a:	f002 f9dd 	bl	80092f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d302      	bcc.n	8006f50 <xQueueGenericSend+0xdc>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d129      	bne.n	8006fa4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	68b9      	ldr	r1, [r7, #8]
 8006f54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f56:	f000 fbb9 	bl	80076cc <prvCopyDataToQueue>
 8006f5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d010      	beq.n	8006f86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	3324      	adds	r3, #36	@ 0x24
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f001 f987 	bl	800827c <xTaskRemoveFromEventList>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d013      	beq.n	8006f9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f74:	4b3f      	ldr	r3, [pc, #252]	@ (8007074 <xQueueGenericSend+0x200>)
 8006f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	e00a      	b.n	8006f9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d007      	beq.n	8006f9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f8c:	4b39      	ldr	r3, [pc, #228]	@ (8007074 <xQueueGenericSend+0x200>)
 8006f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f9c:	f002 f9de 	bl	800935c <vPortExitCritical>
				return pdPASS;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e063      	b.n	800706c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d103      	bne.n	8006fb2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006faa:	f002 f9d7 	bl	800935c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e05c      	b.n	800706c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d106      	bne.n	8006fc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fb8:	f107 0314 	add.w	r3, r7, #20
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f001 f9c1 	bl	8008344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fc6:	f002 f9c9 	bl	800935c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fca:	f000 ff31 	bl	8007e30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fce:	f002 f993 	bl	80092f8 <vPortEnterCritical>
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fd8:	b25b      	sxtb	r3, r3
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fde:	d103      	bne.n	8006fe8 <xQueueGenericSend+0x174>
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fee:	b25b      	sxtb	r3, r3
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff4:	d103      	bne.n	8006ffe <xQueueGenericSend+0x18a>
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ffe:	f002 f9ad 	bl	800935c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007002:	1d3a      	adds	r2, r7, #4
 8007004:	f107 0314 	add.w	r3, r7, #20
 8007008:	4611      	mov	r1, r2
 800700a:	4618      	mov	r0, r3
 800700c:	f001 f9b0 	bl	8008370 <xTaskCheckForTimeOut>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d124      	bne.n	8007060 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007016:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007018:	f000 fc50 	bl	80078bc <prvIsQueueFull>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d018      	beq.n	8007054 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007024:	3310      	adds	r3, #16
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	4611      	mov	r1, r2
 800702a:	4618      	mov	r0, r3
 800702c:	f001 f8d4 	bl	80081d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007030:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007032:	f000 fbdb 	bl	80077ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007036:	f000 ff09 	bl	8007e4c <xTaskResumeAll>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	f47f af7c 	bne.w	8006f3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007042:	4b0c      	ldr	r3, [pc, #48]	@ (8007074 <xQueueGenericSend+0x200>)
 8007044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	e772      	b.n	8006f3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007054:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007056:	f000 fbc9 	bl	80077ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800705a:	f000 fef7 	bl	8007e4c <xTaskResumeAll>
 800705e:	e76c      	b.n	8006f3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007060:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007062:	f000 fbc3 	bl	80077ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007066:	f000 fef1 	bl	8007e4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800706a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800706c:	4618      	mov	r0, r3
 800706e:	3738      	adds	r7, #56	@ 0x38
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	e000ed04 	.word	0xe000ed04

08007078 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b090      	sub	sp, #64	@ 0x40
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800708a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10b      	bne.n	80070a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070a2:	bf00      	nop
 80070a4:	bf00      	nop
 80070a6:	e7fd      	b.n	80070a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d103      	bne.n	80070b6 <xQueueGenericSendFromISR+0x3e>
 80070ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <xQueueGenericSendFromISR+0x42>
 80070b6:	2301      	movs	r3, #1
 80070b8:	e000      	b.n	80070bc <xQueueGenericSendFromISR+0x44>
 80070ba:	2300      	movs	r3, #0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10b      	bne.n	80070d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070d2:	bf00      	nop
 80070d4:	bf00      	nop
 80070d6:	e7fd      	b.n	80070d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d103      	bne.n	80070e6 <xQueueGenericSendFromISR+0x6e>
 80070de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d101      	bne.n	80070ea <xQueueGenericSendFromISR+0x72>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <xQueueGenericSendFromISR+0x74>
 80070ea:	2300      	movs	r3, #0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	623b      	str	r3, [r7, #32]
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	e7fd      	b.n	8007104 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007108:	f002 f9d6 	bl	80094b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800710c:	f3ef 8211 	mrs	r2, BASEPRI
 8007110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	61fa      	str	r2, [r7, #28]
 8007122:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007124:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007126:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800712c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007130:	429a      	cmp	r2, r3
 8007132:	d302      	bcc.n	800713a <xQueueGenericSendFromISR+0xc2>
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2b02      	cmp	r3, #2
 8007138:	d12f      	bne.n	800719a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007140:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007148:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	68b9      	ldr	r1, [r7, #8]
 800714e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007150:	f000 fabc 	bl	80076cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007154:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715c:	d112      	bne.n	8007184 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800715e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007162:	2b00      	cmp	r3, #0
 8007164:	d016      	beq.n	8007194 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	3324      	adds	r3, #36	@ 0x24
 800716a:	4618      	mov	r0, r3
 800716c:	f001 f886 	bl	800827c <xTaskRemoveFromEventList>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00e      	beq.n	8007194 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	e007      	b.n	8007194 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007184:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007188:	3301      	adds	r3, #1
 800718a:	b2db      	uxtb	r3, r3
 800718c:	b25a      	sxtb	r2, r3
 800718e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007194:	2301      	movs	r3, #1
 8007196:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007198:	e001      	b.n	800719e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800719a:	2300      	movs	r3, #0
 800719c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800719e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3740      	adds	r7, #64	@ 0x40
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08c      	sub	sp, #48	@ 0x30
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071c0:	2300      	movs	r3, #0
 80071c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10b      	bne.n	80071e6 <xQueueReceive+0x32>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	623b      	str	r3, [r7, #32]
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	e7fd      	b.n	80071e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <xQueueReceive+0x40>
 80071ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <xQueueReceive+0x44>
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <xQueueReceive+0x46>
 80071f8:	2300      	movs	r3, #0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10b      	bne.n	8007216 <xQueueReceive+0x62>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	61fb      	str	r3, [r7, #28]
}
 8007210:	bf00      	nop
 8007212:	bf00      	nop
 8007214:	e7fd      	b.n	8007212 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007216:	f001 fa01 	bl	800861c <xTaskGetSchedulerState>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <xQueueReceive+0x72>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <xQueueReceive+0x76>
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <xQueueReceive+0x78>
 800722a:	2300      	movs	r3, #0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10b      	bne.n	8007248 <xQueueReceive+0x94>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	61bb      	str	r3, [r7, #24]
}
 8007242:	bf00      	nop
 8007244:	bf00      	nop
 8007246:	e7fd      	b.n	8007244 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007248:	f002 f856 	bl	80092f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800724c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007250:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01f      	beq.n	8007298 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007258:	68b9      	ldr	r1, [r7, #8]
 800725a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800725c:	f000 faa0 	bl	80077a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	1e5a      	subs	r2, r3, #1
 8007264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007266:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00f      	beq.n	8007290 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007272:	3310      	adds	r3, #16
 8007274:	4618      	mov	r0, r3
 8007276:	f001 f801 	bl	800827c <xTaskRemoveFromEventList>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d007      	beq.n	8007290 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007280:	4b3c      	ldr	r3, [pc, #240]	@ (8007374 <xQueueReceive+0x1c0>)
 8007282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007290:	f002 f864 	bl	800935c <vPortExitCritical>
				return pdPASS;
 8007294:	2301      	movs	r3, #1
 8007296:	e069      	b.n	800736c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d103      	bne.n	80072a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800729e:	f002 f85d 	bl	800935c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072a2:	2300      	movs	r3, #0
 80072a4:	e062      	b.n	800736c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d106      	bne.n	80072ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072ac:	f107 0310 	add.w	r3, r7, #16
 80072b0:	4618      	mov	r0, r3
 80072b2:	f001 f847 	bl	8008344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072b6:	2301      	movs	r3, #1
 80072b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072ba:	f002 f84f 	bl	800935c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072be:	f000 fdb7 	bl	8007e30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072c2:	f002 f819 	bl	80092f8 <vPortEnterCritical>
 80072c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072cc:	b25b      	sxtb	r3, r3
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d2:	d103      	bne.n	80072dc <xQueueReceive+0x128>
 80072d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072e2:	b25b      	sxtb	r3, r3
 80072e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e8:	d103      	bne.n	80072f2 <xQueueReceive+0x13e>
 80072ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072f2:	f002 f833 	bl	800935c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072f6:	1d3a      	adds	r2, r7, #4
 80072f8:	f107 0310 	add.w	r3, r7, #16
 80072fc:	4611      	mov	r1, r2
 80072fe:	4618      	mov	r0, r3
 8007300:	f001 f836 	bl	8008370 <xTaskCheckForTimeOut>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d123      	bne.n	8007352 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800730a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800730c:	f000 fac0 	bl	8007890 <prvIsQueueEmpty>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d017      	beq.n	8007346 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007318:	3324      	adds	r3, #36	@ 0x24
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	4611      	mov	r1, r2
 800731e:	4618      	mov	r0, r3
 8007320:	f000 ff5a 	bl	80081d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007324:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007326:	f000 fa61 	bl	80077ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800732a:	f000 fd8f 	bl	8007e4c <xTaskResumeAll>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d189      	bne.n	8007248 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007334:	4b0f      	ldr	r3, [pc, #60]	@ (8007374 <xQueueReceive+0x1c0>)
 8007336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	e780      	b.n	8007248 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007348:	f000 fa50 	bl	80077ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800734c:	f000 fd7e 	bl	8007e4c <xTaskResumeAll>
 8007350:	e77a      	b.n	8007248 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007354:	f000 fa4a 	bl	80077ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007358:	f000 fd78 	bl	8007e4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800735c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800735e:	f000 fa97 	bl	8007890 <prvIsQueueEmpty>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	f43f af6f 	beq.w	8007248 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800736a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800736c:	4618      	mov	r0, r3
 800736e:	3730      	adds	r7, #48	@ 0x30
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	e000ed04 	.word	0xe000ed04

08007378 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08e      	sub	sp, #56	@ 0x38
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007382:	2300      	movs	r3, #0
 8007384:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800738a:	2300      	movs	r3, #0
 800738c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800738e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10b      	bne.n	80073ac <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	623b      	str	r3, [r7, #32]
}
 80073a6:	bf00      	nop
 80073a8:	bf00      	nop
 80073aa:	e7fd      	b.n	80073a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80073ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00b      	beq.n	80073cc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	61fb      	str	r3, [r7, #28]
}
 80073c6:	bf00      	nop
 80073c8:	bf00      	nop
 80073ca:	e7fd      	b.n	80073c8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073cc:	f001 f926 	bl	800861c <xTaskGetSchedulerState>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d102      	bne.n	80073dc <xQueueSemaphoreTake+0x64>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <xQueueSemaphoreTake+0x68>
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <xQueueSemaphoreTake+0x6a>
 80073e0:	2300      	movs	r3, #0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10b      	bne.n	80073fe <xQueueSemaphoreTake+0x86>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	61bb      	str	r3, [r7, #24]
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	e7fd      	b.n	80073fa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073fe:	f001 ff7b 	bl	80092f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007406:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740a:	2b00      	cmp	r3, #0
 800740c:	d024      	beq.n	8007458 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800740e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007410:	1e5a      	subs	r2, r3, #1
 8007412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007414:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d104      	bne.n	8007428 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800741e:	f001 fa77 	bl	8008910 <pvTaskIncrementMutexHeldCount>
 8007422:	4602      	mov	r2, r0
 8007424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007426:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00f      	beq.n	8007450 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007432:	3310      	adds	r3, #16
 8007434:	4618      	mov	r0, r3
 8007436:	f000 ff21 	bl	800827c <xTaskRemoveFromEventList>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d007      	beq.n	8007450 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007440:	4b54      	ldr	r3, [pc, #336]	@ (8007594 <xQueueSemaphoreTake+0x21c>)
 8007442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007450:	f001 ff84 	bl	800935c <vPortExitCritical>
				return pdPASS;
 8007454:	2301      	movs	r3, #1
 8007456:	e098      	b.n	800758a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d112      	bne.n	8007484 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00b      	beq.n	800747c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	617b      	str	r3, [r7, #20]
}
 8007476:	bf00      	nop
 8007478:	bf00      	nop
 800747a:	e7fd      	b.n	8007478 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800747c:	f001 ff6e 	bl	800935c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007480:	2300      	movs	r3, #0
 8007482:	e082      	b.n	800758a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800748a:	f107 030c 	add.w	r3, r7, #12
 800748e:	4618      	mov	r0, r3
 8007490:	f000 ff58 	bl	8008344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007494:	2301      	movs	r3, #1
 8007496:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007498:	f001 ff60 	bl	800935c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800749c:	f000 fcc8 	bl	8007e30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074a0:	f001 ff2a 	bl	80092f8 <vPortEnterCritical>
 80074a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074aa:	b25b      	sxtb	r3, r3
 80074ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b0:	d103      	bne.n	80074ba <xQueueSemaphoreTake+0x142>
 80074b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074c0:	b25b      	sxtb	r3, r3
 80074c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c6:	d103      	bne.n	80074d0 <xQueueSemaphoreTake+0x158>
 80074c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074d0:	f001 ff44 	bl	800935c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074d4:	463a      	mov	r2, r7
 80074d6:	f107 030c 	add.w	r3, r7, #12
 80074da:	4611      	mov	r1, r2
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 ff47 	bl	8008370 <xTaskCheckForTimeOut>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d132      	bne.n	800754e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074ea:	f000 f9d1 	bl	8007890 <prvIsQueueEmpty>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d026      	beq.n	8007542 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d109      	bne.n	8007510 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80074fc:	f001 fefc 	bl	80092f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	4618      	mov	r0, r3
 8007506:	f001 f8a7 	bl	8008658 <xTaskPriorityInherit>
 800750a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800750c:	f001 ff26 	bl	800935c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007512:	3324      	adds	r3, #36	@ 0x24
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	4611      	mov	r1, r2
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fe5d 	bl	80081d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800751e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007520:	f000 f964 	bl	80077ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007524:	f000 fc92 	bl	8007e4c <xTaskResumeAll>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	f47f af67 	bne.w	80073fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007530:	4b18      	ldr	r3, [pc, #96]	@ (8007594 <xQueueSemaphoreTake+0x21c>)
 8007532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	e75d      	b.n	80073fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007542:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007544:	f000 f952 	bl	80077ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007548:	f000 fc80 	bl	8007e4c <xTaskResumeAll>
 800754c:	e757      	b.n	80073fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800754e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007550:	f000 f94c 	bl	80077ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007554:	f000 fc7a 	bl	8007e4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007558:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800755a:	f000 f999 	bl	8007890 <prvIsQueueEmpty>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	f43f af4c 	beq.w	80073fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00d      	beq.n	8007588 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800756c:	f001 fec4 	bl	80092f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007570:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007572:	f000 f893 	bl	800769c <prvGetDisinheritPriorityAfterTimeout>
 8007576:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800757e:	4618      	mov	r0, r3
 8007580:	f001 f942 	bl	8008808 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007584:	f001 feea 	bl	800935c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007588:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800758a:	4618      	mov	r0, r3
 800758c:	3738      	adds	r7, #56	@ 0x38
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08e      	sub	sp, #56	@ 0x38
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10b      	bne.n	80075c6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	623b      	str	r3, [r7, #32]
}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	e7fd      	b.n	80075c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d103      	bne.n	80075d4 <xQueueReceiveFromISR+0x3c>
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <xQueueReceiveFromISR+0x40>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e000      	b.n	80075da <xQueueReceiveFromISR+0x42>
 80075d8:	2300      	movs	r3, #0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10b      	bne.n	80075f6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	61fb      	str	r3, [r7, #28]
}
 80075f0:	bf00      	nop
 80075f2:	bf00      	nop
 80075f4:	e7fd      	b.n	80075f2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075f6:	f001 ff5f 	bl	80094b8 <vPortValidateInterruptPriority>
	__asm volatile
 80075fa:	f3ef 8211 	mrs	r2, BASEPRI
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	61ba      	str	r2, [r7, #24]
 8007610:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007612:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007614:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800761c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761e:	2b00      	cmp	r3, #0
 8007620:	d02f      	beq.n	8007682 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007630:	f000 f8b6 	bl	80077a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	1e5a      	subs	r2, r3, #1
 8007638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800763c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d112      	bne.n	800766c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d016      	beq.n	800767c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	3310      	adds	r3, #16
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fe12 	bl	800827c <xTaskRemoveFromEventList>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00e      	beq.n	800767c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	e007      	b.n	800767c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800766c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007670:	3301      	adds	r3, #1
 8007672:	b2db      	uxtb	r3, r3
 8007674:	b25a      	sxtb	r2, r3
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800767c:	2301      	movs	r3, #1
 800767e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007680:	e001      	b.n	8007686 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007682:	2300      	movs	r3, #0
 8007684:	637b      	str	r3, [r7, #52]	@ 0x34
 8007686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007688:	613b      	str	r3, [r7, #16]
	__asm volatile
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f383 8811 	msr	BASEPRI, r3
}
 8007690:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007694:	4618      	mov	r0, r3
 8007696:	3738      	adds	r7, #56	@ 0x38
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d006      	beq.n	80076ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	e001      	b.n	80076be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80076be:	68fb      	ldr	r3, [r7, #12]
	}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10d      	bne.n	8007706 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d14d      	bne.n	800778e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 f816 	bl	8008728 <xTaskPriorityDisinherit>
 80076fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	609a      	str	r2, [r3, #8]
 8007704:	e043      	b.n	800778e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d119      	bne.n	8007740 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6858      	ldr	r0, [r3, #4]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007714:	461a      	mov	r2, r3
 8007716:	68b9      	ldr	r1, [r7, #8]
 8007718:	f003 fabf 	bl	800ac9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007724:	441a      	add	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	429a      	cmp	r2, r3
 8007734:	d32b      	bcc.n	800778e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	605a      	str	r2, [r3, #4]
 800773e:	e026      	b.n	800778e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	68d8      	ldr	r0, [r3, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007748:	461a      	mov	r2, r3
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	f003 faa5 	bl	800ac9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007758:	425b      	negs	r3, r3
 800775a:	441a      	add	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d207      	bcs.n	800777c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007774:	425b      	negs	r3, r3
 8007776:	441a      	add	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b02      	cmp	r3, #2
 8007780:	d105      	bne.n	800778e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	3b01      	subs	r3, #1
 800778c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007796:	697b      	ldr	r3, [r7, #20]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d018      	beq.n	80077e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ba:	441a      	add	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d303      	bcc.n	80077d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68d9      	ldr	r1, [r3, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077dc:	461a      	mov	r2, r3
 80077de:	6838      	ldr	r0, [r7, #0]
 80077e0:	f003 fa5b 	bl	800ac9a <memcpy>
	}
}
 80077e4:	bf00      	nop
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077f4:	f001 fd80 	bl	80092f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007800:	e011      	b.n	8007826 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007806:	2b00      	cmp	r3, #0
 8007808:	d012      	beq.n	8007830 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3324      	adds	r3, #36	@ 0x24
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fd34 	bl	800827c <xTaskRemoveFromEventList>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800781a:	f000 fe0d 	bl	8008438 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	3b01      	subs	r3, #1
 8007822:	b2db      	uxtb	r3, r3
 8007824:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800782a:	2b00      	cmp	r3, #0
 800782c:	dce9      	bgt.n	8007802 <prvUnlockQueue+0x16>
 800782e:	e000      	b.n	8007832 <prvUnlockQueue+0x46>
					break;
 8007830:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	22ff      	movs	r2, #255	@ 0xff
 8007836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800783a:	f001 fd8f 	bl	800935c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800783e:	f001 fd5b 	bl	80092f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007848:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800784a:	e011      	b.n	8007870 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d012      	beq.n	800787a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3310      	adds	r3, #16
 8007858:	4618      	mov	r0, r3
 800785a:	f000 fd0f 	bl	800827c <xTaskRemoveFromEventList>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007864:	f000 fde8 	bl	8008438 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	3b01      	subs	r3, #1
 800786c:	b2db      	uxtb	r3, r3
 800786e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007874:	2b00      	cmp	r3, #0
 8007876:	dce9      	bgt.n	800784c <prvUnlockQueue+0x60>
 8007878:	e000      	b.n	800787c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800787a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	22ff      	movs	r2, #255	@ 0xff
 8007880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007884:	f001 fd6a 	bl	800935c <vPortExitCritical>
}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007898:	f001 fd2e 	bl	80092f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d102      	bne.n	80078aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80078a4:	2301      	movs	r3, #1
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e001      	b.n	80078ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078ae:	f001 fd55 	bl	800935c <vPortExitCritical>

	return xReturn;
 80078b2:	68fb      	ldr	r3, [r7, #12]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078c4:	f001 fd18 	bl	80092f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d102      	bne.n	80078da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078d4:	2301      	movs	r3, #1
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	e001      	b.n	80078de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078de:	f001 fd3d 	bl	800935c <vPortExitCritical>

	return xReturn;
 80078e2:	68fb      	ldr	r3, [r7, #12]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	e014      	b.n	8007926 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078fc:	4a0f      	ldr	r2, [pc, #60]	@ (800793c <vQueueAddToRegistry+0x50>)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10b      	bne.n	8007920 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007908:	490c      	ldr	r1, [pc, #48]	@ (800793c <vQueueAddToRegistry+0x50>)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007912:	4a0a      	ldr	r2, [pc, #40]	@ (800793c <vQueueAddToRegistry+0x50>)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	4413      	add	r3, r2
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800791e:	e006      	b.n	800792e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3301      	adds	r3, #1
 8007924:	60fb      	str	r3, [r7, #12]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b07      	cmp	r3, #7
 800792a:	d9e7      	bls.n	80078fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800792c:	bf00      	nop
 800792e:	bf00      	nop
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	20000bf8 	.word	0x20000bf8

08007940 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007950:	f001 fcd2 	bl	80092f8 <vPortEnterCritical>
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800795a:	b25b      	sxtb	r3, r3
 800795c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007960:	d103      	bne.n	800796a <vQueueWaitForMessageRestricted+0x2a>
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007970:	b25b      	sxtb	r3, r3
 8007972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007976:	d103      	bne.n	8007980 <vQueueWaitForMessageRestricted+0x40>
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007980:	f001 fcec 	bl	800935c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007988:	2b00      	cmp	r3, #0
 800798a:	d106      	bne.n	800799a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	3324      	adds	r3, #36	@ 0x24
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	4618      	mov	r0, r3
 8007996:	f000 fc45 	bl	8008224 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800799a:	6978      	ldr	r0, [r7, #20]
 800799c:	f7ff ff26 	bl	80077ec <prvUnlockQueue>
	}
 80079a0:	bf00      	nop
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08e      	sub	sp, #56	@ 0x38
 80079ac:	af04      	add	r7, sp, #16
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10b      	bne.n	80079d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	623b      	str	r3, [r7, #32]
}
 80079ce:	bf00      	nop
 80079d0:	bf00      	nop
 80079d2:	e7fd      	b.n	80079d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80079d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10b      	bne.n	80079f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	61fb      	str	r3, [r7, #28]
}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	e7fd      	b.n	80079ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80079f2:	235c      	movs	r3, #92	@ 0x5c
 80079f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80079fa:	d00b      	beq.n	8007a14 <xTaskCreateStatic+0x6c>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	61bb      	str	r3, [r7, #24]
}
 8007a0e:	bf00      	nop
 8007a10:	bf00      	nop
 8007a12:	e7fd      	b.n	8007a10 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d01e      	beq.n	8007a5a <xTaskCreateStatic+0xb2>
 8007a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d01b      	beq.n	8007a5a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a24:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a2a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a34:	2300      	movs	r3, #0
 8007a36:	9303      	str	r3, [sp, #12]
 8007a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3a:	9302      	str	r3, [sp, #8]
 8007a3c:	f107 0314 	add.w	r3, r7, #20
 8007a40:	9301      	str	r3, [sp, #4]
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	68b9      	ldr	r1, [r7, #8]
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 f850 	bl	8007af2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a54:	f000 f8de 	bl	8007c14 <prvAddNewTaskToReadyList>
 8007a58:	e001      	b.n	8007a5e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a5e:	697b      	ldr	r3, [r7, #20]
	}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3728      	adds	r7, #40	@ 0x28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08c      	sub	sp, #48	@ 0x30
 8007a6c:	af04      	add	r7, sp, #16
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	4613      	mov	r3, r2
 8007a76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a78:	88fb      	ldrh	r3, [r7, #6]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f001 fd5d 	bl	800953c <pvPortMalloc>
 8007a82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00e      	beq.n	8007aa8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a8a:	205c      	movs	r0, #92	@ 0x5c
 8007a8c:	f001 fd56 	bl	800953c <pvPortMalloc>
 8007a90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a9e:	e005      	b.n	8007aac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007aa0:	6978      	ldr	r0, [r7, #20]
 8007aa2:	f001 fe19 	bl	80096d8 <vPortFree>
 8007aa6:	e001      	b.n	8007aac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d017      	beq.n	8007ae2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007aba:	88fa      	ldrh	r2, [r7, #6]
 8007abc:	2300      	movs	r3, #0
 8007abe:	9303      	str	r3, [sp, #12]
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	9302      	str	r3, [sp, #8]
 8007ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 f80e 	bl	8007af2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ad6:	69f8      	ldr	r0, [r7, #28]
 8007ad8:	f000 f89c 	bl	8007c14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007adc:	2301      	movs	r3, #1
 8007ade:	61bb      	str	r3, [r7, #24]
 8007ae0:	e002      	b.n	8007ae8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
	}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3720      	adds	r7, #32
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b088      	sub	sp, #32
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	60b9      	str	r1, [r7, #8]
 8007afc:	607a      	str	r2, [r7, #4]
 8007afe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b02:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	21a5      	movs	r1, #165	@ 0xa5
 8007b0c:	f002 ffb3 	bl	800aa76 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	f023 0307 	bic.w	r3, r3, #7
 8007b28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	f003 0307 	and.w	r3, r3, #7
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	617b      	str	r3, [r7, #20]
}
 8007b46:	bf00      	nop
 8007b48:	bf00      	nop
 8007b4a:	e7fd      	b.n	8007b48 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d01f      	beq.n	8007b92 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b52:	2300      	movs	r3, #0
 8007b54:	61fb      	str	r3, [r7, #28]
 8007b56:	e012      	b.n	8007b7e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	7819      	ldrb	r1, [r3, #0]
 8007b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	4413      	add	r3, r2
 8007b66:	3334      	adds	r3, #52	@ 0x34
 8007b68:	460a      	mov	r2, r1
 8007b6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	4413      	add	r3, r2
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d006      	beq.n	8007b86 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	61fb      	str	r3, [r7, #28]
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	2b0f      	cmp	r3, #15
 8007b82:	d9e9      	bls.n	8007b58 <prvInitialiseNewTask+0x66>
 8007b84:	e000      	b.n	8007b88 <prvInitialiseNewTask+0x96>
			{
				break;
 8007b86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b90:	e003      	b.n	8007b9a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9c:	2b37      	cmp	r3, #55	@ 0x37
 8007b9e:	d901      	bls.n	8007ba4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ba0:	2337      	movs	r3, #55	@ 0x37
 8007ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fec8 	bl	8006950 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc2:	3318      	adds	r3, #24
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fe fec3 	bl	8006950 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bde:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be2:	2200      	movs	r2, #0
 8007be4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	68f9      	ldr	r1, [r7, #12]
 8007bf2:	69b8      	ldr	r0, [r7, #24]
 8007bf4:	f001 fa4e 	bl	8009094 <pxPortInitialiseStack>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c0a:	bf00      	nop
 8007c0c:	3720      	adds	r7, #32
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c1c:	f001 fb6c 	bl	80092f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c20:	4b2d      	ldr	r3, [pc, #180]	@ (8007cd8 <prvAddNewTaskToReadyList+0xc4>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3301      	adds	r3, #1
 8007c26:	4a2c      	ldr	r2, [pc, #176]	@ (8007cd8 <prvAddNewTaskToReadyList+0xc4>)
 8007c28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8007cdc <prvAddNewTaskToReadyList+0xc8>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c32:	4a2a      	ldr	r2, [pc, #168]	@ (8007cdc <prvAddNewTaskToReadyList+0xc8>)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c38:	4b27      	ldr	r3, [pc, #156]	@ (8007cd8 <prvAddNewTaskToReadyList+0xc4>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d110      	bne.n	8007c62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c40:	f000 fc1e 	bl	8008480 <prvInitialiseTaskLists>
 8007c44:	e00d      	b.n	8007c62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c46:	4b26      	ldr	r3, [pc, #152]	@ (8007ce0 <prvAddNewTaskToReadyList+0xcc>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d109      	bne.n	8007c62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c4e:	4b23      	ldr	r3, [pc, #140]	@ (8007cdc <prvAddNewTaskToReadyList+0xc8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d802      	bhi.n	8007c62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8007cdc <prvAddNewTaskToReadyList+0xc8>)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c62:	4b20      	ldr	r3, [pc, #128]	@ (8007ce4 <prvAddNewTaskToReadyList+0xd0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3301      	adds	r3, #1
 8007c68:	4a1e      	ldr	r2, [pc, #120]	@ (8007ce4 <prvAddNewTaskToReadyList+0xd0>)
 8007c6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce4 <prvAddNewTaskToReadyList+0xd0>)
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c78:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce8 <prvAddNewTaskToReadyList+0xd4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d903      	bls.n	8007c88 <prvAddNewTaskToReadyList+0x74>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c84:	4a18      	ldr	r2, [pc, #96]	@ (8007ce8 <prvAddNewTaskToReadyList+0xd4>)
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4a15      	ldr	r2, [pc, #84]	@ (8007cec <prvAddNewTaskToReadyList+0xd8>)
 8007c96:	441a      	add	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	f7fe fe63 	bl	800696a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ca4:	f001 fb5a 	bl	800935c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce0 <prvAddNewTaskToReadyList+0xcc>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00e      	beq.n	8007cce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007cdc <prvAddNewTaskToReadyList+0xc8>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d207      	bcs.n	8007cce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf0 <prvAddNewTaskToReadyList+0xdc>)
 8007cc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	2000110c 	.word	0x2000110c
 8007cdc:	20000c38 	.word	0x20000c38
 8007ce0:	20001118 	.word	0x20001118
 8007ce4:	20001128 	.word	0x20001128
 8007ce8:	20001114 	.word	0x20001114
 8007cec:	20000c3c 	.word	0x20000c3c
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d018      	beq.n	8007d38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d06:	4b14      	ldr	r3, [pc, #80]	@ (8007d58 <vTaskDelay+0x64>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00b      	beq.n	8007d26 <vTaskDelay+0x32>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	60bb      	str	r3, [r7, #8]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d26:	f000 f883 	bl	8007e30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fe03 	bl	8008938 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d32:	f000 f88b 	bl	8007e4c <xTaskResumeAll>
 8007d36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d107      	bne.n	8007d4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007d3e:	4b07      	ldr	r3, [pc, #28]	@ (8007d5c <vTaskDelay+0x68>)
 8007d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d4e:	bf00      	nop
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20001134 	.word	0x20001134
 8007d5c:	e000ed04 	.word	0xe000ed04

08007d60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b08a      	sub	sp, #40	@ 0x28
 8007d64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d6e:	463a      	mov	r2, r7
 8007d70:	1d39      	adds	r1, r7, #4
 8007d72:	f107 0308 	add.w	r3, r7, #8
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fd96 	bl	80068a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	9202      	str	r2, [sp, #8]
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	2300      	movs	r3, #0
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	460a      	mov	r2, r1
 8007d8e:	4922      	ldr	r1, [pc, #136]	@ (8007e18 <vTaskStartScheduler+0xb8>)
 8007d90:	4822      	ldr	r0, [pc, #136]	@ (8007e1c <vTaskStartScheduler+0xbc>)
 8007d92:	f7ff fe09 	bl	80079a8 <xTaskCreateStatic>
 8007d96:	4603      	mov	r3, r0
 8007d98:	4a21      	ldr	r2, [pc, #132]	@ (8007e20 <vTaskStartScheduler+0xc0>)
 8007d9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d9c:	4b20      	ldr	r3, [pc, #128]	@ (8007e20 <vTaskStartScheduler+0xc0>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007da4:	2301      	movs	r3, #1
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	e001      	b.n	8007dae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d102      	bne.n	8007dba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007db4:	f000 fe14 	bl	80089e0 <xTimerCreateTimerTask>
 8007db8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d116      	bne.n	8007dee <vTaskStartScheduler+0x8e>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	613b      	str	r3, [r7, #16]
}
 8007dd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007dd4:	4b13      	ldr	r3, [pc, #76]	@ (8007e24 <vTaskStartScheduler+0xc4>)
 8007dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ddc:	4b12      	ldr	r3, [pc, #72]	@ (8007e28 <vTaskStartScheduler+0xc8>)
 8007dde:	2201      	movs	r2, #1
 8007de0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007de2:	4b12      	ldr	r3, [pc, #72]	@ (8007e2c <vTaskStartScheduler+0xcc>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007de8:	f001 f9e2 	bl	80091b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007dec:	e00f      	b.n	8007e0e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df4:	d10b      	bne.n	8007e0e <vTaskStartScheduler+0xae>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	60fb      	str	r3, [r7, #12]
}
 8007e08:	bf00      	nop
 8007e0a:	bf00      	nop
 8007e0c:	e7fd      	b.n	8007e0a <vTaskStartScheduler+0xaa>
}
 8007e0e:	bf00      	nop
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	0800cd10 	.word	0x0800cd10
 8007e1c:	08008451 	.word	0x08008451
 8007e20:	20001130 	.word	0x20001130
 8007e24:	2000112c 	.word	0x2000112c
 8007e28:	20001118 	.word	0x20001118
 8007e2c:	20001110 	.word	0x20001110

08007e30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e34:	4b04      	ldr	r3, [pc, #16]	@ (8007e48 <vTaskSuspendAll+0x18>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	4a03      	ldr	r2, [pc, #12]	@ (8007e48 <vTaskSuspendAll+0x18>)
 8007e3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e3e:	bf00      	nop
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	20001134 	.word	0x20001134

08007e4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e5a:	4b42      	ldr	r3, [pc, #264]	@ (8007f64 <xTaskResumeAll+0x118>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10b      	bne.n	8007e7a <xTaskResumeAll+0x2e>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	603b      	str	r3, [r7, #0]
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop
 8007e78:	e7fd      	b.n	8007e76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e7a:	f001 fa3d 	bl	80092f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e7e:	4b39      	ldr	r3, [pc, #228]	@ (8007f64 <xTaskResumeAll+0x118>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	4a37      	ldr	r2, [pc, #220]	@ (8007f64 <xTaskResumeAll+0x118>)
 8007e86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e88:	4b36      	ldr	r3, [pc, #216]	@ (8007f64 <xTaskResumeAll+0x118>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d162      	bne.n	8007f56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e90:	4b35      	ldr	r3, [pc, #212]	@ (8007f68 <xTaskResumeAll+0x11c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d05e      	beq.n	8007f56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e98:	e02f      	b.n	8007efa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e9a:	4b34      	ldr	r3, [pc, #208]	@ (8007f6c <xTaskResumeAll+0x120>)
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3318      	adds	r3, #24
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe fdbc 	bl	8006a24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fe fdb7 	bl	8006a24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eba:	4b2d      	ldr	r3, [pc, #180]	@ (8007f70 <xTaskResumeAll+0x124>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d903      	bls.n	8007eca <xTaskResumeAll+0x7e>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8007f70 <xTaskResumeAll+0x124>)
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ece:	4613      	mov	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4a27      	ldr	r2, [pc, #156]	@ (8007f74 <xTaskResumeAll+0x128>)
 8007ed8:	441a      	add	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3304      	adds	r3, #4
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f7fe fd42 	bl	800696a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eea:	4b23      	ldr	r3, [pc, #140]	@ (8007f78 <xTaskResumeAll+0x12c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d302      	bcc.n	8007efa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007ef4:	4b21      	ldr	r3, [pc, #132]	@ (8007f7c <xTaskResumeAll+0x130>)
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007efa:	4b1c      	ldr	r3, [pc, #112]	@ (8007f6c <xTaskResumeAll+0x120>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1cb      	bne.n	8007e9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f08:	f000 fb58 	bl	80085bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8007f80 <xTaskResumeAll+0x134>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d010      	beq.n	8007f3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f18:	f000 f846 	bl	8007fa8 <xTaskIncrementTick>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007f22:	4b16      	ldr	r3, [pc, #88]	@ (8007f7c <xTaskResumeAll+0x130>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1f1      	bne.n	8007f18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007f34:	4b12      	ldr	r3, [pc, #72]	@ (8007f80 <xTaskResumeAll+0x134>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f3a:	4b10      	ldr	r3, [pc, #64]	@ (8007f7c <xTaskResumeAll+0x130>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d009      	beq.n	8007f56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f42:	2301      	movs	r3, #1
 8007f44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f46:	4b0f      	ldr	r3, [pc, #60]	@ (8007f84 <xTaskResumeAll+0x138>)
 8007f48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f56:	f001 fa01 	bl	800935c <vPortExitCritical>

	return xAlreadyYielded;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20001134 	.word	0x20001134
 8007f68:	2000110c 	.word	0x2000110c
 8007f6c:	200010cc 	.word	0x200010cc
 8007f70:	20001114 	.word	0x20001114
 8007f74:	20000c3c 	.word	0x20000c3c
 8007f78:	20000c38 	.word	0x20000c38
 8007f7c:	20001120 	.word	0x20001120
 8007f80:	2000111c 	.word	0x2000111c
 8007f84:	e000ed04 	.word	0xe000ed04

08007f88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f8e:	4b05      	ldr	r3, [pc, #20]	@ (8007fa4 <xTaskGetTickCount+0x1c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f94:	687b      	ldr	r3, [r7, #4]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	20001110 	.word	0x20001110

08007fa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80080f0 <xTaskIncrementTick+0x148>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f040 8090 	bne.w	80080dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fbc:	4b4d      	ldr	r3, [pc, #308]	@ (80080f4 <xTaskIncrementTick+0x14c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007fc4:	4a4b      	ldr	r2, [pc, #300]	@ (80080f4 <xTaskIncrementTick+0x14c>)
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d121      	bne.n	8008014 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fd0:	4b49      	ldr	r3, [pc, #292]	@ (80080f8 <xTaskIncrementTick+0x150>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00b      	beq.n	8007ff2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	603b      	str	r3, [r7, #0]
}
 8007fec:	bf00      	nop
 8007fee:	bf00      	nop
 8007ff0:	e7fd      	b.n	8007fee <xTaskIncrementTick+0x46>
 8007ff2:	4b41      	ldr	r3, [pc, #260]	@ (80080f8 <xTaskIncrementTick+0x150>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	4b40      	ldr	r3, [pc, #256]	@ (80080fc <xTaskIncrementTick+0x154>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a3e      	ldr	r2, [pc, #248]	@ (80080f8 <xTaskIncrementTick+0x150>)
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	4a3e      	ldr	r2, [pc, #248]	@ (80080fc <xTaskIncrementTick+0x154>)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	4b3e      	ldr	r3, [pc, #248]	@ (8008100 <xTaskIncrementTick+0x158>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3301      	adds	r3, #1
 800800c:	4a3c      	ldr	r2, [pc, #240]	@ (8008100 <xTaskIncrementTick+0x158>)
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	f000 fad4 	bl	80085bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008014:	4b3b      	ldr	r3, [pc, #236]	@ (8008104 <xTaskIncrementTick+0x15c>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	429a      	cmp	r2, r3
 800801c:	d349      	bcc.n	80080b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800801e:	4b36      	ldr	r3, [pc, #216]	@ (80080f8 <xTaskIncrementTick+0x150>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008028:	4b36      	ldr	r3, [pc, #216]	@ (8008104 <xTaskIncrementTick+0x15c>)
 800802a:	f04f 32ff 	mov.w	r2, #4294967295
 800802e:	601a      	str	r2, [r3, #0]
					break;
 8008030:	e03f      	b.n	80080b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008032:	4b31      	ldr	r3, [pc, #196]	@ (80080f8 <xTaskIncrementTick+0x150>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	429a      	cmp	r2, r3
 8008048:	d203      	bcs.n	8008052 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800804a:	4a2e      	ldr	r2, [pc, #184]	@ (8008104 <xTaskIncrementTick+0x15c>)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008050:	e02f      	b.n	80080b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	3304      	adds	r3, #4
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fce4 	bl	8006a24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008060:	2b00      	cmp	r3, #0
 8008062:	d004      	beq.n	800806e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	3318      	adds	r3, #24
 8008068:	4618      	mov	r0, r3
 800806a:	f7fe fcdb 	bl	8006a24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008072:	4b25      	ldr	r3, [pc, #148]	@ (8008108 <xTaskIncrementTick+0x160>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d903      	bls.n	8008082 <xTaskIncrementTick+0xda>
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807e:	4a22      	ldr	r2, [pc, #136]	@ (8008108 <xTaskIncrementTick+0x160>)
 8008080:	6013      	str	r3, [r2, #0]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4a1f      	ldr	r2, [pc, #124]	@ (800810c <xTaskIncrementTick+0x164>)
 8008090:	441a      	add	r2, r3
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	3304      	adds	r3, #4
 8008096:	4619      	mov	r1, r3
 8008098:	4610      	mov	r0, r2
 800809a:	f7fe fc66 	bl	800696a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008110 <xTaskIncrementTick+0x168>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d3b8      	bcc.n	800801e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80080ac:	2301      	movs	r3, #1
 80080ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080b0:	e7b5      	b.n	800801e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080b2:	4b17      	ldr	r3, [pc, #92]	@ (8008110 <xTaskIncrementTick+0x168>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080b8:	4914      	ldr	r1, [pc, #80]	@ (800810c <xTaskIncrementTick+0x164>)
 80080ba:	4613      	mov	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	440b      	add	r3, r1
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d901      	bls.n	80080ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80080ca:	2301      	movs	r3, #1
 80080cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80080ce:	4b11      	ldr	r3, [pc, #68]	@ (8008114 <xTaskIncrementTick+0x16c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d007      	beq.n	80080e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80080d6:	2301      	movs	r3, #1
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	e004      	b.n	80080e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80080dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008118 <xTaskIncrementTick+0x170>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3301      	adds	r3, #1
 80080e2:	4a0d      	ldr	r2, [pc, #52]	@ (8008118 <xTaskIncrementTick+0x170>)
 80080e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080e6:	697b      	ldr	r3, [r7, #20]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20001134 	.word	0x20001134
 80080f4:	20001110 	.word	0x20001110
 80080f8:	200010c4 	.word	0x200010c4
 80080fc:	200010c8 	.word	0x200010c8
 8008100:	20001124 	.word	0x20001124
 8008104:	2000112c 	.word	0x2000112c
 8008108:	20001114 	.word	0x20001114
 800810c:	20000c3c 	.word	0x20000c3c
 8008110:	20000c38 	.word	0x20000c38
 8008114:	20001120 	.word	0x20001120
 8008118:	2000111c 	.word	0x2000111c

0800811c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008122:	4b28      	ldr	r3, [pc, #160]	@ (80081c4 <vTaskSwitchContext+0xa8>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800812a:	4b27      	ldr	r3, [pc, #156]	@ (80081c8 <vTaskSwitchContext+0xac>)
 800812c:	2201      	movs	r2, #1
 800812e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008130:	e042      	b.n	80081b8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008132:	4b25      	ldr	r3, [pc, #148]	@ (80081c8 <vTaskSwitchContext+0xac>)
 8008134:	2200      	movs	r2, #0
 8008136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008138:	4b24      	ldr	r3, [pc, #144]	@ (80081cc <vTaskSwitchContext+0xb0>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	e011      	b.n	8008164 <vTaskSwitchContext+0x48>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10b      	bne.n	800815e <vTaskSwitchContext+0x42>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	607b      	str	r3, [r7, #4]
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	e7fd      	b.n	800815a <vTaskSwitchContext+0x3e>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3b01      	subs	r3, #1
 8008162:	60fb      	str	r3, [r7, #12]
 8008164:	491a      	ldr	r1, [pc, #104]	@ (80081d0 <vTaskSwitchContext+0xb4>)
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	440b      	add	r3, r1
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0e3      	beq.n	8008140 <vTaskSwitchContext+0x24>
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4613      	mov	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4a13      	ldr	r2, [pc, #76]	@ (80081d0 <vTaskSwitchContext+0xb4>)
 8008184:	4413      	add	r3, r2
 8008186:	60bb      	str	r3, [r7, #8]
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	605a      	str	r2, [r3, #4]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	3308      	adds	r3, #8
 800819a:	429a      	cmp	r2, r3
 800819c:	d104      	bne.n	80081a8 <vTaskSwitchContext+0x8c>
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	605a      	str	r2, [r3, #4]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	4a09      	ldr	r2, [pc, #36]	@ (80081d4 <vTaskSwitchContext+0xb8>)
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	4a06      	ldr	r2, [pc, #24]	@ (80081cc <vTaskSwitchContext+0xb0>)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6013      	str	r3, [r2, #0]
}
 80081b8:	bf00      	nop
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	20001134 	.word	0x20001134
 80081c8:	20001120 	.word	0x20001120
 80081cc:	20001114 	.word	0x20001114
 80081d0:	20000c3c 	.word	0x20000c3c
 80081d4:	20000c38 	.word	0x20000c38

080081d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10b      	bne.n	8008200 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	60fb      	str	r3, [r7, #12]
}
 80081fa:	bf00      	nop
 80081fc:	bf00      	nop
 80081fe:	e7fd      	b.n	80081fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008200:	4b07      	ldr	r3, [pc, #28]	@ (8008220 <vTaskPlaceOnEventList+0x48>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3318      	adds	r3, #24
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7fe fbd2 	bl	80069b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800820e:	2101      	movs	r1, #1
 8008210:	6838      	ldr	r0, [r7, #0]
 8008212:	f000 fb91 	bl	8008938 <prvAddCurrentTaskToDelayedList>
}
 8008216:	bf00      	nop
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	20000c38 	.word	0x20000c38

08008224 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10b      	bne.n	800824e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	617b      	str	r3, [r7, #20]
}
 8008248:	bf00      	nop
 800824a:	bf00      	nop
 800824c:	e7fd      	b.n	800824a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800824e:	4b0a      	ldr	r3, [pc, #40]	@ (8008278 <vTaskPlaceOnEventListRestricted+0x54>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3318      	adds	r3, #24
 8008254:	4619      	mov	r1, r3
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f7fe fb87 	bl	800696a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008262:	f04f 33ff 	mov.w	r3, #4294967295
 8008266:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	68b8      	ldr	r0, [r7, #8]
 800826c:	f000 fb64 	bl	8008938 <prvAddCurrentTaskToDelayedList>
	}
 8008270:	bf00      	nop
 8008272:	3718      	adds	r7, #24
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	20000c38 	.word	0x20000c38

0800827c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10b      	bne.n	80082aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	60fb      	str	r3, [r7, #12]
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop
 80082a8:	e7fd      	b.n	80082a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	3318      	adds	r3, #24
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe fbb8 	bl	8006a24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082b4:	4b1d      	ldr	r3, [pc, #116]	@ (800832c <xTaskRemoveFromEventList+0xb0>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d11d      	bne.n	80082f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	3304      	adds	r3, #4
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fe fbaf 	bl	8006a24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ca:	4b19      	ldr	r3, [pc, #100]	@ (8008330 <xTaskRemoveFromEventList+0xb4>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d903      	bls.n	80082da <xTaskRemoveFromEventList+0x5e>
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d6:	4a16      	ldr	r2, [pc, #88]	@ (8008330 <xTaskRemoveFromEventList+0xb4>)
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4a13      	ldr	r2, [pc, #76]	@ (8008334 <xTaskRemoveFromEventList+0xb8>)
 80082e8:	441a      	add	r2, r3
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	3304      	adds	r3, #4
 80082ee:	4619      	mov	r1, r3
 80082f0:	4610      	mov	r0, r2
 80082f2:	f7fe fb3a 	bl	800696a <vListInsertEnd>
 80082f6:	e005      	b.n	8008304 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	3318      	adds	r3, #24
 80082fc:	4619      	mov	r1, r3
 80082fe:	480e      	ldr	r0, [pc, #56]	@ (8008338 <xTaskRemoveFromEventList+0xbc>)
 8008300:	f7fe fb33 	bl	800696a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008308:	4b0c      	ldr	r3, [pc, #48]	@ (800833c <xTaskRemoveFromEventList+0xc0>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830e:	429a      	cmp	r2, r3
 8008310:	d905      	bls.n	800831e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008312:	2301      	movs	r3, #1
 8008314:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008316:	4b0a      	ldr	r3, [pc, #40]	@ (8008340 <xTaskRemoveFromEventList+0xc4>)
 8008318:	2201      	movs	r2, #1
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	e001      	b.n	8008322 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800831e:	2300      	movs	r3, #0
 8008320:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008322:	697b      	ldr	r3, [r7, #20]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20001134 	.word	0x20001134
 8008330:	20001114 	.word	0x20001114
 8008334:	20000c3c 	.word	0x20000c3c
 8008338:	200010cc 	.word	0x200010cc
 800833c:	20000c38 	.word	0x20000c38
 8008340:	20001120 	.word	0x20001120

08008344 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800834c:	4b06      	ldr	r3, [pc, #24]	@ (8008368 <vTaskInternalSetTimeOutState+0x24>)
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008354:	4b05      	ldr	r3, [pc, #20]	@ (800836c <vTaskInternalSetTimeOutState+0x28>)
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	605a      	str	r2, [r3, #4]
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	20001124 	.word	0x20001124
 800836c:	20001110 	.word	0x20001110

08008370 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10b      	bne.n	8008398 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	613b      	str	r3, [r7, #16]
}
 8008392:	bf00      	nop
 8008394:	bf00      	nop
 8008396:	e7fd      	b.n	8008394 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10b      	bne.n	80083b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	60fb      	str	r3, [r7, #12]
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	e7fd      	b.n	80083b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80083b6:	f000 ff9f 	bl	80092f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008430 <xTaskCheckForTimeOut+0xc0>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d2:	d102      	bne.n	80083da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	61fb      	str	r3, [r7, #28]
 80083d8:	e023      	b.n	8008422 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	4b15      	ldr	r3, [pc, #84]	@ (8008434 <xTaskCheckForTimeOut+0xc4>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d007      	beq.n	80083f6 <xTaskCheckForTimeOut+0x86>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	69ba      	ldr	r2, [r7, #24]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d302      	bcc.n	80083f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083f0:	2301      	movs	r3, #1
 80083f2:	61fb      	str	r3, [r7, #28]
 80083f4:	e015      	b.n	8008422 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d20b      	bcs.n	8008418 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	1ad2      	subs	r2, r2, r3
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7ff ff99 	bl	8008344 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008412:	2300      	movs	r3, #0
 8008414:	61fb      	str	r3, [r7, #28]
 8008416:	e004      	b.n	8008422 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800841e:	2301      	movs	r3, #1
 8008420:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008422:	f000 ff9b 	bl	800935c <vPortExitCritical>

	return xReturn;
 8008426:	69fb      	ldr	r3, [r7, #28]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3720      	adds	r7, #32
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	20001110 	.word	0x20001110
 8008434:	20001124 	.word	0x20001124

08008438 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008438:	b480      	push	{r7}
 800843a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800843c:	4b03      	ldr	r3, [pc, #12]	@ (800844c <vTaskMissedYield+0x14>)
 800843e:	2201      	movs	r2, #1
 8008440:	601a      	str	r2, [r3, #0]
}
 8008442:	bf00      	nop
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	20001120 	.word	0x20001120

08008450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008458:	f000 f852 	bl	8008500 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800845c:	4b06      	ldr	r3, [pc, #24]	@ (8008478 <prvIdleTask+0x28>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d9f9      	bls.n	8008458 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008464:	4b05      	ldr	r3, [pc, #20]	@ (800847c <prvIdleTask+0x2c>)
 8008466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008474:	e7f0      	b.n	8008458 <prvIdleTask+0x8>
 8008476:	bf00      	nop
 8008478:	20000c3c 	.word	0x20000c3c
 800847c:	e000ed04 	.word	0xe000ed04

08008480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008486:	2300      	movs	r3, #0
 8008488:	607b      	str	r3, [r7, #4]
 800848a:	e00c      	b.n	80084a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	4613      	mov	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4a12      	ldr	r2, [pc, #72]	@ (80084e0 <prvInitialiseTaskLists+0x60>)
 8008498:	4413      	add	r3, r2
 800849a:	4618      	mov	r0, r3
 800849c:	f7fe fa38 	bl	8006910 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3301      	adds	r3, #1
 80084a4:	607b      	str	r3, [r7, #4]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b37      	cmp	r3, #55	@ 0x37
 80084aa:	d9ef      	bls.n	800848c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084ac:	480d      	ldr	r0, [pc, #52]	@ (80084e4 <prvInitialiseTaskLists+0x64>)
 80084ae:	f7fe fa2f 	bl	8006910 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084b2:	480d      	ldr	r0, [pc, #52]	@ (80084e8 <prvInitialiseTaskLists+0x68>)
 80084b4:	f7fe fa2c 	bl	8006910 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084b8:	480c      	ldr	r0, [pc, #48]	@ (80084ec <prvInitialiseTaskLists+0x6c>)
 80084ba:	f7fe fa29 	bl	8006910 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084be:	480c      	ldr	r0, [pc, #48]	@ (80084f0 <prvInitialiseTaskLists+0x70>)
 80084c0:	f7fe fa26 	bl	8006910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084c4:	480b      	ldr	r0, [pc, #44]	@ (80084f4 <prvInitialiseTaskLists+0x74>)
 80084c6:	f7fe fa23 	bl	8006910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084ca:	4b0b      	ldr	r3, [pc, #44]	@ (80084f8 <prvInitialiseTaskLists+0x78>)
 80084cc:	4a05      	ldr	r2, [pc, #20]	@ (80084e4 <prvInitialiseTaskLists+0x64>)
 80084ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084d0:	4b0a      	ldr	r3, [pc, #40]	@ (80084fc <prvInitialiseTaskLists+0x7c>)
 80084d2:	4a05      	ldr	r2, [pc, #20]	@ (80084e8 <prvInitialiseTaskLists+0x68>)
 80084d4:	601a      	str	r2, [r3, #0]
}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	20000c3c 	.word	0x20000c3c
 80084e4:	2000109c 	.word	0x2000109c
 80084e8:	200010b0 	.word	0x200010b0
 80084ec:	200010cc 	.word	0x200010cc
 80084f0:	200010e0 	.word	0x200010e0
 80084f4:	200010f8 	.word	0x200010f8
 80084f8:	200010c4 	.word	0x200010c4
 80084fc:	200010c8 	.word	0x200010c8

08008500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008506:	e019      	b.n	800853c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008508:	f000 fef6 	bl	80092f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800850c:	4b10      	ldr	r3, [pc, #64]	@ (8008550 <prvCheckTasksWaitingTermination+0x50>)
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3304      	adds	r3, #4
 8008518:	4618      	mov	r0, r3
 800851a:	f7fe fa83 	bl	8006a24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800851e:	4b0d      	ldr	r3, [pc, #52]	@ (8008554 <prvCheckTasksWaitingTermination+0x54>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3b01      	subs	r3, #1
 8008524:	4a0b      	ldr	r2, [pc, #44]	@ (8008554 <prvCheckTasksWaitingTermination+0x54>)
 8008526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008528:	4b0b      	ldr	r3, [pc, #44]	@ (8008558 <prvCheckTasksWaitingTermination+0x58>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3b01      	subs	r3, #1
 800852e:	4a0a      	ldr	r2, [pc, #40]	@ (8008558 <prvCheckTasksWaitingTermination+0x58>)
 8008530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008532:	f000 ff13 	bl	800935c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f810 	bl	800855c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800853c:	4b06      	ldr	r3, [pc, #24]	@ (8008558 <prvCheckTasksWaitingTermination+0x58>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e1      	bne.n	8008508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	200010e0 	.word	0x200010e0
 8008554:	2000110c 	.word	0x2000110c
 8008558:	200010f4 	.word	0x200010f4

0800855c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800856a:	2b00      	cmp	r3, #0
 800856c:	d108      	bne.n	8008580 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008572:	4618      	mov	r0, r3
 8008574:	f001 f8b0 	bl	80096d8 <vPortFree>
				vPortFree( pxTCB );
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 f8ad 	bl	80096d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800857e:	e019      	b.n	80085b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008586:	2b01      	cmp	r3, #1
 8008588:	d103      	bne.n	8008592 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f001 f8a4 	bl	80096d8 <vPortFree>
	}
 8008590:	e010      	b.n	80085b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008598:	2b02      	cmp	r3, #2
 800859a:	d00b      	beq.n	80085b4 <prvDeleteTCB+0x58>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a0:	f383 8811 	msr	BASEPRI, r3
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	60fb      	str	r3, [r7, #12]
}
 80085ae:	bf00      	nop
 80085b0:	bf00      	nop
 80085b2:	e7fd      	b.n	80085b0 <prvDeleteTCB+0x54>
	}
 80085b4:	bf00      	nop
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085c2:	4b0c      	ldr	r3, [pc, #48]	@ (80085f4 <prvResetNextTaskUnblockTime+0x38>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d104      	bne.n	80085d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085cc:	4b0a      	ldr	r3, [pc, #40]	@ (80085f8 <prvResetNextTaskUnblockTime+0x3c>)
 80085ce:	f04f 32ff 	mov.w	r2, #4294967295
 80085d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085d4:	e008      	b.n	80085e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d6:	4b07      	ldr	r3, [pc, #28]	@ (80085f4 <prvResetNextTaskUnblockTime+0x38>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	4a04      	ldr	r2, [pc, #16]	@ (80085f8 <prvResetNextTaskUnblockTime+0x3c>)
 80085e6:	6013      	str	r3, [r2, #0]
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	200010c4 	.word	0x200010c4
 80085f8:	2000112c 	.word	0x2000112c

080085fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008602:	4b05      	ldr	r3, [pc, #20]	@ (8008618 <xTaskGetCurrentTaskHandle+0x1c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008608:	687b      	ldr	r3, [r7, #4]
	}
 800860a:	4618      	mov	r0, r3
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	20000c38 	.word	0x20000c38

0800861c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008622:	4b0b      	ldr	r3, [pc, #44]	@ (8008650 <xTaskGetSchedulerState+0x34>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d102      	bne.n	8008630 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800862a:	2301      	movs	r3, #1
 800862c:	607b      	str	r3, [r7, #4]
 800862e:	e008      	b.n	8008642 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008630:	4b08      	ldr	r3, [pc, #32]	@ (8008654 <xTaskGetSchedulerState+0x38>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d102      	bne.n	800863e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008638:	2302      	movs	r3, #2
 800863a:	607b      	str	r3, [r7, #4]
 800863c:	e001      	b.n	8008642 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800863e:	2300      	movs	r3, #0
 8008640:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008642:	687b      	ldr	r3, [r7, #4]
	}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20001118 	.word	0x20001118
 8008654:	20001134 	.word	0x20001134

08008658 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008664:	2300      	movs	r3, #0
 8008666:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d051      	beq.n	8008712 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008672:	4b2a      	ldr	r3, [pc, #168]	@ (800871c <xTaskPriorityInherit+0xc4>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008678:	429a      	cmp	r2, r3
 800867a:	d241      	bcs.n	8008700 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	2b00      	cmp	r3, #0
 8008682:	db06      	blt.n	8008692 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008684:	4b25      	ldr	r3, [pc, #148]	@ (800871c <xTaskPriorityInherit+0xc4>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	6959      	ldr	r1, [r3, #20]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800869a:	4613      	mov	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008720 <xTaskPriorityInherit+0xc8>)
 80086a4:	4413      	add	r3, r2
 80086a6:	4299      	cmp	r1, r3
 80086a8:	d122      	bne.n	80086f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	3304      	adds	r3, #4
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe f9b8 	bl	8006a24 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086b4:	4b19      	ldr	r3, [pc, #100]	@ (800871c <xTaskPriorityInherit+0xc4>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c2:	4b18      	ldr	r3, [pc, #96]	@ (8008724 <xTaskPriorityInherit+0xcc>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d903      	bls.n	80086d2 <xTaskPriorityInherit+0x7a>
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ce:	4a15      	ldr	r2, [pc, #84]	@ (8008724 <xTaskPriorityInherit+0xcc>)
 80086d0:	6013      	str	r3, [r2, #0]
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4a10      	ldr	r2, [pc, #64]	@ (8008720 <xTaskPriorityInherit+0xc8>)
 80086e0:	441a      	add	r2, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	3304      	adds	r3, #4
 80086e6:	4619      	mov	r1, r3
 80086e8:	4610      	mov	r0, r2
 80086ea:	f7fe f93e 	bl	800696a <vListInsertEnd>
 80086ee:	e004      	b.n	80086fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086f0:	4b0a      	ldr	r3, [pc, #40]	@ (800871c <xTaskPriorityInherit+0xc4>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80086fa:	2301      	movs	r3, #1
 80086fc:	60fb      	str	r3, [r7, #12]
 80086fe:	e008      	b.n	8008712 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008704:	4b05      	ldr	r3, [pc, #20]	@ (800871c <xTaskPriorityInherit+0xc4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870a:	429a      	cmp	r2, r3
 800870c:	d201      	bcs.n	8008712 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800870e:	2301      	movs	r3, #1
 8008710:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008712:	68fb      	ldr	r3, [r7, #12]
	}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	20000c38 	.word	0x20000c38
 8008720:	20000c3c 	.word	0x20000c3c
 8008724:	20001114 	.word	0x20001114

08008728 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008734:	2300      	movs	r3, #0
 8008736:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d058      	beq.n	80087f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800873e:	4b2f      	ldr	r3, [pc, #188]	@ (80087fc <xTaskPriorityDisinherit+0xd4>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	429a      	cmp	r2, r3
 8008746:	d00b      	beq.n	8008760 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	60fb      	str	r3, [r7, #12]
}
 800875a:	bf00      	nop
 800875c:	bf00      	nop
 800875e:	e7fd      	b.n	800875c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10b      	bne.n	8008780 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	60bb      	str	r3, [r7, #8]
}
 800877a:	bf00      	nop
 800877c:	bf00      	nop
 800877e:	e7fd      	b.n	800877c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008784:	1e5a      	subs	r2, r3, #1
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008792:	429a      	cmp	r2, r3
 8008794:	d02c      	beq.n	80087f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800879a:	2b00      	cmp	r3, #0
 800879c:	d128      	bne.n	80087f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	3304      	adds	r3, #4
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe f93e 	bl	8006a24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008800 <xTaskPriorityDisinherit+0xd8>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d903      	bls.n	80087d0 <xTaskPriorityDisinherit+0xa8>
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087cc:	4a0c      	ldr	r2, [pc, #48]	@ (8008800 <xTaskPriorityDisinherit+0xd8>)
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087d4:	4613      	mov	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4a09      	ldr	r2, [pc, #36]	@ (8008804 <xTaskPriorityDisinherit+0xdc>)
 80087de:	441a      	add	r2, r3
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	3304      	adds	r3, #4
 80087e4:	4619      	mov	r1, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	f7fe f8bf 	bl	800696a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80087ec:	2301      	movs	r3, #1
 80087ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087f0:	697b      	ldr	r3, [r7, #20]
	}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3718      	adds	r7, #24
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20000c38 	.word	0x20000c38
 8008800:	20001114 	.word	0x20001114
 8008804:	20000c3c 	.word	0x20000c3c

08008808 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008816:	2301      	movs	r3, #1
 8008818:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d06c      	beq.n	80088fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10b      	bne.n	8008840 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	60fb      	str	r3, [r7, #12]
}
 800883a:	bf00      	nop
 800883c:	bf00      	nop
 800883e:	e7fd      	b.n	800883c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	429a      	cmp	r2, r3
 8008848:	d902      	bls.n	8008850 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	61fb      	str	r3, [r7, #28]
 800884e:	e002      	b.n	8008856 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008854:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885a:	69fa      	ldr	r2, [r7, #28]
 800885c:	429a      	cmp	r2, r3
 800885e:	d04c      	beq.n	80088fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	429a      	cmp	r2, r3
 8008868:	d147      	bne.n	80088fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800886a:	4b26      	ldr	r3, [pc, #152]	@ (8008904 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69ba      	ldr	r2, [r7, #24]
 8008870:	429a      	cmp	r2, r3
 8008872:	d10b      	bne.n	800888c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	60bb      	str	r3, [r7, #8]
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008890:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	69fa      	ldr	r2, [r7, #28]
 8008896:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	db04      	blt.n	80088aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	6959      	ldr	r1, [r3, #20]
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	4613      	mov	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4a13      	ldr	r2, [pc, #76]	@ (8008908 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80088ba:	4413      	add	r3, r2
 80088bc:	4299      	cmp	r1, r3
 80088be:	d11c      	bne.n	80088fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	3304      	adds	r3, #4
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe f8ad 	bl	8006a24 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ce:	4b0f      	ldr	r3, [pc, #60]	@ (800890c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d903      	bls.n	80088de <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088da:	4a0c      	ldr	r2, [pc, #48]	@ (800890c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e2:	4613      	mov	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4a07      	ldr	r2, [pc, #28]	@ (8008908 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80088ec:	441a      	add	r2, r3
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	3304      	adds	r3, #4
 80088f2:	4619      	mov	r1, r3
 80088f4:	4610      	mov	r0, r2
 80088f6:	f7fe f838 	bl	800696a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088fa:	bf00      	nop
 80088fc:	3720      	adds	r7, #32
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20000c38 	.word	0x20000c38
 8008908:	20000c3c 	.word	0x20000c3c
 800890c:	20001114 	.word	0x20001114

08008910 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008914:	4b07      	ldr	r3, [pc, #28]	@ (8008934 <pvTaskIncrementMutexHeldCount+0x24>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d004      	beq.n	8008926 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800891c:	4b05      	ldr	r3, [pc, #20]	@ (8008934 <pvTaskIncrementMutexHeldCount+0x24>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008922:	3201      	adds	r2, #1
 8008924:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008926:	4b03      	ldr	r3, [pc, #12]	@ (8008934 <pvTaskIncrementMutexHeldCount+0x24>)
 8008928:	681b      	ldr	r3, [r3, #0]
	}
 800892a:	4618      	mov	r0, r3
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	20000c38 	.word	0x20000c38

08008938 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008942:	4b21      	ldr	r3, [pc, #132]	@ (80089c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008948:	4b20      	ldr	r3, [pc, #128]	@ (80089cc <prvAddCurrentTaskToDelayedList+0x94>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3304      	adds	r3, #4
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe f868 	bl	8006a24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895a:	d10a      	bne.n	8008972 <prvAddCurrentTaskToDelayedList+0x3a>
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008962:	4b1a      	ldr	r3, [pc, #104]	@ (80089cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3304      	adds	r3, #4
 8008968:	4619      	mov	r1, r3
 800896a:	4819      	ldr	r0, [pc, #100]	@ (80089d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800896c:	f7fd fffd 	bl	800696a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008970:	e026      	b.n	80089c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4413      	add	r3, r2
 8008978:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800897a:	4b14      	ldr	r3, [pc, #80]	@ (80089cc <prvAddCurrentTaskToDelayedList+0x94>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	429a      	cmp	r2, r3
 8008988:	d209      	bcs.n	800899e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800898a:	4b12      	ldr	r3, [pc, #72]	@ (80089d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	4b0f      	ldr	r3, [pc, #60]	@ (80089cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3304      	adds	r3, #4
 8008994:	4619      	mov	r1, r3
 8008996:	4610      	mov	r0, r2
 8008998:	f7fe f80b 	bl	80069b2 <vListInsert>
}
 800899c:	e010      	b.n	80089c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800899e:	4b0e      	ldr	r3, [pc, #56]	@ (80089d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	4b0a      	ldr	r3, [pc, #40]	@ (80089cc <prvAddCurrentTaskToDelayedList+0x94>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3304      	adds	r3, #4
 80089a8:	4619      	mov	r1, r3
 80089aa:	4610      	mov	r0, r2
 80089ac:	f7fe f801 	bl	80069b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089b0:	4b0a      	ldr	r3, [pc, #40]	@ (80089dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d202      	bcs.n	80089c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80089ba:	4a08      	ldr	r2, [pc, #32]	@ (80089dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	6013      	str	r3, [r2, #0]
}
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	20001110 	.word	0x20001110
 80089cc:	20000c38 	.word	0x20000c38
 80089d0:	200010f8 	.word	0x200010f8
 80089d4:	200010c8 	.word	0x200010c8
 80089d8:	200010c4 	.word	0x200010c4
 80089dc:	2000112c 	.word	0x2000112c

080089e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08a      	sub	sp, #40	@ 0x28
 80089e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80089e6:	2300      	movs	r3, #0
 80089e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80089ea:	f000 fb13 	bl	8009014 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80089ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008a64 <xTimerCreateTimerTask+0x84>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d021      	beq.n	8008a3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80089f6:	2300      	movs	r3, #0
 80089f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80089fe:	1d3a      	adds	r2, r7, #4
 8008a00:	f107 0108 	add.w	r1, r7, #8
 8008a04:	f107 030c 	add.w	r3, r7, #12
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fd ff67 	bl	80068dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a0e:	6879      	ldr	r1, [r7, #4]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	9202      	str	r2, [sp, #8]
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	2302      	movs	r3, #2
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	460a      	mov	r2, r1
 8008a20:	4911      	ldr	r1, [pc, #68]	@ (8008a68 <xTimerCreateTimerTask+0x88>)
 8008a22:	4812      	ldr	r0, [pc, #72]	@ (8008a6c <xTimerCreateTimerTask+0x8c>)
 8008a24:	f7fe ffc0 	bl	80079a8 <xTaskCreateStatic>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	4a11      	ldr	r2, [pc, #68]	@ (8008a70 <xTimerCreateTimerTask+0x90>)
 8008a2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a2e:	4b10      	ldr	r3, [pc, #64]	@ (8008a70 <xTimerCreateTimerTask+0x90>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a36:	2301      	movs	r3, #1
 8008a38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10b      	bne.n	8008a58 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	613b      	str	r3, [r7, #16]
}
 8008a52:	bf00      	nop
 8008a54:	bf00      	nop
 8008a56:	e7fd      	b.n	8008a54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008a58:	697b      	ldr	r3, [r7, #20]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20001168 	.word	0x20001168
 8008a68:	0800cd18 	.word	0x0800cd18
 8008a6c:	08008bad 	.word	0x08008bad
 8008a70:	2000116c 	.word	0x2000116c

08008a74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08a      	sub	sp, #40	@ 0x28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10b      	bne.n	8008aa4 <xTimerGenericCommand+0x30>
	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	623b      	str	r3, [r7, #32]
}
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
 8008aa2:	e7fd      	b.n	8008aa0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008aa4:	4b19      	ldr	r3, [pc, #100]	@ (8008b0c <xTimerGenericCommand+0x98>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d02a      	beq.n	8008b02 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b05      	cmp	r3, #5
 8008abc:	dc18      	bgt.n	8008af0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008abe:	f7ff fdad 	bl	800861c <xTaskGetSchedulerState>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d109      	bne.n	8008adc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ac8:	4b10      	ldr	r3, [pc, #64]	@ (8008b0c <xTimerGenericCommand+0x98>)
 8008aca:	6818      	ldr	r0, [r3, #0]
 8008acc:	f107 0110 	add.w	r1, r7, #16
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ad4:	f7fe f9ce 	bl	8006e74 <xQueueGenericSend>
 8008ad8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ada:	e012      	b.n	8008b02 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008adc:	4b0b      	ldr	r3, [pc, #44]	@ (8008b0c <xTimerGenericCommand+0x98>)
 8008ade:	6818      	ldr	r0, [r3, #0]
 8008ae0:	f107 0110 	add.w	r1, r7, #16
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f7fe f9c4 	bl	8006e74 <xQueueGenericSend>
 8008aec:	6278      	str	r0, [r7, #36]	@ 0x24
 8008aee:	e008      	b.n	8008b02 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008af0:	4b06      	ldr	r3, [pc, #24]	@ (8008b0c <xTimerGenericCommand+0x98>)
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	f107 0110 	add.w	r1, r7, #16
 8008af8:	2300      	movs	r3, #0
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	f7fe fabc 	bl	8007078 <xQueueGenericSendFromISR>
 8008b00:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3728      	adds	r7, #40	@ 0x28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20001168 	.word	0x20001168

08008b10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b088      	sub	sp, #32
 8008b14:	af02      	add	r7, sp, #8
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b1a:	4b23      	ldr	r3, [pc, #140]	@ (8008ba8 <prvProcessExpiredTimer+0x98>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	3304      	adds	r3, #4
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fd ff7b 	bl	8006a24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b34:	f003 0304 	and.w	r3, r3, #4
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d023      	beq.n	8008b84 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	699a      	ldr	r2, [r3, #24]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	18d1      	adds	r1, r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	6978      	ldr	r0, [r7, #20]
 8008b4a:	f000 f8d5 	bl	8008cf8 <prvInsertTimerInActiveList>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d020      	beq.n	8008b96 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b54:	2300      	movs	r3, #0
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	6978      	ldr	r0, [r7, #20]
 8008b60:	f7ff ff88 	bl	8008a74 <xTimerGenericCommand>
 8008b64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d114      	bne.n	8008b96 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	60fb      	str	r3, [r7, #12]
}
 8008b7e:	bf00      	nop
 8008b80:	bf00      	nop
 8008b82:	e7fd      	b.n	8008b80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b8a:	f023 0301 	bic.w	r3, r3, #1
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	6978      	ldr	r0, [r7, #20]
 8008b9c:	4798      	blx	r3
}
 8008b9e:	bf00      	nop
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20001160 	.word	0x20001160

08008bac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bb4:	f107 0308 	add.w	r3, r7, #8
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 f859 	bl	8008c70 <prvGetNextExpireTime>
 8008bbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 f805 	bl	8008bd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008bca:	f000 f8d7 	bl	8008d7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bce:	bf00      	nop
 8008bd0:	e7f0      	b.n	8008bb4 <prvTimerTask+0x8>
	...

08008bd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008bde:	f7ff f927 	bl	8007e30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008be2:	f107 0308 	add.w	r3, r7, #8
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 f866 	bl	8008cb8 <prvSampleTimeNow>
 8008bec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d130      	bne.n	8008c56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <prvProcessTimerOrBlockTask+0x3c>
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d806      	bhi.n	8008c10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008c02:	f7ff f923 	bl	8007e4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008c06:	68f9      	ldr	r1, [r7, #12]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff ff81 	bl	8008b10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008c0e:	e024      	b.n	8008c5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d008      	beq.n	8008c28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c16:	4b13      	ldr	r3, [pc, #76]	@ (8008c64 <prvProcessTimerOrBlockTask+0x90>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <prvProcessTimerOrBlockTask+0x50>
 8008c20:	2301      	movs	r3, #1
 8008c22:	e000      	b.n	8008c26 <prvProcessTimerOrBlockTask+0x52>
 8008c24:	2300      	movs	r3, #0
 8008c26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c28:	4b0f      	ldr	r3, [pc, #60]	@ (8008c68 <prvProcessTimerOrBlockTask+0x94>)
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	4619      	mov	r1, r3
 8008c36:	f7fe fe83 	bl	8007940 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c3a:	f7ff f907 	bl	8007e4c <xTaskResumeAll>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10a      	bne.n	8008c5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c44:	4b09      	ldr	r3, [pc, #36]	@ (8008c6c <prvProcessTimerOrBlockTask+0x98>)
 8008c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c4a:	601a      	str	r2, [r3, #0]
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	f3bf 8f6f 	isb	sy
}
 8008c54:	e001      	b.n	8008c5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c56:	f7ff f8f9 	bl	8007e4c <xTaskResumeAll>
}
 8008c5a:	bf00      	nop
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20001164 	.word	0x20001164
 8008c68:	20001168 	.word	0x20001168
 8008c6c:	e000ed04 	.word	0xe000ed04

08008c70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c78:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb4 <prvGetNextExpireTime+0x44>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <prvGetNextExpireTime+0x16>
 8008c82:	2201      	movs	r2, #1
 8008c84:	e000      	b.n	8008c88 <prvGetNextExpireTime+0x18>
 8008c86:	2200      	movs	r2, #0
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d105      	bne.n	8008ca0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c94:	4b07      	ldr	r3, [pc, #28]	@ (8008cb4 <prvGetNextExpireTime+0x44>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	e001      	b.n	8008ca4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20001160 	.word	0x20001160

08008cb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008cc0:	f7ff f962 	bl	8007f88 <xTaskGetTickCount>
 8008cc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf4 <prvSampleTimeNow+0x3c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d205      	bcs.n	8008cdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008cd0:	f000 f93a 	bl	8008f48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	e002      	b.n	8008ce2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ce2:	4a04      	ldr	r2, [pc, #16]	@ (8008cf4 <prvSampleTimeNow+0x3c>)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20001170 	.word	0x20001170

08008cf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d812      	bhi.n	8008d44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	1ad2      	subs	r2, r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d302      	bcc.n	8008d32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	617b      	str	r3, [r7, #20]
 8008d30:	e01b      	b.n	8008d6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d32:	4b10      	ldr	r3, [pc, #64]	@ (8008d74 <prvInsertTimerInActiveList+0x7c>)
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	f7fd fe38 	bl	80069b2 <vListInsert>
 8008d42:	e012      	b.n	8008d6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d206      	bcs.n	8008d5a <prvInsertTimerInActiveList+0x62>
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d302      	bcc.n	8008d5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d54:	2301      	movs	r3, #1
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	e007      	b.n	8008d6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d5a:	4b07      	ldr	r3, [pc, #28]	@ (8008d78 <prvInsertTimerInActiveList+0x80>)
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3304      	adds	r3, #4
 8008d62:	4619      	mov	r1, r3
 8008d64:	4610      	mov	r0, r2
 8008d66:	f7fd fe24 	bl	80069b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d6a:	697b      	ldr	r3, [r7, #20]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	20001164 	.word	0x20001164
 8008d78:	20001160 	.word	0x20001160

08008d7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b08e      	sub	sp, #56	@ 0x38
 8008d80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d82:	e0ce      	b.n	8008f22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	da19      	bge.n	8008dbe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d8a:	1d3b      	adds	r3, r7, #4
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10b      	bne.n	8008dae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	61fb      	str	r3, [r7, #28]
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	e7fd      	b.n	8008daa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008db4:	6850      	ldr	r0, [r2, #4]
 8008db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008db8:	6892      	ldr	r2, [r2, #8]
 8008dba:	4611      	mov	r1, r2
 8008dbc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f2c0 80ae 	blt.w	8008f22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d004      	beq.n	8008ddc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fd fe24 	bl	8006a24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ddc:	463b      	mov	r3, r7
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7ff ff6a 	bl	8008cb8 <prvSampleTimeNow>
 8008de4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b09      	cmp	r3, #9
 8008dea:	f200 8097 	bhi.w	8008f1c <prvProcessReceivedCommands+0x1a0>
 8008dee:	a201      	add	r2, pc, #4	@ (adr r2, 8008df4 <prvProcessReceivedCommands+0x78>)
 8008df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df4:	08008e1d 	.word	0x08008e1d
 8008df8:	08008e1d 	.word	0x08008e1d
 8008dfc:	08008e1d 	.word	0x08008e1d
 8008e00:	08008e93 	.word	0x08008e93
 8008e04:	08008ea7 	.word	0x08008ea7
 8008e08:	08008ef3 	.word	0x08008ef3
 8008e0c:	08008e1d 	.word	0x08008e1d
 8008e10:	08008e1d 	.word	0x08008e1d
 8008e14:	08008e93 	.word	0x08008e93
 8008e18:	08008ea7 	.word	0x08008ea7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e22:	f043 0301 	orr.w	r3, r3, #1
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	18d1      	adds	r1, r2, r3
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e3c:	f7ff ff5c 	bl	8008cf8 <prvInsertTimerInActiveList>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d06c      	beq.n	8008f20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d061      	beq.n	8008f20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	441a      	add	r2, r3
 8008e64:	2300      	movs	r3, #0
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	2300      	movs	r3, #0
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e6e:	f7ff fe01 	bl	8008a74 <xTimerGenericCommand>
 8008e72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d152      	bne.n	8008f20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	61bb      	str	r3, [r7, #24]
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	e7fd      	b.n	8008e8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e98:	f023 0301 	bic.w	r3, r3, #1
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008ea4:	e03d      	b.n	8008f22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008eac:	f043 0301 	orr.w	r3, r3, #1
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10b      	bne.n	8008ede <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	617b      	str	r3, [r7, #20]
}
 8008ed8:	bf00      	nop
 8008eda:	bf00      	nop
 8008edc:	e7fd      	b.n	8008eda <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee0:	699a      	ldr	r2, [r3, #24]
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee4:	18d1      	adds	r1, r2, r3
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eec:	f7ff ff04 	bl	8008cf8 <prvInsertTimerInActiveList>
					break;
 8008ef0:	e017      	b.n	8008f22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ef8:	f003 0302 	and.w	r3, r3, #2
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d103      	bne.n	8008f08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008f00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f02:	f000 fbe9 	bl	80096d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f06:	e00c      	b.n	8008f22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f0e:	f023 0301 	bic.w	r3, r3, #1
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008f1a:	e002      	b.n	8008f22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008f1c:	bf00      	nop
 8008f1e:	e000      	b.n	8008f22 <prvProcessReceivedCommands+0x1a6>
					break;
 8008f20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f22:	4b08      	ldr	r3, [pc, #32]	@ (8008f44 <prvProcessReceivedCommands+0x1c8>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	1d39      	adds	r1, r7, #4
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe f942 	bl	80071b4 <xQueueReceive>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f47f af26 	bne.w	8008d84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008f38:	bf00      	nop
 8008f3a:	bf00      	nop
 8008f3c:	3730      	adds	r7, #48	@ 0x30
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	20001168 	.word	0x20001168

08008f48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b088      	sub	sp, #32
 8008f4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f4e:	e049      	b.n	8008fe4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f50:	4b2e      	ldr	r3, [pc, #184]	@ (800900c <prvSwitchTimerLists+0xc4>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800900c <prvSwitchTimerLists+0xc4>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	3304      	adds	r3, #4
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fd fd5b 	bl	8006a24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f7c:	f003 0304 	and.w	r3, r3, #4
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d02f      	beq.n	8008fe4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d90e      	bls.n	8008fb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800900c <prvSwitchTimerLists+0xc4>)
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	4619      	mov	r1, r3
 8008fac:	4610      	mov	r0, r2
 8008fae:	f7fd fd00 	bl	80069b2 <vListInsert>
 8008fb2:	e017      	b.n	8008fe4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	2300      	movs	r3, #0
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f7ff fd58 	bl	8008a74 <xTimerGenericCommand>
 8008fc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10b      	bne.n	8008fe4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	603b      	str	r3, [r7, #0]
}
 8008fde:	bf00      	nop
 8008fe0:	bf00      	nop
 8008fe2:	e7fd      	b.n	8008fe0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fe4:	4b09      	ldr	r3, [pc, #36]	@ (800900c <prvSwitchTimerLists+0xc4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1b0      	bne.n	8008f50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008fee:	4b07      	ldr	r3, [pc, #28]	@ (800900c <prvSwitchTimerLists+0xc4>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ff4:	4b06      	ldr	r3, [pc, #24]	@ (8009010 <prvSwitchTimerLists+0xc8>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a04      	ldr	r2, [pc, #16]	@ (800900c <prvSwitchTimerLists+0xc4>)
 8008ffa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ffc:	4a04      	ldr	r2, [pc, #16]	@ (8009010 <prvSwitchTimerLists+0xc8>)
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	6013      	str	r3, [r2, #0]
}
 8009002:	bf00      	nop
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	20001160 	.word	0x20001160
 8009010:	20001164 	.word	0x20001164

08009014 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800901a:	f000 f96d 	bl	80092f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800901e:	4b15      	ldr	r3, [pc, #84]	@ (8009074 <prvCheckForValidListAndQueue+0x60>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d120      	bne.n	8009068 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009026:	4814      	ldr	r0, [pc, #80]	@ (8009078 <prvCheckForValidListAndQueue+0x64>)
 8009028:	f7fd fc72 	bl	8006910 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800902c:	4813      	ldr	r0, [pc, #76]	@ (800907c <prvCheckForValidListAndQueue+0x68>)
 800902e:	f7fd fc6f 	bl	8006910 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009032:	4b13      	ldr	r3, [pc, #76]	@ (8009080 <prvCheckForValidListAndQueue+0x6c>)
 8009034:	4a10      	ldr	r2, [pc, #64]	@ (8009078 <prvCheckForValidListAndQueue+0x64>)
 8009036:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009038:	4b12      	ldr	r3, [pc, #72]	@ (8009084 <prvCheckForValidListAndQueue+0x70>)
 800903a:	4a10      	ldr	r2, [pc, #64]	@ (800907c <prvCheckForValidListAndQueue+0x68>)
 800903c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800903e:	2300      	movs	r3, #0
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	4b11      	ldr	r3, [pc, #68]	@ (8009088 <prvCheckForValidListAndQueue+0x74>)
 8009044:	4a11      	ldr	r2, [pc, #68]	@ (800908c <prvCheckForValidListAndQueue+0x78>)
 8009046:	2110      	movs	r1, #16
 8009048:	200a      	movs	r0, #10
 800904a:	f7fd fd7f 	bl	8006b4c <xQueueGenericCreateStatic>
 800904e:	4603      	mov	r3, r0
 8009050:	4a08      	ldr	r2, [pc, #32]	@ (8009074 <prvCheckForValidListAndQueue+0x60>)
 8009052:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009054:	4b07      	ldr	r3, [pc, #28]	@ (8009074 <prvCheckForValidListAndQueue+0x60>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800905c:	4b05      	ldr	r3, [pc, #20]	@ (8009074 <prvCheckForValidListAndQueue+0x60>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	490b      	ldr	r1, [pc, #44]	@ (8009090 <prvCheckForValidListAndQueue+0x7c>)
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fc42 	bl	80078ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009068:	f000 f978 	bl	800935c <vPortExitCritical>
}
 800906c:	bf00      	nop
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20001168 	.word	0x20001168
 8009078:	20001138 	.word	0x20001138
 800907c:	2000114c 	.word	0x2000114c
 8009080:	20001160 	.word	0x20001160
 8009084:	20001164 	.word	0x20001164
 8009088:	20001214 	.word	0x20001214
 800908c:	20001174 	.word	0x20001174
 8009090:	0800cd20 	.word	0x0800cd20

08009094 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3b04      	subs	r3, #4
 80090a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80090ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3b04      	subs	r3, #4
 80090b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f023 0201 	bic.w	r2, r3, #1
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3b04      	subs	r3, #4
 80090c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090c4:	4a0c      	ldr	r2, [pc, #48]	@ (80090f8 <pxPortInitialiseStack+0x64>)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3b14      	subs	r3, #20
 80090ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3b04      	subs	r3, #4
 80090da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f06f 0202 	mvn.w	r2, #2
 80090e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3b20      	subs	r3, #32
 80090e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090ea:	68fb      	ldr	r3, [r7, #12]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	080090fd 	.word	0x080090fd

080090fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009102:	2300      	movs	r3, #0
 8009104:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009106:	4b13      	ldr	r3, [pc, #76]	@ (8009154 <prvTaskExitError+0x58>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910e:	d00b      	beq.n	8009128 <prvTaskExitError+0x2c>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	60fb      	str	r3, [r7, #12]
}
 8009122:	bf00      	nop
 8009124:	bf00      	nop
 8009126:	e7fd      	b.n	8009124 <prvTaskExitError+0x28>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	60bb      	str	r3, [r7, #8]
}
 800913a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800913c:	bf00      	nop
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0fc      	beq.n	800913e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	20000020 	.word	0x20000020
	...

08009160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009160:	4b07      	ldr	r3, [pc, #28]	@ (8009180 <pxCurrentTCBConst2>)
 8009162:	6819      	ldr	r1, [r3, #0]
 8009164:	6808      	ldr	r0, [r1, #0]
 8009166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916a:	f380 8809 	msr	PSP, r0
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f04f 0000 	mov.w	r0, #0
 8009176:	f380 8811 	msr	BASEPRI, r0
 800917a:	4770      	bx	lr
 800917c:	f3af 8000 	nop.w

08009180 <pxCurrentTCBConst2>:
 8009180:	20000c38 	.word	0x20000c38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop

08009188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009188:	4808      	ldr	r0, [pc, #32]	@ (80091ac <prvPortStartFirstTask+0x24>)
 800918a:	6800      	ldr	r0, [r0, #0]
 800918c:	6800      	ldr	r0, [r0, #0]
 800918e:	f380 8808 	msr	MSP, r0
 8009192:	f04f 0000 	mov.w	r0, #0
 8009196:	f380 8814 	msr	CONTROL, r0
 800919a:	b662      	cpsie	i
 800919c:	b661      	cpsie	f
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	df00      	svc	0
 80091a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091aa:	bf00      	nop
 80091ac:	e000ed08 	.word	0xe000ed08

080091b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80091b6:	4b47      	ldr	r3, [pc, #284]	@ (80092d4 <xPortStartScheduler+0x124>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a47      	ldr	r2, [pc, #284]	@ (80092d8 <xPortStartScheduler+0x128>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d10b      	bne.n	80091d8 <xPortStartScheduler+0x28>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	60fb      	str	r3, [r7, #12]
}
 80091d2:	bf00      	nop
 80091d4:	bf00      	nop
 80091d6:	e7fd      	b.n	80091d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091d8:	4b3e      	ldr	r3, [pc, #248]	@ (80092d4 <xPortStartScheduler+0x124>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a3f      	ldr	r2, [pc, #252]	@ (80092dc <xPortStartScheduler+0x12c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d10b      	bne.n	80091fa <xPortStartScheduler+0x4a>
	__asm volatile
 80091e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	613b      	str	r3, [r7, #16]
}
 80091f4:	bf00      	nop
 80091f6:	bf00      	nop
 80091f8:	e7fd      	b.n	80091f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091fa:	4b39      	ldr	r3, [pc, #228]	@ (80092e0 <xPortStartScheduler+0x130>)
 80091fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	b2db      	uxtb	r3, r3
 8009204:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	22ff      	movs	r2, #255	@ 0xff
 800920a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	b2db      	uxtb	r3, r3
 8009212:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800921c:	b2da      	uxtb	r2, r3
 800921e:	4b31      	ldr	r3, [pc, #196]	@ (80092e4 <xPortStartScheduler+0x134>)
 8009220:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009222:	4b31      	ldr	r3, [pc, #196]	@ (80092e8 <xPortStartScheduler+0x138>)
 8009224:	2207      	movs	r2, #7
 8009226:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009228:	e009      	b.n	800923e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800922a:	4b2f      	ldr	r3, [pc, #188]	@ (80092e8 <xPortStartScheduler+0x138>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3b01      	subs	r3, #1
 8009230:	4a2d      	ldr	r2, [pc, #180]	@ (80092e8 <xPortStartScheduler+0x138>)
 8009232:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	b2db      	uxtb	r3, r3
 800923c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800923e:	78fb      	ldrb	r3, [r7, #3]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009246:	2b80      	cmp	r3, #128	@ 0x80
 8009248:	d0ef      	beq.n	800922a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800924a:	4b27      	ldr	r3, [pc, #156]	@ (80092e8 <xPortStartScheduler+0x138>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f1c3 0307 	rsb	r3, r3, #7
 8009252:	2b04      	cmp	r3, #4
 8009254:	d00b      	beq.n	800926e <xPortStartScheduler+0xbe>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	60bb      	str	r3, [r7, #8]
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	e7fd      	b.n	800926a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800926e:	4b1e      	ldr	r3, [pc, #120]	@ (80092e8 <xPortStartScheduler+0x138>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	021b      	lsls	r3, r3, #8
 8009274:	4a1c      	ldr	r2, [pc, #112]	@ (80092e8 <xPortStartScheduler+0x138>)
 8009276:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009278:	4b1b      	ldr	r3, [pc, #108]	@ (80092e8 <xPortStartScheduler+0x138>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009280:	4a19      	ldr	r2, [pc, #100]	@ (80092e8 <xPortStartScheduler+0x138>)
 8009282:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	b2da      	uxtb	r2, r3
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800928c:	4b17      	ldr	r3, [pc, #92]	@ (80092ec <xPortStartScheduler+0x13c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a16      	ldr	r2, [pc, #88]	@ (80092ec <xPortStartScheduler+0x13c>)
 8009292:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009296:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009298:	4b14      	ldr	r3, [pc, #80]	@ (80092ec <xPortStartScheduler+0x13c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a13      	ldr	r2, [pc, #76]	@ (80092ec <xPortStartScheduler+0x13c>)
 800929e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80092a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092a4:	f000 f8da 	bl	800945c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092a8:	4b11      	ldr	r3, [pc, #68]	@ (80092f0 <xPortStartScheduler+0x140>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092ae:	f000 f8f9 	bl	80094a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092b2:	4b10      	ldr	r3, [pc, #64]	@ (80092f4 <xPortStartScheduler+0x144>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a0f      	ldr	r2, [pc, #60]	@ (80092f4 <xPortStartScheduler+0x144>)
 80092b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80092bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092be:	f7ff ff63 	bl	8009188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092c2:	f7fe ff2b 	bl	800811c <vTaskSwitchContext>
	prvTaskExitError();
 80092c6:	f7ff ff19 	bl	80090fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	e000ed00 	.word	0xe000ed00
 80092d8:	410fc271 	.word	0x410fc271
 80092dc:	410fc270 	.word	0x410fc270
 80092e0:	e000e400 	.word	0xe000e400
 80092e4:	20001264 	.word	0x20001264
 80092e8:	20001268 	.word	0x20001268
 80092ec:	e000ed20 	.word	0xe000ed20
 80092f0:	20000020 	.word	0x20000020
 80092f4:	e000ef34 	.word	0xe000ef34

080092f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	607b      	str	r3, [r7, #4]
}
 8009310:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009312:	4b10      	ldr	r3, [pc, #64]	@ (8009354 <vPortEnterCritical+0x5c>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3301      	adds	r3, #1
 8009318:	4a0e      	ldr	r2, [pc, #56]	@ (8009354 <vPortEnterCritical+0x5c>)
 800931a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800931c:	4b0d      	ldr	r3, [pc, #52]	@ (8009354 <vPortEnterCritical+0x5c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d110      	bne.n	8009346 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009324:	4b0c      	ldr	r3, [pc, #48]	@ (8009358 <vPortEnterCritical+0x60>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00b      	beq.n	8009346 <vPortEnterCritical+0x4e>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	603b      	str	r3, [r7, #0]
}
 8009340:	bf00      	nop
 8009342:	bf00      	nop
 8009344:	e7fd      	b.n	8009342 <vPortEnterCritical+0x4a>
	}
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	20000020 	.word	0x20000020
 8009358:	e000ed04 	.word	0xe000ed04

0800935c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009362:	4b12      	ldr	r3, [pc, #72]	@ (80093ac <vPortExitCritical+0x50>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10b      	bne.n	8009382 <vPortExitCritical+0x26>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	607b      	str	r3, [r7, #4]
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	e7fd      	b.n	800937e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009382:	4b0a      	ldr	r3, [pc, #40]	@ (80093ac <vPortExitCritical+0x50>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3b01      	subs	r3, #1
 8009388:	4a08      	ldr	r2, [pc, #32]	@ (80093ac <vPortExitCritical+0x50>)
 800938a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800938c:	4b07      	ldr	r3, [pc, #28]	@ (80093ac <vPortExitCritical+0x50>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d105      	bne.n	80093a0 <vPortExitCritical+0x44>
 8009394:	2300      	movs	r3, #0
 8009396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	f383 8811 	msr	BASEPRI, r3
}
 800939e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	20000020 	.word	0x20000020

080093b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093b0:	f3ef 8009 	mrs	r0, PSP
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	4b15      	ldr	r3, [pc, #84]	@ (8009410 <pxCurrentTCBConst>)
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	f01e 0f10 	tst.w	lr, #16
 80093c0:	bf08      	it	eq
 80093c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ca:	6010      	str	r0, [r2, #0]
 80093cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80093d4:	f380 8811 	msr	BASEPRI, r0
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f7fe fe9c 	bl	800811c <vTaskSwitchContext>
 80093e4:	f04f 0000 	mov.w	r0, #0
 80093e8:	f380 8811 	msr	BASEPRI, r0
 80093ec:	bc09      	pop	{r0, r3}
 80093ee:	6819      	ldr	r1, [r3, #0]
 80093f0:	6808      	ldr	r0, [r1, #0]
 80093f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f6:	f01e 0f10 	tst.w	lr, #16
 80093fa:	bf08      	it	eq
 80093fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009400:	f380 8809 	msr	PSP, r0
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	f3af 8000 	nop.w

08009410 <pxCurrentTCBConst>:
 8009410:	20000c38 	.word	0x20000c38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009414:	bf00      	nop
 8009416:	bf00      	nop

08009418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	607b      	str	r3, [r7, #4]
}
 8009430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009432:	f7fe fdb9 	bl	8007fa8 <xTaskIncrementTick>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800943c:	4b06      	ldr	r3, [pc, #24]	@ (8009458 <xPortSysTickHandler+0x40>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	2300      	movs	r3, #0
 8009446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	f383 8811 	msr	BASEPRI, r3
}
 800944e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	e000ed04 	.word	0xe000ed04

0800945c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800945c:	b480      	push	{r7}
 800945e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009460:	4b0b      	ldr	r3, [pc, #44]	@ (8009490 <vPortSetupTimerInterrupt+0x34>)
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009466:	4b0b      	ldr	r3, [pc, #44]	@ (8009494 <vPortSetupTimerInterrupt+0x38>)
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800946c:	4b0a      	ldr	r3, [pc, #40]	@ (8009498 <vPortSetupTimerInterrupt+0x3c>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a0a      	ldr	r2, [pc, #40]	@ (800949c <vPortSetupTimerInterrupt+0x40>)
 8009472:	fba2 2303 	umull	r2, r3, r2, r3
 8009476:	099b      	lsrs	r3, r3, #6
 8009478:	4a09      	ldr	r2, [pc, #36]	@ (80094a0 <vPortSetupTimerInterrupt+0x44>)
 800947a:	3b01      	subs	r3, #1
 800947c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800947e:	4b04      	ldr	r3, [pc, #16]	@ (8009490 <vPortSetupTimerInterrupt+0x34>)
 8009480:	2207      	movs	r2, #7
 8009482:	601a      	str	r2, [r3, #0]
}
 8009484:	bf00      	nop
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	e000e010 	.word	0xe000e010
 8009494:	e000e018 	.word	0xe000e018
 8009498:	20000014 	.word	0x20000014
 800949c:	10624dd3 	.word	0x10624dd3
 80094a0:	e000e014 	.word	0xe000e014

080094a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80094b4 <vPortEnableVFP+0x10>
 80094a8:	6801      	ldr	r1, [r0, #0]
 80094aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80094ae:	6001      	str	r1, [r0, #0]
 80094b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80094b2:	bf00      	nop
 80094b4:	e000ed88 	.word	0xe000ed88

080094b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80094be:	f3ef 8305 	mrs	r3, IPSR
 80094c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2b0f      	cmp	r3, #15
 80094c8:	d915      	bls.n	80094f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80094ca:	4a18      	ldr	r2, [pc, #96]	@ (800952c <vPortValidateInterruptPriority+0x74>)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	4413      	add	r3, r2
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80094d4:	4b16      	ldr	r3, [pc, #88]	@ (8009530 <vPortValidateInterruptPriority+0x78>)
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	7afa      	ldrb	r2, [r7, #11]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d20b      	bcs.n	80094f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	607b      	str	r3, [r7, #4]
}
 80094f0:	bf00      	nop
 80094f2:	bf00      	nop
 80094f4:	e7fd      	b.n	80094f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80094f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009534 <vPortValidateInterruptPriority+0x7c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80094fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009538 <vPortValidateInterruptPriority+0x80>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	429a      	cmp	r2, r3
 8009504:	d90b      	bls.n	800951e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	603b      	str	r3, [r7, #0]
}
 8009518:	bf00      	nop
 800951a:	bf00      	nop
 800951c:	e7fd      	b.n	800951a <vPortValidateInterruptPriority+0x62>
	}
 800951e:	bf00      	nop
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	e000e3f0 	.word	0xe000e3f0
 8009530:	20001264 	.word	0x20001264
 8009534:	e000ed0c 	.word	0xe000ed0c
 8009538:	20001268 	.word	0x20001268

0800953c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08a      	sub	sp, #40	@ 0x28
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009544:	2300      	movs	r3, #0
 8009546:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009548:	f7fe fc72 	bl	8007e30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800954c:	4b5c      	ldr	r3, [pc, #368]	@ (80096c0 <pvPortMalloc+0x184>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009554:	f000 f924 	bl	80097a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009558:	4b5a      	ldr	r3, [pc, #360]	@ (80096c4 <pvPortMalloc+0x188>)
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4013      	ands	r3, r2
 8009560:	2b00      	cmp	r3, #0
 8009562:	f040 8095 	bne.w	8009690 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d01e      	beq.n	80095aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800956c:	2208      	movs	r2, #8
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4413      	add	r3, r2
 8009572:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f003 0307 	and.w	r3, r3, #7
 800957a:	2b00      	cmp	r3, #0
 800957c:	d015      	beq.n	80095aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f023 0307 	bic.w	r3, r3, #7
 8009584:	3308      	adds	r3, #8
 8009586:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f003 0307 	and.w	r3, r3, #7
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00b      	beq.n	80095aa <pvPortMalloc+0x6e>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	617b      	str	r3, [r7, #20]
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop
 80095a8:	e7fd      	b.n	80095a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d06f      	beq.n	8009690 <pvPortMalloc+0x154>
 80095b0:	4b45      	ldr	r3, [pc, #276]	@ (80096c8 <pvPortMalloc+0x18c>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d86a      	bhi.n	8009690 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095ba:	4b44      	ldr	r3, [pc, #272]	@ (80096cc <pvPortMalloc+0x190>)
 80095bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095be:	4b43      	ldr	r3, [pc, #268]	@ (80096cc <pvPortMalloc+0x190>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095c4:	e004      	b.n	80095d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80095c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d903      	bls.n	80095e2 <pvPortMalloc+0xa6>
 80095da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1f1      	bne.n	80095c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095e2:	4b37      	ldr	r3, [pc, #220]	@ (80096c0 <pvPortMalloc+0x184>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d051      	beq.n	8009690 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2208      	movs	r2, #8
 80095f2:	4413      	add	r3, r2
 80095f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	1ad2      	subs	r2, r2, r3
 8009606:	2308      	movs	r3, #8
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	429a      	cmp	r2, r3
 800960c:	d920      	bls.n	8009650 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800960e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4413      	add	r3, r2
 8009614:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	f003 0307 	and.w	r3, r3, #7
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00b      	beq.n	8009638 <pvPortMalloc+0xfc>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	613b      	str	r3, [r7, #16]
}
 8009632:	bf00      	nop
 8009634:	bf00      	nop
 8009636:	e7fd      	b.n	8009634 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	1ad2      	subs	r2, r2, r3
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800964a:	69b8      	ldr	r0, [r7, #24]
 800964c:	f000 f90a 	bl	8009864 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009650:	4b1d      	ldr	r3, [pc, #116]	@ (80096c8 <pvPortMalloc+0x18c>)
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	4a1b      	ldr	r2, [pc, #108]	@ (80096c8 <pvPortMalloc+0x18c>)
 800965c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800965e:	4b1a      	ldr	r3, [pc, #104]	@ (80096c8 <pvPortMalloc+0x18c>)
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	4b1b      	ldr	r3, [pc, #108]	@ (80096d0 <pvPortMalloc+0x194>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d203      	bcs.n	8009672 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800966a:	4b17      	ldr	r3, [pc, #92]	@ (80096c8 <pvPortMalloc+0x18c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a18      	ldr	r2, [pc, #96]	@ (80096d0 <pvPortMalloc+0x194>)
 8009670:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	4b13      	ldr	r3, [pc, #76]	@ (80096c4 <pvPortMalloc+0x188>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	431a      	orrs	r2, r3
 800967c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009686:	4b13      	ldr	r3, [pc, #76]	@ (80096d4 <pvPortMalloc+0x198>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3301      	adds	r3, #1
 800968c:	4a11      	ldr	r2, [pc, #68]	@ (80096d4 <pvPortMalloc+0x198>)
 800968e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009690:	f7fe fbdc 	bl	8007e4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	f003 0307 	and.w	r3, r3, #7
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00b      	beq.n	80096b6 <pvPortMalloc+0x17a>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	60fb      	str	r3, [r7, #12]
}
 80096b0:	bf00      	nop
 80096b2:	bf00      	nop
 80096b4:	e7fd      	b.n	80096b2 <pvPortMalloc+0x176>
	return pvReturn;
 80096b6:	69fb      	ldr	r3, [r7, #28]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3728      	adds	r7, #40	@ 0x28
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20004e74 	.word	0x20004e74
 80096c4:	20004e88 	.word	0x20004e88
 80096c8:	20004e78 	.word	0x20004e78
 80096cc:	20004e6c 	.word	0x20004e6c
 80096d0:	20004e7c 	.word	0x20004e7c
 80096d4:	20004e80 	.word	0x20004e80

080096d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d04f      	beq.n	800978a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096ea:	2308      	movs	r3, #8
 80096ec:	425b      	negs	r3, r3
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	4413      	add	r3, r2
 80096f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	4b25      	ldr	r3, [pc, #148]	@ (8009794 <vPortFree+0xbc>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4013      	ands	r3, r2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10b      	bne.n	800971e <vPortFree+0x46>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	60fb      	str	r3, [r7, #12]
}
 8009718:	bf00      	nop
 800971a:	bf00      	nop
 800971c:	e7fd      	b.n	800971a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00b      	beq.n	800973e <vPortFree+0x66>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	60bb      	str	r3, [r7, #8]
}
 8009738:	bf00      	nop
 800973a:	bf00      	nop
 800973c:	e7fd      	b.n	800973a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	4b14      	ldr	r3, [pc, #80]	@ (8009794 <vPortFree+0xbc>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4013      	ands	r3, r2
 8009748:	2b00      	cmp	r3, #0
 800974a:	d01e      	beq.n	800978a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d11a      	bne.n	800978a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	4b0e      	ldr	r3, [pc, #56]	@ (8009794 <vPortFree+0xbc>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	43db      	mvns	r3, r3
 800975e:	401a      	ands	r2, r3
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009764:	f7fe fb64 	bl	8007e30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	4b0a      	ldr	r3, [pc, #40]	@ (8009798 <vPortFree+0xc0>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4413      	add	r3, r2
 8009772:	4a09      	ldr	r2, [pc, #36]	@ (8009798 <vPortFree+0xc0>)
 8009774:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009776:	6938      	ldr	r0, [r7, #16]
 8009778:	f000 f874 	bl	8009864 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800977c:	4b07      	ldr	r3, [pc, #28]	@ (800979c <vPortFree+0xc4>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3301      	adds	r3, #1
 8009782:	4a06      	ldr	r2, [pc, #24]	@ (800979c <vPortFree+0xc4>)
 8009784:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009786:	f7fe fb61 	bl	8007e4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800978a:	bf00      	nop
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20004e88 	.word	0x20004e88
 8009798:	20004e78 	.word	0x20004e78
 800979c:	20004e84 	.word	0x20004e84

080097a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80097aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097ac:	4b27      	ldr	r3, [pc, #156]	@ (800984c <prvHeapInit+0xac>)
 80097ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f003 0307 	and.w	r3, r3, #7
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00c      	beq.n	80097d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3307      	adds	r3, #7
 80097be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f023 0307 	bic.w	r3, r3, #7
 80097c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	4a1f      	ldr	r2, [pc, #124]	@ (800984c <prvHeapInit+0xac>)
 80097d0:	4413      	add	r3, r2
 80097d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009850 <prvHeapInit+0xb0>)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097de:	4b1c      	ldr	r3, [pc, #112]	@ (8009850 <prvHeapInit+0xb0>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	68ba      	ldr	r2, [r7, #8]
 80097e8:	4413      	add	r3, r2
 80097ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097ec:	2208      	movs	r2, #8
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	1a9b      	subs	r3, r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f023 0307 	bic.w	r3, r3, #7
 80097fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4a15      	ldr	r2, [pc, #84]	@ (8009854 <prvHeapInit+0xb4>)
 8009800:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009802:	4b14      	ldr	r3, [pc, #80]	@ (8009854 <prvHeapInit+0xb4>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2200      	movs	r2, #0
 8009808:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800980a:	4b12      	ldr	r3, [pc, #72]	@ (8009854 <prvHeapInit+0xb4>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2200      	movs	r2, #0
 8009810:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	1ad2      	subs	r2, r2, r3
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009820:	4b0c      	ldr	r3, [pc, #48]	@ (8009854 <prvHeapInit+0xb4>)
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	4a0a      	ldr	r2, [pc, #40]	@ (8009858 <prvHeapInit+0xb8>)
 800982e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	4a09      	ldr	r2, [pc, #36]	@ (800985c <prvHeapInit+0xbc>)
 8009836:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009838:	4b09      	ldr	r3, [pc, #36]	@ (8009860 <prvHeapInit+0xc0>)
 800983a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800983e:	601a      	str	r2, [r3, #0]
}
 8009840:	bf00      	nop
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	2000126c 	.word	0x2000126c
 8009850:	20004e6c 	.word	0x20004e6c
 8009854:	20004e74 	.word	0x20004e74
 8009858:	20004e7c 	.word	0x20004e7c
 800985c:	20004e78 	.word	0x20004e78
 8009860:	20004e88 	.word	0x20004e88

08009864 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800986c:	4b28      	ldr	r3, [pc, #160]	@ (8009910 <prvInsertBlockIntoFreeList+0xac>)
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	e002      	b.n	8009878 <prvInsertBlockIntoFreeList+0x14>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	60fb      	str	r3, [r7, #12]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	429a      	cmp	r2, r3
 8009880:	d8f7      	bhi.n	8009872 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	4413      	add	r3, r2
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	429a      	cmp	r2, r3
 8009892:	d108      	bne.n	80098a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	441a      	add	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	441a      	add	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d118      	bne.n	80098ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	4b15      	ldr	r3, [pc, #84]	@ (8009914 <prvInsertBlockIntoFreeList+0xb0>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d00d      	beq.n	80098e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	441a      	add	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	e008      	b.n	80098f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009914 <prvInsertBlockIntoFreeList+0xb0>)
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	e003      	b.n	80098f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d002      	beq.n	8009902 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009902:	bf00      	nop
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	20004e6c 	.word	0x20004e6c
 8009914:	20004e74 	.word	0x20004e74

08009918 <atof>:
 8009918:	2100      	movs	r1, #0
 800991a:	f000 bee1 	b.w	800a6e0 <strtod>

0800991e <atoi>:
 800991e:	220a      	movs	r2, #10
 8009920:	2100      	movs	r1, #0
 8009922:	f000 bf63 	b.w	800a7ec <strtol>
	...

08009928 <calloc>:
 8009928:	4b02      	ldr	r3, [pc, #8]	@ (8009934 <calloc+0xc>)
 800992a:	460a      	mov	r2, r1
 800992c:	4601      	mov	r1, r0
 800992e:	6818      	ldr	r0, [r3, #0]
 8009930:	f000 b802 	b.w	8009938 <_calloc_r>
 8009934:	2000019c 	.word	0x2000019c

08009938 <_calloc_r>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	fba1 5402 	umull	r5, r4, r1, r2
 800993e:	b934      	cbnz	r4, 800994e <_calloc_r+0x16>
 8009940:	4629      	mov	r1, r5
 8009942:	f000 f83f 	bl	80099c4 <_malloc_r>
 8009946:	4606      	mov	r6, r0
 8009948:	b928      	cbnz	r0, 8009956 <_calloc_r+0x1e>
 800994a:	4630      	mov	r0, r6
 800994c:	bd70      	pop	{r4, r5, r6, pc}
 800994e:	220c      	movs	r2, #12
 8009950:	6002      	str	r2, [r0, #0]
 8009952:	2600      	movs	r6, #0
 8009954:	e7f9      	b.n	800994a <_calloc_r+0x12>
 8009956:	462a      	mov	r2, r5
 8009958:	4621      	mov	r1, r4
 800995a:	f001 f88c 	bl	800aa76 <memset>
 800995e:	e7f4      	b.n	800994a <_calloc_r+0x12>

08009960 <malloc>:
 8009960:	4b02      	ldr	r3, [pc, #8]	@ (800996c <malloc+0xc>)
 8009962:	4601      	mov	r1, r0
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	f000 b82d 	b.w	80099c4 <_malloc_r>
 800996a:	bf00      	nop
 800996c:	2000019c 	.word	0x2000019c

08009970 <free>:
 8009970:	4b02      	ldr	r3, [pc, #8]	@ (800997c <free+0xc>)
 8009972:	4601      	mov	r1, r0
 8009974:	6818      	ldr	r0, [r3, #0]
 8009976:	f001 b9a7 	b.w	800acc8 <_free_r>
 800997a:	bf00      	nop
 800997c:	2000019c 	.word	0x2000019c

08009980 <sbrk_aligned>:
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	4e0f      	ldr	r6, [pc, #60]	@ (80099c0 <sbrk_aligned+0x40>)
 8009984:	460c      	mov	r4, r1
 8009986:	6831      	ldr	r1, [r6, #0]
 8009988:	4605      	mov	r5, r0
 800998a:	b911      	cbnz	r1, 8009992 <sbrk_aligned+0x12>
 800998c:	f001 f936 	bl	800abfc <_sbrk_r>
 8009990:	6030      	str	r0, [r6, #0]
 8009992:	4621      	mov	r1, r4
 8009994:	4628      	mov	r0, r5
 8009996:	f001 f931 	bl	800abfc <_sbrk_r>
 800999a:	1c43      	adds	r3, r0, #1
 800999c:	d103      	bne.n	80099a6 <sbrk_aligned+0x26>
 800999e:	f04f 34ff 	mov.w	r4, #4294967295
 80099a2:	4620      	mov	r0, r4
 80099a4:	bd70      	pop	{r4, r5, r6, pc}
 80099a6:	1cc4      	adds	r4, r0, #3
 80099a8:	f024 0403 	bic.w	r4, r4, #3
 80099ac:	42a0      	cmp	r0, r4
 80099ae:	d0f8      	beq.n	80099a2 <sbrk_aligned+0x22>
 80099b0:	1a21      	subs	r1, r4, r0
 80099b2:	4628      	mov	r0, r5
 80099b4:	f001 f922 	bl	800abfc <_sbrk_r>
 80099b8:	3001      	adds	r0, #1
 80099ba:	d1f2      	bne.n	80099a2 <sbrk_aligned+0x22>
 80099bc:	e7ef      	b.n	800999e <sbrk_aligned+0x1e>
 80099be:	bf00      	nop
 80099c0:	20004e8c 	.word	0x20004e8c

080099c4 <_malloc_r>:
 80099c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c8:	1ccd      	adds	r5, r1, #3
 80099ca:	f025 0503 	bic.w	r5, r5, #3
 80099ce:	3508      	adds	r5, #8
 80099d0:	2d0c      	cmp	r5, #12
 80099d2:	bf38      	it	cc
 80099d4:	250c      	movcc	r5, #12
 80099d6:	2d00      	cmp	r5, #0
 80099d8:	4606      	mov	r6, r0
 80099da:	db01      	blt.n	80099e0 <_malloc_r+0x1c>
 80099dc:	42a9      	cmp	r1, r5
 80099de:	d904      	bls.n	80099ea <_malloc_r+0x26>
 80099e0:	230c      	movs	r3, #12
 80099e2:	6033      	str	r3, [r6, #0]
 80099e4:	2000      	movs	r0, #0
 80099e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ac0 <_malloc_r+0xfc>
 80099ee:	f000 f869 	bl	8009ac4 <__malloc_lock>
 80099f2:	f8d8 3000 	ldr.w	r3, [r8]
 80099f6:	461c      	mov	r4, r3
 80099f8:	bb44      	cbnz	r4, 8009a4c <_malloc_r+0x88>
 80099fa:	4629      	mov	r1, r5
 80099fc:	4630      	mov	r0, r6
 80099fe:	f7ff ffbf 	bl	8009980 <sbrk_aligned>
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	4604      	mov	r4, r0
 8009a06:	d158      	bne.n	8009aba <_malloc_r+0xf6>
 8009a08:	f8d8 4000 	ldr.w	r4, [r8]
 8009a0c:	4627      	mov	r7, r4
 8009a0e:	2f00      	cmp	r7, #0
 8009a10:	d143      	bne.n	8009a9a <_malloc_r+0xd6>
 8009a12:	2c00      	cmp	r4, #0
 8009a14:	d04b      	beq.n	8009aae <_malloc_r+0xea>
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	4639      	mov	r1, r7
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	eb04 0903 	add.w	r9, r4, r3
 8009a20:	f001 f8ec 	bl	800abfc <_sbrk_r>
 8009a24:	4581      	cmp	r9, r0
 8009a26:	d142      	bne.n	8009aae <_malloc_r+0xea>
 8009a28:	6821      	ldr	r1, [r4, #0]
 8009a2a:	1a6d      	subs	r5, r5, r1
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f7ff ffa6 	bl	8009980 <sbrk_aligned>
 8009a34:	3001      	adds	r0, #1
 8009a36:	d03a      	beq.n	8009aae <_malloc_r+0xea>
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	442b      	add	r3, r5
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	bb62      	cbnz	r2, 8009aa0 <_malloc_r+0xdc>
 8009a46:	f8c8 7000 	str.w	r7, [r8]
 8009a4a:	e00f      	b.n	8009a6c <_malloc_r+0xa8>
 8009a4c:	6822      	ldr	r2, [r4, #0]
 8009a4e:	1b52      	subs	r2, r2, r5
 8009a50:	d420      	bmi.n	8009a94 <_malloc_r+0xd0>
 8009a52:	2a0b      	cmp	r2, #11
 8009a54:	d917      	bls.n	8009a86 <_malloc_r+0xc2>
 8009a56:	1961      	adds	r1, r4, r5
 8009a58:	42a3      	cmp	r3, r4
 8009a5a:	6025      	str	r5, [r4, #0]
 8009a5c:	bf18      	it	ne
 8009a5e:	6059      	strne	r1, [r3, #4]
 8009a60:	6863      	ldr	r3, [r4, #4]
 8009a62:	bf08      	it	eq
 8009a64:	f8c8 1000 	streq.w	r1, [r8]
 8009a68:	5162      	str	r2, [r4, r5]
 8009a6a:	604b      	str	r3, [r1, #4]
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f000 f82f 	bl	8009ad0 <__malloc_unlock>
 8009a72:	f104 000b 	add.w	r0, r4, #11
 8009a76:	1d23      	adds	r3, r4, #4
 8009a78:	f020 0007 	bic.w	r0, r0, #7
 8009a7c:	1ac2      	subs	r2, r0, r3
 8009a7e:	bf1c      	itt	ne
 8009a80:	1a1b      	subne	r3, r3, r0
 8009a82:	50a3      	strne	r3, [r4, r2]
 8009a84:	e7af      	b.n	80099e6 <_malloc_r+0x22>
 8009a86:	6862      	ldr	r2, [r4, #4]
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	bf0c      	ite	eq
 8009a8c:	f8c8 2000 	streq.w	r2, [r8]
 8009a90:	605a      	strne	r2, [r3, #4]
 8009a92:	e7eb      	b.n	8009a6c <_malloc_r+0xa8>
 8009a94:	4623      	mov	r3, r4
 8009a96:	6864      	ldr	r4, [r4, #4]
 8009a98:	e7ae      	b.n	80099f8 <_malloc_r+0x34>
 8009a9a:	463c      	mov	r4, r7
 8009a9c:	687f      	ldr	r7, [r7, #4]
 8009a9e:	e7b6      	b.n	8009a0e <_malloc_r+0x4a>
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	42a3      	cmp	r3, r4
 8009aa6:	d1fb      	bne.n	8009aa0 <_malloc_r+0xdc>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	6053      	str	r3, [r2, #4]
 8009aac:	e7de      	b.n	8009a6c <_malloc_r+0xa8>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	6033      	str	r3, [r6, #0]
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f000 f80c 	bl	8009ad0 <__malloc_unlock>
 8009ab8:	e794      	b.n	80099e4 <_malloc_r+0x20>
 8009aba:	6005      	str	r5, [r0, #0]
 8009abc:	e7d6      	b.n	8009a6c <_malloc_r+0xa8>
 8009abe:	bf00      	nop
 8009ac0:	20004e90 	.word	0x20004e90

08009ac4 <__malloc_lock>:
 8009ac4:	4801      	ldr	r0, [pc, #4]	@ (8009acc <__malloc_lock+0x8>)
 8009ac6:	f001 b8e6 	b.w	800ac96 <__retarget_lock_acquire_recursive>
 8009aca:	bf00      	nop
 8009acc:	20004fd4 	.word	0x20004fd4

08009ad0 <__malloc_unlock>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	@ (8009ad8 <__malloc_unlock+0x8>)
 8009ad2:	f001 b8e1 	b.w	800ac98 <__retarget_lock_release_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	20004fd4 	.word	0x20004fd4

08009adc <sulp>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	4604      	mov	r4, r0
 8009ae0:	460d      	mov	r5, r1
 8009ae2:	ec45 4b10 	vmov	d0, r4, r5
 8009ae6:	4616      	mov	r6, r2
 8009ae8:	f001 fff0 	bl	800bacc <__ulp>
 8009aec:	ec51 0b10 	vmov	r0, r1, d0
 8009af0:	b17e      	cbz	r6, 8009b12 <sulp+0x36>
 8009af2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009af6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	dd09      	ble.n	8009b12 <sulp+0x36>
 8009afe:	051b      	lsls	r3, r3, #20
 8009b00:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009b04:	2400      	movs	r4, #0
 8009b06:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	462b      	mov	r3, r5
 8009b0e:	f7f6 fd73 	bl	80005f8 <__aeabi_dmul>
 8009b12:	ec41 0b10 	vmov	d0, r0, r1
 8009b16:	bd70      	pop	{r4, r5, r6, pc}

08009b18 <_strtod_l>:
 8009b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1c:	b09f      	sub	sp, #124	@ 0x7c
 8009b1e:	460c      	mov	r4, r1
 8009b20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009b22:	2200      	movs	r2, #0
 8009b24:	921a      	str	r2, [sp, #104]	@ 0x68
 8009b26:	9005      	str	r0, [sp, #20]
 8009b28:	f04f 0a00 	mov.w	sl, #0
 8009b2c:	f04f 0b00 	mov.w	fp, #0
 8009b30:	460a      	mov	r2, r1
 8009b32:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b34:	7811      	ldrb	r1, [r2, #0]
 8009b36:	292b      	cmp	r1, #43	@ 0x2b
 8009b38:	d04a      	beq.n	8009bd0 <_strtod_l+0xb8>
 8009b3a:	d838      	bhi.n	8009bae <_strtod_l+0x96>
 8009b3c:	290d      	cmp	r1, #13
 8009b3e:	d832      	bhi.n	8009ba6 <_strtod_l+0x8e>
 8009b40:	2908      	cmp	r1, #8
 8009b42:	d832      	bhi.n	8009baa <_strtod_l+0x92>
 8009b44:	2900      	cmp	r1, #0
 8009b46:	d03b      	beq.n	8009bc0 <_strtod_l+0xa8>
 8009b48:	2200      	movs	r2, #0
 8009b4a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009b4e:	782a      	ldrb	r2, [r5, #0]
 8009b50:	2a30      	cmp	r2, #48	@ 0x30
 8009b52:	f040 80b2 	bne.w	8009cba <_strtod_l+0x1a2>
 8009b56:	786a      	ldrb	r2, [r5, #1]
 8009b58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b5c:	2a58      	cmp	r2, #88	@ 0x58
 8009b5e:	d16e      	bne.n	8009c3e <_strtod_l+0x126>
 8009b60:	9302      	str	r3, [sp, #8]
 8009b62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	ab1a      	add	r3, sp, #104	@ 0x68
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	4a8f      	ldr	r2, [pc, #572]	@ (8009da8 <_strtod_l+0x290>)
 8009b6c:	9805      	ldr	r0, [sp, #20]
 8009b6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009b70:	a919      	add	r1, sp, #100	@ 0x64
 8009b72:	f001 f95b 	bl	800ae2c <__gethex>
 8009b76:	f010 060f 	ands.w	r6, r0, #15
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	d005      	beq.n	8009b8a <_strtod_l+0x72>
 8009b7e:	2e06      	cmp	r6, #6
 8009b80:	d128      	bne.n	8009bd4 <_strtod_l+0xbc>
 8009b82:	3501      	adds	r5, #1
 8009b84:	2300      	movs	r3, #0
 8009b86:	9519      	str	r5, [sp, #100]	@ 0x64
 8009b88:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f040 858e 	bne.w	800a6ae <_strtod_l+0xb96>
 8009b92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b94:	b1cb      	cbz	r3, 8009bca <_strtod_l+0xb2>
 8009b96:	4652      	mov	r2, sl
 8009b98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009b9c:	ec43 2b10 	vmov	d0, r2, r3
 8009ba0:	b01f      	add	sp, #124	@ 0x7c
 8009ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba6:	2920      	cmp	r1, #32
 8009ba8:	d1ce      	bne.n	8009b48 <_strtod_l+0x30>
 8009baa:	3201      	adds	r2, #1
 8009bac:	e7c1      	b.n	8009b32 <_strtod_l+0x1a>
 8009bae:	292d      	cmp	r1, #45	@ 0x2d
 8009bb0:	d1ca      	bne.n	8009b48 <_strtod_l+0x30>
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	910e      	str	r1, [sp, #56]	@ 0x38
 8009bb6:	1c51      	adds	r1, r2, #1
 8009bb8:	9119      	str	r1, [sp, #100]	@ 0x64
 8009bba:	7852      	ldrb	r2, [r2, #1]
 8009bbc:	2a00      	cmp	r2, #0
 8009bbe:	d1c5      	bne.n	8009b4c <_strtod_l+0x34>
 8009bc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009bc2:	9419      	str	r4, [sp, #100]	@ 0x64
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f040 8570 	bne.w	800a6aa <_strtod_l+0xb92>
 8009bca:	4652      	mov	r2, sl
 8009bcc:	465b      	mov	r3, fp
 8009bce:	e7e5      	b.n	8009b9c <_strtod_l+0x84>
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	e7ef      	b.n	8009bb4 <_strtod_l+0x9c>
 8009bd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009bd6:	b13a      	cbz	r2, 8009be8 <_strtod_l+0xd0>
 8009bd8:	2135      	movs	r1, #53	@ 0x35
 8009bda:	a81c      	add	r0, sp, #112	@ 0x70
 8009bdc:	f002 f870 	bl	800bcc0 <__copybits>
 8009be0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009be2:	9805      	ldr	r0, [sp, #20]
 8009be4:	f001 fc46 	bl	800b474 <_Bfree>
 8009be8:	3e01      	subs	r6, #1
 8009bea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009bec:	2e04      	cmp	r6, #4
 8009bee:	d806      	bhi.n	8009bfe <_strtod_l+0xe6>
 8009bf0:	e8df f006 	tbb	[pc, r6]
 8009bf4:	201d0314 	.word	0x201d0314
 8009bf8:	14          	.byte	0x14
 8009bf9:	00          	.byte	0x00
 8009bfa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009bfe:	05e1      	lsls	r1, r4, #23
 8009c00:	bf48      	it	mi
 8009c02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009c06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c0a:	0d1b      	lsrs	r3, r3, #20
 8009c0c:	051b      	lsls	r3, r3, #20
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1bb      	bne.n	8009b8a <_strtod_l+0x72>
 8009c12:	f001 f815 	bl	800ac40 <__errno>
 8009c16:	2322      	movs	r3, #34	@ 0x22
 8009c18:	6003      	str	r3, [r0, #0]
 8009c1a:	e7b6      	b.n	8009b8a <_strtod_l+0x72>
 8009c1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009c20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009c24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009c28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009c2c:	e7e7      	b.n	8009bfe <_strtod_l+0xe6>
 8009c2e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009db0 <_strtod_l+0x298>
 8009c32:	e7e4      	b.n	8009bfe <_strtod_l+0xe6>
 8009c34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009c38:	f04f 3aff 	mov.w	sl, #4294967295
 8009c3c:	e7df      	b.n	8009bfe <_strtod_l+0xe6>
 8009c3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c44:	785b      	ldrb	r3, [r3, #1]
 8009c46:	2b30      	cmp	r3, #48	@ 0x30
 8009c48:	d0f9      	beq.n	8009c3e <_strtod_l+0x126>
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d09d      	beq.n	8009b8a <_strtod_l+0x72>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	2700      	movs	r7, #0
 8009c52:	9308      	str	r3, [sp, #32]
 8009c54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c56:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c58:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009c5a:	46b9      	mov	r9, r7
 8009c5c:	220a      	movs	r2, #10
 8009c5e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009c60:	7805      	ldrb	r5, [r0, #0]
 8009c62:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009c66:	b2d9      	uxtb	r1, r3
 8009c68:	2909      	cmp	r1, #9
 8009c6a:	d928      	bls.n	8009cbe <_strtod_l+0x1a6>
 8009c6c:	494f      	ldr	r1, [pc, #316]	@ (8009dac <_strtod_l+0x294>)
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f000 ff29 	bl	800aac6 <strncmp>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d032      	beq.n	8009cde <_strtod_l+0x1c6>
 8009c78:	2000      	movs	r0, #0
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c7e:	464d      	mov	r5, r9
 8009c80:	4603      	mov	r3, r0
 8009c82:	2a65      	cmp	r2, #101	@ 0x65
 8009c84:	d001      	beq.n	8009c8a <_strtod_l+0x172>
 8009c86:	2a45      	cmp	r2, #69	@ 0x45
 8009c88:	d114      	bne.n	8009cb4 <_strtod_l+0x19c>
 8009c8a:	b91d      	cbnz	r5, 8009c94 <_strtod_l+0x17c>
 8009c8c:	9a08      	ldr	r2, [sp, #32]
 8009c8e:	4302      	orrs	r2, r0
 8009c90:	d096      	beq.n	8009bc0 <_strtod_l+0xa8>
 8009c92:	2500      	movs	r5, #0
 8009c94:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009c96:	1c62      	adds	r2, r4, #1
 8009c98:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c9a:	7862      	ldrb	r2, [r4, #1]
 8009c9c:	2a2b      	cmp	r2, #43	@ 0x2b
 8009c9e:	d07a      	beq.n	8009d96 <_strtod_l+0x27e>
 8009ca0:	2a2d      	cmp	r2, #45	@ 0x2d
 8009ca2:	d07e      	beq.n	8009da2 <_strtod_l+0x28a>
 8009ca4:	f04f 0c00 	mov.w	ip, #0
 8009ca8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009cac:	2909      	cmp	r1, #9
 8009cae:	f240 8085 	bls.w	8009dbc <_strtod_l+0x2a4>
 8009cb2:	9419      	str	r4, [sp, #100]	@ 0x64
 8009cb4:	f04f 0800 	mov.w	r8, #0
 8009cb8:	e0a5      	b.n	8009e06 <_strtod_l+0x2ee>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	e7c8      	b.n	8009c50 <_strtod_l+0x138>
 8009cbe:	f1b9 0f08 	cmp.w	r9, #8
 8009cc2:	bfd8      	it	le
 8009cc4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009cc6:	f100 0001 	add.w	r0, r0, #1
 8009cca:	bfda      	itte	le
 8009ccc:	fb02 3301 	mlale	r3, r2, r1, r3
 8009cd0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009cd2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009cd6:	f109 0901 	add.w	r9, r9, #1
 8009cda:	9019      	str	r0, [sp, #100]	@ 0x64
 8009cdc:	e7bf      	b.n	8009c5e <_strtod_l+0x146>
 8009cde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ce0:	1c5a      	adds	r2, r3, #1
 8009ce2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ce4:	785a      	ldrb	r2, [r3, #1]
 8009ce6:	f1b9 0f00 	cmp.w	r9, #0
 8009cea:	d03b      	beq.n	8009d64 <_strtod_l+0x24c>
 8009cec:	900a      	str	r0, [sp, #40]	@ 0x28
 8009cee:	464d      	mov	r5, r9
 8009cf0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009cf4:	2b09      	cmp	r3, #9
 8009cf6:	d912      	bls.n	8009d1e <_strtod_l+0x206>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e7c2      	b.n	8009c82 <_strtod_l+0x16a>
 8009cfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d02:	785a      	ldrb	r2, [r3, #1]
 8009d04:	3001      	adds	r0, #1
 8009d06:	2a30      	cmp	r2, #48	@ 0x30
 8009d08:	d0f8      	beq.n	8009cfc <_strtod_l+0x1e4>
 8009d0a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009d0e:	2b08      	cmp	r3, #8
 8009d10:	f200 84d2 	bhi.w	800a6b8 <_strtod_l+0xba0>
 8009d14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d16:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d18:	2000      	movs	r0, #0
 8009d1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	3a30      	subs	r2, #48	@ 0x30
 8009d20:	f100 0301 	add.w	r3, r0, #1
 8009d24:	d018      	beq.n	8009d58 <_strtod_l+0x240>
 8009d26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d28:	4419      	add	r1, r3
 8009d2a:	910a      	str	r1, [sp, #40]	@ 0x28
 8009d2c:	462e      	mov	r6, r5
 8009d2e:	f04f 0e0a 	mov.w	lr, #10
 8009d32:	1c71      	adds	r1, r6, #1
 8009d34:	eba1 0c05 	sub.w	ip, r1, r5
 8009d38:	4563      	cmp	r3, ip
 8009d3a:	dc15      	bgt.n	8009d68 <_strtod_l+0x250>
 8009d3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009d40:	182b      	adds	r3, r5, r0
 8009d42:	2b08      	cmp	r3, #8
 8009d44:	f105 0501 	add.w	r5, r5, #1
 8009d48:	4405      	add	r5, r0
 8009d4a:	dc1a      	bgt.n	8009d82 <_strtod_l+0x26a>
 8009d4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d4e:	230a      	movs	r3, #10
 8009d50:	fb03 2301 	mla	r3, r3, r1, r2
 8009d54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d56:	2300      	movs	r3, #0
 8009d58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d5a:	1c51      	adds	r1, r2, #1
 8009d5c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d5e:	7852      	ldrb	r2, [r2, #1]
 8009d60:	4618      	mov	r0, r3
 8009d62:	e7c5      	b.n	8009cf0 <_strtod_l+0x1d8>
 8009d64:	4648      	mov	r0, r9
 8009d66:	e7ce      	b.n	8009d06 <_strtod_l+0x1ee>
 8009d68:	2e08      	cmp	r6, #8
 8009d6a:	dc05      	bgt.n	8009d78 <_strtod_l+0x260>
 8009d6c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009d6e:	fb0e f606 	mul.w	r6, lr, r6
 8009d72:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009d74:	460e      	mov	r6, r1
 8009d76:	e7dc      	b.n	8009d32 <_strtod_l+0x21a>
 8009d78:	2910      	cmp	r1, #16
 8009d7a:	bfd8      	it	le
 8009d7c:	fb0e f707 	mulle.w	r7, lr, r7
 8009d80:	e7f8      	b.n	8009d74 <_strtod_l+0x25c>
 8009d82:	2b0f      	cmp	r3, #15
 8009d84:	bfdc      	itt	le
 8009d86:	230a      	movle	r3, #10
 8009d88:	fb03 2707 	mlale	r7, r3, r7, r2
 8009d8c:	e7e3      	b.n	8009d56 <_strtod_l+0x23e>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d92:	2301      	movs	r3, #1
 8009d94:	e77a      	b.n	8009c8c <_strtod_l+0x174>
 8009d96:	f04f 0c00 	mov.w	ip, #0
 8009d9a:	1ca2      	adds	r2, r4, #2
 8009d9c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d9e:	78a2      	ldrb	r2, [r4, #2]
 8009da0:	e782      	b.n	8009ca8 <_strtod_l+0x190>
 8009da2:	f04f 0c01 	mov.w	ip, #1
 8009da6:	e7f8      	b.n	8009d9a <_strtod_l+0x282>
 8009da8:	0800d168 	.word	0x0800d168
 8009dac:	0800cfec 	.word	0x0800cfec
 8009db0:	7ff00000 	.word	0x7ff00000
 8009db4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009db6:	1c51      	adds	r1, r2, #1
 8009db8:	9119      	str	r1, [sp, #100]	@ 0x64
 8009dba:	7852      	ldrb	r2, [r2, #1]
 8009dbc:	2a30      	cmp	r2, #48	@ 0x30
 8009dbe:	d0f9      	beq.n	8009db4 <_strtod_l+0x29c>
 8009dc0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009dc4:	2908      	cmp	r1, #8
 8009dc6:	f63f af75 	bhi.w	8009cb4 <_strtod_l+0x19c>
 8009dca:	3a30      	subs	r2, #48	@ 0x30
 8009dcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009dd0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009dd2:	f04f 080a 	mov.w	r8, #10
 8009dd6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009dd8:	1c56      	adds	r6, r2, #1
 8009dda:	9619      	str	r6, [sp, #100]	@ 0x64
 8009ddc:	7852      	ldrb	r2, [r2, #1]
 8009dde:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009de2:	f1be 0f09 	cmp.w	lr, #9
 8009de6:	d939      	bls.n	8009e5c <_strtod_l+0x344>
 8009de8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009dea:	1a76      	subs	r6, r6, r1
 8009dec:	2e08      	cmp	r6, #8
 8009dee:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009df2:	dc03      	bgt.n	8009dfc <_strtod_l+0x2e4>
 8009df4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009df6:	4588      	cmp	r8, r1
 8009df8:	bfa8      	it	ge
 8009dfa:	4688      	movge	r8, r1
 8009dfc:	f1bc 0f00 	cmp.w	ip, #0
 8009e00:	d001      	beq.n	8009e06 <_strtod_l+0x2ee>
 8009e02:	f1c8 0800 	rsb	r8, r8, #0
 8009e06:	2d00      	cmp	r5, #0
 8009e08:	d14e      	bne.n	8009ea8 <_strtod_l+0x390>
 8009e0a:	9908      	ldr	r1, [sp, #32]
 8009e0c:	4308      	orrs	r0, r1
 8009e0e:	f47f aebc 	bne.w	8009b8a <_strtod_l+0x72>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f47f aed4 	bne.w	8009bc0 <_strtod_l+0xa8>
 8009e18:	2a69      	cmp	r2, #105	@ 0x69
 8009e1a:	d028      	beq.n	8009e6e <_strtod_l+0x356>
 8009e1c:	dc25      	bgt.n	8009e6a <_strtod_l+0x352>
 8009e1e:	2a49      	cmp	r2, #73	@ 0x49
 8009e20:	d025      	beq.n	8009e6e <_strtod_l+0x356>
 8009e22:	2a4e      	cmp	r2, #78	@ 0x4e
 8009e24:	f47f aecc 	bne.w	8009bc0 <_strtod_l+0xa8>
 8009e28:	499a      	ldr	r1, [pc, #616]	@ (800a094 <_strtod_l+0x57c>)
 8009e2a:	a819      	add	r0, sp, #100	@ 0x64
 8009e2c:	f001 fa20 	bl	800b270 <__match>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	f43f aec5 	beq.w	8009bc0 <_strtod_l+0xa8>
 8009e36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b28      	cmp	r3, #40	@ 0x28
 8009e3c:	d12e      	bne.n	8009e9c <_strtod_l+0x384>
 8009e3e:	4996      	ldr	r1, [pc, #600]	@ (800a098 <_strtod_l+0x580>)
 8009e40:	aa1c      	add	r2, sp, #112	@ 0x70
 8009e42:	a819      	add	r0, sp, #100	@ 0x64
 8009e44:	f001 fa28 	bl	800b298 <__hexnan>
 8009e48:	2805      	cmp	r0, #5
 8009e4a:	d127      	bne.n	8009e9c <_strtod_l+0x384>
 8009e4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e4e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009e52:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009e56:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009e5a:	e696      	b.n	8009b8a <_strtod_l+0x72>
 8009e5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e5e:	fb08 2101 	mla	r1, r8, r1, r2
 8009e62:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009e66:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e68:	e7b5      	b.n	8009dd6 <_strtod_l+0x2be>
 8009e6a:	2a6e      	cmp	r2, #110	@ 0x6e
 8009e6c:	e7da      	b.n	8009e24 <_strtod_l+0x30c>
 8009e6e:	498b      	ldr	r1, [pc, #556]	@ (800a09c <_strtod_l+0x584>)
 8009e70:	a819      	add	r0, sp, #100	@ 0x64
 8009e72:	f001 f9fd 	bl	800b270 <__match>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	f43f aea2 	beq.w	8009bc0 <_strtod_l+0xa8>
 8009e7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e7e:	4988      	ldr	r1, [pc, #544]	@ (800a0a0 <_strtod_l+0x588>)
 8009e80:	3b01      	subs	r3, #1
 8009e82:	a819      	add	r0, sp, #100	@ 0x64
 8009e84:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e86:	f001 f9f3 	bl	800b270 <__match>
 8009e8a:	b910      	cbnz	r0, 8009e92 <_strtod_l+0x37a>
 8009e8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e8e:	3301      	adds	r3, #1
 8009e90:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e92:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a0b0 <_strtod_l+0x598>
 8009e96:	f04f 0a00 	mov.w	sl, #0
 8009e9a:	e676      	b.n	8009b8a <_strtod_l+0x72>
 8009e9c:	4881      	ldr	r0, [pc, #516]	@ (800a0a4 <_strtod_l+0x58c>)
 8009e9e:	f000 ff0b 	bl	800acb8 <nan>
 8009ea2:	ec5b ab10 	vmov	sl, fp, d0
 8009ea6:	e670      	b.n	8009b8a <_strtod_l+0x72>
 8009ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eaa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009eac:	eba8 0303 	sub.w	r3, r8, r3
 8009eb0:	f1b9 0f00 	cmp.w	r9, #0
 8009eb4:	bf08      	it	eq
 8009eb6:	46a9      	moveq	r9, r5
 8009eb8:	2d10      	cmp	r5, #16
 8009eba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ebc:	462c      	mov	r4, r5
 8009ebe:	bfa8      	it	ge
 8009ec0:	2410      	movge	r4, #16
 8009ec2:	f7f6 fb1f 	bl	8000504 <__aeabi_ui2d>
 8009ec6:	2d09      	cmp	r5, #9
 8009ec8:	4682      	mov	sl, r0
 8009eca:	468b      	mov	fp, r1
 8009ecc:	dc13      	bgt.n	8009ef6 <_strtod_l+0x3de>
 8009ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f43f ae5a 	beq.w	8009b8a <_strtod_l+0x72>
 8009ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ed8:	dd78      	ble.n	8009fcc <_strtod_l+0x4b4>
 8009eda:	2b16      	cmp	r3, #22
 8009edc:	dc5f      	bgt.n	8009f9e <_strtod_l+0x486>
 8009ede:	4972      	ldr	r1, [pc, #456]	@ (800a0a8 <_strtod_l+0x590>)
 8009ee0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ee8:	4652      	mov	r2, sl
 8009eea:	465b      	mov	r3, fp
 8009eec:	f7f6 fb84 	bl	80005f8 <__aeabi_dmul>
 8009ef0:	4682      	mov	sl, r0
 8009ef2:	468b      	mov	fp, r1
 8009ef4:	e649      	b.n	8009b8a <_strtod_l+0x72>
 8009ef6:	4b6c      	ldr	r3, [pc, #432]	@ (800a0a8 <_strtod_l+0x590>)
 8009ef8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009efc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009f00:	f7f6 fb7a 	bl	80005f8 <__aeabi_dmul>
 8009f04:	4682      	mov	sl, r0
 8009f06:	4638      	mov	r0, r7
 8009f08:	468b      	mov	fp, r1
 8009f0a:	f7f6 fafb 	bl	8000504 <__aeabi_ui2d>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	4650      	mov	r0, sl
 8009f14:	4659      	mov	r1, fp
 8009f16:	f7f6 f9b9 	bl	800028c <__adddf3>
 8009f1a:	2d0f      	cmp	r5, #15
 8009f1c:	4682      	mov	sl, r0
 8009f1e:	468b      	mov	fp, r1
 8009f20:	ddd5      	ble.n	8009ece <_strtod_l+0x3b6>
 8009f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f24:	1b2c      	subs	r4, r5, r4
 8009f26:	441c      	add	r4, r3
 8009f28:	2c00      	cmp	r4, #0
 8009f2a:	f340 8093 	ble.w	800a054 <_strtod_l+0x53c>
 8009f2e:	f014 030f 	ands.w	r3, r4, #15
 8009f32:	d00a      	beq.n	8009f4a <_strtod_l+0x432>
 8009f34:	495c      	ldr	r1, [pc, #368]	@ (800a0a8 <_strtod_l+0x590>)
 8009f36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f3a:	4652      	mov	r2, sl
 8009f3c:	465b      	mov	r3, fp
 8009f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f42:	f7f6 fb59 	bl	80005f8 <__aeabi_dmul>
 8009f46:	4682      	mov	sl, r0
 8009f48:	468b      	mov	fp, r1
 8009f4a:	f034 040f 	bics.w	r4, r4, #15
 8009f4e:	d073      	beq.n	800a038 <_strtod_l+0x520>
 8009f50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009f54:	dd49      	ble.n	8009fea <_strtod_l+0x4d2>
 8009f56:	2400      	movs	r4, #0
 8009f58:	46a0      	mov	r8, r4
 8009f5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f5c:	46a1      	mov	r9, r4
 8009f5e:	9a05      	ldr	r2, [sp, #20]
 8009f60:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a0b0 <_strtod_l+0x598>
 8009f64:	2322      	movs	r3, #34	@ 0x22
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	f04f 0a00 	mov.w	sl, #0
 8009f6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f43f ae0b 	beq.w	8009b8a <_strtod_l+0x72>
 8009f74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f76:	9805      	ldr	r0, [sp, #20]
 8009f78:	f001 fa7c 	bl	800b474 <_Bfree>
 8009f7c:	9805      	ldr	r0, [sp, #20]
 8009f7e:	4649      	mov	r1, r9
 8009f80:	f001 fa78 	bl	800b474 <_Bfree>
 8009f84:	9805      	ldr	r0, [sp, #20]
 8009f86:	4641      	mov	r1, r8
 8009f88:	f001 fa74 	bl	800b474 <_Bfree>
 8009f8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f8e:	9805      	ldr	r0, [sp, #20]
 8009f90:	f001 fa70 	bl	800b474 <_Bfree>
 8009f94:	9805      	ldr	r0, [sp, #20]
 8009f96:	4621      	mov	r1, r4
 8009f98:	f001 fa6c 	bl	800b474 <_Bfree>
 8009f9c:	e5f5      	b.n	8009b8a <_strtod_l+0x72>
 8009f9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fa0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	dbbc      	blt.n	8009f22 <_strtod_l+0x40a>
 8009fa8:	4c3f      	ldr	r4, [pc, #252]	@ (800a0a8 <_strtod_l+0x590>)
 8009faa:	f1c5 050f 	rsb	r5, r5, #15
 8009fae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009fb2:	4652      	mov	r2, sl
 8009fb4:	465b      	mov	r3, fp
 8009fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fba:	f7f6 fb1d 	bl	80005f8 <__aeabi_dmul>
 8009fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fc0:	1b5d      	subs	r5, r3, r5
 8009fc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009fc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009fca:	e78f      	b.n	8009eec <_strtod_l+0x3d4>
 8009fcc:	3316      	adds	r3, #22
 8009fce:	dba8      	blt.n	8009f22 <_strtod_l+0x40a>
 8009fd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fd2:	eba3 0808 	sub.w	r8, r3, r8
 8009fd6:	4b34      	ldr	r3, [pc, #208]	@ (800a0a8 <_strtod_l+0x590>)
 8009fd8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009fdc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009fe0:	4650      	mov	r0, sl
 8009fe2:	4659      	mov	r1, fp
 8009fe4:	f7f6 fc32 	bl	800084c <__aeabi_ddiv>
 8009fe8:	e782      	b.n	8009ef0 <_strtod_l+0x3d8>
 8009fea:	2300      	movs	r3, #0
 8009fec:	4f2f      	ldr	r7, [pc, #188]	@ (800a0ac <_strtod_l+0x594>)
 8009fee:	1124      	asrs	r4, r4, #4
 8009ff0:	4650      	mov	r0, sl
 8009ff2:	4659      	mov	r1, fp
 8009ff4:	461e      	mov	r6, r3
 8009ff6:	2c01      	cmp	r4, #1
 8009ff8:	dc21      	bgt.n	800a03e <_strtod_l+0x526>
 8009ffa:	b10b      	cbz	r3, 800a000 <_strtod_l+0x4e8>
 8009ffc:	4682      	mov	sl, r0
 8009ffe:	468b      	mov	fp, r1
 800a000:	492a      	ldr	r1, [pc, #168]	@ (800a0ac <_strtod_l+0x594>)
 800a002:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a006:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a00a:	4652      	mov	r2, sl
 800a00c:	465b      	mov	r3, fp
 800a00e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a012:	f7f6 faf1 	bl	80005f8 <__aeabi_dmul>
 800a016:	4b26      	ldr	r3, [pc, #152]	@ (800a0b0 <_strtod_l+0x598>)
 800a018:	460a      	mov	r2, r1
 800a01a:	400b      	ands	r3, r1
 800a01c:	4925      	ldr	r1, [pc, #148]	@ (800a0b4 <_strtod_l+0x59c>)
 800a01e:	428b      	cmp	r3, r1
 800a020:	4682      	mov	sl, r0
 800a022:	d898      	bhi.n	8009f56 <_strtod_l+0x43e>
 800a024:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a028:	428b      	cmp	r3, r1
 800a02a:	bf86      	itte	hi
 800a02c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a0b8 <_strtod_l+0x5a0>
 800a030:	f04f 3aff 	movhi.w	sl, #4294967295
 800a034:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a038:	2300      	movs	r3, #0
 800a03a:	9308      	str	r3, [sp, #32]
 800a03c:	e076      	b.n	800a12c <_strtod_l+0x614>
 800a03e:	07e2      	lsls	r2, r4, #31
 800a040:	d504      	bpl.n	800a04c <_strtod_l+0x534>
 800a042:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a046:	f7f6 fad7 	bl	80005f8 <__aeabi_dmul>
 800a04a:	2301      	movs	r3, #1
 800a04c:	3601      	adds	r6, #1
 800a04e:	1064      	asrs	r4, r4, #1
 800a050:	3708      	adds	r7, #8
 800a052:	e7d0      	b.n	8009ff6 <_strtod_l+0x4de>
 800a054:	d0f0      	beq.n	800a038 <_strtod_l+0x520>
 800a056:	4264      	negs	r4, r4
 800a058:	f014 020f 	ands.w	r2, r4, #15
 800a05c:	d00a      	beq.n	800a074 <_strtod_l+0x55c>
 800a05e:	4b12      	ldr	r3, [pc, #72]	@ (800a0a8 <_strtod_l+0x590>)
 800a060:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a064:	4650      	mov	r0, sl
 800a066:	4659      	mov	r1, fp
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	f7f6 fbee 	bl	800084c <__aeabi_ddiv>
 800a070:	4682      	mov	sl, r0
 800a072:	468b      	mov	fp, r1
 800a074:	1124      	asrs	r4, r4, #4
 800a076:	d0df      	beq.n	800a038 <_strtod_l+0x520>
 800a078:	2c1f      	cmp	r4, #31
 800a07a:	dd1f      	ble.n	800a0bc <_strtod_l+0x5a4>
 800a07c:	2400      	movs	r4, #0
 800a07e:	46a0      	mov	r8, r4
 800a080:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a082:	46a1      	mov	r9, r4
 800a084:	9a05      	ldr	r2, [sp, #20]
 800a086:	2322      	movs	r3, #34	@ 0x22
 800a088:	f04f 0a00 	mov.w	sl, #0
 800a08c:	f04f 0b00 	mov.w	fp, #0
 800a090:	6013      	str	r3, [r2, #0]
 800a092:	e76b      	b.n	8009f6c <_strtod_l+0x454>
 800a094:	0800cff7 	.word	0x0800cff7
 800a098:	0800d154 	.word	0x0800d154
 800a09c:	0800cfee 	.word	0x0800cfee
 800a0a0:	0800cff1 	.word	0x0800cff1
 800a0a4:	0800d151 	.word	0x0800d151
 800a0a8:	0800d2e0 	.word	0x0800d2e0
 800a0ac:	0800d2b8 	.word	0x0800d2b8
 800a0b0:	7ff00000 	.word	0x7ff00000
 800a0b4:	7ca00000 	.word	0x7ca00000
 800a0b8:	7fefffff 	.word	0x7fefffff
 800a0bc:	f014 0310 	ands.w	r3, r4, #16
 800a0c0:	bf18      	it	ne
 800a0c2:	236a      	movne	r3, #106	@ 0x6a
 800a0c4:	4ea9      	ldr	r6, [pc, #676]	@ (800a36c <_strtod_l+0x854>)
 800a0c6:	9308      	str	r3, [sp, #32]
 800a0c8:	4650      	mov	r0, sl
 800a0ca:	4659      	mov	r1, fp
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	07e7      	lsls	r7, r4, #31
 800a0d0:	d504      	bpl.n	800a0dc <_strtod_l+0x5c4>
 800a0d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a0d6:	f7f6 fa8f 	bl	80005f8 <__aeabi_dmul>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	1064      	asrs	r4, r4, #1
 800a0de:	f106 0608 	add.w	r6, r6, #8
 800a0e2:	d1f4      	bne.n	800a0ce <_strtod_l+0x5b6>
 800a0e4:	b10b      	cbz	r3, 800a0ea <_strtod_l+0x5d2>
 800a0e6:	4682      	mov	sl, r0
 800a0e8:	468b      	mov	fp, r1
 800a0ea:	9b08      	ldr	r3, [sp, #32]
 800a0ec:	b1b3      	cbz	r3, 800a11c <_strtod_l+0x604>
 800a0ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a0f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	4659      	mov	r1, fp
 800a0fa:	dd0f      	ble.n	800a11c <_strtod_l+0x604>
 800a0fc:	2b1f      	cmp	r3, #31
 800a0fe:	dd56      	ble.n	800a1ae <_strtod_l+0x696>
 800a100:	2b34      	cmp	r3, #52	@ 0x34
 800a102:	bfde      	ittt	le
 800a104:	f04f 33ff 	movle.w	r3, #4294967295
 800a108:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a10c:	4093      	lslle	r3, r2
 800a10e:	f04f 0a00 	mov.w	sl, #0
 800a112:	bfcc      	ite	gt
 800a114:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a118:	ea03 0b01 	andle.w	fp, r3, r1
 800a11c:	2200      	movs	r2, #0
 800a11e:	2300      	movs	r3, #0
 800a120:	4650      	mov	r0, sl
 800a122:	4659      	mov	r1, fp
 800a124:	f7f6 fcd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a128:	2800      	cmp	r0, #0
 800a12a:	d1a7      	bne.n	800a07c <_strtod_l+0x564>
 800a12c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a132:	9805      	ldr	r0, [sp, #20]
 800a134:	462b      	mov	r3, r5
 800a136:	464a      	mov	r2, r9
 800a138:	f001 fa04 	bl	800b544 <__s2b>
 800a13c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a13e:	2800      	cmp	r0, #0
 800a140:	f43f af09 	beq.w	8009f56 <_strtod_l+0x43e>
 800a144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a146:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a148:	2a00      	cmp	r2, #0
 800a14a:	eba3 0308 	sub.w	r3, r3, r8
 800a14e:	bfa8      	it	ge
 800a150:	2300      	movge	r3, #0
 800a152:	9312      	str	r3, [sp, #72]	@ 0x48
 800a154:	2400      	movs	r4, #0
 800a156:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a15a:	9316      	str	r3, [sp, #88]	@ 0x58
 800a15c:	46a0      	mov	r8, r4
 800a15e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a160:	9805      	ldr	r0, [sp, #20]
 800a162:	6859      	ldr	r1, [r3, #4]
 800a164:	f001 f946 	bl	800b3f4 <_Balloc>
 800a168:	4681      	mov	r9, r0
 800a16a:	2800      	cmp	r0, #0
 800a16c:	f43f aef7 	beq.w	8009f5e <_strtod_l+0x446>
 800a170:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a172:	691a      	ldr	r2, [r3, #16]
 800a174:	3202      	adds	r2, #2
 800a176:	f103 010c 	add.w	r1, r3, #12
 800a17a:	0092      	lsls	r2, r2, #2
 800a17c:	300c      	adds	r0, #12
 800a17e:	f000 fd8c 	bl	800ac9a <memcpy>
 800a182:	ec4b ab10 	vmov	d0, sl, fp
 800a186:	9805      	ldr	r0, [sp, #20]
 800a188:	aa1c      	add	r2, sp, #112	@ 0x70
 800a18a:	a91b      	add	r1, sp, #108	@ 0x6c
 800a18c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a190:	f001 fd0c 	bl	800bbac <__d2b>
 800a194:	901a      	str	r0, [sp, #104]	@ 0x68
 800a196:	2800      	cmp	r0, #0
 800a198:	f43f aee1 	beq.w	8009f5e <_strtod_l+0x446>
 800a19c:	9805      	ldr	r0, [sp, #20]
 800a19e:	2101      	movs	r1, #1
 800a1a0:	f001 fa66 	bl	800b670 <__i2b>
 800a1a4:	4680      	mov	r8, r0
 800a1a6:	b948      	cbnz	r0, 800a1bc <_strtod_l+0x6a4>
 800a1a8:	f04f 0800 	mov.w	r8, #0
 800a1ac:	e6d7      	b.n	8009f5e <_strtod_l+0x446>
 800a1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b6:	ea03 0a0a 	and.w	sl, r3, sl
 800a1ba:	e7af      	b.n	800a11c <_strtod_l+0x604>
 800a1bc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a1be:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a1c0:	2d00      	cmp	r5, #0
 800a1c2:	bfab      	itete	ge
 800a1c4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a1c6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a1c8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a1ca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a1cc:	bfac      	ite	ge
 800a1ce:	18ef      	addge	r7, r5, r3
 800a1d0:	1b5e      	sublt	r6, r3, r5
 800a1d2:	9b08      	ldr	r3, [sp, #32]
 800a1d4:	1aed      	subs	r5, r5, r3
 800a1d6:	4415      	add	r5, r2
 800a1d8:	4b65      	ldr	r3, [pc, #404]	@ (800a370 <_strtod_l+0x858>)
 800a1da:	3d01      	subs	r5, #1
 800a1dc:	429d      	cmp	r5, r3
 800a1de:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a1e2:	da50      	bge.n	800a286 <_strtod_l+0x76e>
 800a1e4:	1b5b      	subs	r3, r3, r5
 800a1e6:	2b1f      	cmp	r3, #31
 800a1e8:	eba2 0203 	sub.w	r2, r2, r3
 800a1ec:	f04f 0101 	mov.w	r1, #1
 800a1f0:	dc3d      	bgt.n	800a26e <_strtod_l+0x756>
 800a1f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1fc:	18bd      	adds	r5, r7, r2
 800a1fe:	9b08      	ldr	r3, [sp, #32]
 800a200:	42af      	cmp	r7, r5
 800a202:	4416      	add	r6, r2
 800a204:	441e      	add	r6, r3
 800a206:	463b      	mov	r3, r7
 800a208:	bfa8      	it	ge
 800a20a:	462b      	movge	r3, r5
 800a20c:	42b3      	cmp	r3, r6
 800a20e:	bfa8      	it	ge
 800a210:	4633      	movge	r3, r6
 800a212:	2b00      	cmp	r3, #0
 800a214:	bfc2      	ittt	gt
 800a216:	1aed      	subgt	r5, r5, r3
 800a218:	1af6      	subgt	r6, r6, r3
 800a21a:	1aff      	subgt	r7, r7, r3
 800a21c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a21e:	2b00      	cmp	r3, #0
 800a220:	dd16      	ble.n	800a250 <_strtod_l+0x738>
 800a222:	4641      	mov	r1, r8
 800a224:	9805      	ldr	r0, [sp, #20]
 800a226:	461a      	mov	r2, r3
 800a228:	f001 fada 	bl	800b7e0 <__pow5mult>
 800a22c:	4680      	mov	r8, r0
 800a22e:	2800      	cmp	r0, #0
 800a230:	d0ba      	beq.n	800a1a8 <_strtod_l+0x690>
 800a232:	4601      	mov	r1, r0
 800a234:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a236:	9805      	ldr	r0, [sp, #20]
 800a238:	f001 fa30 	bl	800b69c <__multiply>
 800a23c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a23e:	2800      	cmp	r0, #0
 800a240:	f43f ae8d 	beq.w	8009f5e <_strtod_l+0x446>
 800a244:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a246:	9805      	ldr	r0, [sp, #20]
 800a248:	f001 f914 	bl	800b474 <_Bfree>
 800a24c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a24e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a250:	2d00      	cmp	r5, #0
 800a252:	dc1d      	bgt.n	800a290 <_strtod_l+0x778>
 800a254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a256:	2b00      	cmp	r3, #0
 800a258:	dd23      	ble.n	800a2a2 <_strtod_l+0x78a>
 800a25a:	4649      	mov	r1, r9
 800a25c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a25e:	9805      	ldr	r0, [sp, #20]
 800a260:	f001 fabe 	bl	800b7e0 <__pow5mult>
 800a264:	4681      	mov	r9, r0
 800a266:	b9e0      	cbnz	r0, 800a2a2 <_strtod_l+0x78a>
 800a268:	f04f 0900 	mov.w	r9, #0
 800a26c:	e677      	b.n	8009f5e <_strtod_l+0x446>
 800a26e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a272:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a276:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a27a:	35e2      	adds	r5, #226	@ 0xe2
 800a27c:	fa01 f305 	lsl.w	r3, r1, r5
 800a280:	9310      	str	r3, [sp, #64]	@ 0x40
 800a282:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a284:	e7ba      	b.n	800a1fc <_strtod_l+0x6e4>
 800a286:	2300      	movs	r3, #0
 800a288:	9310      	str	r3, [sp, #64]	@ 0x40
 800a28a:	2301      	movs	r3, #1
 800a28c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a28e:	e7b5      	b.n	800a1fc <_strtod_l+0x6e4>
 800a290:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a292:	9805      	ldr	r0, [sp, #20]
 800a294:	462a      	mov	r2, r5
 800a296:	f001 fafd 	bl	800b894 <__lshift>
 800a29a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d1d9      	bne.n	800a254 <_strtod_l+0x73c>
 800a2a0:	e65d      	b.n	8009f5e <_strtod_l+0x446>
 800a2a2:	2e00      	cmp	r6, #0
 800a2a4:	dd07      	ble.n	800a2b6 <_strtod_l+0x79e>
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	9805      	ldr	r0, [sp, #20]
 800a2aa:	4632      	mov	r2, r6
 800a2ac:	f001 faf2 	bl	800b894 <__lshift>
 800a2b0:	4681      	mov	r9, r0
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d0d8      	beq.n	800a268 <_strtod_l+0x750>
 800a2b6:	2f00      	cmp	r7, #0
 800a2b8:	dd08      	ble.n	800a2cc <_strtod_l+0x7b4>
 800a2ba:	4641      	mov	r1, r8
 800a2bc:	9805      	ldr	r0, [sp, #20]
 800a2be:	463a      	mov	r2, r7
 800a2c0:	f001 fae8 	bl	800b894 <__lshift>
 800a2c4:	4680      	mov	r8, r0
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	f43f ae49 	beq.w	8009f5e <_strtod_l+0x446>
 800a2cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a2ce:	9805      	ldr	r0, [sp, #20]
 800a2d0:	464a      	mov	r2, r9
 800a2d2:	f001 fb67 	bl	800b9a4 <__mdiff>
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	f43f ae40 	beq.w	8009f5e <_strtod_l+0x446>
 800a2de:	68c3      	ldr	r3, [r0, #12]
 800a2e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60c3      	str	r3, [r0, #12]
 800a2e6:	4641      	mov	r1, r8
 800a2e8:	f001 fb40 	bl	800b96c <__mcmp>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	da45      	bge.n	800a37c <_strtod_l+0x864>
 800a2f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2f2:	ea53 030a 	orrs.w	r3, r3, sl
 800a2f6:	d16b      	bne.n	800a3d0 <_strtod_l+0x8b8>
 800a2f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d167      	bne.n	800a3d0 <_strtod_l+0x8b8>
 800a300:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a304:	0d1b      	lsrs	r3, r3, #20
 800a306:	051b      	lsls	r3, r3, #20
 800a308:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a30c:	d960      	bls.n	800a3d0 <_strtod_l+0x8b8>
 800a30e:	6963      	ldr	r3, [r4, #20]
 800a310:	b913      	cbnz	r3, 800a318 <_strtod_l+0x800>
 800a312:	6923      	ldr	r3, [r4, #16]
 800a314:	2b01      	cmp	r3, #1
 800a316:	dd5b      	ble.n	800a3d0 <_strtod_l+0x8b8>
 800a318:	4621      	mov	r1, r4
 800a31a:	2201      	movs	r2, #1
 800a31c:	9805      	ldr	r0, [sp, #20]
 800a31e:	f001 fab9 	bl	800b894 <__lshift>
 800a322:	4641      	mov	r1, r8
 800a324:	4604      	mov	r4, r0
 800a326:	f001 fb21 	bl	800b96c <__mcmp>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	dd50      	ble.n	800a3d0 <_strtod_l+0x8b8>
 800a32e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a332:	9a08      	ldr	r2, [sp, #32]
 800a334:	0d1b      	lsrs	r3, r3, #20
 800a336:	051b      	lsls	r3, r3, #20
 800a338:	2a00      	cmp	r2, #0
 800a33a:	d06a      	beq.n	800a412 <_strtod_l+0x8fa>
 800a33c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a340:	d867      	bhi.n	800a412 <_strtod_l+0x8fa>
 800a342:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a346:	f67f ae9d 	bls.w	800a084 <_strtod_l+0x56c>
 800a34a:	4b0a      	ldr	r3, [pc, #40]	@ (800a374 <_strtod_l+0x85c>)
 800a34c:	4650      	mov	r0, sl
 800a34e:	4659      	mov	r1, fp
 800a350:	2200      	movs	r2, #0
 800a352:	f7f6 f951 	bl	80005f8 <__aeabi_dmul>
 800a356:	4b08      	ldr	r3, [pc, #32]	@ (800a378 <_strtod_l+0x860>)
 800a358:	400b      	ands	r3, r1
 800a35a:	4682      	mov	sl, r0
 800a35c:	468b      	mov	fp, r1
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f47f ae08 	bne.w	8009f74 <_strtod_l+0x45c>
 800a364:	9a05      	ldr	r2, [sp, #20]
 800a366:	2322      	movs	r3, #34	@ 0x22
 800a368:	6013      	str	r3, [r2, #0]
 800a36a:	e603      	b.n	8009f74 <_strtod_l+0x45c>
 800a36c:	0800d180 	.word	0x0800d180
 800a370:	fffffc02 	.word	0xfffffc02
 800a374:	39500000 	.word	0x39500000
 800a378:	7ff00000 	.word	0x7ff00000
 800a37c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a380:	d165      	bne.n	800a44e <_strtod_l+0x936>
 800a382:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a384:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a388:	b35a      	cbz	r2, 800a3e2 <_strtod_l+0x8ca>
 800a38a:	4a9f      	ldr	r2, [pc, #636]	@ (800a608 <_strtod_l+0xaf0>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d12b      	bne.n	800a3e8 <_strtod_l+0x8d0>
 800a390:	9b08      	ldr	r3, [sp, #32]
 800a392:	4651      	mov	r1, sl
 800a394:	b303      	cbz	r3, 800a3d8 <_strtod_l+0x8c0>
 800a396:	4b9d      	ldr	r3, [pc, #628]	@ (800a60c <_strtod_l+0xaf4>)
 800a398:	465a      	mov	r2, fp
 800a39a:	4013      	ands	r3, r2
 800a39c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a3a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a4:	d81b      	bhi.n	800a3de <_strtod_l+0x8c6>
 800a3a6:	0d1b      	lsrs	r3, r3, #20
 800a3a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a3ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b0:	4299      	cmp	r1, r3
 800a3b2:	d119      	bne.n	800a3e8 <_strtod_l+0x8d0>
 800a3b4:	4b96      	ldr	r3, [pc, #600]	@ (800a610 <_strtod_l+0xaf8>)
 800a3b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d102      	bne.n	800a3c2 <_strtod_l+0x8aa>
 800a3bc:	3101      	adds	r1, #1
 800a3be:	f43f adce 	beq.w	8009f5e <_strtod_l+0x446>
 800a3c2:	4b92      	ldr	r3, [pc, #584]	@ (800a60c <_strtod_l+0xaf4>)
 800a3c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3c6:	401a      	ands	r2, r3
 800a3c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a3cc:	f04f 0a00 	mov.w	sl, #0
 800a3d0:	9b08      	ldr	r3, [sp, #32]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1b9      	bne.n	800a34a <_strtod_l+0x832>
 800a3d6:	e5cd      	b.n	8009f74 <_strtod_l+0x45c>
 800a3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3dc:	e7e8      	b.n	800a3b0 <_strtod_l+0x898>
 800a3de:	4613      	mov	r3, r2
 800a3e0:	e7e6      	b.n	800a3b0 <_strtod_l+0x898>
 800a3e2:	ea53 030a 	orrs.w	r3, r3, sl
 800a3e6:	d0a2      	beq.n	800a32e <_strtod_l+0x816>
 800a3e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a3ea:	b1db      	cbz	r3, 800a424 <_strtod_l+0x90c>
 800a3ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3ee:	4213      	tst	r3, r2
 800a3f0:	d0ee      	beq.n	800a3d0 <_strtod_l+0x8b8>
 800a3f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3f4:	9a08      	ldr	r2, [sp, #32]
 800a3f6:	4650      	mov	r0, sl
 800a3f8:	4659      	mov	r1, fp
 800a3fa:	b1bb      	cbz	r3, 800a42c <_strtod_l+0x914>
 800a3fc:	f7ff fb6e 	bl	8009adc <sulp>
 800a400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a404:	ec53 2b10 	vmov	r2, r3, d0
 800a408:	f7f5 ff40 	bl	800028c <__adddf3>
 800a40c:	4682      	mov	sl, r0
 800a40e:	468b      	mov	fp, r1
 800a410:	e7de      	b.n	800a3d0 <_strtod_l+0x8b8>
 800a412:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a416:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a41a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a41e:	f04f 3aff 	mov.w	sl, #4294967295
 800a422:	e7d5      	b.n	800a3d0 <_strtod_l+0x8b8>
 800a424:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a426:	ea13 0f0a 	tst.w	r3, sl
 800a42a:	e7e1      	b.n	800a3f0 <_strtod_l+0x8d8>
 800a42c:	f7ff fb56 	bl	8009adc <sulp>
 800a430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a434:	ec53 2b10 	vmov	r2, r3, d0
 800a438:	f7f5 ff26 	bl	8000288 <__aeabi_dsub>
 800a43c:	2200      	movs	r2, #0
 800a43e:	2300      	movs	r3, #0
 800a440:	4682      	mov	sl, r0
 800a442:	468b      	mov	fp, r1
 800a444:	f7f6 fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 800a448:	2800      	cmp	r0, #0
 800a44a:	d0c1      	beq.n	800a3d0 <_strtod_l+0x8b8>
 800a44c:	e61a      	b.n	800a084 <_strtod_l+0x56c>
 800a44e:	4641      	mov	r1, r8
 800a450:	4620      	mov	r0, r4
 800a452:	f001 fc03 	bl	800bc5c <__ratio>
 800a456:	ec57 6b10 	vmov	r6, r7, d0
 800a45a:	2200      	movs	r2, #0
 800a45c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a460:	4630      	mov	r0, r6
 800a462:	4639      	mov	r1, r7
 800a464:	f7f6 fb44 	bl	8000af0 <__aeabi_dcmple>
 800a468:	2800      	cmp	r0, #0
 800a46a:	d06f      	beq.n	800a54c <_strtod_l+0xa34>
 800a46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d17a      	bne.n	800a568 <_strtod_l+0xa50>
 800a472:	f1ba 0f00 	cmp.w	sl, #0
 800a476:	d158      	bne.n	800a52a <_strtod_l+0xa12>
 800a478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a47a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d15a      	bne.n	800a538 <_strtod_l+0xa20>
 800a482:	4b64      	ldr	r3, [pc, #400]	@ (800a614 <_strtod_l+0xafc>)
 800a484:	2200      	movs	r2, #0
 800a486:	4630      	mov	r0, r6
 800a488:	4639      	mov	r1, r7
 800a48a:	f7f6 fb27 	bl	8000adc <__aeabi_dcmplt>
 800a48e:	2800      	cmp	r0, #0
 800a490:	d159      	bne.n	800a546 <_strtod_l+0xa2e>
 800a492:	4630      	mov	r0, r6
 800a494:	4639      	mov	r1, r7
 800a496:	4b60      	ldr	r3, [pc, #384]	@ (800a618 <_strtod_l+0xb00>)
 800a498:	2200      	movs	r2, #0
 800a49a:	f7f6 f8ad 	bl	80005f8 <__aeabi_dmul>
 800a49e:	4606      	mov	r6, r0
 800a4a0:	460f      	mov	r7, r1
 800a4a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a4a6:	9606      	str	r6, [sp, #24]
 800a4a8:	9307      	str	r3, [sp, #28]
 800a4aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4ae:	4d57      	ldr	r5, [pc, #348]	@ (800a60c <_strtod_l+0xaf4>)
 800a4b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a4b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4b6:	401d      	ands	r5, r3
 800a4b8:	4b58      	ldr	r3, [pc, #352]	@ (800a61c <_strtod_l+0xb04>)
 800a4ba:	429d      	cmp	r5, r3
 800a4bc:	f040 80b2 	bne.w	800a624 <_strtod_l+0xb0c>
 800a4c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a4c6:	ec4b ab10 	vmov	d0, sl, fp
 800a4ca:	f001 faff 	bl	800bacc <__ulp>
 800a4ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4d2:	ec51 0b10 	vmov	r0, r1, d0
 800a4d6:	f7f6 f88f 	bl	80005f8 <__aeabi_dmul>
 800a4da:	4652      	mov	r2, sl
 800a4dc:	465b      	mov	r3, fp
 800a4de:	f7f5 fed5 	bl	800028c <__adddf3>
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4949      	ldr	r1, [pc, #292]	@ (800a60c <_strtod_l+0xaf4>)
 800a4e6:	4a4e      	ldr	r2, [pc, #312]	@ (800a620 <_strtod_l+0xb08>)
 800a4e8:	4019      	ands	r1, r3
 800a4ea:	4291      	cmp	r1, r2
 800a4ec:	4682      	mov	sl, r0
 800a4ee:	d942      	bls.n	800a576 <_strtod_l+0xa5e>
 800a4f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a4f2:	4b47      	ldr	r3, [pc, #284]	@ (800a610 <_strtod_l+0xaf8>)
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d103      	bne.n	800a500 <_strtod_l+0x9e8>
 800a4f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	f43f ad2f 	beq.w	8009f5e <_strtod_l+0x446>
 800a500:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a610 <_strtod_l+0xaf8>
 800a504:	f04f 3aff 	mov.w	sl, #4294967295
 800a508:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a50a:	9805      	ldr	r0, [sp, #20]
 800a50c:	f000 ffb2 	bl	800b474 <_Bfree>
 800a510:	9805      	ldr	r0, [sp, #20]
 800a512:	4649      	mov	r1, r9
 800a514:	f000 ffae 	bl	800b474 <_Bfree>
 800a518:	9805      	ldr	r0, [sp, #20]
 800a51a:	4641      	mov	r1, r8
 800a51c:	f000 ffaa 	bl	800b474 <_Bfree>
 800a520:	9805      	ldr	r0, [sp, #20]
 800a522:	4621      	mov	r1, r4
 800a524:	f000 ffa6 	bl	800b474 <_Bfree>
 800a528:	e619      	b.n	800a15e <_strtod_l+0x646>
 800a52a:	f1ba 0f01 	cmp.w	sl, #1
 800a52e:	d103      	bne.n	800a538 <_strtod_l+0xa20>
 800a530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a532:	2b00      	cmp	r3, #0
 800a534:	f43f ada6 	beq.w	800a084 <_strtod_l+0x56c>
 800a538:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a5e8 <_strtod_l+0xad0>
 800a53c:	4f35      	ldr	r7, [pc, #212]	@ (800a614 <_strtod_l+0xafc>)
 800a53e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a542:	2600      	movs	r6, #0
 800a544:	e7b1      	b.n	800a4aa <_strtod_l+0x992>
 800a546:	4f34      	ldr	r7, [pc, #208]	@ (800a618 <_strtod_l+0xb00>)
 800a548:	2600      	movs	r6, #0
 800a54a:	e7aa      	b.n	800a4a2 <_strtod_l+0x98a>
 800a54c:	4b32      	ldr	r3, [pc, #200]	@ (800a618 <_strtod_l+0xb00>)
 800a54e:	4630      	mov	r0, r6
 800a550:	4639      	mov	r1, r7
 800a552:	2200      	movs	r2, #0
 800a554:	f7f6 f850 	bl	80005f8 <__aeabi_dmul>
 800a558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a55a:	4606      	mov	r6, r0
 800a55c:	460f      	mov	r7, r1
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d09f      	beq.n	800a4a2 <_strtod_l+0x98a>
 800a562:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a566:	e7a0      	b.n	800a4aa <_strtod_l+0x992>
 800a568:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a5f0 <_strtod_l+0xad8>
 800a56c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a570:	ec57 6b17 	vmov	r6, r7, d7
 800a574:	e799      	b.n	800a4aa <_strtod_l+0x992>
 800a576:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a57a:	9b08      	ldr	r3, [sp, #32]
 800a57c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1c1      	bne.n	800a508 <_strtod_l+0x9f0>
 800a584:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a588:	0d1b      	lsrs	r3, r3, #20
 800a58a:	051b      	lsls	r3, r3, #20
 800a58c:	429d      	cmp	r5, r3
 800a58e:	d1bb      	bne.n	800a508 <_strtod_l+0x9f0>
 800a590:	4630      	mov	r0, r6
 800a592:	4639      	mov	r1, r7
 800a594:	f7f6 fb02 	bl	8000b9c <__aeabi_d2lz>
 800a598:	f7f6 f800 	bl	800059c <__aeabi_l2d>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	f7f5 fe70 	bl	8000288 <__aeabi_dsub>
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a5b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5b6:	ea46 060a 	orr.w	r6, r6, sl
 800a5ba:	431e      	orrs	r6, r3
 800a5bc:	d06f      	beq.n	800a69e <_strtod_l+0xb86>
 800a5be:	a30e      	add	r3, pc, #56	@ (adr r3, 800a5f8 <_strtod_l+0xae0>)
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	f7f6 fa8a 	bl	8000adc <__aeabi_dcmplt>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	f47f acd3 	bne.w	8009f74 <_strtod_l+0x45c>
 800a5ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800a600 <_strtod_l+0xae8>)
 800a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5d8:	f7f6 fa9e 	bl	8000b18 <__aeabi_dcmpgt>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d093      	beq.n	800a508 <_strtod_l+0x9f0>
 800a5e0:	e4c8      	b.n	8009f74 <_strtod_l+0x45c>
 800a5e2:	bf00      	nop
 800a5e4:	f3af 8000 	nop.w
 800a5e8:	00000000 	.word	0x00000000
 800a5ec:	bff00000 	.word	0xbff00000
 800a5f0:	00000000 	.word	0x00000000
 800a5f4:	3ff00000 	.word	0x3ff00000
 800a5f8:	94a03595 	.word	0x94a03595
 800a5fc:	3fdfffff 	.word	0x3fdfffff
 800a600:	35afe535 	.word	0x35afe535
 800a604:	3fe00000 	.word	0x3fe00000
 800a608:	000fffff 	.word	0x000fffff
 800a60c:	7ff00000 	.word	0x7ff00000
 800a610:	7fefffff 	.word	0x7fefffff
 800a614:	3ff00000 	.word	0x3ff00000
 800a618:	3fe00000 	.word	0x3fe00000
 800a61c:	7fe00000 	.word	0x7fe00000
 800a620:	7c9fffff 	.word	0x7c9fffff
 800a624:	9b08      	ldr	r3, [sp, #32]
 800a626:	b323      	cbz	r3, 800a672 <_strtod_l+0xb5a>
 800a628:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a62c:	d821      	bhi.n	800a672 <_strtod_l+0xb5a>
 800a62e:	a328      	add	r3, pc, #160	@ (adr r3, 800a6d0 <_strtod_l+0xbb8>)
 800a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a634:	4630      	mov	r0, r6
 800a636:	4639      	mov	r1, r7
 800a638:	f7f6 fa5a 	bl	8000af0 <__aeabi_dcmple>
 800a63c:	b1a0      	cbz	r0, 800a668 <_strtod_l+0xb50>
 800a63e:	4639      	mov	r1, r7
 800a640:	4630      	mov	r0, r6
 800a642:	f7f6 fa73 	bl	8000b2c <__aeabi_d2uiz>
 800a646:	2801      	cmp	r0, #1
 800a648:	bf38      	it	cc
 800a64a:	2001      	movcc	r0, #1
 800a64c:	f7f5 ff5a 	bl	8000504 <__aeabi_ui2d>
 800a650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a652:	4606      	mov	r6, r0
 800a654:	460f      	mov	r7, r1
 800a656:	b9fb      	cbnz	r3, 800a698 <_strtod_l+0xb80>
 800a658:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a65c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a65e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a660:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a664:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a668:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a66a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a66e:	1b5b      	subs	r3, r3, r5
 800a670:	9311      	str	r3, [sp, #68]	@ 0x44
 800a672:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a676:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a67a:	f001 fa27 	bl	800bacc <__ulp>
 800a67e:	4650      	mov	r0, sl
 800a680:	ec53 2b10 	vmov	r2, r3, d0
 800a684:	4659      	mov	r1, fp
 800a686:	f7f5 ffb7 	bl	80005f8 <__aeabi_dmul>
 800a68a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a68e:	f7f5 fdfd 	bl	800028c <__adddf3>
 800a692:	4682      	mov	sl, r0
 800a694:	468b      	mov	fp, r1
 800a696:	e770      	b.n	800a57a <_strtod_l+0xa62>
 800a698:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a69c:	e7e0      	b.n	800a660 <_strtod_l+0xb48>
 800a69e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a6d8 <_strtod_l+0xbc0>)
 800a6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a4:	f7f6 fa1a 	bl	8000adc <__aeabi_dcmplt>
 800a6a8:	e798      	b.n	800a5dc <_strtod_l+0xac4>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	930e      	str	r3, [sp, #56]	@ 0x38
 800a6ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a6b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6b2:	6013      	str	r3, [r2, #0]
 800a6b4:	f7ff ba6d 	b.w	8009b92 <_strtod_l+0x7a>
 800a6b8:	2a65      	cmp	r2, #101	@ 0x65
 800a6ba:	f43f ab68 	beq.w	8009d8e <_strtod_l+0x276>
 800a6be:	2a45      	cmp	r2, #69	@ 0x45
 800a6c0:	f43f ab65 	beq.w	8009d8e <_strtod_l+0x276>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	f7ff bba0 	b.w	8009e0a <_strtod_l+0x2f2>
 800a6ca:	bf00      	nop
 800a6cc:	f3af 8000 	nop.w
 800a6d0:	ffc00000 	.word	0xffc00000
 800a6d4:	41dfffff 	.word	0x41dfffff
 800a6d8:	94a03595 	.word	0x94a03595
 800a6dc:	3fcfffff 	.word	0x3fcfffff

0800a6e0 <strtod>:
 800a6e0:	460a      	mov	r2, r1
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	4802      	ldr	r0, [pc, #8]	@ (800a6f0 <strtod+0x10>)
 800a6e6:	4b03      	ldr	r3, [pc, #12]	@ (800a6f4 <strtod+0x14>)
 800a6e8:	6800      	ldr	r0, [r0, #0]
 800a6ea:	f7ff ba15 	b.w	8009b18 <_strtod_l>
 800a6ee:	bf00      	nop
 800a6f0:	2000019c 	.word	0x2000019c
 800a6f4:	20000030 	.word	0x20000030

0800a6f8 <_strtol_l.isra.0>:
 800a6f8:	2b24      	cmp	r3, #36	@ 0x24
 800a6fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6fe:	4686      	mov	lr, r0
 800a700:	4690      	mov	r8, r2
 800a702:	d801      	bhi.n	800a708 <_strtol_l.isra.0+0x10>
 800a704:	2b01      	cmp	r3, #1
 800a706:	d106      	bne.n	800a716 <_strtol_l.isra.0+0x1e>
 800a708:	f000 fa9a 	bl	800ac40 <__errno>
 800a70c:	2316      	movs	r3, #22
 800a70e:	6003      	str	r3, [r0, #0]
 800a710:	2000      	movs	r0, #0
 800a712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a716:	4834      	ldr	r0, [pc, #208]	@ (800a7e8 <_strtol_l.isra.0+0xf0>)
 800a718:	460d      	mov	r5, r1
 800a71a:	462a      	mov	r2, r5
 800a71c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a720:	5d06      	ldrb	r6, [r0, r4]
 800a722:	f016 0608 	ands.w	r6, r6, #8
 800a726:	d1f8      	bne.n	800a71a <_strtol_l.isra.0+0x22>
 800a728:	2c2d      	cmp	r4, #45	@ 0x2d
 800a72a:	d110      	bne.n	800a74e <_strtol_l.isra.0+0x56>
 800a72c:	782c      	ldrb	r4, [r5, #0]
 800a72e:	2601      	movs	r6, #1
 800a730:	1c95      	adds	r5, r2, #2
 800a732:	f033 0210 	bics.w	r2, r3, #16
 800a736:	d115      	bne.n	800a764 <_strtol_l.isra.0+0x6c>
 800a738:	2c30      	cmp	r4, #48	@ 0x30
 800a73a:	d10d      	bne.n	800a758 <_strtol_l.isra.0+0x60>
 800a73c:	782a      	ldrb	r2, [r5, #0]
 800a73e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a742:	2a58      	cmp	r2, #88	@ 0x58
 800a744:	d108      	bne.n	800a758 <_strtol_l.isra.0+0x60>
 800a746:	786c      	ldrb	r4, [r5, #1]
 800a748:	3502      	adds	r5, #2
 800a74a:	2310      	movs	r3, #16
 800a74c:	e00a      	b.n	800a764 <_strtol_l.isra.0+0x6c>
 800a74e:	2c2b      	cmp	r4, #43	@ 0x2b
 800a750:	bf04      	itt	eq
 800a752:	782c      	ldrbeq	r4, [r5, #0]
 800a754:	1c95      	addeq	r5, r2, #2
 800a756:	e7ec      	b.n	800a732 <_strtol_l.isra.0+0x3a>
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1f6      	bne.n	800a74a <_strtol_l.isra.0+0x52>
 800a75c:	2c30      	cmp	r4, #48	@ 0x30
 800a75e:	bf14      	ite	ne
 800a760:	230a      	movne	r3, #10
 800a762:	2308      	moveq	r3, #8
 800a764:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a768:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a76c:	2200      	movs	r2, #0
 800a76e:	fbbc f9f3 	udiv	r9, ip, r3
 800a772:	4610      	mov	r0, r2
 800a774:	fb03 ca19 	mls	sl, r3, r9, ip
 800a778:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a77c:	2f09      	cmp	r7, #9
 800a77e:	d80f      	bhi.n	800a7a0 <_strtol_l.isra.0+0xa8>
 800a780:	463c      	mov	r4, r7
 800a782:	42a3      	cmp	r3, r4
 800a784:	dd1b      	ble.n	800a7be <_strtol_l.isra.0+0xc6>
 800a786:	1c57      	adds	r7, r2, #1
 800a788:	d007      	beq.n	800a79a <_strtol_l.isra.0+0xa2>
 800a78a:	4581      	cmp	r9, r0
 800a78c:	d314      	bcc.n	800a7b8 <_strtol_l.isra.0+0xc0>
 800a78e:	d101      	bne.n	800a794 <_strtol_l.isra.0+0x9c>
 800a790:	45a2      	cmp	sl, r4
 800a792:	db11      	blt.n	800a7b8 <_strtol_l.isra.0+0xc0>
 800a794:	fb00 4003 	mla	r0, r0, r3, r4
 800a798:	2201      	movs	r2, #1
 800a79a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a79e:	e7eb      	b.n	800a778 <_strtol_l.isra.0+0x80>
 800a7a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a7a4:	2f19      	cmp	r7, #25
 800a7a6:	d801      	bhi.n	800a7ac <_strtol_l.isra.0+0xb4>
 800a7a8:	3c37      	subs	r4, #55	@ 0x37
 800a7aa:	e7ea      	b.n	800a782 <_strtol_l.isra.0+0x8a>
 800a7ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a7b0:	2f19      	cmp	r7, #25
 800a7b2:	d804      	bhi.n	800a7be <_strtol_l.isra.0+0xc6>
 800a7b4:	3c57      	subs	r4, #87	@ 0x57
 800a7b6:	e7e4      	b.n	800a782 <_strtol_l.isra.0+0x8a>
 800a7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7bc:	e7ed      	b.n	800a79a <_strtol_l.isra.0+0xa2>
 800a7be:	1c53      	adds	r3, r2, #1
 800a7c0:	d108      	bne.n	800a7d4 <_strtol_l.isra.0+0xdc>
 800a7c2:	2322      	movs	r3, #34	@ 0x22
 800a7c4:	f8ce 3000 	str.w	r3, [lr]
 800a7c8:	4660      	mov	r0, ip
 800a7ca:	f1b8 0f00 	cmp.w	r8, #0
 800a7ce:	d0a0      	beq.n	800a712 <_strtol_l.isra.0+0x1a>
 800a7d0:	1e69      	subs	r1, r5, #1
 800a7d2:	e006      	b.n	800a7e2 <_strtol_l.isra.0+0xea>
 800a7d4:	b106      	cbz	r6, 800a7d8 <_strtol_l.isra.0+0xe0>
 800a7d6:	4240      	negs	r0, r0
 800a7d8:	f1b8 0f00 	cmp.w	r8, #0
 800a7dc:	d099      	beq.n	800a712 <_strtol_l.isra.0+0x1a>
 800a7de:	2a00      	cmp	r2, #0
 800a7e0:	d1f6      	bne.n	800a7d0 <_strtol_l.isra.0+0xd8>
 800a7e2:	f8c8 1000 	str.w	r1, [r8]
 800a7e6:	e794      	b.n	800a712 <_strtol_l.isra.0+0x1a>
 800a7e8:	0800d1a9 	.word	0x0800d1a9

0800a7ec <strtol>:
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	460a      	mov	r2, r1
 800a7f0:	4601      	mov	r1, r0
 800a7f2:	4802      	ldr	r0, [pc, #8]	@ (800a7fc <strtol+0x10>)
 800a7f4:	6800      	ldr	r0, [r0, #0]
 800a7f6:	f7ff bf7f 	b.w	800a6f8 <_strtol_l.isra.0>
 800a7fa:	bf00      	nop
 800a7fc:	2000019c 	.word	0x2000019c

0800a800 <std>:
 800a800:	2300      	movs	r3, #0
 800a802:	b510      	push	{r4, lr}
 800a804:	4604      	mov	r4, r0
 800a806:	e9c0 3300 	strd	r3, r3, [r0]
 800a80a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a80e:	6083      	str	r3, [r0, #8]
 800a810:	8181      	strh	r1, [r0, #12]
 800a812:	6643      	str	r3, [r0, #100]	@ 0x64
 800a814:	81c2      	strh	r2, [r0, #14]
 800a816:	6183      	str	r3, [r0, #24]
 800a818:	4619      	mov	r1, r3
 800a81a:	2208      	movs	r2, #8
 800a81c:	305c      	adds	r0, #92	@ 0x5c
 800a81e:	f000 f92a 	bl	800aa76 <memset>
 800a822:	4b0d      	ldr	r3, [pc, #52]	@ (800a858 <std+0x58>)
 800a824:	6263      	str	r3, [r4, #36]	@ 0x24
 800a826:	4b0d      	ldr	r3, [pc, #52]	@ (800a85c <std+0x5c>)
 800a828:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a82a:	4b0d      	ldr	r3, [pc, #52]	@ (800a860 <std+0x60>)
 800a82c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a82e:	4b0d      	ldr	r3, [pc, #52]	@ (800a864 <std+0x64>)
 800a830:	6323      	str	r3, [r4, #48]	@ 0x30
 800a832:	4b0d      	ldr	r3, [pc, #52]	@ (800a868 <std+0x68>)
 800a834:	6224      	str	r4, [r4, #32]
 800a836:	429c      	cmp	r4, r3
 800a838:	d006      	beq.n	800a848 <std+0x48>
 800a83a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a83e:	4294      	cmp	r4, r2
 800a840:	d002      	beq.n	800a848 <std+0x48>
 800a842:	33d0      	adds	r3, #208	@ 0xd0
 800a844:	429c      	cmp	r4, r3
 800a846:	d105      	bne.n	800a854 <std+0x54>
 800a848:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a850:	f000 ba20 	b.w	800ac94 <__retarget_lock_init_recursive>
 800a854:	bd10      	pop	{r4, pc}
 800a856:	bf00      	nop
 800a858:	0800a9f1 	.word	0x0800a9f1
 800a85c:	0800aa13 	.word	0x0800aa13
 800a860:	0800aa4b 	.word	0x0800aa4b
 800a864:	0800aa6f 	.word	0x0800aa6f
 800a868:	20004e94 	.word	0x20004e94

0800a86c <stdio_exit_handler>:
 800a86c:	4a02      	ldr	r2, [pc, #8]	@ (800a878 <stdio_exit_handler+0xc>)
 800a86e:	4903      	ldr	r1, [pc, #12]	@ (800a87c <stdio_exit_handler+0x10>)
 800a870:	4803      	ldr	r0, [pc, #12]	@ (800a880 <stdio_exit_handler+0x14>)
 800a872:	f000 b869 	b.w	800a948 <_fwalk_sglue>
 800a876:	bf00      	nop
 800a878:	20000024 	.word	0x20000024
 800a87c:	0800c431 	.word	0x0800c431
 800a880:	200001a0 	.word	0x200001a0

0800a884 <cleanup_stdio>:
 800a884:	6841      	ldr	r1, [r0, #4]
 800a886:	4b0c      	ldr	r3, [pc, #48]	@ (800a8b8 <cleanup_stdio+0x34>)
 800a888:	4299      	cmp	r1, r3
 800a88a:	b510      	push	{r4, lr}
 800a88c:	4604      	mov	r4, r0
 800a88e:	d001      	beq.n	800a894 <cleanup_stdio+0x10>
 800a890:	f001 fdce 	bl	800c430 <_fflush_r>
 800a894:	68a1      	ldr	r1, [r4, #8]
 800a896:	4b09      	ldr	r3, [pc, #36]	@ (800a8bc <cleanup_stdio+0x38>)
 800a898:	4299      	cmp	r1, r3
 800a89a:	d002      	beq.n	800a8a2 <cleanup_stdio+0x1e>
 800a89c:	4620      	mov	r0, r4
 800a89e:	f001 fdc7 	bl	800c430 <_fflush_r>
 800a8a2:	68e1      	ldr	r1, [r4, #12]
 800a8a4:	4b06      	ldr	r3, [pc, #24]	@ (800a8c0 <cleanup_stdio+0x3c>)
 800a8a6:	4299      	cmp	r1, r3
 800a8a8:	d004      	beq.n	800a8b4 <cleanup_stdio+0x30>
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8b0:	f001 bdbe 	b.w	800c430 <_fflush_r>
 800a8b4:	bd10      	pop	{r4, pc}
 800a8b6:	bf00      	nop
 800a8b8:	20004e94 	.word	0x20004e94
 800a8bc:	20004efc 	.word	0x20004efc
 800a8c0:	20004f64 	.word	0x20004f64

0800a8c4 <global_stdio_init.part.0>:
 800a8c4:	b510      	push	{r4, lr}
 800a8c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a8f4 <global_stdio_init.part.0+0x30>)
 800a8c8:	4c0b      	ldr	r4, [pc, #44]	@ (800a8f8 <global_stdio_init.part.0+0x34>)
 800a8ca:	4a0c      	ldr	r2, [pc, #48]	@ (800a8fc <global_stdio_init.part.0+0x38>)
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	2104      	movs	r1, #4
 800a8d4:	f7ff ff94 	bl	800a800 <std>
 800a8d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a8dc:	2201      	movs	r2, #1
 800a8de:	2109      	movs	r1, #9
 800a8e0:	f7ff ff8e 	bl	800a800 <std>
 800a8e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a8e8:	2202      	movs	r2, #2
 800a8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8ee:	2112      	movs	r1, #18
 800a8f0:	f7ff bf86 	b.w	800a800 <std>
 800a8f4:	20004fcc 	.word	0x20004fcc
 800a8f8:	20004e94 	.word	0x20004e94
 800a8fc:	0800a86d 	.word	0x0800a86d

0800a900 <__sfp_lock_acquire>:
 800a900:	4801      	ldr	r0, [pc, #4]	@ (800a908 <__sfp_lock_acquire+0x8>)
 800a902:	f000 b9c8 	b.w	800ac96 <__retarget_lock_acquire_recursive>
 800a906:	bf00      	nop
 800a908:	20004fd5 	.word	0x20004fd5

0800a90c <__sfp_lock_release>:
 800a90c:	4801      	ldr	r0, [pc, #4]	@ (800a914 <__sfp_lock_release+0x8>)
 800a90e:	f000 b9c3 	b.w	800ac98 <__retarget_lock_release_recursive>
 800a912:	bf00      	nop
 800a914:	20004fd5 	.word	0x20004fd5

0800a918 <__sinit>:
 800a918:	b510      	push	{r4, lr}
 800a91a:	4604      	mov	r4, r0
 800a91c:	f7ff fff0 	bl	800a900 <__sfp_lock_acquire>
 800a920:	6a23      	ldr	r3, [r4, #32]
 800a922:	b11b      	cbz	r3, 800a92c <__sinit+0x14>
 800a924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a928:	f7ff bff0 	b.w	800a90c <__sfp_lock_release>
 800a92c:	4b04      	ldr	r3, [pc, #16]	@ (800a940 <__sinit+0x28>)
 800a92e:	6223      	str	r3, [r4, #32]
 800a930:	4b04      	ldr	r3, [pc, #16]	@ (800a944 <__sinit+0x2c>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1f5      	bne.n	800a924 <__sinit+0xc>
 800a938:	f7ff ffc4 	bl	800a8c4 <global_stdio_init.part.0>
 800a93c:	e7f2      	b.n	800a924 <__sinit+0xc>
 800a93e:	bf00      	nop
 800a940:	0800a885 	.word	0x0800a885
 800a944:	20004fcc 	.word	0x20004fcc

0800a948 <_fwalk_sglue>:
 800a948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a94c:	4607      	mov	r7, r0
 800a94e:	4688      	mov	r8, r1
 800a950:	4614      	mov	r4, r2
 800a952:	2600      	movs	r6, #0
 800a954:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a958:	f1b9 0901 	subs.w	r9, r9, #1
 800a95c:	d505      	bpl.n	800a96a <_fwalk_sglue+0x22>
 800a95e:	6824      	ldr	r4, [r4, #0]
 800a960:	2c00      	cmp	r4, #0
 800a962:	d1f7      	bne.n	800a954 <_fwalk_sglue+0xc>
 800a964:	4630      	mov	r0, r6
 800a966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a96a:	89ab      	ldrh	r3, [r5, #12]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d907      	bls.n	800a980 <_fwalk_sglue+0x38>
 800a970:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a974:	3301      	adds	r3, #1
 800a976:	d003      	beq.n	800a980 <_fwalk_sglue+0x38>
 800a978:	4629      	mov	r1, r5
 800a97a:	4638      	mov	r0, r7
 800a97c:	47c0      	blx	r8
 800a97e:	4306      	orrs	r6, r0
 800a980:	3568      	adds	r5, #104	@ 0x68
 800a982:	e7e9      	b.n	800a958 <_fwalk_sglue+0x10>

0800a984 <sniprintf>:
 800a984:	b40c      	push	{r2, r3}
 800a986:	b530      	push	{r4, r5, lr}
 800a988:	4b18      	ldr	r3, [pc, #96]	@ (800a9ec <sniprintf+0x68>)
 800a98a:	1e0c      	subs	r4, r1, #0
 800a98c:	681d      	ldr	r5, [r3, #0]
 800a98e:	b09d      	sub	sp, #116	@ 0x74
 800a990:	da08      	bge.n	800a9a4 <sniprintf+0x20>
 800a992:	238b      	movs	r3, #139	@ 0x8b
 800a994:	602b      	str	r3, [r5, #0]
 800a996:	f04f 30ff 	mov.w	r0, #4294967295
 800a99a:	b01d      	add	sp, #116	@ 0x74
 800a99c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9a0:	b002      	add	sp, #8
 800a9a2:	4770      	bx	lr
 800a9a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a9a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a9ac:	f04f 0300 	mov.w	r3, #0
 800a9b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a9b2:	bf14      	ite	ne
 800a9b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a9b8:	4623      	moveq	r3, r4
 800a9ba:	9304      	str	r3, [sp, #16]
 800a9bc:	9307      	str	r3, [sp, #28]
 800a9be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a9c2:	9002      	str	r0, [sp, #8]
 800a9c4:	9006      	str	r0, [sp, #24]
 800a9c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a9ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a9cc:	ab21      	add	r3, sp, #132	@ 0x84
 800a9ce:	a902      	add	r1, sp, #8
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	9301      	str	r3, [sp, #4]
 800a9d4:	f001 fa20 	bl	800be18 <_svfiprintf_r>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	bfbc      	itt	lt
 800a9dc:	238b      	movlt	r3, #139	@ 0x8b
 800a9de:	602b      	strlt	r3, [r5, #0]
 800a9e0:	2c00      	cmp	r4, #0
 800a9e2:	d0da      	beq.n	800a99a <sniprintf+0x16>
 800a9e4:	9b02      	ldr	r3, [sp, #8]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	e7d6      	b.n	800a99a <sniprintf+0x16>
 800a9ec:	2000019c 	.word	0x2000019c

0800a9f0 <__sread>:
 800a9f0:	b510      	push	{r4, lr}
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f8:	f000 f8ee 	bl	800abd8 <_read_r>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	bfab      	itete	ge
 800aa00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa02:	89a3      	ldrhlt	r3, [r4, #12]
 800aa04:	181b      	addge	r3, r3, r0
 800aa06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa0a:	bfac      	ite	ge
 800aa0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa0e:	81a3      	strhlt	r3, [r4, #12]
 800aa10:	bd10      	pop	{r4, pc}

0800aa12 <__swrite>:
 800aa12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa16:	461f      	mov	r7, r3
 800aa18:	898b      	ldrh	r3, [r1, #12]
 800aa1a:	05db      	lsls	r3, r3, #23
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	460c      	mov	r4, r1
 800aa20:	4616      	mov	r6, r2
 800aa22:	d505      	bpl.n	800aa30 <__swrite+0x1e>
 800aa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa28:	2302      	movs	r3, #2
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f000 f8c2 	bl	800abb4 <_lseek_r>
 800aa30:	89a3      	ldrh	r3, [r4, #12]
 800aa32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa3a:	81a3      	strh	r3, [r4, #12]
 800aa3c:	4632      	mov	r2, r6
 800aa3e:	463b      	mov	r3, r7
 800aa40:	4628      	mov	r0, r5
 800aa42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa46:	f000 b8e9 	b.w	800ac1c <_write_r>

0800aa4a <__sseek>:
 800aa4a:	b510      	push	{r4, lr}
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa52:	f000 f8af 	bl	800abb4 <_lseek_r>
 800aa56:	1c43      	adds	r3, r0, #1
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	bf15      	itete	ne
 800aa5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa66:	81a3      	strheq	r3, [r4, #12]
 800aa68:	bf18      	it	ne
 800aa6a:	81a3      	strhne	r3, [r4, #12]
 800aa6c:	bd10      	pop	{r4, pc}

0800aa6e <__sclose>:
 800aa6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa72:	f000 b88f 	b.w	800ab94 <_close_r>

0800aa76 <memset>:
 800aa76:	4402      	add	r2, r0
 800aa78:	4603      	mov	r3, r0
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d100      	bne.n	800aa80 <memset+0xa>
 800aa7e:	4770      	bx	lr
 800aa80:	f803 1b01 	strb.w	r1, [r3], #1
 800aa84:	e7f9      	b.n	800aa7a <memset+0x4>

0800aa86 <strchr>:
 800aa86:	b2c9      	uxtb	r1, r1
 800aa88:	4603      	mov	r3, r0
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa90:	b112      	cbz	r2, 800aa98 <strchr+0x12>
 800aa92:	428a      	cmp	r2, r1
 800aa94:	d1f9      	bne.n	800aa8a <strchr+0x4>
 800aa96:	4770      	bx	lr
 800aa98:	2900      	cmp	r1, #0
 800aa9a:	bf18      	it	ne
 800aa9c:	2000      	movne	r0, #0
 800aa9e:	4770      	bx	lr

0800aaa0 <strncat>:
 800aaa0:	b530      	push	{r4, r5, lr}
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	7825      	ldrb	r5, [r4, #0]
 800aaa6:	4623      	mov	r3, r4
 800aaa8:	3401      	adds	r4, #1
 800aaaa:	2d00      	cmp	r5, #0
 800aaac:	d1fa      	bne.n	800aaa4 <strncat+0x4>
 800aaae:	3a01      	subs	r2, #1
 800aab0:	d304      	bcc.n	800aabc <strncat+0x1c>
 800aab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aab6:	f803 4b01 	strb.w	r4, [r3], #1
 800aaba:	b904      	cbnz	r4, 800aabe <strncat+0x1e>
 800aabc:	bd30      	pop	{r4, r5, pc}
 800aabe:	2a00      	cmp	r2, #0
 800aac0:	d1f5      	bne.n	800aaae <strncat+0xe>
 800aac2:	701a      	strb	r2, [r3, #0]
 800aac4:	e7f3      	b.n	800aaae <strncat+0xe>

0800aac6 <strncmp>:
 800aac6:	b510      	push	{r4, lr}
 800aac8:	b16a      	cbz	r2, 800aae6 <strncmp+0x20>
 800aaca:	3901      	subs	r1, #1
 800aacc:	1884      	adds	r4, r0, r2
 800aace:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aad2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d103      	bne.n	800aae2 <strncmp+0x1c>
 800aada:	42a0      	cmp	r0, r4
 800aadc:	d001      	beq.n	800aae2 <strncmp+0x1c>
 800aade:	2a00      	cmp	r2, #0
 800aae0:	d1f5      	bne.n	800aace <strncmp+0x8>
 800aae2:	1ad0      	subs	r0, r2, r3
 800aae4:	bd10      	pop	{r4, pc}
 800aae6:	4610      	mov	r0, r2
 800aae8:	e7fc      	b.n	800aae4 <strncmp+0x1e>

0800aaea <strncpy>:
 800aaea:	b510      	push	{r4, lr}
 800aaec:	3901      	subs	r1, #1
 800aaee:	4603      	mov	r3, r0
 800aaf0:	b132      	cbz	r2, 800ab00 <strncpy+0x16>
 800aaf2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aaf6:	f803 4b01 	strb.w	r4, [r3], #1
 800aafa:	3a01      	subs	r2, #1
 800aafc:	2c00      	cmp	r4, #0
 800aafe:	d1f7      	bne.n	800aaf0 <strncpy+0x6>
 800ab00:	441a      	add	r2, r3
 800ab02:	2100      	movs	r1, #0
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d100      	bne.n	800ab0a <strncpy+0x20>
 800ab08:	bd10      	pop	{r4, pc}
 800ab0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab0e:	e7f9      	b.n	800ab04 <strncpy+0x1a>

0800ab10 <strrchr>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800ab16:	4603      	mov	r3, r0
 800ab18:	d10e      	bne.n	800ab38 <strrchr+0x28>
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab20:	f7ff bfb1 	b.w	800aa86 <strchr>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	4605      	mov	r5, r0
 800ab28:	4621      	mov	r1, r4
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff ffab 	bl	800aa86 <strchr>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d1f7      	bne.n	800ab24 <strrchr+0x14>
 800ab34:	4628      	mov	r0, r5
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
 800ab38:	2500      	movs	r5, #0
 800ab3a:	e7f5      	b.n	800ab28 <strrchr+0x18>

0800ab3c <__strtok_r>:
 800ab3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab3e:	4604      	mov	r4, r0
 800ab40:	b908      	cbnz	r0, 800ab46 <__strtok_r+0xa>
 800ab42:	6814      	ldr	r4, [r2, #0]
 800ab44:	b144      	cbz	r4, 800ab58 <__strtok_r+0x1c>
 800ab46:	4620      	mov	r0, r4
 800ab48:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ab4c:	460f      	mov	r7, r1
 800ab4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ab52:	b91e      	cbnz	r6, 800ab5c <__strtok_r+0x20>
 800ab54:	b965      	cbnz	r5, 800ab70 <__strtok_r+0x34>
 800ab56:	6015      	str	r5, [r2, #0]
 800ab58:	2000      	movs	r0, #0
 800ab5a:	e005      	b.n	800ab68 <__strtok_r+0x2c>
 800ab5c:	42b5      	cmp	r5, r6
 800ab5e:	d1f6      	bne.n	800ab4e <__strtok_r+0x12>
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1f0      	bne.n	800ab46 <__strtok_r+0xa>
 800ab64:	6014      	str	r4, [r2, #0]
 800ab66:	7003      	strb	r3, [r0, #0]
 800ab68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab6a:	461c      	mov	r4, r3
 800ab6c:	e00c      	b.n	800ab88 <__strtok_r+0x4c>
 800ab6e:	b91d      	cbnz	r5, 800ab78 <__strtok_r+0x3c>
 800ab70:	4627      	mov	r7, r4
 800ab72:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab76:	460e      	mov	r6, r1
 800ab78:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ab7c:	42ab      	cmp	r3, r5
 800ab7e:	d1f6      	bne.n	800ab6e <__strtok_r+0x32>
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d0f2      	beq.n	800ab6a <__strtok_r+0x2e>
 800ab84:	2300      	movs	r3, #0
 800ab86:	703b      	strb	r3, [r7, #0]
 800ab88:	6014      	str	r4, [r2, #0]
 800ab8a:	e7ed      	b.n	800ab68 <__strtok_r+0x2c>

0800ab8c <strtok_r>:
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	f7ff bfd5 	b.w	800ab3c <__strtok_r>
	...

0800ab94 <_close_r>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	4d06      	ldr	r5, [pc, #24]	@ (800abb0 <_close_r+0x1c>)
 800ab98:	2300      	movs	r3, #0
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	602b      	str	r3, [r5, #0]
 800aba0:	f7f7 ff38 	bl	8002a14 <_close>
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d102      	bne.n	800abae <_close_r+0x1a>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	b103      	cbz	r3, 800abae <_close_r+0x1a>
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	bd38      	pop	{r3, r4, r5, pc}
 800abb0:	20004fd0 	.word	0x20004fd0

0800abb4 <_lseek_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4d07      	ldr	r5, [pc, #28]	@ (800abd4 <_lseek_r+0x20>)
 800abb8:	4604      	mov	r4, r0
 800abba:	4608      	mov	r0, r1
 800abbc:	4611      	mov	r1, r2
 800abbe:	2200      	movs	r2, #0
 800abc0:	602a      	str	r2, [r5, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	f7f7 ff4d 	bl	8002a62 <_lseek>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d102      	bne.n	800abd2 <_lseek_r+0x1e>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	b103      	cbz	r3, 800abd2 <_lseek_r+0x1e>
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	20004fd0 	.word	0x20004fd0

0800abd8 <_read_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4d07      	ldr	r5, [pc, #28]	@ (800abf8 <_read_r+0x20>)
 800abdc:	4604      	mov	r4, r0
 800abde:	4608      	mov	r0, r1
 800abe0:	4611      	mov	r1, r2
 800abe2:	2200      	movs	r2, #0
 800abe4:	602a      	str	r2, [r5, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	f7f7 fedb 	bl	80029a2 <_read>
 800abec:	1c43      	adds	r3, r0, #1
 800abee:	d102      	bne.n	800abf6 <_read_r+0x1e>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	b103      	cbz	r3, 800abf6 <_read_r+0x1e>
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	bd38      	pop	{r3, r4, r5, pc}
 800abf8:	20004fd0 	.word	0x20004fd0

0800abfc <_sbrk_r>:
 800abfc:	b538      	push	{r3, r4, r5, lr}
 800abfe:	4d06      	ldr	r5, [pc, #24]	@ (800ac18 <_sbrk_r+0x1c>)
 800ac00:	2300      	movs	r3, #0
 800ac02:	4604      	mov	r4, r0
 800ac04:	4608      	mov	r0, r1
 800ac06:	602b      	str	r3, [r5, #0]
 800ac08:	f7f7 ff38 	bl	8002a7c <_sbrk>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	d102      	bne.n	800ac16 <_sbrk_r+0x1a>
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	b103      	cbz	r3, 800ac16 <_sbrk_r+0x1a>
 800ac14:	6023      	str	r3, [r4, #0]
 800ac16:	bd38      	pop	{r3, r4, r5, pc}
 800ac18:	20004fd0 	.word	0x20004fd0

0800ac1c <_write_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4d07      	ldr	r5, [pc, #28]	@ (800ac3c <_write_r+0x20>)
 800ac20:	4604      	mov	r4, r0
 800ac22:	4608      	mov	r0, r1
 800ac24:	4611      	mov	r1, r2
 800ac26:	2200      	movs	r2, #0
 800ac28:	602a      	str	r2, [r5, #0]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	f7f7 fed6 	bl	80029dc <_write>
 800ac30:	1c43      	adds	r3, r0, #1
 800ac32:	d102      	bne.n	800ac3a <_write_r+0x1e>
 800ac34:	682b      	ldr	r3, [r5, #0]
 800ac36:	b103      	cbz	r3, 800ac3a <_write_r+0x1e>
 800ac38:	6023      	str	r3, [r4, #0]
 800ac3a:	bd38      	pop	{r3, r4, r5, pc}
 800ac3c:	20004fd0 	.word	0x20004fd0

0800ac40 <__errno>:
 800ac40:	4b01      	ldr	r3, [pc, #4]	@ (800ac48 <__errno+0x8>)
 800ac42:	6818      	ldr	r0, [r3, #0]
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	2000019c 	.word	0x2000019c

0800ac4c <__libc_init_array>:
 800ac4c:	b570      	push	{r4, r5, r6, lr}
 800ac4e:	4d0d      	ldr	r5, [pc, #52]	@ (800ac84 <__libc_init_array+0x38>)
 800ac50:	4c0d      	ldr	r4, [pc, #52]	@ (800ac88 <__libc_init_array+0x3c>)
 800ac52:	1b64      	subs	r4, r4, r5
 800ac54:	10a4      	asrs	r4, r4, #2
 800ac56:	2600      	movs	r6, #0
 800ac58:	42a6      	cmp	r6, r4
 800ac5a:	d109      	bne.n	800ac70 <__libc_init_array+0x24>
 800ac5c:	4d0b      	ldr	r5, [pc, #44]	@ (800ac8c <__libc_init_array+0x40>)
 800ac5e:	4c0c      	ldr	r4, [pc, #48]	@ (800ac90 <__libc_init_array+0x44>)
 800ac60:	f001 ff32 	bl	800cac8 <_init>
 800ac64:	1b64      	subs	r4, r4, r5
 800ac66:	10a4      	asrs	r4, r4, #2
 800ac68:	2600      	movs	r6, #0
 800ac6a:	42a6      	cmp	r6, r4
 800ac6c:	d105      	bne.n	800ac7a <__libc_init_array+0x2e>
 800ac6e:	bd70      	pop	{r4, r5, r6, pc}
 800ac70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac74:	4798      	blx	r3
 800ac76:	3601      	adds	r6, #1
 800ac78:	e7ee      	b.n	800ac58 <__libc_init_array+0xc>
 800ac7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac7e:	4798      	blx	r3
 800ac80:	3601      	adds	r6, #1
 800ac82:	e7f2      	b.n	800ac6a <__libc_init_array+0x1e>
 800ac84:	0800d3b0 	.word	0x0800d3b0
 800ac88:	0800d3b0 	.word	0x0800d3b0
 800ac8c:	0800d3b0 	.word	0x0800d3b0
 800ac90:	0800d3b4 	.word	0x0800d3b4

0800ac94 <__retarget_lock_init_recursive>:
 800ac94:	4770      	bx	lr

0800ac96 <__retarget_lock_acquire_recursive>:
 800ac96:	4770      	bx	lr

0800ac98 <__retarget_lock_release_recursive>:
 800ac98:	4770      	bx	lr

0800ac9a <memcpy>:
 800ac9a:	440a      	add	r2, r1
 800ac9c:	4291      	cmp	r1, r2
 800ac9e:	f100 33ff 	add.w	r3, r0, #4294967295
 800aca2:	d100      	bne.n	800aca6 <memcpy+0xc>
 800aca4:	4770      	bx	lr
 800aca6:	b510      	push	{r4, lr}
 800aca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acb0:	4291      	cmp	r1, r2
 800acb2:	d1f9      	bne.n	800aca8 <memcpy+0xe>
 800acb4:	bd10      	pop	{r4, pc}
	...

0800acb8 <nan>:
 800acb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800acc0 <nan+0x8>
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	00000000 	.word	0x00000000
 800acc4:	7ff80000 	.word	0x7ff80000

0800acc8 <_free_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4605      	mov	r5, r0
 800accc:	2900      	cmp	r1, #0
 800acce:	d041      	beq.n	800ad54 <_free_r+0x8c>
 800acd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acd4:	1f0c      	subs	r4, r1, #4
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	bfb8      	it	lt
 800acda:	18e4      	addlt	r4, r4, r3
 800acdc:	f7fe fef2 	bl	8009ac4 <__malloc_lock>
 800ace0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad58 <_free_r+0x90>)
 800ace2:	6813      	ldr	r3, [r2, #0]
 800ace4:	b933      	cbnz	r3, 800acf4 <_free_r+0x2c>
 800ace6:	6063      	str	r3, [r4, #4]
 800ace8:	6014      	str	r4, [r2, #0]
 800acea:	4628      	mov	r0, r5
 800acec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acf0:	f7fe beee 	b.w	8009ad0 <__malloc_unlock>
 800acf4:	42a3      	cmp	r3, r4
 800acf6:	d908      	bls.n	800ad0a <_free_r+0x42>
 800acf8:	6820      	ldr	r0, [r4, #0]
 800acfa:	1821      	adds	r1, r4, r0
 800acfc:	428b      	cmp	r3, r1
 800acfe:	bf01      	itttt	eq
 800ad00:	6819      	ldreq	r1, [r3, #0]
 800ad02:	685b      	ldreq	r3, [r3, #4]
 800ad04:	1809      	addeq	r1, r1, r0
 800ad06:	6021      	streq	r1, [r4, #0]
 800ad08:	e7ed      	b.n	800ace6 <_free_r+0x1e>
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	b10b      	cbz	r3, 800ad14 <_free_r+0x4c>
 800ad10:	42a3      	cmp	r3, r4
 800ad12:	d9fa      	bls.n	800ad0a <_free_r+0x42>
 800ad14:	6811      	ldr	r1, [r2, #0]
 800ad16:	1850      	adds	r0, r2, r1
 800ad18:	42a0      	cmp	r0, r4
 800ad1a:	d10b      	bne.n	800ad34 <_free_r+0x6c>
 800ad1c:	6820      	ldr	r0, [r4, #0]
 800ad1e:	4401      	add	r1, r0
 800ad20:	1850      	adds	r0, r2, r1
 800ad22:	4283      	cmp	r3, r0
 800ad24:	6011      	str	r1, [r2, #0]
 800ad26:	d1e0      	bne.n	800acea <_free_r+0x22>
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	6053      	str	r3, [r2, #4]
 800ad2e:	4408      	add	r0, r1
 800ad30:	6010      	str	r0, [r2, #0]
 800ad32:	e7da      	b.n	800acea <_free_r+0x22>
 800ad34:	d902      	bls.n	800ad3c <_free_r+0x74>
 800ad36:	230c      	movs	r3, #12
 800ad38:	602b      	str	r3, [r5, #0]
 800ad3a:	e7d6      	b.n	800acea <_free_r+0x22>
 800ad3c:	6820      	ldr	r0, [r4, #0]
 800ad3e:	1821      	adds	r1, r4, r0
 800ad40:	428b      	cmp	r3, r1
 800ad42:	bf04      	itt	eq
 800ad44:	6819      	ldreq	r1, [r3, #0]
 800ad46:	685b      	ldreq	r3, [r3, #4]
 800ad48:	6063      	str	r3, [r4, #4]
 800ad4a:	bf04      	itt	eq
 800ad4c:	1809      	addeq	r1, r1, r0
 800ad4e:	6021      	streq	r1, [r4, #0]
 800ad50:	6054      	str	r4, [r2, #4]
 800ad52:	e7ca      	b.n	800acea <_free_r+0x22>
 800ad54:	bd38      	pop	{r3, r4, r5, pc}
 800ad56:	bf00      	nop
 800ad58:	20004e90 	.word	0x20004e90

0800ad5c <rshift>:
 800ad5c:	6903      	ldr	r3, [r0, #16]
 800ad5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ad62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad66:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ad6a:	f100 0414 	add.w	r4, r0, #20
 800ad6e:	dd45      	ble.n	800adfc <rshift+0xa0>
 800ad70:	f011 011f 	ands.w	r1, r1, #31
 800ad74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ad78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ad7c:	d10c      	bne.n	800ad98 <rshift+0x3c>
 800ad7e:	f100 0710 	add.w	r7, r0, #16
 800ad82:	4629      	mov	r1, r5
 800ad84:	42b1      	cmp	r1, r6
 800ad86:	d334      	bcc.n	800adf2 <rshift+0x96>
 800ad88:	1a9b      	subs	r3, r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	1eea      	subs	r2, r5, #3
 800ad8e:	4296      	cmp	r6, r2
 800ad90:	bf38      	it	cc
 800ad92:	2300      	movcc	r3, #0
 800ad94:	4423      	add	r3, r4
 800ad96:	e015      	b.n	800adc4 <rshift+0x68>
 800ad98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ad9c:	f1c1 0820 	rsb	r8, r1, #32
 800ada0:	40cf      	lsrs	r7, r1
 800ada2:	f105 0e04 	add.w	lr, r5, #4
 800ada6:	46a1      	mov	r9, r4
 800ada8:	4576      	cmp	r6, lr
 800adaa:	46f4      	mov	ip, lr
 800adac:	d815      	bhi.n	800adda <rshift+0x7e>
 800adae:	1a9a      	subs	r2, r3, r2
 800adb0:	0092      	lsls	r2, r2, #2
 800adb2:	3a04      	subs	r2, #4
 800adb4:	3501      	adds	r5, #1
 800adb6:	42ae      	cmp	r6, r5
 800adb8:	bf38      	it	cc
 800adba:	2200      	movcc	r2, #0
 800adbc:	18a3      	adds	r3, r4, r2
 800adbe:	50a7      	str	r7, [r4, r2]
 800adc0:	b107      	cbz	r7, 800adc4 <rshift+0x68>
 800adc2:	3304      	adds	r3, #4
 800adc4:	1b1a      	subs	r2, r3, r4
 800adc6:	42a3      	cmp	r3, r4
 800adc8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800adcc:	bf08      	it	eq
 800adce:	2300      	moveq	r3, #0
 800add0:	6102      	str	r2, [r0, #16]
 800add2:	bf08      	it	eq
 800add4:	6143      	streq	r3, [r0, #20]
 800add6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adda:	f8dc c000 	ldr.w	ip, [ip]
 800adde:	fa0c fc08 	lsl.w	ip, ip, r8
 800ade2:	ea4c 0707 	orr.w	r7, ip, r7
 800ade6:	f849 7b04 	str.w	r7, [r9], #4
 800adea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800adee:	40cf      	lsrs	r7, r1
 800adf0:	e7da      	b.n	800ada8 <rshift+0x4c>
 800adf2:	f851 cb04 	ldr.w	ip, [r1], #4
 800adf6:	f847 cf04 	str.w	ip, [r7, #4]!
 800adfa:	e7c3      	b.n	800ad84 <rshift+0x28>
 800adfc:	4623      	mov	r3, r4
 800adfe:	e7e1      	b.n	800adc4 <rshift+0x68>

0800ae00 <__hexdig_fun>:
 800ae00:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ae04:	2b09      	cmp	r3, #9
 800ae06:	d802      	bhi.n	800ae0e <__hexdig_fun+0xe>
 800ae08:	3820      	subs	r0, #32
 800ae0a:	b2c0      	uxtb	r0, r0
 800ae0c:	4770      	bx	lr
 800ae0e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ae12:	2b05      	cmp	r3, #5
 800ae14:	d801      	bhi.n	800ae1a <__hexdig_fun+0x1a>
 800ae16:	3847      	subs	r0, #71	@ 0x47
 800ae18:	e7f7      	b.n	800ae0a <__hexdig_fun+0xa>
 800ae1a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ae1e:	2b05      	cmp	r3, #5
 800ae20:	d801      	bhi.n	800ae26 <__hexdig_fun+0x26>
 800ae22:	3827      	subs	r0, #39	@ 0x27
 800ae24:	e7f1      	b.n	800ae0a <__hexdig_fun+0xa>
 800ae26:	2000      	movs	r0, #0
 800ae28:	4770      	bx	lr
	...

0800ae2c <__gethex>:
 800ae2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae30:	b085      	sub	sp, #20
 800ae32:	468a      	mov	sl, r1
 800ae34:	9302      	str	r3, [sp, #8]
 800ae36:	680b      	ldr	r3, [r1, #0]
 800ae38:	9001      	str	r0, [sp, #4]
 800ae3a:	4690      	mov	r8, r2
 800ae3c:	1c9c      	adds	r4, r3, #2
 800ae3e:	46a1      	mov	r9, r4
 800ae40:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ae44:	2830      	cmp	r0, #48	@ 0x30
 800ae46:	d0fa      	beq.n	800ae3e <__gethex+0x12>
 800ae48:	eba9 0303 	sub.w	r3, r9, r3
 800ae4c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ae50:	f7ff ffd6 	bl	800ae00 <__hexdig_fun>
 800ae54:	4605      	mov	r5, r0
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d168      	bne.n	800af2c <__gethex+0x100>
 800ae5a:	49a0      	ldr	r1, [pc, #640]	@ (800b0dc <__gethex+0x2b0>)
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	4648      	mov	r0, r9
 800ae60:	f7ff fe31 	bl	800aac6 <strncmp>
 800ae64:	4607      	mov	r7, r0
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d167      	bne.n	800af3a <__gethex+0x10e>
 800ae6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ae6e:	4626      	mov	r6, r4
 800ae70:	f7ff ffc6 	bl	800ae00 <__hexdig_fun>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d062      	beq.n	800af3e <__gethex+0x112>
 800ae78:	4623      	mov	r3, r4
 800ae7a:	7818      	ldrb	r0, [r3, #0]
 800ae7c:	2830      	cmp	r0, #48	@ 0x30
 800ae7e:	4699      	mov	r9, r3
 800ae80:	f103 0301 	add.w	r3, r3, #1
 800ae84:	d0f9      	beq.n	800ae7a <__gethex+0x4e>
 800ae86:	f7ff ffbb 	bl	800ae00 <__hexdig_fun>
 800ae8a:	fab0 f580 	clz	r5, r0
 800ae8e:	096d      	lsrs	r5, r5, #5
 800ae90:	f04f 0b01 	mov.w	fp, #1
 800ae94:	464a      	mov	r2, r9
 800ae96:	4616      	mov	r6, r2
 800ae98:	3201      	adds	r2, #1
 800ae9a:	7830      	ldrb	r0, [r6, #0]
 800ae9c:	f7ff ffb0 	bl	800ae00 <__hexdig_fun>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d1f8      	bne.n	800ae96 <__gethex+0x6a>
 800aea4:	498d      	ldr	r1, [pc, #564]	@ (800b0dc <__gethex+0x2b0>)
 800aea6:	2201      	movs	r2, #1
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f7ff fe0c 	bl	800aac6 <strncmp>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d13f      	bne.n	800af32 <__gethex+0x106>
 800aeb2:	b944      	cbnz	r4, 800aec6 <__gethex+0x9a>
 800aeb4:	1c74      	adds	r4, r6, #1
 800aeb6:	4622      	mov	r2, r4
 800aeb8:	4616      	mov	r6, r2
 800aeba:	3201      	adds	r2, #1
 800aebc:	7830      	ldrb	r0, [r6, #0]
 800aebe:	f7ff ff9f 	bl	800ae00 <__hexdig_fun>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d1f8      	bne.n	800aeb8 <__gethex+0x8c>
 800aec6:	1ba4      	subs	r4, r4, r6
 800aec8:	00a7      	lsls	r7, r4, #2
 800aeca:	7833      	ldrb	r3, [r6, #0]
 800aecc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aed0:	2b50      	cmp	r3, #80	@ 0x50
 800aed2:	d13e      	bne.n	800af52 <__gethex+0x126>
 800aed4:	7873      	ldrb	r3, [r6, #1]
 800aed6:	2b2b      	cmp	r3, #43	@ 0x2b
 800aed8:	d033      	beq.n	800af42 <__gethex+0x116>
 800aeda:	2b2d      	cmp	r3, #45	@ 0x2d
 800aedc:	d034      	beq.n	800af48 <__gethex+0x11c>
 800aede:	1c71      	adds	r1, r6, #1
 800aee0:	2400      	movs	r4, #0
 800aee2:	7808      	ldrb	r0, [r1, #0]
 800aee4:	f7ff ff8c 	bl	800ae00 <__hexdig_fun>
 800aee8:	1e43      	subs	r3, r0, #1
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	2b18      	cmp	r3, #24
 800aeee:	d830      	bhi.n	800af52 <__gethex+0x126>
 800aef0:	f1a0 0210 	sub.w	r2, r0, #16
 800aef4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aef8:	f7ff ff82 	bl	800ae00 <__hexdig_fun>
 800aefc:	f100 3cff 	add.w	ip, r0, #4294967295
 800af00:	fa5f fc8c 	uxtb.w	ip, ip
 800af04:	f1bc 0f18 	cmp.w	ip, #24
 800af08:	f04f 030a 	mov.w	r3, #10
 800af0c:	d91e      	bls.n	800af4c <__gethex+0x120>
 800af0e:	b104      	cbz	r4, 800af12 <__gethex+0xe6>
 800af10:	4252      	negs	r2, r2
 800af12:	4417      	add	r7, r2
 800af14:	f8ca 1000 	str.w	r1, [sl]
 800af18:	b1ed      	cbz	r5, 800af56 <__gethex+0x12a>
 800af1a:	f1bb 0f00 	cmp.w	fp, #0
 800af1e:	bf0c      	ite	eq
 800af20:	2506      	moveq	r5, #6
 800af22:	2500      	movne	r5, #0
 800af24:	4628      	mov	r0, r5
 800af26:	b005      	add	sp, #20
 800af28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2c:	2500      	movs	r5, #0
 800af2e:	462c      	mov	r4, r5
 800af30:	e7b0      	b.n	800ae94 <__gethex+0x68>
 800af32:	2c00      	cmp	r4, #0
 800af34:	d1c7      	bne.n	800aec6 <__gethex+0x9a>
 800af36:	4627      	mov	r7, r4
 800af38:	e7c7      	b.n	800aeca <__gethex+0x9e>
 800af3a:	464e      	mov	r6, r9
 800af3c:	462f      	mov	r7, r5
 800af3e:	2501      	movs	r5, #1
 800af40:	e7c3      	b.n	800aeca <__gethex+0x9e>
 800af42:	2400      	movs	r4, #0
 800af44:	1cb1      	adds	r1, r6, #2
 800af46:	e7cc      	b.n	800aee2 <__gethex+0xb6>
 800af48:	2401      	movs	r4, #1
 800af4a:	e7fb      	b.n	800af44 <__gethex+0x118>
 800af4c:	fb03 0002 	mla	r0, r3, r2, r0
 800af50:	e7ce      	b.n	800aef0 <__gethex+0xc4>
 800af52:	4631      	mov	r1, r6
 800af54:	e7de      	b.n	800af14 <__gethex+0xe8>
 800af56:	eba6 0309 	sub.w	r3, r6, r9
 800af5a:	3b01      	subs	r3, #1
 800af5c:	4629      	mov	r1, r5
 800af5e:	2b07      	cmp	r3, #7
 800af60:	dc0a      	bgt.n	800af78 <__gethex+0x14c>
 800af62:	9801      	ldr	r0, [sp, #4]
 800af64:	f000 fa46 	bl	800b3f4 <_Balloc>
 800af68:	4604      	mov	r4, r0
 800af6a:	b940      	cbnz	r0, 800af7e <__gethex+0x152>
 800af6c:	4b5c      	ldr	r3, [pc, #368]	@ (800b0e0 <__gethex+0x2b4>)
 800af6e:	4602      	mov	r2, r0
 800af70:	21e4      	movs	r1, #228	@ 0xe4
 800af72:	485c      	ldr	r0, [pc, #368]	@ (800b0e4 <__gethex+0x2b8>)
 800af74:	f001 fa9e 	bl	800c4b4 <__assert_func>
 800af78:	3101      	adds	r1, #1
 800af7a:	105b      	asrs	r3, r3, #1
 800af7c:	e7ef      	b.n	800af5e <__gethex+0x132>
 800af7e:	f100 0a14 	add.w	sl, r0, #20
 800af82:	2300      	movs	r3, #0
 800af84:	4655      	mov	r5, sl
 800af86:	469b      	mov	fp, r3
 800af88:	45b1      	cmp	r9, r6
 800af8a:	d337      	bcc.n	800affc <__gethex+0x1d0>
 800af8c:	f845 bb04 	str.w	fp, [r5], #4
 800af90:	eba5 050a 	sub.w	r5, r5, sl
 800af94:	10ad      	asrs	r5, r5, #2
 800af96:	6125      	str	r5, [r4, #16]
 800af98:	4658      	mov	r0, fp
 800af9a:	f000 fb1d 	bl	800b5d8 <__hi0bits>
 800af9e:	016d      	lsls	r5, r5, #5
 800afa0:	f8d8 6000 	ldr.w	r6, [r8]
 800afa4:	1a2d      	subs	r5, r5, r0
 800afa6:	42b5      	cmp	r5, r6
 800afa8:	dd54      	ble.n	800b054 <__gethex+0x228>
 800afaa:	1bad      	subs	r5, r5, r6
 800afac:	4629      	mov	r1, r5
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 fea9 	bl	800bd06 <__any_on>
 800afb4:	4681      	mov	r9, r0
 800afb6:	b178      	cbz	r0, 800afd8 <__gethex+0x1ac>
 800afb8:	1e6b      	subs	r3, r5, #1
 800afba:	1159      	asrs	r1, r3, #5
 800afbc:	f003 021f 	and.w	r2, r3, #31
 800afc0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800afc4:	f04f 0901 	mov.w	r9, #1
 800afc8:	fa09 f202 	lsl.w	r2, r9, r2
 800afcc:	420a      	tst	r2, r1
 800afce:	d003      	beq.n	800afd8 <__gethex+0x1ac>
 800afd0:	454b      	cmp	r3, r9
 800afd2:	dc36      	bgt.n	800b042 <__gethex+0x216>
 800afd4:	f04f 0902 	mov.w	r9, #2
 800afd8:	4629      	mov	r1, r5
 800afda:	4620      	mov	r0, r4
 800afdc:	f7ff febe 	bl	800ad5c <rshift>
 800afe0:	442f      	add	r7, r5
 800afe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afe6:	42bb      	cmp	r3, r7
 800afe8:	da42      	bge.n	800b070 <__gethex+0x244>
 800afea:	9801      	ldr	r0, [sp, #4]
 800afec:	4621      	mov	r1, r4
 800afee:	f000 fa41 	bl	800b474 <_Bfree>
 800aff2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aff4:	2300      	movs	r3, #0
 800aff6:	6013      	str	r3, [r2, #0]
 800aff8:	25a3      	movs	r5, #163	@ 0xa3
 800affa:	e793      	b.n	800af24 <__gethex+0xf8>
 800affc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b000:	2a2e      	cmp	r2, #46	@ 0x2e
 800b002:	d012      	beq.n	800b02a <__gethex+0x1fe>
 800b004:	2b20      	cmp	r3, #32
 800b006:	d104      	bne.n	800b012 <__gethex+0x1e6>
 800b008:	f845 bb04 	str.w	fp, [r5], #4
 800b00c:	f04f 0b00 	mov.w	fp, #0
 800b010:	465b      	mov	r3, fp
 800b012:	7830      	ldrb	r0, [r6, #0]
 800b014:	9303      	str	r3, [sp, #12]
 800b016:	f7ff fef3 	bl	800ae00 <__hexdig_fun>
 800b01a:	9b03      	ldr	r3, [sp, #12]
 800b01c:	f000 000f 	and.w	r0, r0, #15
 800b020:	4098      	lsls	r0, r3
 800b022:	ea4b 0b00 	orr.w	fp, fp, r0
 800b026:	3304      	adds	r3, #4
 800b028:	e7ae      	b.n	800af88 <__gethex+0x15c>
 800b02a:	45b1      	cmp	r9, r6
 800b02c:	d8ea      	bhi.n	800b004 <__gethex+0x1d8>
 800b02e:	492b      	ldr	r1, [pc, #172]	@ (800b0dc <__gethex+0x2b0>)
 800b030:	9303      	str	r3, [sp, #12]
 800b032:	2201      	movs	r2, #1
 800b034:	4630      	mov	r0, r6
 800b036:	f7ff fd46 	bl	800aac6 <strncmp>
 800b03a:	9b03      	ldr	r3, [sp, #12]
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d1e1      	bne.n	800b004 <__gethex+0x1d8>
 800b040:	e7a2      	b.n	800af88 <__gethex+0x15c>
 800b042:	1ea9      	subs	r1, r5, #2
 800b044:	4620      	mov	r0, r4
 800b046:	f000 fe5e 	bl	800bd06 <__any_on>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d0c2      	beq.n	800afd4 <__gethex+0x1a8>
 800b04e:	f04f 0903 	mov.w	r9, #3
 800b052:	e7c1      	b.n	800afd8 <__gethex+0x1ac>
 800b054:	da09      	bge.n	800b06a <__gethex+0x23e>
 800b056:	1b75      	subs	r5, r6, r5
 800b058:	4621      	mov	r1, r4
 800b05a:	9801      	ldr	r0, [sp, #4]
 800b05c:	462a      	mov	r2, r5
 800b05e:	f000 fc19 	bl	800b894 <__lshift>
 800b062:	1b7f      	subs	r7, r7, r5
 800b064:	4604      	mov	r4, r0
 800b066:	f100 0a14 	add.w	sl, r0, #20
 800b06a:	f04f 0900 	mov.w	r9, #0
 800b06e:	e7b8      	b.n	800afe2 <__gethex+0x1b6>
 800b070:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b074:	42bd      	cmp	r5, r7
 800b076:	dd6f      	ble.n	800b158 <__gethex+0x32c>
 800b078:	1bed      	subs	r5, r5, r7
 800b07a:	42ae      	cmp	r6, r5
 800b07c:	dc34      	bgt.n	800b0e8 <__gethex+0x2bc>
 800b07e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b082:	2b02      	cmp	r3, #2
 800b084:	d022      	beq.n	800b0cc <__gethex+0x2a0>
 800b086:	2b03      	cmp	r3, #3
 800b088:	d024      	beq.n	800b0d4 <__gethex+0x2a8>
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d115      	bne.n	800b0ba <__gethex+0x28e>
 800b08e:	42ae      	cmp	r6, r5
 800b090:	d113      	bne.n	800b0ba <__gethex+0x28e>
 800b092:	2e01      	cmp	r6, #1
 800b094:	d10b      	bne.n	800b0ae <__gethex+0x282>
 800b096:	9a02      	ldr	r2, [sp, #8]
 800b098:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	2301      	movs	r3, #1
 800b0a0:	6123      	str	r3, [r4, #16]
 800b0a2:	f8ca 3000 	str.w	r3, [sl]
 800b0a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0a8:	2562      	movs	r5, #98	@ 0x62
 800b0aa:	601c      	str	r4, [r3, #0]
 800b0ac:	e73a      	b.n	800af24 <__gethex+0xf8>
 800b0ae:	1e71      	subs	r1, r6, #1
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f000 fe28 	bl	800bd06 <__any_on>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d1ed      	bne.n	800b096 <__gethex+0x26a>
 800b0ba:	9801      	ldr	r0, [sp, #4]
 800b0bc:	4621      	mov	r1, r4
 800b0be:	f000 f9d9 	bl	800b474 <_Bfree>
 800b0c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	6013      	str	r3, [r2, #0]
 800b0c8:	2550      	movs	r5, #80	@ 0x50
 800b0ca:	e72b      	b.n	800af24 <__gethex+0xf8>
 800b0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1f3      	bne.n	800b0ba <__gethex+0x28e>
 800b0d2:	e7e0      	b.n	800b096 <__gethex+0x26a>
 800b0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1dd      	bne.n	800b096 <__gethex+0x26a>
 800b0da:	e7ee      	b.n	800b0ba <__gethex+0x28e>
 800b0dc:	0800cfec 	.word	0x0800cfec
 800b0e0:	0800d002 	.word	0x0800d002
 800b0e4:	0800d013 	.word	0x0800d013
 800b0e8:	1e6f      	subs	r7, r5, #1
 800b0ea:	f1b9 0f00 	cmp.w	r9, #0
 800b0ee:	d130      	bne.n	800b152 <__gethex+0x326>
 800b0f0:	b127      	cbz	r7, 800b0fc <__gethex+0x2d0>
 800b0f2:	4639      	mov	r1, r7
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f000 fe06 	bl	800bd06 <__any_on>
 800b0fa:	4681      	mov	r9, r0
 800b0fc:	117a      	asrs	r2, r7, #5
 800b0fe:	2301      	movs	r3, #1
 800b100:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b104:	f007 071f 	and.w	r7, r7, #31
 800b108:	40bb      	lsls	r3, r7
 800b10a:	4213      	tst	r3, r2
 800b10c:	4629      	mov	r1, r5
 800b10e:	4620      	mov	r0, r4
 800b110:	bf18      	it	ne
 800b112:	f049 0902 	orrne.w	r9, r9, #2
 800b116:	f7ff fe21 	bl	800ad5c <rshift>
 800b11a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b11e:	1b76      	subs	r6, r6, r5
 800b120:	2502      	movs	r5, #2
 800b122:	f1b9 0f00 	cmp.w	r9, #0
 800b126:	d047      	beq.n	800b1b8 <__gethex+0x38c>
 800b128:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b12c:	2b02      	cmp	r3, #2
 800b12e:	d015      	beq.n	800b15c <__gethex+0x330>
 800b130:	2b03      	cmp	r3, #3
 800b132:	d017      	beq.n	800b164 <__gethex+0x338>
 800b134:	2b01      	cmp	r3, #1
 800b136:	d109      	bne.n	800b14c <__gethex+0x320>
 800b138:	f019 0f02 	tst.w	r9, #2
 800b13c:	d006      	beq.n	800b14c <__gethex+0x320>
 800b13e:	f8da 3000 	ldr.w	r3, [sl]
 800b142:	ea49 0903 	orr.w	r9, r9, r3
 800b146:	f019 0f01 	tst.w	r9, #1
 800b14a:	d10e      	bne.n	800b16a <__gethex+0x33e>
 800b14c:	f045 0510 	orr.w	r5, r5, #16
 800b150:	e032      	b.n	800b1b8 <__gethex+0x38c>
 800b152:	f04f 0901 	mov.w	r9, #1
 800b156:	e7d1      	b.n	800b0fc <__gethex+0x2d0>
 800b158:	2501      	movs	r5, #1
 800b15a:	e7e2      	b.n	800b122 <__gethex+0x2f6>
 800b15c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b15e:	f1c3 0301 	rsb	r3, r3, #1
 800b162:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b166:	2b00      	cmp	r3, #0
 800b168:	d0f0      	beq.n	800b14c <__gethex+0x320>
 800b16a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b16e:	f104 0314 	add.w	r3, r4, #20
 800b172:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b176:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b17a:	f04f 0c00 	mov.w	ip, #0
 800b17e:	4618      	mov	r0, r3
 800b180:	f853 2b04 	ldr.w	r2, [r3], #4
 800b184:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b188:	d01b      	beq.n	800b1c2 <__gethex+0x396>
 800b18a:	3201      	adds	r2, #1
 800b18c:	6002      	str	r2, [r0, #0]
 800b18e:	2d02      	cmp	r5, #2
 800b190:	f104 0314 	add.w	r3, r4, #20
 800b194:	d13c      	bne.n	800b210 <__gethex+0x3e4>
 800b196:	f8d8 2000 	ldr.w	r2, [r8]
 800b19a:	3a01      	subs	r2, #1
 800b19c:	42b2      	cmp	r2, r6
 800b19e:	d109      	bne.n	800b1b4 <__gethex+0x388>
 800b1a0:	1171      	asrs	r1, r6, #5
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1a8:	f006 061f 	and.w	r6, r6, #31
 800b1ac:	fa02 f606 	lsl.w	r6, r2, r6
 800b1b0:	421e      	tst	r6, r3
 800b1b2:	d13a      	bne.n	800b22a <__gethex+0x3fe>
 800b1b4:	f045 0520 	orr.w	r5, r5, #32
 800b1b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ba:	601c      	str	r4, [r3, #0]
 800b1bc:	9b02      	ldr	r3, [sp, #8]
 800b1be:	601f      	str	r7, [r3, #0]
 800b1c0:	e6b0      	b.n	800af24 <__gethex+0xf8>
 800b1c2:	4299      	cmp	r1, r3
 800b1c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b1c8:	d8d9      	bhi.n	800b17e <__gethex+0x352>
 800b1ca:	68a3      	ldr	r3, [r4, #8]
 800b1cc:	459b      	cmp	fp, r3
 800b1ce:	db17      	blt.n	800b200 <__gethex+0x3d4>
 800b1d0:	6861      	ldr	r1, [r4, #4]
 800b1d2:	9801      	ldr	r0, [sp, #4]
 800b1d4:	3101      	adds	r1, #1
 800b1d6:	f000 f90d 	bl	800b3f4 <_Balloc>
 800b1da:	4681      	mov	r9, r0
 800b1dc:	b918      	cbnz	r0, 800b1e6 <__gethex+0x3ba>
 800b1de:	4b1a      	ldr	r3, [pc, #104]	@ (800b248 <__gethex+0x41c>)
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	2184      	movs	r1, #132	@ 0x84
 800b1e4:	e6c5      	b.n	800af72 <__gethex+0x146>
 800b1e6:	6922      	ldr	r2, [r4, #16]
 800b1e8:	3202      	adds	r2, #2
 800b1ea:	f104 010c 	add.w	r1, r4, #12
 800b1ee:	0092      	lsls	r2, r2, #2
 800b1f0:	300c      	adds	r0, #12
 800b1f2:	f7ff fd52 	bl	800ac9a <memcpy>
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	9801      	ldr	r0, [sp, #4]
 800b1fa:	f000 f93b 	bl	800b474 <_Bfree>
 800b1fe:	464c      	mov	r4, r9
 800b200:	6923      	ldr	r3, [r4, #16]
 800b202:	1c5a      	adds	r2, r3, #1
 800b204:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b208:	6122      	str	r2, [r4, #16]
 800b20a:	2201      	movs	r2, #1
 800b20c:	615a      	str	r2, [r3, #20]
 800b20e:	e7be      	b.n	800b18e <__gethex+0x362>
 800b210:	6922      	ldr	r2, [r4, #16]
 800b212:	455a      	cmp	r2, fp
 800b214:	dd0b      	ble.n	800b22e <__gethex+0x402>
 800b216:	2101      	movs	r1, #1
 800b218:	4620      	mov	r0, r4
 800b21a:	f7ff fd9f 	bl	800ad5c <rshift>
 800b21e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b222:	3701      	adds	r7, #1
 800b224:	42bb      	cmp	r3, r7
 800b226:	f6ff aee0 	blt.w	800afea <__gethex+0x1be>
 800b22a:	2501      	movs	r5, #1
 800b22c:	e7c2      	b.n	800b1b4 <__gethex+0x388>
 800b22e:	f016 061f 	ands.w	r6, r6, #31
 800b232:	d0fa      	beq.n	800b22a <__gethex+0x3fe>
 800b234:	4453      	add	r3, sl
 800b236:	f1c6 0620 	rsb	r6, r6, #32
 800b23a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b23e:	f000 f9cb 	bl	800b5d8 <__hi0bits>
 800b242:	42b0      	cmp	r0, r6
 800b244:	dbe7      	blt.n	800b216 <__gethex+0x3ea>
 800b246:	e7f0      	b.n	800b22a <__gethex+0x3fe>
 800b248:	0800d002 	.word	0x0800d002

0800b24c <L_shift>:
 800b24c:	f1c2 0208 	rsb	r2, r2, #8
 800b250:	0092      	lsls	r2, r2, #2
 800b252:	b570      	push	{r4, r5, r6, lr}
 800b254:	f1c2 0620 	rsb	r6, r2, #32
 800b258:	6843      	ldr	r3, [r0, #4]
 800b25a:	6804      	ldr	r4, [r0, #0]
 800b25c:	fa03 f506 	lsl.w	r5, r3, r6
 800b260:	432c      	orrs	r4, r5
 800b262:	40d3      	lsrs	r3, r2
 800b264:	6004      	str	r4, [r0, #0]
 800b266:	f840 3f04 	str.w	r3, [r0, #4]!
 800b26a:	4288      	cmp	r0, r1
 800b26c:	d3f4      	bcc.n	800b258 <L_shift+0xc>
 800b26e:	bd70      	pop	{r4, r5, r6, pc}

0800b270 <__match>:
 800b270:	b530      	push	{r4, r5, lr}
 800b272:	6803      	ldr	r3, [r0, #0]
 800b274:	3301      	adds	r3, #1
 800b276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b27a:	b914      	cbnz	r4, 800b282 <__match+0x12>
 800b27c:	6003      	str	r3, [r0, #0]
 800b27e:	2001      	movs	r0, #1
 800b280:	bd30      	pop	{r4, r5, pc}
 800b282:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b286:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b28a:	2d19      	cmp	r5, #25
 800b28c:	bf98      	it	ls
 800b28e:	3220      	addls	r2, #32
 800b290:	42a2      	cmp	r2, r4
 800b292:	d0f0      	beq.n	800b276 <__match+0x6>
 800b294:	2000      	movs	r0, #0
 800b296:	e7f3      	b.n	800b280 <__match+0x10>

0800b298 <__hexnan>:
 800b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29c:	680b      	ldr	r3, [r1, #0]
 800b29e:	6801      	ldr	r1, [r0, #0]
 800b2a0:	115e      	asrs	r6, r3, #5
 800b2a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b2a6:	f013 031f 	ands.w	r3, r3, #31
 800b2aa:	b087      	sub	sp, #28
 800b2ac:	bf18      	it	ne
 800b2ae:	3604      	addne	r6, #4
 800b2b0:	2500      	movs	r5, #0
 800b2b2:	1f37      	subs	r7, r6, #4
 800b2b4:	4682      	mov	sl, r0
 800b2b6:	4690      	mov	r8, r2
 800b2b8:	9301      	str	r3, [sp, #4]
 800b2ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800b2be:	46b9      	mov	r9, r7
 800b2c0:	463c      	mov	r4, r7
 800b2c2:	9502      	str	r5, [sp, #8]
 800b2c4:	46ab      	mov	fp, r5
 800b2c6:	784a      	ldrb	r2, [r1, #1]
 800b2c8:	1c4b      	adds	r3, r1, #1
 800b2ca:	9303      	str	r3, [sp, #12]
 800b2cc:	b342      	cbz	r2, 800b320 <__hexnan+0x88>
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	9105      	str	r1, [sp, #20]
 800b2d2:	9204      	str	r2, [sp, #16]
 800b2d4:	f7ff fd94 	bl	800ae00 <__hexdig_fun>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d151      	bne.n	800b380 <__hexnan+0xe8>
 800b2dc:	9a04      	ldr	r2, [sp, #16]
 800b2de:	9905      	ldr	r1, [sp, #20]
 800b2e0:	2a20      	cmp	r2, #32
 800b2e2:	d818      	bhi.n	800b316 <__hexnan+0x7e>
 800b2e4:	9b02      	ldr	r3, [sp, #8]
 800b2e6:	459b      	cmp	fp, r3
 800b2e8:	dd13      	ble.n	800b312 <__hexnan+0x7a>
 800b2ea:	454c      	cmp	r4, r9
 800b2ec:	d206      	bcs.n	800b2fc <__hexnan+0x64>
 800b2ee:	2d07      	cmp	r5, #7
 800b2f0:	dc04      	bgt.n	800b2fc <__hexnan+0x64>
 800b2f2:	462a      	mov	r2, r5
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f7ff ffa8 	bl	800b24c <L_shift>
 800b2fc:	4544      	cmp	r4, r8
 800b2fe:	d952      	bls.n	800b3a6 <__hexnan+0x10e>
 800b300:	2300      	movs	r3, #0
 800b302:	f1a4 0904 	sub.w	r9, r4, #4
 800b306:	f844 3c04 	str.w	r3, [r4, #-4]
 800b30a:	f8cd b008 	str.w	fp, [sp, #8]
 800b30e:	464c      	mov	r4, r9
 800b310:	461d      	mov	r5, r3
 800b312:	9903      	ldr	r1, [sp, #12]
 800b314:	e7d7      	b.n	800b2c6 <__hexnan+0x2e>
 800b316:	2a29      	cmp	r2, #41	@ 0x29
 800b318:	d157      	bne.n	800b3ca <__hexnan+0x132>
 800b31a:	3102      	adds	r1, #2
 800b31c:	f8ca 1000 	str.w	r1, [sl]
 800b320:	f1bb 0f00 	cmp.w	fp, #0
 800b324:	d051      	beq.n	800b3ca <__hexnan+0x132>
 800b326:	454c      	cmp	r4, r9
 800b328:	d206      	bcs.n	800b338 <__hexnan+0xa0>
 800b32a:	2d07      	cmp	r5, #7
 800b32c:	dc04      	bgt.n	800b338 <__hexnan+0xa0>
 800b32e:	462a      	mov	r2, r5
 800b330:	4649      	mov	r1, r9
 800b332:	4620      	mov	r0, r4
 800b334:	f7ff ff8a 	bl	800b24c <L_shift>
 800b338:	4544      	cmp	r4, r8
 800b33a:	d936      	bls.n	800b3aa <__hexnan+0x112>
 800b33c:	f1a8 0204 	sub.w	r2, r8, #4
 800b340:	4623      	mov	r3, r4
 800b342:	f853 1b04 	ldr.w	r1, [r3], #4
 800b346:	f842 1f04 	str.w	r1, [r2, #4]!
 800b34a:	429f      	cmp	r7, r3
 800b34c:	d2f9      	bcs.n	800b342 <__hexnan+0xaa>
 800b34e:	1b3b      	subs	r3, r7, r4
 800b350:	f023 0303 	bic.w	r3, r3, #3
 800b354:	3304      	adds	r3, #4
 800b356:	3401      	adds	r4, #1
 800b358:	3e03      	subs	r6, #3
 800b35a:	42b4      	cmp	r4, r6
 800b35c:	bf88      	it	hi
 800b35e:	2304      	movhi	r3, #4
 800b360:	4443      	add	r3, r8
 800b362:	2200      	movs	r2, #0
 800b364:	f843 2b04 	str.w	r2, [r3], #4
 800b368:	429f      	cmp	r7, r3
 800b36a:	d2fb      	bcs.n	800b364 <__hexnan+0xcc>
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	b91b      	cbnz	r3, 800b378 <__hexnan+0xe0>
 800b370:	4547      	cmp	r7, r8
 800b372:	d128      	bne.n	800b3c6 <__hexnan+0x12e>
 800b374:	2301      	movs	r3, #1
 800b376:	603b      	str	r3, [r7, #0]
 800b378:	2005      	movs	r0, #5
 800b37a:	b007      	add	sp, #28
 800b37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b380:	3501      	adds	r5, #1
 800b382:	2d08      	cmp	r5, #8
 800b384:	f10b 0b01 	add.w	fp, fp, #1
 800b388:	dd06      	ble.n	800b398 <__hexnan+0x100>
 800b38a:	4544      	cmp	r4, r8
 800b38c:	d9c1      	bls.n	800b312 <__hexnan+0x7a>
 800b38e:	2300      	movs	r3, #0
 800b390:	f844 3c04 	str.w	r3, [r4, #-4]
 800b394:	2501      	movs	r5, #1
 800b396:	3c04      	subs	r4, #4
 800b398:	6822      	ldr	r2, [r4, #0]
 800b39a:	f000 000f 	and.w	r0, r0, #15
 800b39e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b3a2:	6020      	str	r0, [r4, #0]
 800b3a4:	e7b5      	b.n	800b312 <__hexnan+0x7a>
 800b3a6:	2508      	movs	r5, #8
 800b3a8:	e7b3      	b.n	800b312 <__hexnan+0x7a>
 800b3aa:	9b01      	ldr	r3, [sp, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d0dd      	beq.n	800b36c <__hexnan+0xd4>
 800b3b0:	f1c3 0320 	rsb	r3, r3, #32
 800b3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3b8:	40da      	lsrs	r2, r3
 800b3ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b3be:	4013      	ands	r3, r2
 800b3c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b3c4:	e7d2      	b.n	800b36c <__hexnan+0xd4>
 800b3c6:	3f04      	subs	r7, #4
 800b3c8:	e7d0      	b.n	800b36c <__hexnan+0xd4>
 800b3ca:	2004      	movs	r0, #4
 800b3cc:	e7d5      	b.n	800b37a <__hexnan+0xe2>

0800b3ce <__ascii_mbtowc>:
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	b901      	cbnz	r1, 800b3d4 <__ascii_mbtowc+0x6>
 800b3d2:	a901      	add	r1, sp, #4
 800b3d4:	b142      	cbz	r2, 800b3e8 <__ascii_mbtowc+0x1a>
 800b3d6:	b14b      	cbz	r3, 800b3ec <__ascii_mbtowc+0x1e>
 800b3d8:	7813      	ldrb	r3, [r2, #0]
 800b3da:	600b      	str	r3, [r1, #0]
 800b3dc:	7812      	ldrb	r2, [r2, #0]
 800b3de:	1e10      	subs	r0, r2, #0
 800b3e0:	bf18      	it	ne
 800b3e2:	2001      	movne	r0, #1
 800b3e4:	b002      	add	sp, #8
 800b3e6:	4770      	bx	lr
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	e7fb      	b.n	800b3e4 <__ascii_mbtowc+0x16>
 800b3ec:	f06f 0001 	mvn.w	r0, #1
 800b3f0:	e7f8      	b.n	800b3e4 <__ascii_mbtowc+0x16>
	...

0800b3f4 <_Balloc>:
 800b3f4:	b570      	push	{r4, r5, r6, lr}
 800b3f6:	69c6      	ldr	r6, [r0, #28]
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	460d      	mov	r5, r1
 800b3fc:	b976      	cbnz	r6, 800b41c <_Balloc+0x28>
 800b3fe:	2010      	movs	r0, #16
 800b400:	f7fe faae 	bl	8009960 <malloc>
 800b404:	4602      	mov	r2, r0
 800b406:	61e0      	str	r0, [r4, #28]
 800b408:	b920      	cbnz	r0, 800b414 <_Balloc+0x20>
 800b40a:	4b18      	ldr	r3, [pc, #96]	@ (800b46c <_Balloc+0x78>)
 800b40c:	4818      	ldr	r0, [pc, #96]	@ (800b470 <_Balloc+0x7c>)
 800b40e:	216b      	movs	r1, #107	@ 0x6b
 800b410:	f001 f850 	bl	800c4b4 <__assert_func>
 800b414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b418:	6006      	str	r6, [r0, #0]
 800b41a:	60c6      	str	r6, [r0, #12]
 800b41c:	69e6      	ldr	r6, [r4, #28]
 800b41e:	68f3      	ldr	r3, [r6, #12]
 800b420:	b183      	cbz	r3, 800b444 <_Balloc+0x50>
 800b422:	69e3      	ldr	r3, [r4, #28]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b42a:	b9b8      	cbnz	r0, 800b45c <_Balloc+0x68>
 800b42c:	2101      	movs	r1, #1
 800b42e:	fa01 f605 	lsl.w	r6, r1, r5
 800b432:	1d72      	adds	r2, r6, #5
 800b434:	0092      	lsls	r2, r2, #2
 800b436:	4620      	mov	r0, r4
 800b438:	f7fe fa7e 	bl	8009938 <_calloc_r>
 800b43c:	b160      	cbz	r0, 800b458 <_Balloc+0x64>
 800b43e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b442:	e00e      	b.n	800b462 <_Balloc+0x6e>
 800b444:	2221      	movs	r2, #33	@ 0x21
 800b446:	2104      	movs	r1, #4
 800b448:	4620      	mov	r0, r4
 800b44a:	f7fe fa75 	bl	8009938 <_calloc_r>
 800b44e:	69e3      	ldr	r3, [r4, #28]
 800b450:	60f0      	str	r0, [r6, #12]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1e4      	bne.n	800b422 <_Balloc+0x2e>
 800b458:	2000      	movs	r0, #0
 800b45a:	bd70      	pop	{r4, r5, r6, pc}
 800b45c:	6802      	ldr	r2, [r0, #0]
 800b45e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b462:	2300      	movs	r3, #0
 800b464:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b468:	e7f7      	b.n	800b45a <_Balloc+0x66>
 800b46a:	bf00      	nop
 800b46c:	0800d073 	.word	0x0800d073
 800b470:	0800d08a 	.word	0x0800d08a

0800b474 <_Bfree>:
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	69c6      	ldr	r6, [r0, #28]
 800b478:	4605      	mov	r5, r0
 800b47a:	460c      	mov	r4, r1
 800b47c:	b976      	cbnz	r6, 800b49c <_Bfree+0x28>
 800b47e:	2010      	movs	r0, #16
 800b480:	f7fe fa6e 	bl	8009960 <malloc>
 800b484:	4602      	mov	r2, r0
 800b486:	61e8      	str	r0, [r5, #28]
 800b488:	b920      	cbnz	r0, 800b494 <_Bfree+0x20>
 800b48a:	4b09      	ldr	r3, [pc, #36]	@ (800b4b0 <_Bfree+0x3c>)
 800b48c:	4809      	ldr	r0, [pc, #36]	@ (800b4b4 <_Bfree+0x40>)
 800b48e:	218f      	movs	r1, #143	@ 0x8f
 800b490:	f001 f810 	bl	800c4b4 <__assert_func>
 800b494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b498:	6006      	str	r6, [r0, #0]
 800b49a:	60c6      	str	r6, [r0, #12]
 800b49c:	b13c      	cbz	r4, 800b4ae <_Bfree+0x3a>
 800b49e:	69eb      	ldr	r3, [r5, #28]
 800b4a0:	6862      	ldr	r2, [r4, #4]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4a8:	6021      	str	r1, [r4, #0]
 800b4aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4ae:	bd70      	pop	{r4, r5, r6, pc}
 800b4b0:	0800d073 	.word	0x0800d073
 800b4b4:	0800d08a 	.word	0x0800d08a

0800b4b8 <__multadd>:
 800b4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4bc:	690d      	ldr	r5, [r1, #16]
 800b4be:	4607      	mov	r7, r0
 800b4c0:	460c      	mov	r4, r1
 800b4c2:	461e      	mov	r6, r3
 800b4c4:	f101 0c14 	add.w	ip, r1, #20
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	f8dc 3000 	ldr.w	r3, [ip]
 800b4ce:	b299      	uxth	r1, r3
 800b4d0:	fb02 6101 	mla	r1, r2, r1, r6
 800b4d4:	0c1e      	lsrs	r6, r3, #16
 800b4d6:	0c0b      	lsrs	r3, r1, #16
 800b4d8:	fb02 3306 	mla	r3, r2, r6, r3
 800b4dc:	b289      	uxth	r1, r1
 800b4de:	3001      	adds	r0, #1
 800b4e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b4e4:	4285      	cmp	r5, r0
 800b4e6:	f84c 1b04 	str.w	r1, [ip], #4
 800b4ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4ee:	dcec      	bgt.n	800b4ca <__multadd+0x12>
 800b4f0:	b30e      	cbz	r6, 800b536 <__multadd+0x7e>
 800b4f2:	68a3      	ldr	r3, [r4, #8]
 800b4f4:	42ab      	cmp	r3, r5
 800b4f6:	dc19      	bgt.n	800b52c <__multadd+0x74>
 800b4f8:	6861      	ldr	r1, [r4, #4]
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	3101      	adds	r1, #1
 800b4fe:	f7ff ff79 	bl	800b3f4 <_Balloc>
 800b502:	4680      	mov	r8, r0
 800b504:	b928      	cbnz	r0, 800b512 <__multadd+0x5a>
 800b506:	4602      	mov	r2, r0
 800b508:	4b0c      	ldr	r3, [pc, #48]	@ (800b53c <__multadd+0x84>)
 800b50a:	480d      	ldr	r0, [pc, #52]	@ (800b540 <__multadd+0x88>)
 800b50c:	21ba      	movs	r1, #186	@ 0xba
 800b50e:	f000 ffd1 	bl	800c4b4 <__assert_func>
 800b512:	6922      	ldr	r2, [r4, #16]
 800b514:	3202      	adds	r2, #2
 800b516:	f104 010c 	add.w	r1, r4, #12
 800b51a:	0092      	lsls	r2, r2, #2
 800b51c:	300c      	adds	r0, #12
 800b51e:	f7ff fbbc 	bl	800ac9a <memcpy>
 800b522:	4621      	mov	r1, r4
 800b524:	4638      	mov	r0, r7
 800b526:	f7ff ffa5 	bl	800b474 <_Bfree>
 800b52a:	4644      	mov	r4, r8
 800b52c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b530:	3501      	adds	r5, #1
 800b532:	615e      	str	r6, [r3, #20]
 800b534:	6125      	str	r5, [r4, #16]
 800b536:	4620      	mov	r0, r4
 800b538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b53c:	0800d002 	.word	0x0800d002
 800b540:	0800d08a 	.word	0x0800d08a

0800b544 <__s2b>:
 800b544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b548:	460c      	mov	r4, r1
 800b54a:	4615      	mov	r5, r2
 800b54c:	461f      	mov	r7, r3
 800b54e:	2209      	movs	r2, #9
 800b550:	3308      	adds	r3, #8
 800b552:	4606      	mov	r6, r0
 800b554:	fb93 f3f2 	sdiv	r3, r3, r2
 800b558:	2100      	movs	r1, #0
 800b55a:	2201      	movs	r2, #1
 800b55c:	429a      	cmp	r2, r3
 800b55e:	db09      	blt.n	800b574 <__s2b+0x30>
 800b560:	4630      	mov	r0, r6
 800b562:	f7ff ff47 	bl	800b3f4 <_Balloc>
 800b566:	b940      	cbnz	r0, 800b57a <__s2b+0x36>
 800b568:	4602      	mov	r2, r0
 800b56a:	4b19      	ldr	r3, [pc, #100]	@ (800b5d0 <__s2b+0x8c>)
 800b56c:	4819      	ldr	r0, [pc, #100]	@ (800b5d4 <__s2b+0x90>)
 800b56e:	21d3      	movs	r1, #211	@ 0xd3
 800b570:	f000 ffa0 	bl	800c4b4 <__assert_func>
 800b574:	0052      	lsls	r2, r2, #1
 800b576:	3101      	adds	r1, #1
 800b578:	e7f0      	b.n	800b55c <__s2b+0x18>
 800b57a:	9b08      	ldr	r3, [sp, #32]
 800b57c:	6143      	str	r3, [r0, #20]
 800b57e:	2d09      	cmp	r5, #9
 800b580:	f04f 0301 	mov.w	r3, #1
 800b584:	6103      	str	r3, [r0, #16]
 800b586:	dd16      	ble.n	800b5b6 <__s2b+0x72>
 800b588:	f104 0909 	add.w	r9, r4, #9
 800b58c:	46c8      	mov	r8, r9
 800b58e:	442c      	add	r4, r5
 800b590:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b594:	4601      	mov	r1, r0
 800b596:	3b30      	subs	r3, #48	@ 0x30
 800b598:	220a      	movs	r2, #10
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7ff ff8c 	bl	800b4b8 <__multadd>
 800b5a0:	45a0      	cmp	r8, r4
 800b5a2:	d1f5      	bne.n	800b590 <__s2b+0x4c>
 800b5a4:	f1a5 0408 	sub.w	r4, r5, #8
 800b5a8:	444c      	add	r4, r9
 800b5aa:	1b2d      	subs	r5, r5, r4
 800b5ac:	1963      	adds	r3, r4, r5
 800b5ae:	42bb      	cmp	r3, r7
 800b5b0:	db04      	blt.n	800b5bc <__s2b+0x78>
 800b5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5b6:	340a      	adds	r4, #10
 800b5b8:	2509      	movs	r5, #9
 800b5ba:	e7f6      	b.n	800b5aa <__s2b+0x66>
 800b5bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b5c0:	4601      	mov	r1, r0
 800b5c2:	3b30      	subs	r3, #48	@ 0x30
 800b5c4:	220a      	movs	r2, #10
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f7ff ff76 	bl	800b4b8 <__multadd>
 800b5cc:	e7ee      	b.n	800b5ac <__s2b+0x68>
 800b5ce:	bf00      	nop
 800b5d0:	0800d002 	.word	0x0800d002
 800b5d4:	0800d08a 	.word	0x0800d08a

0800b5d8 <__hi0bits>:
 800b5d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b5dc:	4603      	mov	r3, r0
 800b5de:	bf36      	itet	cc
 800b5e0:	0403      	lslcc	r3, r0, #16
 800b5e2:	2000      	movcs	r0, #0
 800b5e4:	2010      	movcc	r0, #16
 800b5e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5ea:	bf3c      	itt	cc
 800b5ec:	021b      	lslcc	r3, r3, #8
 800b5ee:	3008      	addcc	r0, #8
 800b5f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5f4:	bf3c      	itt	cc
 800b5f6:	011b      	lslcc	r3, r3, #4
 800b5f8:	3004      	addcc	r0, #4
 800b5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5fe:	bf3c      	itt	cc
 800b600:	009b      	lslcc	r3, r3, #2
 800b602:	3002      	addcc	r0, #2
 800b604:	2b00      	cmp	r3, #0
 800b606:	db05      	blt.n	800b614 <__hi0bits+0x3c>
 800b608:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b60c:	f100 0001 	add.w	r0, r0, #1
 800b610:	bf08      	it	eq
 800b612:	2020      	moveq	r0, #32
 800b614:	4770      	bx	lr

0800b616 <__lo0bits>:
 800b616:	6803      	ldr	r3, [r0, #0]
 800b618:	4602      	mov	r2, r0
 800b61a:	f013 0007 	ands.w	r0, r3, #7
 800b61e:	d00b      	beq.n	800b638 <__lo0bits+0x22>
 800b620:	07d9      	lsls	r1, r3, #31
 800b622:	d421      	bmi.n	800b668 <__lo0bits+0x52>
 800b624:	0798      	lsls	r0, r3, #30
 800b626:	bf49      	itett	mi
 800b628:	085b      	lsrmi	r3, r3, #1
 800b62a:	089b      	lsrpl	r3, r3, #2
 800b62c:	2001      	movmi	r0, #1
 800b62e:	6013      	strmi	r3, [r2, #0]
 800b630:	bf5c      	itt	pl
 800b632:	6013      	strpl	r3, [r2, #0]
 800b634:	2002      	movpl	r0, #2
 800b636:	4770      	bx	lr
 800b638:	b299      	uxth	r1, r3
 800b63a:	b909      	cbnz	r1, 800b640 <__lo0bits+0x2a>
 800b63c:	0c1b      	lsrs	r3, r3, #16
 800b63e:	2010      	movs	r0, #16
 800b640:	b2d9      	uxtb	r1, r3
 800b642:	b909      	cbnz	r1, 800b648 <__lo0bits+0x32>
 800b644:	3008      	adds	r0, #8
 800b646:	0a1b      	lsrs	r3, r3, #8
 800b648:	0719      	lsls	r1, r3, #28
 800b64a:	bf04      	itt	eq
 800b64c:	091b      	lsreq	r3, r3, #4
 800b64e:	3004      	addeq	r0, #4
 800b650:	0799      	lsls	r1, r3, #30
 800b652:	bf04      	itt	eq
 800b654:	089b      	lsreq	r3, r3, #2
 800b656:	3002      	addeq	r0, #2
 800b658:	07d9      	lsls	r1, r3, #31
 800b65a:	d403      	bmi.n	800b664 <__lo0bits+0x4e>
 800b65c:	085b      	lsrs	r3, r3, #1
 800b65e:	f100 0001 	add.w	r0, r0, #1
 800b662:	d003      	beq.n	800b66c <__lo0bits+0x56>
 800b664:	6013      	str	r3, [r2, #0]
 800b666:	4770      	bx	lr
 800b668:	2000      	movs	r0, #0
 800b66a:	4770      	bx	lr
 800b66c:	2020      	movs	r0, #32
 800b66e:	4770      	bx	lr

0800b670 <__i2b>:
 800b670:	b510      	push	{r4, lr}
 800b672:	460c      	mov	r4, r1
 800b674:	2101      	movs	r1, #1
 800b676:	f7ff febd 	bl	800b3f4 <_Balloc>
 800b67a:	4602      	mov	r2, r0
 800b67c:	b928      	cbnz	r0, 800b68a <__i2b+0x1a>
 800b67e:	4b05      	ldr	r3, [pc, #20]	@ (800b694 <__i2b+0x24>)
 800b680:	4805      	ldr	r0, [pc, #20]	@ (800b698 <__i2b+0x28>)
 800b682:	f240 1145 	movw	r1, #325	@ 0x145
 800b686:	f000 ff15 	bl	800c4b4 <__assert_func>
 800b68a:	2301      	movs	r3, #1
 800b68c:	6144      	str	r4, [r0, #20]
 800b68e:	6103      	str	r3, [r0, #16]
 800b690:	bd10      	pop	{r4, pc}
 800b692:	bf00      	nop
 800b694:	0800d002 	.word	0x0800d002
 800b698:	0800d08a 	.word	0x0800d08a

0800b69c <__multiply>:
 800b69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a0:	4617      	mov	r7, r2
 800b6a2:	690a      	ldr	r2, [r1, #16]
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	bfa8      	it	ge
 800b6aa:	463b      	movge	r3, r7
 800b6ac:	4689      	mov	r9, r1
 800b6ae:	bfa4      	itt	ge
 800b6b0:	460f      	movge	r7, r1
 800b6b2:	4699      	movge	r9, r3
 800b6b4:	693d      	ldr	r5, [r7, #16]
 800b6b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	6879      	ldr	r1, [r7, #4]
 800b6be:	eb05 060a 	add.w	r6, r5, sl
 800b6c2:	42b3      	cmp	r3, r6
 800b6c4:	b085      	sub	sp, #20
 800b6c6:	bfb8      	it	lt
 800b6c8:	3101      	addlt	r1, #1
 800b6ca:	f7ff fe93 	bl	800b3f4 <_Balloc>
 800b6ce:	b930      	cbnz	r0, 800b6de <__multiply+0x42>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	4b41      	ldr	r3, [pc, #260]	@ (800b7d8 <__multiply+0x13c>)
 800b6d4:	4841      	ldr	r0, [pc, #260]	@ (800b7dc <__multiply+0x140>)
 800b6d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b6da:	f000 feeb 	bl	800c4b4 <__assert_func>
 800b6de:	f100 0414 	add.w	r4, r0, #20
 800b6e2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b6e6:	4623      	mov	r3, r4
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	4573      	cmp	r3, lr
 800b6ec:	d320      	bcc.n	800b730 <__multiply+0x94>
 800b6ee:	f107 0814 	add.w	r8, r7, #20
 800b6f2:	f109 0114 	add.w	r1, r9, #20
 800b6f6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b6fa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b6fe:	9302      	str	r3, [sp, #8]
 800b700:	1beb      	subs	r3, r5, r7
 800b702:	3b15      	subs	r3, #21
 800b704:	f023 0303 	bic.w	r3, r3, #3
 800b708:	3304      	adds	r3, #4
 800b70a:	3715      	adds	r7, #21
 800b70c:	42bd      	cmp	r5, r7
 800b70e:	bf38      	it	cc
 800b710:	2304      	movcc	r3, #4
 800b712:	9301      	str	r3, [sp, #4]
 800b714:	9b02      	ldr	r3, [sp, #8]
 800b716:	9103      	str	r1, [sp, #12]
 800b718:	428b      	cmp	r3, r1
 800b71a:	d80c      	bhi.n	800b736 <__multiply+0x9a>
 800b71c:	2e00      	cmp	r6, #0
 800b71e:	dd03      	ble.n	800b728 <__multiply+0x8c>
 800b720:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b724:	2b00      	cmp	r3, #0
 800b726:	d055      	beq.n	800b7d4 <__multiply+0x138>
 800b728:	6106      	str	r6, [r0, #16]
 800b72a:	b005      	add	sp, #20
 800b72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b730:	f843 2b04 	str.w	r2, [r3], #4
 800b734:	e7d9      	b.n	800b6ea <__multiply+0x4e>
 800b736:	f8b1 a000 	ldrh.w	sl, [r1]
 800b73a:	f1ba 0f00 	cmp.w	sl, #0
 800b73e:	d01f      	beq.n	800b780 <__multiply+0xe4>
 800b740:	46c4      	mov	ip, r8
 800b742:	46a1      	mov	r9, r4
 800b744:	2700      	movs	r7, #0
 800b746:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b74a:	f8d9 3000 	ldr.w	r3, [r9]
 800b74e:	fa1f fb82 	uxth.w	fp, r2
 800b752:	b29b      	uxth	r3, r3
 800b754:	fb0a 330b 	mla	r3, sl, fp, r3
 800b758:	443b      	add	r3, r7
 800b75a:	f8d9 7000 	ldr.w	r7, [r9]
 800b75e:	0c12      	lsrs	r2, r2, #16
 800b760:	0c3f      	lsrs	r7, r7, #16
 800b762:	fb0a 7202 	mla	r2, sl, r2, r7
 800b766:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b770:	4565      	cmp	r5, ip
 800b772:	f849 3b04 	str.w	r3, [r9], #4
 800b776:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b77a:	d8e4      	bhi.n	800b746 <__multiply+0xaa>
 800b77c:	9b01      	ldr	r3, [sp, #4]
 800b77e:	50e7      	str	r7, [r4, r3]
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b786:	3104      	adds	r1, #4
 800b788:	f1b9 0f00 	cmp.w	r9, #0
 800b78c:	d020      	beq.n	800b7d0 <__multiply+0x134>
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	4647      	mov	r7, r8
 800b792:	46a4      	mov	ip, r4
 800b794:	f04f 0a00 	mov.w	sl, #0
 800b798:	f8b7 b000 	ldrh.w	fp, [r7]
 800b79c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b7a0:	fb09 220b 	mla	r2, r9, fp, r2
 800b7a4:	4452      	add	r2, sl
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7ac:	f84c 3b04 	str.w	r3, [ip], #4
 800b7b0:	f857 3b04 	ldr.w	r3, [r7], #4
 800b7b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7b8:	f8bc 3000 	ldrh.w	r3, [ip]
 800b7bc:	fb09 330a 	mla	r3, r9, sl, r3
 800b7c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b7c4:	42bd      	cmp	r5, r7
 800b7c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7ca:	d8e5      	bhi.n	800b798 <__multiply+0xfc>
 800b7cc:	9a01      	ldr	r2, [sp, #4]
 800b7ce:	50a3      	str	r3, [r4, r2]
 800b7d0:	3404      	adds	r4, #4
 800b7d2:	e79f      	b.n	800b714 <__multiply+0x78>
 800b7d4:	3e01      	subs	r6, #1
 800b7d6:	e7a1      	b.n	800b71c <__multiply+0x80>
 800b7d8:	0800d002 	.word	0x0800d002
 800b7dc:	0800d08a 	.word	0x0800d08a

0800b7e0 <__pow5mult>:
 800b7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e4:	4615      	mov	r5, r2
 800b7e6:	f012 0203 	ands.w	r2, r2, #3
 800b7ea:	4607      	mov	r7, r0
 800b7ec:	460e      	mov	r6, r1
 800b7ee:	d007      	beq.n	800b800 <__pow5mult+0x20>
 800b7f0:	4c25      	ldr	r4, [pc, #148]	@ (800b888 <__pow5mult+0xa8>)
 800b7f2:	3a01      	subs	r2, #1
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7fa:	f7ff fe5d 	bl	800b4b8 <__multadd>
 800b7fe:	4606      	mov	r6, r0
 800b800:	10ad      	asrs	r5, r5, #2
 800b802:	d03d      	beq.n	800b880 <__pow5mult+0xa0>
 800b804:	69fc      	ldr	r4, [r7, #28]
 800b806:	b97c      	cbnz	r4, 800b828 <__pow5mult+0x48>
 800b808:	2010      	movs	r0, #16
 800b80a:	f7fe f8a9 	bl	8009960 <malloc>
 800b80e:	4602      	mov	r2, r0
 800b810:	61f8      	str	r0, [r7, #28]
 800b812:	b928      	cbnz	r0, 800b820 <__pow5mult+0x40>
 800b814:	4b1d      	ldr	r3, [pc, #116]	@ (800b88c <__pow5mult+0xac>)
 800b816:	481e      	ldr	r0, [pc, #120]	@ (800b890 <__pow5mult+0xb0>)
 800b818:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b81c:	f000 fe4a 	bl	800c4b4 <__assert_func>
 800b820:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b824:	6004      	str	r4, [r0, #0]
 800b826:	60c4      	str	r4, [r0, #12]
 800b828:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b82c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b830:	b94c      	cbnz	r4, 800b846 <__pow5mult+0x66>
 800b832:	f240 2171 	movw	r1, #625	@ 0x271
 800b836:	4638      	mov	r0, r7
 800b838:	f7ff ff1a 	bl	800b670 <__i2b>
 800b83c:	2300      	movs	r3, #0
 800b83e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b842:	4604      	mov	r4, r0
 800b844:	6003      	str	r3, [r0, #0]
 800b846:	f04f 0900 	mov.w	r9, #0
 800b84a:	07eb      	lsls	r3, r5, #31
 800b84c:	d50a      	bpl.n	800b864 <__pow5mult+0x84>
 800b84e:	4631      	mov	r1, r6
 800b850:	4622      	mov	r2, r4
 800b852:	4638      	mov	r0, r7
 800b854:	f7ff ff22 	bl	800b69c <__multiply>
 800b858:	4631      	mov	r1, r6
 800b85a:	4680      	mov	r8, r0
 800b85c:	4638      	mov	r0, r7
 800b85e:	f7ff fe09 	bl	800b474 <_Bfree>
 800b862:	4646      	mov	r6, r8
 800b864:	106d      	asrs	r5, r5, #1
 800b866:	d00b      	beq.n	800b880 <__pow5mult+0xa0>
 800b868:	6820      	ldr	r0, [r4, #0]
 800b86a:	b938      	cbnz	r0, 800b87c <__pow5mult+0x9c>
 800b86c:	4622      	mov	r2, r4
 800b86e:	4621      	mov	r1, r4
 800b870:	4638      	mov	r0, r7
 800b872:	f7ff ff13 	bl	800b69c <__multiply>
 800b876:	6020      	str	r0, [r4, #0]
 800b878:	f8c0 9000 	str.w	r9, [r0]
 800b87c:	4604      	mov	r4, r0
 800b87e:	e7e4      	b.n	800b84a <__pow5mult+0x6a>
 800b880:	4630      	mov	r0, r6
 800b882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b886:	bf00      	nop
 800b888:	0800d2ac 	.word	0x0800d2ac
 800b88c:	0800d073 	.word	0x0800d073
 800b890:	0800d08a 	.word	0x0800d08a

0800b894 <__lshift>:
 800b894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b898:	460c      	mov	r4, r1
 800b89a:	6849      	ldr	r1, [r1, #4]
 800b89c:	6923      	ldr	r3, [r4, #16]
 800b89e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8a2:	68a3      	ldr	r3, [r4, #8]
 800b8a4:	4607      	mov	r7, r0
 800b8a6:	4691      	mov	r9, r2
 800b8a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8ac:	f108 0601 	add.w	r6, r8, #1
 800b8b0:	42b3      	cmp	r3, r6
 800b8b2:	db0b      	blt.n	800b8cc <__lshift+0x38>
 800b8b4:	4638      	mov	r0, r7
 800b8b6:	f7ff fd9d 	bl	800b3f4 <_Balloc>
 800b8ba:	4605      	mov	r5, r0
 800b8bc:	b948      	cbnz	r0, 800b8d2 <__lshift+0x3e>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	4b28      	ldr	r3, [pc, #160]	@ (800b964 <__lshift+0xd0>)
 800b8c2:	4829      	ldr	r0, [pc, #164]	@ (800b968 <__lshift+0xd4>)
 800b8c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b8c8:	f000 fdf4 	bl	800c4b4 <__assert_func>
 800b8cc:	3101      	adds	r1, #1
 800b8ce:	005b      	lsls	r3, r3, #1
 800b8d0:	e7ee      	b.n	800b8b0 <__lshift+0x1c>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	f100 0114 	add.w	r1, r0, #20
 800b8d8:	f100 0210 	add.w	r2, r0, #16
 800b8dc:	4618      	mov	r0, r3
 800b8de:	4553      	cmp	r3, sl
 800b8e0:	db33      	blt.n	800b94a <__lshift+0xb6>
 800b8e2:	6920      	ldr	r0, [r4, #16]
 800b8e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8e8:	f104 0314 	add.w	r3, r4, #20
 800b8ec:	f019 091f 	ands.w	r9, r9, #31
 800b8f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8f8:	d02b      	beq.n	800b952 <__lshift+0xbe>
 800b8fa:	f1c9 0e20 	rsb	lr, r9, #32
 800b8fe:	468a      	mov	sl, r1
 800b900:	2200      	movs	r2, #0
 800b902:	6818      	ldr	r0, [r3, #0]
 800b904:	fa00 f009 	lsl.w	r0, r0, r9
 800b908:	4310      	orrs	r0, r2
 800b90a:	f84a 0b04 	str.w	r0, [sl], #4
 800b90e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b912:	459c      	cmp	ip, r3
 800b914:	fa22 f20e 	lsr.w	r2, r2, lr
 800b918:	d8f3      	bhi.n	800b902 <__lshift+0x6e>
 800b91a:	ebac 0304 	sub.w	r3, ip, r4
 800b91e:	3b15      	subs	r3, #21
 800b920:	f023 0303 	bic.w	r3, r3, #3
 800b924:	3304      	adds	r3, #4
 800b926:	f104 0015 	add.w	r0, r4, #21
 800b92a:	4560      	cmp	r0, ip
 800b92c:	bf88      	it	hi
 800b92e:	2304      	movhi	r3, #4
 800b930:	50ca      	str	r2, [r1, r3]
 800b932:	b10a      	cbz	r2, 800b938 <__lshift+0xa4>
 800b934:	f108 0602 	add.w	r6, r8, #2
 800b938:	3e01      	subs	r6, #1
 800b93a:	4638      	mov	r0, r7
 800b93c:	612e      	str	r6, [r5, #16]
 800b93e:	4621      	mov	r1, r4
 800b940:	f7ff fd98 	bl	800b474 <_Bfree>
 800b944:	4628      	mov	r0, r5
 800b946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b94a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b94e:	3301      	adds	r3, #1
 800b950:	e7c5      	b.n	800b8de <__lshift+0x4a>
 800b952:	3904      	subs	r1, #4
 800b954:	f853 2b04 	ldr.w	r2, [r3], #4
 800b958:	f841 2f04 	str.w	r2, [r1, #4]!
 800b95c:	459c      	cmp	ip, r3
 800b95e:	d8f9      	bhi.n	800b954 <__lshift+0xc0>
 800b960:	e7ea      	b.n	800b938 <__lshift+0xa4>
 800b962:	bf00      	nop
 800b964:	0800d002 	.word	0x0800d002
 800b968:	0800d08a 	.word	0x0800d08a

0800b96c <__mcmp>:
 800b96c:	690a      	ldr	r2, [r1, #16]
 800b96e:	4603      	mov	r3, r0
 800b970:	6900      	ldr	r0, [r0, #16]
 800b972:	1a80      	subs	r0, r0, r2
 800b974:	b530      	push	{r4, r5, lr}
 800b976:	d10e      	bne.n	800b996 <__mcmp+0x2a>
 800b978:	3314      	adds	r3, #20
 800b97a:	3114      	adds	r1, #20
 800b97c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b980:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b984:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b988:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b98c:	4295      	cmp	r5, r2
 800b98e:	d003      	beq.n	800b998 <__mcmp+0x2c>
 800b990:	d205      	bcs.n	800b99e <__mcmp+0x32>
 800b992:	f04f 30ff 	mov.w	r0, #4294967295
 800b996:	bd30      	pop	{r4, r5, pc}
 800b998:	42a3      	cmp	r3, r4
 800b99a:	d3f3      	bcc.n	800b984 <__mcmp+0x18>
 800b99c:	e7fb      	b.n	800b996 <__mcmp+0x2a>
 800b99e:	2001      	movs	r0, #1
 800b9a0:	e7f9      	b.n	800b996 <__mcmp+0x2a>
	...

0800b9a4 <__mdiff>:
 800b9a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a8:	4689      	mov	r9, r1
 800b9aa:	4606      	mov	r6, r0
 800b9ac:	4611      	mov	r1, r2
 800b9ae:	4648      	mov	r0, r9
 800b9b0:	4614      	mov	r4, r2
 800b9b2:	f7ff ffdb 	bl	800b96c <__mcmp>
 800b9b6:	1e05      	subs	r5, r0, #0
 800b9b8:	d112      	bne.n	800b9e0 <__mdiff+0x3c>
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	4630      	mov	r0, r6
 800b9be:	f7ff fd19 	bl	800b3f4 <_Balloc>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	b928      	cbnz	r0, 800b9d2 <__mdiff+0x2e>
 800b9c6:	4b3f      	ldr	r3, [pc, #252]	@ (800bac4 <__mdiff+0x120>)
 800b9c8:	f240 2137 	movw	r1, #567	@ 0x237
 800b9cc:	483e      	ldr	r0, [pc, #248]	@ (800bac8 <__mdiff+0x124>)
 800b9ce:	f000 fd71 	bl	800c4b4 <__assert_func>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9d8:	4610      	mov	r0, r2
 800b9da:	b003      	add	sp, #12
 800b9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e0:	bfbc      	itt	lt
 800b9e2:	464b      	movlt	r3, r9
 800b9e4:	46a1      	movlt	r9, r4
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b9ec:	bfba      	itte	lt
 800b9ee:	461c      	movlt	r4, r3
 800b9f0:	2501      	movlt	r5, #1
 800b9f2:	2500      	movge	r5, #0
 800b9f4:	f7ff fcfe 	bl	800b3f4 <_Balloc>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	b918      	cbnz	r0, 800ba04 <__mdiff+0x60>
 800b9fc:	4b31      	ldr	r3, [pc, #196]	@ (800bac4 <__mdiff+0x120>)
 800b9fe:	f240 2145 	movw	r1, #581	@ 0x245
 800ba02:	e7e3      	b.n	800b9cc <__mdiff+0x28>
 800ba04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba08:	6926      	ldr	r6, [r4, #16]
 800ba0a:	60c5      	str	r5, [r0, #12]
 800ba0c:	f109 0310 	add.w	r3, r9, #16
 800ba10:	f109 0514 	add.w	r5, r9, #20
 800ba14:	f104 0e14 	add.w	lr, r4, #20
 800ba18:	f100 0b14 	add.w	fp, r0, #20
 800ba1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba24:	9301      	str	r3, [sp, #4]
 800ba26:	46d9      	mov	r9, fp
 800ba28:	f04f 0c00 	mov.w	ip, #0
 800ba2c:	9b01      	ldr	r3, [sp, #4]
 800ba2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba32:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba36:	9301      	str	r3, [sp, #4]
 800ba38:	fa1f f38a 	uxth.w	r3, sl
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	b283      	uxth	r3, r0
 800ba40:	1acb      	subs	r3, r1, r3
 800ba42:	0c00      	lsrs	r0, r0, #16
 800ba44:	4463      	add	r3, ip
 800ba46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba54:	4576      	cmp	r6, lr
 800ba56:	f849 3b04 	str.w	r3, [r9], #4
 800ba5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba5e:	d8e5      	bhi.n	800ba2c <__mdiff+0x88>
 800ba60:	1b33      	subs	r3, r6, r4
 800ba62:	3b15      	subs	r3, #21
 800ba64:	f023 0303 	bic.w	r3, r3, #3
 800ba68:	3415      	adds	r4, #21
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	42a6      	cmp	r6, r4
 800ba6e:	bf38      	it	cc
 800ba70:	2304      	movcc	r3, #4
 800ba72:	441d      	add	r5, r3
 800ba74:	445b      	add	r3, fp
 800ba76:	461e      	mov	r6, r3
 800ba78:	462c      	mov	r4, r5
 800ba7a:	4544      	cmp	r4, r8
 800ba7c:	d30e      	bcc.n	800ba9c <__mdiff+0xf8>
 800ba7e:	f108 0103 	add.w	r1, r8, #3
 800ba82:	1b49      	subs	r1, r1, r5
 800ba84:	f021 0103 	bic.w	r1, r1, #3
 800ba88:	3d03      	subs	r5, #3
 800ba8a:	45a8      	cmp	r8, r5
 800ba8c:	bf38      	it	cc
 800ba8e:	2100      	movcc	r1, #0
 800ba90:	440b      	add	r3, r1
 800ba92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba96:	b191      	cbz	r1, 800babe <__mdiff+0x11a>
 800ba98:	6117      	str	r7, [r2, #16]
 800ba9a:	e79d      	b.n	800b9d8 <__mdiff+0x34>
 800ba9c:	f854 1b04 	ldr.w	r1, [r4], #4
 800baa0:	46e6      	mov	lr, ip
 800baa2:	0c08      	lsrs	r0, r1, #16
 800baa4:	fa1c fc81 	uxtah	ip, ip, r1
 800baa8:	4471      	add	r1, lr
 800baaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800baae:	b289      	uxth	r1, r1
 800bab0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bab4:	f846 1b04 	str.w	r1, [r6], #4
 800bab8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800babc:	e7dd      	b.n	800ba7a <__mdiff+0xd6>
 800babe:	3f01      	subs	r7, #1
 800bac0:	e7e7      	b.n	800ba92 <__mdiff+0xee>
 800bac2:	bf00      	nop
 800bac4:	0800d002 	.word	0x0800d002
 800bac8:	0800d08a 	.word	0x0800d08a

0800bacc <__ulp>:
 800bacc:	b082      	sub	sp, #8
 800bace:	ed8d 0b00 	vstr	d0, [sp]
 800bad2:	9a01      	ldr	r2, [sp, #4]
 800bad4:	4b0f      	ldr	r3, [pc, #60]	@ (800bb14 <__ulp+0x48>)
 800bad6:	4013      	ands	r3, r2
 800bad8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800badc:	2b00      	cmp	r3, #0
 800bade:	dc08      	bgt.n	800baf2 <__ulp+0x26>
 800bae0:	425b      	negs	r3, r3
 800bae2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bae6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800baea:	da04      	bge.n	800baf6 <__ulp+0x2a>
 800baec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800baf0:	4113      	asrs	r3, r2
 800baf2:	2200      	movs	r2, #0
 800baf4:	e008      	b.n	800bb08 <__ulp+0x3c>
 800baf6:	f1a2 0314 	sub.w	r3, r2, #20
 800bafa:	2b1e      	cmp	r3, #30
 800bafc:	bfda      	itte	le
 800bafe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bb02:	40da      	lsrle	r2, r3
 800bb04:	2201      	movgt	r2, #1
 800bb06:	2300      	movs	r3, #0
 800bb08:	4619      	mov	r1, r3
 800bb0a:	4610      	mov	r0, r2
 800bb0c:	ec41 0b10 	vmov	d0, r0, r1
 800bb10:	b002      	add	sp, #8
 800bb12:	4770      	bx	lr
 800bb14:	7ff00000 	.word	0x7ff00000

0800bb18 <__b2d>:
 800bb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb1c:	6906      	ldr	r6, [r0, #16]
 800bb1e:	f100 0814 	add.w	r8, r0, #20
 800bb22:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bb26:	1f37      	subs	r7, r6, #4
 800bb28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	f7ff fd53 	bl	800b5d8 <__hi0bits>
 800bb32:	f1c0 0320 	rsb	r3, r0, #32
 800bb36:	280a      	cmp	r0, #10
 800bb38:	600b      	str	r3, [r1, #0]
 800bb3a:	491b      	ldr	r1, [pc, #108]	@ (800bba8 <__b2d+0x90>)
 800bb3c:	dc15      	bgt.n	800bb6a <__b2d+0x52>
 800bb3e:	f1c0 0c0b 	rsb	ip, r0, #11
 800bb42:	fa22 f30c 	lsr.w	r3, r2, ip
 800bb46:	45b8      	cmp	r8, r7
 800bb48:	ea43 0501 	orr.w	r5, r3, r1
 800bb4c:	bf34      	ite	cc
 800bb4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb52:	2300      	movcs	r3, #0
 800bb54:	3015      	adds	r0, #21
 800bb56:	fa02 f000 	lsl.w	r0, r2, r0
 800bb5a:	fa23 f30c 	lsr.w	r3, r3, ip
 800bb5e:	4303      	orrs	r3, r0
 800bb60:	461c      	mov	r4, r3
 800bb62:	ec45 4b10 	vmov	d0, r4, r5
 800bb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb6a:	45b8      	cmp	r8, r7
 800bb6c:	bf3a      	itte	cc
 800bb6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb72:	f1a6 0708 	subcc.w	r7, r6, #8
 800bb76:	2300      	movcs	r3, #0
 800bb78:	380b      	subs	r0, #11
 800bb7a:	d012      	beq.n	800bba2 <__b2d+0x8a>
 800bb7c:	f1c0 0120 	rsb	r1, r0, #32
 800bb80:	fa23 f401 	lsr.w	r4, r3, r1
 800bb84:	4082      	lsls	r2, r0
 800bb86:	4322      	orrs	r2, r4
 800bb88:	4547      	cmp	r7, r8
 800bb8a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bb8e:	bf8c      	ite	hi
 800bb90:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bb94:	2200      	movls	r2, #0
 800bb96:	4083      	lsls	r3, r0
 800bb98:	40ca      	lsrs	r2, r1
 800bb9a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	e7de      	b.n	800bb60 <__b2d+0x48>
 800bba2:	ea42 0501 	orr.w	r5, r2, r1
 800bba6:	e7db      	b.n	800bb60 <__b2d+0x48>
 800bba8:	3ff00000 	.word	0x3ff00000

0800bbac <__d2b>:
 800bbac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bbb0:	460f      	mov	r7, r1
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	ec59 8b10 	vmov	r8, r9, d0
 800bbb8:	4616      	mov	r6, r2
 800bbba:	f7ff fc1b 	bl	800b3f4 <_Balloc>
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	b930      	cbnz	r0, 800bbd0 <__d2b+0x24>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	4b23      	ldr	r3, [pc, #140]	@ (800bc54 <__d2b+0xa8>)
 800bbc6:	4824      	ldr	r0, [pc, #144]	@ (800bc58 <__d2b+0xac>)
 800bbc8:	f240 310f 	movw	r1, #783	@ 0x30f
 800bbcc:	f000 fc72 	bl	800c4b4 <__assert_func>
 800bbd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bbd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbd8:	b10d      	cbz	r5, 800bbde <__d2b+0x32>
 800bbda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bbde:	9301      	str	r3, [sp, #4]
 800bbe0:	f1b8 0300 	subs.w	r3, r8, #0
 800bbe4:	d023      	beq.n	800bc2e <__d2b+0x82>
 800bbe6:	4668      	mov	r0, sp
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	f7ff fd14 	bl	800b616 <__lo0bits>
 800bbee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbf2:	b1d0      	cbz	r0, 800bc2a <__d2b+0x7e>
 800bbf4:	f1c0 0320 	rsb	r3, r0, #32
 800bbf8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbfc:	430b      	orrs	r3, r1
 800bbfe:	40c2      	lsrs	r2, r0
 800bc00:	6163      	str	r3, [r4, #20]
 800bc02:	9201      	str	r2, [sp, #4]
 800bc04:	9b01      	ldr	r3, [sp, #4]
 800bc06:	61a3      	str	r3, [r4, #24]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	bf0c      	ite	eq
 800bc0c:	2201      	moveq	r2, #1
 800bc0e:	2202      	movne	r2, #2
 800bc10:	6122      	str	r2, [r4, #16]
 800bc12:	b1a5      	cbz	r5, 800bc3e <__d2b+0x92>
 800bc14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bc18:	4405      	add	r5, r0
 800bc1a:	603d      	str	r5, [r7, #0]
 800bc1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bc20:	6030      	str	r0, [r6, #0]
 800bc22:	4620      	mov	r0, r4
 800bc24:	b003      	add	sp, #12
 800bc26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc2a:	6161      	str	r1, [r4, #20]
 800bc2c:	e7ea      	b.n	800bc04 <__d2b+0x58>
 800bc2e:	a801      	add	r0, sp, #4
 800bc30:	f7ff fcf1 	bl	800b616 <__lo0bits>
 800bc34:	9b01      	ldr	r3, [sp, #4]
 800bc36:	6163      	str	r3, [r4, #20]
 800bc38:	3020      	adds	r0, #32
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	e7e8      	b.n	800bc10 <__d2b+0x64>
 800bc3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bc46:	6038      	str	r0, [r7, #0]
 800bc48:	6918      	ldr	r0, [r3, #16]
 800bc4a:	f7ff fcc5 	bl	800b5d8 <__hi0bits>
 800bc4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc52:	e7e5      	b.n	800bc20 <__d2b+0x74>
 800bc54:	0800d002 	.word	0x0800d002
 800bc58:	0800d08a 	.word	0x0800d08a

0800bc5c <__ratio>:
 800bc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc60:	b085      	sub	sp, #20
 800bc62:	e9cd 1000 	strd	r1, r0, [sp]
 800bc66:	a902      	add	r1, sp, #8
 800bc68:	f7ff ff56 	bl	800bb18 <__b2d>
 800bc6c:	9800      	ldr	r0, [sp, #0]
 800bc6e:	a903      	add	r1, sp, #12
 800bc70:	ec55 4b10 	vmov	r4, r5, d0
 800bc74:	f7ff ff50 	bl	800bb18 <__b2d>
 800bc78:	9b01      	ldr	r3, [sp, #4]
 800bc7a:	6919      	ldr	r1, [r3, #16]
 800bc7c:	9b00      	ldr	r3, [sp, #0]
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	1ac9      	subs	r1, r1, r3
 800bc82:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bc86:	1a9b      	subs	r3, r3, r2
 800bc88:	ec5b ab10 	vmov	sl, fp, d0
 800bc8c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	bfce      	itee	gt
 800bc94:	462a      	movgt	r2, r5
 800bc96:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc9a:	465a      	movle	r2, fp
 800bc9c:	462f      	mov	r7, r5
 800bc9e:	46d9      	mov	r9, fp
 800bca0:	bfcc      	ite	gt
 800bca2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bca6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bcaa:	464b      	mov	r3, r9
 800bcac:	4652      	mov	r2, sl
 800bcae:	4620      	mov	r0, r4
 800bcb0:	4639      	mov	r1, r7
 800bcb2:	f7f4 fdcb 	bl	800084c <__aeabi_ddiv>
 800bcb6:	ec41 0b10 	vmov	d0, r0, r1
 800bcba:	b005      	add	sp, #20
 800bcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bcc0 <__copybits>:
 800bcc0:	3901      	subs	r1, #1
 800bcc2:	b570      	push	{r4, r5, r6, lr}
 800bcc4:	1149      	asrs	r1, r1, #5
 800bcc6:	6914      	ldr	r4, [r2, #16]
 800bcc8:	3101      	adds	r1, #1
 800bcca:	f102 0314 	add.w	r3, r2, #20
 800bcce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bcd2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bcd6:	1f05      	subs	r5, r0, #4
 800bcd8:	42a3      	cmp	r3, r4
 800bcda:	d30c      	bcc.n	800bcf6 <__copybits+0x36>
 800bcdc:	1aa3      	subs	r3, r4, r2
 800bcde:	3b11      	subs	r3, #17
 800bce0:	f023 0303 	bic.w	r3, r3, #3
 800bce4:	3211      	adds	r2, #17
 800bce6:	42a2      	cmp	r2, r4
 800bce8:	bf88      	it	hi
 800bcea:	2300      	movhi	r3, #0
 800bcec:	4418      	add	r0, r3
 800bcee:	2300      	movs	r3, #0
 800bcf0:	4288      	cmp	r0, r1
 800bcf2:	d305      	bcc.n	800bd00 <__copybits+0x40>
 800bcf4:	bd70      	pop	{r4, r5, r6, pc}
 800bcf6:	f853 6b04 	ldr.w	r6, [r3], #4
 800bcfa:	f845 6f04 	str.w	r6, [r5, #4]!
 800bcfe:	e7eb      	b.n	800bcd8 <__copybits+0x18>
 800bd00:	f840 3b04 	str.w	r3, [r0], #4
 800bd04:	e7f4      	b.n	800bcf0 <__copybits+0x30>

0800bd06 <__any_on>:
 800bd06:	f100 0214 	add.w	r2, r0, #20
 800bd0a:	6900      	ldr	r0, [r0, #16]
 800bd0c:	114b      	asrs	r3, r1, #5
 800bd0e:	4298      	cmp	r0, r3
 800bd10:	b510      	push	{r4, lr}
 800bd12:	db11      	blt.n	800bd38 <__any_on+0x32>
 800bd14:	dd0a      	ble.n	800bd2c <__any_on+0x26>
 800bd16:	f011 011f 	ands.w	r1, r1, #31
 800bd1a:	d007      	beq.n	800bd2c <__any_on+0x26>
 800bd1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bd20:	fa24 f001 	lsr.w	r0, r4, r1
 800bd24:	fa00 f101 	lsl.w	r1, r0, r1
 800bd28:	428c      	cmp	r4, r1
 800bd2a:	d10b      	bne.n	800bd44 <__any_on+0x3e>
 800bd2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d803      	bhi.n	800bd3c <__any_on+0x36>
 800bd34:	2000      	movs	r0, #0
 800bd36:	bd10      	pop	{r4, pc}
 800bd38:	4603      	mov	r3, r0
 800bd3a:	e7f7      	b.n	800bd2c <__any_on+0x26>
 800bd3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd40:	2900      	cmp	r1, #0
 800bd42:	d0f5      	beq.n	800bd30 <__any_on+0x2a>
 800bd44:	2001      	movs	r0, #1
 800bd46:	e7f6      	b.n	800bd36 <__any_on+0x30>

0800bd48 <__ascii_wctomb>:
 800bd48:	4603      	mov	r3, r0
 800bd4a:	4608      	mov	r0, r1
 800bd4c:	b141      	cbz	r1, 800bd60 <__ascii_wctomb+0x18>
 800bd4e:	2aff      	cmp	r2, #255	@ 0xff
 800bd50:	d904      	bls.n	800bd5c <__ascii_wctomb+0x14>
 800bd52:	228a      	movs	r2, #138	@ 0x8a
 800bd54:	601a      	str	r2, [r3, #0]
 800bd56:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5a:	4770      	bx	lr
 800bd5c:	700a      	strb	r2, [r1, #0]
 800bd5e:	2001      	movs	r0, #1
 800bd60:	4770      	bx	lr

0800bd62 <__ssputs_r>:
 800bd62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd66:	688e      	ldr	r6, [r1, #8]
 800bd68:	461f      	mov	r7, r3
 800bd6a:	42be      	cmp	r6, r7
 800bd6c:	680b      	ldr	r3, [r1, #0]
 800bd6e:	4682      	mov	sl, r0
 800bd70:	460c      	mov	r4, r1
 800bd72:	4690      	mov	r8, r2
 800bd74:	d82d      	bhi.n	800bdd2 <__ssputs_r+0x70>
 800bd76:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd7a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bd7e:	d026      	beq.n	800bdce <__ssputs_r+0x6c>
 800bd80:	6965      	ldr	r5, [r4, #20]
 800bd82:	6909      	ldr	r1, [r1, #16]
 800bd84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd88:	eba3 0901 	sub.w	r9, r3, r1
 800bd8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd90:	1c7b      	adds	r3, r7, #1
 800bd92:	444b      	add	r3, r9
 800bd94:	106d      	asrs	r5, r5, #1
 800bd96:	429d      	cmp	r5, r3
 800bd98:	bf38      	it	cc
 800bd9a:	461d      	movcc	r5, r3
 800bd9c:	0553      	lsls	r3, r2, #21
 800bd9e:	d527      	bpl.n	800bdf0 <__ssputs_r+0x8e>
 800bda0:	4629      	mov	r1, r5
 800bda2:	f7fd fe0f 	bl	80099c4 <_malloc_r>
 800bda6:	4606      	mov	r6, r0
 800bda8:	b360      	cbz	r0, 800be04 <__ssputs_r+0xa2>
 800bdaa:	6921      	ldr	r1, [r4, #16]
 800bdac:	464a      	mov	r2, r9
 800bdae:	f7fe ff74 	bl	800ac9a <memcpy>
 800bdb2:	89a3      	ldrh	r3, [r4, #12]
 800bdb4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bdb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdbc:	81a3      	strh	r3, [r4, #12]
 800bdbe:	6126      	str	r6, [r4, #16]
 800bdc0:	6165      	str	r5, [r4, #20]
 800bdc2:	444e      	add	r6, r9
 800bdc4:	eba5 0509 	sub.w	r5, r5, r9
 800bdc8:	6026      	str	r6, [r4, #0]
 800bdca:	60a5      	str	r5, [r4, #8]
 800bdcc:	463e      	mov	r6, r7
 800bdce:	42be      	cmp	r6, r7
 800bdd0:	d900      	bls.n	800bdd4 <__ssputs_r+0x72>
 800bdd2:	463e      	mov	r6, r7
 800bdd4:	6820      	ldr	r0, [r4, #0]
 800bdd6:	4632      	mov	r2, r6
 800bdd8:	4641      	mov	r1, r8
 800bdda:	f000 fb51 	bl	800c480 <memmove>
 800bdde:	68a3      	ldr	r3, [r4, #8]
 800bde0:	1b9b      	subs	r3, r3, r6
 800bde2:	60a3      	str	r3, [r4, #8]
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	4433      	add	r3, r6
 800bde8:	6023      	str	r3, [r4, #0]
 800bdea:	2000      	movs	r0, #0
 800bdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf0:	462a      	mov	r2, r5
 800bdf2:	f000 fb7d 	bl	800c4f0 <_realloc_r>
 800bdf6:	4606      	mov	r6, r0
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	d1e0      	bne.n	800bdbe <__ssputs_r+0x5c>
 800bdfc:	6921      	ldr	r1, [r4, #16]
 800bdfe:	4650      	mov	r0, sl
 800be00:	f7fe ff62 	bl	800acc8 <_free_r>
 800be04:	230c      	movs	r3, #12
 800be06:	f8ca 3000 	str.w	r3, [sl]
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be10:	81a3      	strh	r3, [r4, #12]
 800be12:	f04f 30ff 	mov.w	r0, #4294967295
 800be16:	e7e9      	b.n	800bdec <__ssputs_r+0x8a>

0800be18 <_svfiprintf_r>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	4698      	mov	r8, r3
 800be1e:	898b      	ldrh	r3, [r1, #12]
 800be20:	061b      	lsls	r3, r3, #24
 800be22:	b09d      	sub	sp, #116	@ 0x74
 800be24:	4607      	mov	r7, r0
 800be26:	460d      	mov	r5, r1
 800be28:	4614      	mov	r4, r2
 800be2a:	d510      	bpl.n	800be4e <_svfiprintf_r+0x36>
 800be2c:	690b      	ldr	r3, [r1, #16]
 800be2e:	b973      	cbnz	r3, 800be4e <_svfiprintf_r+0x36>
 800be30:	2140      	movs	r1, #64	@ 0x40
 800be32:	f7fd fdc7 	bl	80099c4 <_malloc_r>
 800be36:	6028      	str	r0, [r5, #0]
 800be38:	6128      	str	r0, [r5, #16]
 800be3a:	b930      	cbnz	r0, 800be4a <_svfiprintf_r+0x32>
 800be3c:	230c      	movs	r3, #12
 800be3e:	603b      	str	r3, [r7, #0]
 800be40:	f04f 30ff 	mov.w	r0, #4294967295
 800be44:	b01d      	add	sp, #116	@ 0x74
 800be46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4a:	2340      	movs	r3, #64	@ 0x40
 800be4c:	616b      	str	r3, [r5, #20]
 800be4e:	2300      	movs	r3, #0
 800be50:	9309      	str	r3, [sp, #36]	@ 0x24
 800be52:	2320      	movs	r3, #32
 800be54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be58:	f8cd 800c 	str.w	r8, [sp, #12]
 800be5c:	2330      	movs	r3, #48	@ 0x30
 800be5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bffc <_svfiprintf_r+0x1e4>
 800be62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be66:	f04f 0901 	mov.w	r9, #1
 800be6a:	4623      	mov	r3, r4
 800be6c:	469a      	mov	sl, r3
 800be6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be72:	b10a      	cbz	r2, 800be78 <_svfiprintf_r+0x60>
 800be74:	2a25      	cmp	r2, #37	@ 0x25
 800be76:	d1f9      	bne.n	800be6c <_svfiprintf_r+0x54>
 800be78:	ebba 0b04 	subs.w	fp, sl, r4
 800be7c:	d00b      	beq.n	800be96 <_svfiprintf_r+0x7e>
 800be7e:	465b      	mov	r3, fp
 800be80:	4622      	mov	r2, r4
 800be82:	4629      	mov	r1, r5
 800be84:	4638      	mov	r0, r7
 800be86:	f7ff ff6c 	bl	800bd62 <__ssputs_r>
 800be8a:	3001      	adds	r0, #1
 800be8c:	f000 80a7 	beq.w	800bfde <_svfiprintf_r+0x1c6>
 800be90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be92:	445a      	add	r2, fp
 800be94:	9209      	str	r2, [sp, #36]	@ 0x24
 800be96:	f89a 3000 	ldrb.w	r3, [sl]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f000 809f 	beq.w	800bfde <_svfiprintf_r+0x1c6>
 800bea0:	2300      	movs	r3, #0
 800bea2:	f04f 32ff 	mov.w	r2, #4294967295
 800bea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beaa:	f10a 0a01 	add.w	sl, sl, #1
 800beae:	9304      	str	r3, [sp, #16]
 800beb0:	9307      	str	r3, [sp, #28]
 800beb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800beb6:	931a      	str	r3, [sp, #104]	@ 0x68
 800beb8:	4654      	mov	r4, sl
 800beba:	2205      	movs	r2, #5
 800bebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bec0:	484e      	ldr	r0, [pc, #312]	@ (800bffc <_svfiprintf_r+0x1e4>)
 800bec2:	f7f4 f98d 	bl	80001e0 <memchr>
 800bec6:	9a04      	ldr	r2, [sp, #16]
 800bec8:	b9d8      	cbnz	r0, 800bf02 <_svfiprintf_r+0xea>
 800beca:	06d0      	lsls	r0, r2, #27
 800becc:	bf44      	itt	mi
 800bece:	2320      	movmi	r3, #32
 800bed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bed4:	0711      	lsls	r1, r2, #28
 800bed6:	bf44      	itt	mi
 800bed8:	232b      	movmi	r3, #43	@ 0x2b
 800beda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bede:	f89a 3000 	ldrb.w	r3, [sl]
 800bee2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bee4:	d015      	beq.n	800bf12 <_svfiprintf_r+0xfa>
 800bee6:	9a07      	ldr	r2, [sp, #28]
 800bee8:	4654      	mov	r4, sl
 800beea:	2000      	movs	r0, #0
 800beec:	f04f 0c0a 	mov.w	ip, #10
 800bef0:	4621      	mov	r1, r4
 800bef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bef6:	3b30      	subs	r3, #48	@ 0x30
 800bef8:	2b09      	cmp	r3, #9
 800befa:	d94b      	bls.n	800bf94 <_svfiprintf_r+0x17c>
 800befc:	b1b0      	cbz	r0, 800bf2c <_svfiprintf_r+0x114>
 800befe:	9207      	str	r2, [sp, #28]
 800bf00:	e014      	b.n	800bf2c <_svfiprintf_r+0x114>
 800bf02:	eba0 0308 	sub.w	r3, r0, r8
 800bf06:	fa09 f303 	lsl.w	r3, r9, r3
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	9304      	str	r3, [sp, #16]
 800bf0e:	46a2      	mov	sl, r4
 800bf10:	e7d2      	b.n	800beb8 <_svfiprintf_r+0xa0>
 800bf12:	9b03      	ldr	r3, [sp, #12]
 800bf14:	1d19      	adds	r1, r3, #4
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	9103      	str	r1, [sp, #12]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	bfbb      	ittet	lt
 800bf1e:	425b      	neglt	r3, r3
 800bf20:	f042 0202 	orrlt.w	r2, r2, #2
 800bf24:	9307      	strge	r3, [sp, #28]
 800bf26:	9307      	strlt	r3, [sp, #28]
 800bf28:	bfb8      	it	lt
 800bf2a:	9204      	strlt	r2, [sp, #16]
 800bf2c:	7823      	ldrb	r3, [r4, #0]
 800bf2e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf30:	d10a      	bne.n	800bf48 <_svfiprintf_r+0x130>
 800bf32:	7863      	ldrb	r3, [r4, #1]
 800bf34:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf36:	d132      	bne.n	800bf9e <_svfiprintf_r+0x186>
 800bf38:	9b03      	ldr	r3, [sp, #12]
 800bf3a:	1d1a      	adds	r2, r3, #4
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	9203      	str	r2, [sp, #12]
 800bf40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf44:	3402      	adds	r4, #2
 800bf46:	9305      	str	r3, [sp, #20]
 800bf48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c00c <_svfiprintf_r+0x1f4>
 800bf4c:	7821      	ldrb	r1, [r4, #0]
 800bf4e:	2203      	movs	r2, #3
 800bf50:	4650      	mov	r0, sl
 800bf52:	f7f4 f945 	bl	80001e0 <memchr>
 800bf56:	b138      	cbz	r0, 800bf68 <_svfiprintf_r+0x150>
 800bf58:	9b04      	ldr	r3, [sp, #16]
 800bf5a:	eba0 000a 	sub.w	r0, r0, sl
 800bf5e:	2240      	movs	r2, #64	@ 0x40
 800bf60:	4082      	lsls	r2, r0
 800bf62:	4313      	orrs	r3, r2
 800bf64:	3401      	adds	r4, #1
 800bf66:	9304      	str	r3, [sp, #16]
 800bf68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf6c:	4824      	ldr	r0, [pc, #144]	@ (800c000 <_svfiprintf_r+0x1e8>)
 800bf6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf72:	2206      	movs	r2, #6
 800bf74:	f7f4 f934 	bl	80001e0 <memchr>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	d036      	beq.n	800bfea <_svfiprintf_r+0x1d2>
 800bf7c:	4b21      	ldr	r3, [pc, #132]	@ (800c004 <_svfiprintf_r+0x1ec>)
 800bf7e:	bb1b      	cbnz	r3, 800bfc8 <_svfiprintf_r+0x1b0>
 800bf80:	9b03      	ldr	r3, [sp, #12]
 800bf82:	3307      	adds	r3, #7
 800bf84:	f023 0307 	bic.w	r3, r3, #7
 800bf88:	3308      	adds	r3, #8
 800bf8a:	9303      	str	r3, [sp, #12]
 800bf8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf8e:	4433      	add	r3, r6
 800bf90:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf92:	e76a      	b.n	800be6a <_svfiprintf_r+0x52>
 800bf94:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf98:	460c      	mov	r4, r1
 800bf9a:	2001      	movs	r0, #1
 800bf9c:	e7a8      	b.n	800bef0 <_svfiprintf_r+0xd8>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	3401      	adds	r4, #1
 800bfa2:	9305      	str	r3, [sp, #20]
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	f04f 0c0a 	mov.w	ip, #10
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfb0:	3a30      	subs	r2, #48	@ 0x30
 800bfb2:	2a09      	cmp	r2, #9
 800bfb4:	d903      	bls.n	800bfbe <_svfiprintf_r+0x1a6>
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d0c6      	beq.n	800bf48 <_svfiprintf_r+0x130>
 800bfba:	9105      	str	r1, [sp, #20]
 800bfbc:	e7c4      	b.n	800bf48 <_svfiprintf_r+0x130>
 800bfbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e7f0      	b.n	800bfaa <_svfiprintf_r+0x192>
 800bfc8:	ab03      	add	r3, sp, #12
 800bfca:	9300      	str	r3, [sp, #0]
 800bfcc:	462a      	mov	r2, r5
 800bfce:	4b0e      	ldr	r3, [pc, #56]	@ (800c008 <_svfiprintf_r+0x1f0>)
 800bfd0:	a904      	add	r1, sp, #16
 800bfd2:	4638      	mov	r0, r7
 800bfd4:	f3af 8000 	nop.w
 800bfd8:	1c42      	adds	r2, r0, #1
 800bfda:	4606      	mov	r6, r0
 800bfdc:	d1d6      	bne.n	800bf8c <_svfiprintf_r+0x174>
 800bfde:	89ab      	ldrh	r3, [r5, #12]
 800bfe0:	065b      	lsls	r3, r3, #25
 800bfe2:	f53f af2d 	bmi.w	800be40 <_svfiprintf_r+0x28>
 800bfe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfe8:	e72c      	b.n	800be44 <_svfiprintf_r+0x2c>
 800bfea:	ab03      	add	r3, sp, #12
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	462a      	mov	r2, r5
 800bff0:	4b05      	ldr	r3, [pc, #20]	@ (800c008 <_svfiprintf_r+0x1f0>)
 800bff2:	a904      	add	r1, sp, #16
 800bff4:	4638      	mov	r0, r7
 800bff6:	f000 f879 	bl	800c0ec <_printf_i>
 800bffa:	e7ed      	b.n	800bfd8 <_svfiprintf_r+0x1c0>
 800bffc:	0800d0e3 	.word	0x0800d0e3
 800c000:	0800d0ed 	.word	0x0800d0ed
 800c004:	00000000 	.word	0x00000000
 800c008:	0800bd63 	.word	0x0800bd63
 800c00c:	0800d0e9 	.word	0x0800d0e9

0800c010 <_printf_common>:
 800c010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c014:	4616      	mov	r6, r2
 800c016:	4698      	mov	r8, r3
 800c018:	688a      	ldr	r2, [r1, #8]
 800c01a:	690b      	ldr	r3, [r1, #16]
 800c01c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c020:	4293      	cmp	r3, r2
 800c022:	bfb8      	it	lt
 800c024:	4613      	movlt	r3, r2
 800c026:	6033      	str	r3, [r6, #0]
 800c028:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c02c:	4607      	mov	r7, r0
 800c02e:	460c      	mov	r4, r1
 800c030:	b10a      	cbz	r2, 800c036 <_printf_common+0x26>
 800c032:	3301      	adds	r3, #1
 800c034:	6033      	str	r3, [r6, #0]
 800c036:	6823      	ldr	r3, [r4, #0]
 800c038:	0699      	lsls	r1, r3, #26
 800c03a:	bf42      	ittt	mi
 800c03c:	6833      	ldrmi	r3, [r6, #0]
 800c03e:	3302      	addmi	r3, #2
 800c040:	6033      	strmi	r3, [r6, #0]
 800c042:	6825      	ldr	r5, [r4, #0]
 800c044:	f015 0506 	ands.w	r5, r5, #6
 800c048:	d106      	bne.n	800c058 <_printf_common+0x48>
 800c04a:	f104 0a19 	add.w	sl, r4, #25
 800c04e:	68e3      	ldr	r3, [r4, #12]
 800c050:	6832      	ldr	r2, [r6, #0]
 800c052:	1a9b      	subs	r3, r3, r2
 800c054:	42ab      	cmp	r3, r5
 800c056:	dc26      	bgt.n	800c0a6 <_printf_common+0x96>
 800c058:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c05c:	6822      	ldr	r2, [r4, #0]
 800c05e:	3b00      	subs	r3, #0
 800c060:	bf18      	it	ne
 800c062:	2301      	movne	r3, #1
 800c064:	0692      	lsls	r2, r2, #26
 800c066:	d42b      	bmi.n	800c0c0 <_printf_common+0xb0>
 800c068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c06c:	4641      	mov	r1, r8
 800c06e:	4638      	mov	r0, r7
 800c070:	47c8      	blx	r9
 800c072:	3001      	adds	r0, #1
 800c074:	d01e      	beq.n	800c0b4 <_printf_common+0xa4>
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	6922      	ldr	r2, [r4, #16]
 800c07a:	f003 0306 	and.w	r3, r3, #6
 800c07e:	2b04      	cmp	r3, #4
 800c080:	bf02      	ittt	eq
 800c082:	68e5      	ldreq	r5, [r4, #12]
 800c084:	6833      	ldreq	r3, [r6, #0]
 800c086:	1aed      	subeq	r5, r5, r3
 800c088:	68a3      	ldr	r3, [r4, #8]
 800c08a:	bf0c      	ite	eq
 800c08c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c090:	2500      	movne	r5, #0
 800c092:	4293      	cmp	r3, r2
 800c094:	bfc4      	itt	gt
 800c096:	1a9b      	subgt	r3, r3, r2
 800c098:	18ed      	addgt	r5, r5, r3
 800c09a:	2600      	movs	r6, #0
 800c09c:	341a      	adds	r4, #26
 800c09e:	42b5      	cmp	r5, r6
 800c0a0:	d11a      	bne.n	800c0d8 <_printf_common+0xc8>
 800c0a2:	2000      	movs	r0, #0
 800c0a4:	e008      	b.n	800c0b8 <_printf_common+0xa8>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	4652      	mov	r2, sl
 800c0aa:	4641      	mov	r1, r8
 800c0ac:	4638      	mov	r0, r7
 800c0ae:	47c8      	blx	r9
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	d103      	bne.n	800c0bc <_printf_common+0xac>
 800c0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0bc:	3501      	adds	r5, #1
 800c0be:	e7c6      	b.n	800c04e <_printf_common+0x3e>
 800c0c0:	18e1      	adds	r1, r4, r3
 800c0c2:	1c5a      	adds	r2, r3, #1
 800c0c4:	2030      	movs	r0, #48	@ 0x30
 800c0c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c0ca:	4422      	add	r2, r4
 800c0cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c0d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c0d4:	3302      	adds	r3, #2
 800c0d6:	e7c7      	b.n	800c068 <_printf_common+0x58>
 800c0d8:	2301      	movs	r3, #1
 800c0da:	4622      	mov	r2, r4
 800c0dc:	4641      	mov	r1, r8
 800c0de:	4638      	mov	r0, r7
 800c0e0:	47c8      	blx	r9
 800c0e2:	3001      	adds	r0, #1
 800c0e4:	d0e6      	beq.n	800c0b4 <_printf_common+0xa4>
 800c0e6:	3601      	adds	r6, #1
 800c0e8:	e7d9      	b.n	800c09e <_printf_common+0x8e>
	...

0800c0ec <_printf_i>:
 800c0ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0f0:	7e0f      	ldrb	r7, [r1, #24]
 800c0f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c0f4:	2f78      	cmp	r7, #120	@ 0x78
 800c0f6:	4691      	mov	r9, r2
 800c0f8:	4680      	mov	r8, r0
 800c0fa:	460c      	mov	r4, r1
 800c0fc:	469a      	mov	sl, r3
 800c0fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c102:	d807      	bhi.n	800c114 <_printf_i+0x28>
 800c104:	2f62      	cmp	r7, #98	@ 0x62
 800c106:	d80a      	bhi.n	800c11e <_printf_i+0x32>
 800c108:	2f00      	cmp	r7, #0
 800c10a:	f000 80d1 	beq.w	800c2b0 <_printf_i+0x1c4>
 800c10e:	2f58      	cmp	r7, #88	@ 0x58
 800c110:	f000 80b8 	beq.w	800c284 <_printf_i+0x198>
 800c114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c118:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c11c:	e03a      	b.n	800c194 <_printf_i+0xa8>
 800c11e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c122:	2b15      	cmp	r3, #21
 800c124:	d8f6      	bhi.n	800c114 <_printf_i+0x28>
 800c126:	a101      	add	r1, pc, #4	@ (adr r1, 800c12c <_printf_i+0x40>)
 800c128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c12c:	0800c185 	.word	0x0800c185
 800c130:	0800c199 	.word	0x0800c199
 800c134:	0800c115 	.word	0x0800c115
 800c138:	0800c115 	.word	0x0800c115
 800c13c:	0800c115 	.word	0x0800c115
 800c140:	0800c115 	.word	0x0800c115
 800c144:	0800c199 	.word	0x0800c199
 800c148:	0800c115 	.word	0x0800c115
 800c14c:	0800c115 	.word	0x0800c115
 800c150:	0800c115 	.word	0x0800c115
 800c154:	0800c115 	.word	0x0800c115
 800c158:	0800c297 	.word	0x0800c297
 800c15c:	0800c1c3 	.word	0x0800c1c3
 800c160:	0800c251 	.word	0x0800c251
 800c164:	0800c115 	.word	0x0800c115
 800c168:	0800c115 	.word	0x0800c115
 800c16c:	0800c2b9 	.word	0x0800c2b9
 800c170:	0800c115 	.word	0x0800c115
 800c174:	0800c1c3 	.word	0x0800c1c3
 800c178:	0800c115 	.word	0x0800c115
 800c17c:	0800c115 	.word	0x0800c115
 800c180:	0800c259 	.word	0x0800c259
 800c184:	6833      	ldr	r3, [r6, #0]
 800c186:	1d1a      	adds	r2, r3, #4
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	6032      	str	r2, [r6, #0]
 800c18c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c190:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c194:	2301      	movs	r3, #1
 800c196:	e09c      	b.n	800c2d2 <_printf_i+0x1e6>
 800c198:	6833      	ldr	r3, [r6, #0]
 800c19a:	6820      	ldr	r0, [r4, #0]
 800c19c:	1d19      	adds	r1, r3, #4
 800c19e:	6031      	str	r1, [r6, #0]
 800c1a0:	0606      	lsls	r6, r0, #24
 800c1a2:	d501      	bpl.n	800c1a8 <_printf_i+0xbc>
 800c1a4:	681d      	ldr	r5, [r3, #0]
 800c1a6:	e003      	b.n	800c1b0 <_printf_i+0xc4>
 800c1a8:	0645      	lsls	r5, r0, #25
 800c1aa:	d5fb      	bpl.n	800c1a4 <_printf_i+0xb8>
 800c1ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c1b0:	2d00      	cmp	r5, #0
 800c1b2:	da03      	bge.n	800c1bc <_printf_i+0xd0>
 800c1b4:	232d      	movs	r3, #45	@ 0x2d
 800c1b6:	426d      	negs	r5, r5
 800c1b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1bc:	4858      	ldr	r0, [pc, #352]	@ (800c320 <_printf_i+0x234>)
 800c1be:	230a      	movs	r3, #10
 800c1c0:	e011      	b.n	800c1e6 <_printf_i+0xfa>
 800c1c2:	6821      	ldr	r1, [r4, #0]
 800c1c4:	6833      	ldr	r3, [r6, #0]
 800c1c6:	0608      	lsls	r0, r1, #24
 800c1c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c1cc:	d402      	bmi.n	800c1d4 <_printf_i+0xe8>
 800c1ce:	0649      	lsls	r1, r1, #25
 800c1d0:	bf48      	it	mi
 800c1d2:	b2ad      	uxthmi	r5, r5
 800c1d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c1d6:	4852      	ldr	r0, [pc, #328]	@ (800c320 <_printf_i+0x234>)
 800c1d8:	6033      	str	r3, [r6, #0]
 800c1da:	bf14      	ite	ne
 800c1dc:	230a      	movne	r3, #10
 800c1de:	2308      	moveq	r3, #8
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c1e6:	6866      	ldr	r6, [r4, #4]
 800c1e8:	60a6      	str	r6, [r4, #8]
 800c1ea:	2e00      	cmp	r6, #0
 800c1ec:	db05      	blt.n	800c1fa <_printf_i+0x10e>
 800c1ee:	6821      	ldr	r1, [r4, #0]
 800c1f0:	432e      	orrs	r6, r5
 800c1f2:	f021 0104 	bic.w	r1, r1, #4
 800c1f6:	6021      	str	r1, [r4, #0]
 800c1f8:	d04b      	beq.n	800c292 <_printf_i+0x1a6>
 800c1fa:	4616      	mov	r6, r2
 800c1fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800c200:	fb03 5711 	mls	r7, r3, r1, r5
 800c204:	5dc7      	ldrb	r7, [r0, r7]
 800c206:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c20a:	462f      	mov	r7, r5
 800c20c:	42bb      	cmp	r3, r7
 800c20e:	460d      	mov	r5, r1
 800c210:	d9f4      	bls.n	800c1fc <_printf_i+0x110>
 800c212:	2b08      	cmp	r3, #8
 800c214:	d10b      	bne.n	800c22e <_printf_i+0x142>
 800c216:	6823      	ldr	r3, [r4, #0]
 800c218:	07df      	lsls	r7, r3, #31
 800c21a:	d508      	bpl.n	800c22e <_printf_i+0x142>
 800c21c:	6923      	ldr	r3, [r4, #16]
 800c21e:	6861      	ldr	r1, [r4, #4]
 800c220:	4299      	cmp	r1, r3
 800c222:	bfde      	ittt	le
 800c224:	2330      	movle	r3, #48	@ 0x30
 800c226:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c22a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c22e:	1b92      	subs	r2, r2, r6
 800c230:	6122      	str	r2, [r4, #16]
 800c232:	f8cd a000 	str.w	sl, [sp]
 800c236:	464b      	mov	r3, r9
 800c238:	aa03      	add	r2, sp, #12
 800c23a:	4621      	mov	r1, r4
 800c23c:	4640      	mov	r0, r8
 800c23e:	f7ff fee7 	bl	800c010 <_printf_common>
 800c242:	3001      	adds	r0, #1
 800c244:	d14a      	bne.n	800c2dc <_printf_i+0x1f0>
 800c246:	f04f 30ff 	mov.w	r0, #4294967295
 800c24a:	b004      	add	sp, #16
 800c24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c250:	6823      	ldr	r3, [r4, #0]
 800c252:	f043 0320 	orr.w	r3, r3, #32
 800c256:	6023      	str	r3, [r4, #0]
 800c258:	4832      	ldr	r0, [pc, #200]	@ (800c324 <_printf_i+0x238>)
 800c25a:	2778      	movs	r7, #120	@ 0x78
 800c25c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c260:	6823      	ldr	r3, [r4, #0]
 800c262:	6831      	ldr	r1, [r6, #0]
 800c264:	061f      	lsls	r7, r3, #24
 800c266:	f851 5b04 	ldr.w	r5, [r1], #4
 800c26a:	d402      	bmi.n	800c272 <_printf_i+0x186>
 800c26c:	065f      	lsls	r7, r3, #25
 800c26e:	bf48      	it	mi
 800c270:	b2ad      	uxthmi	r5, r5
 800c272:	6031      	str	r1, [r6, #0]
 800c274:	07d9      	lsls	r1, r3, #31
 800c276:	bf44      	itt	mi
 800c278:	f043 0320 	orrmi.w	r3, r3, #32
 800c27c:	6023      	strmi	r3, [r4, #0]
 800c27e:	b11d      	cbz	r5, 800c288 <_printf_i+0x19c>
 800c280:	2310      	movs	r3, #16
 800c282:	e7ad      	b.n	800c1e0 <_printf_i+0xf4>
 800c284:	4826      	ldr	r0, [pc, #152]	@ (800c320 <_printf_i+0x234>)
 800c286:	e7e9      	b.n	800c25c <_printf_i+0x170>
 800c288:	6823      	ldr	r3, [r4, #0]
 800c28a:	f023 0320 	bic.w	r3, r3, #32
 800c28e:	6023      	str	r3, [r4, #0]
 800c290:	e7f6      	b.n	800c280 <_printf_i+0x194>
 800c292:	4616      	mov	r6, r2
 800c294:	e7bd      	b.n	800c212 <_printf_i+0x126>
 800c296:	6833      	ldr	r3, [r6, #0]
 800c298:	6825      	ldr	r5, [r4, #0]
 800c29a:	6961      	ldr	r1, [r4, #20]
 800c29c:	1d18      	adds	r0, r3, #4
 800c29e:	6030      	str	r0, [r6, #0]
 800c2a0:	062e      	lsls	r6, r5, #24
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	d501      	bpl.n	800c2aa <_printf_i+0x1be>
 800c2a6:	6019      	str	r1, [r3, #0]
 800c2a8:	e002      	b.n	800c2b0 <_printf_i+0x1c4>
 800c2aa:	0668      	lsls	r0, r5, #25
 800c2ac:	d5fb      	bpl.n	800c2a6 <_printf_i+0x1ba>
 800c2ae:	8019      	strh	r1, [r3, #0]
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	6123      	str	r3, [r4, #16]
 800c2b4:	4616      	mov	r6, r2
 800c2b6:	e7bc      	b.n	800c232 <_printf_i+0x146>
 800c2b8:	6833      	ldr	r3, [r6, #0]
 800c2ba:	1d1a      	adds	r2, r3, #4
 800c2bc:	6032      	str	r2, [r6, #0]
 800c2be:	681e      	ldr	r6, [r3, #0]
 800c2c0:	6862      	ldr	r2, [r4, #4]
 800c2c2:	2100      	movs	r1, #0
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	f7f3 ff8b 	bl	80001e0 <memchr>
 800c2ca:	b108      	cbz	r0, 800c2d0 <_printf_i+0x1e4>
 800c2cc:	1b80      	subs	r0, r0, r6
 800c2ce:	6060      	str	r0, [r4, #4]
 800c2d0:	6863      	ldr	r3, [r4, #4]
 800c2d2:	6123      	str	r3, [r4, #16]
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2da:	e7aa      	b.n	800c232 <_printf_i+0x146>
 800c2dc:	6923      	ldr	r3, [r4, #16]
 800c2de:	4632      	mov	r2, r6
 800c2e0:	4649      	mov	r1, r9
 800c2e2:	4640      	mov	r0, r8
 800c2e4:	47d0      	blx	sl
 800c2e6:	3001      	adds	r0, #1
 800c2e8:	d0ad      	beq.n	800c246 <_printf_i+0x15a>
 800c2ea:	6823      	ldr	r3, [r4, #0]
 800c2ec:	079b      	lsls	r3, r3, #30
 800c2ee:	d413      	bmi.n	800c318 <_printf_i+0x22c>
 800c2f0:	68e0      	ldr	r0, [r4, #12]
 800c2f2:	9b03      	ldr	r3, [sp, #12]
 800c2f4:	4298      	cmp	r0, r3
 800c2f6:	bfb8      	it	lt
 800c2f8:	4618      	movlt	r0, r3
 800c2fa:	e7a6      	b.n	800c24a <_printf_i+0x15e>
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	4632      	mov	r2, r6
 800c300:	4649      	mov	r1, r9
 800c302:	4640      	mov	r0, r8
 800c304:	47d0      	blx	sl
 800c306:	3001      	adds	r0, #1
 800c308:	d09d      	beq.n	800c246 <_printf_i+0x15a>
 800c30a:	3501      	adds	r5, #1
 800c30c:	68e3      	ldr	r3, [r4, #12]
 800c30e:	9903      	ldr	r1, [sp, #12]
 800c310:	1a5b      	subs	r3, r3, r1
 800c312:	42ab      	cmp	r3, r5
 800c314:	dcf2      	bgt.n	800c2fc <_printf_i+0x210>
 800c316:	e7eb      	b.n	800c2f0 <_printf_i+0x204>
 800c318:	2500      	movs	r5, #0
 800c31a:	f104 0619 	add.w	r6, r4, #25
 800c31e:	e7f5      	b.n	800c30c <_printf_i+0x220>
 800c320:	0800d0f4 	.word	0x0800d0f4
 800c324:	0800d105 	.word	0x0800d105

0800c328 <__sflush_r>:
 800c328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c330:	0716      	lsls	r6, r2, #28
 800c332:	4605      	mov	r5, r0
 800c334:	460c      	mov	r4, r1
 800c336:	d454      	bmi.n	800c3e2 <__sflush_r+0xba>
 800c338:	684b      	ldr	r3, [r1, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	dc02      	bgt.n	800c344 <__sflush_r+0x1c>
 800c33e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c340:	2b00      	cmp	r3, #0
 800c342:	dd48      	ble.n	800c3d6 <__sflush_r+0xae>
 800c344:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c346:	2e00      	cmp	r6, #0
 800c348:	d045      	beq.n	800c3d6 <__sflush_r+0xae>
 800c34a:	2300      	movs	r3, #0
 800c34c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c350:	682f      	ldr	r7, [r5, #0]
 800c352:	6a21      	ldr	r1, [r4, #32]
 800c354:	602b      	str	r3, [r5, #0]
 800c356:	d030      	beq.n	800c3ba <__sflush_r+0x92>
 800c358:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	0759      	lsls	r1, r3, #29
 800c35e:	d505      	bpl.n	800c36c <__sflush_r+0x44>
 800c360:	6863      	ldr	r3, [r4, #4]
 800c362:	1ad2      	subs	r2, r2, r3
 800c364:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c366:	b10b      	cbz	r3, 800c36c <__sflush_r+0x44>
 800c368:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c36a:	1ad2      	subs	r2, r2, r3
 800c36c:	2300      	movs	r3, #0
 800c36e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c370:	6a21      	ldr	r1, [r4, #32]
 800c372:	4628      	mov	r0, r5
 800c374:	47b0      	blx	r6
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	d106      	bne.n	800c38a <__sflush_r+0x62>
 800c37c:	6829      	ldr	r1, [r5, #0]
 800c37e:	291d      	cmp	r1, #29
 800c380:	d82b      	bhi.n	800c3da <__sflush_r+0xb2>
 800c382:	4a2a      	ldr	r2, [pc, #168]	@ (800c42c <__sflush_r+0x104>)
 800c384:	40ca      	lsrs	r2, r1
 800c386:	07d6      	lsls	r6, r2, #31
 800c388:	d527      	bpl.n	800c3da <__sflush_r+0xb2>
 800c38a:	2200      	movs	r2, #0
 800c38c:	6062      	str	r2, [r4, #4]
 800c38e:	04d9      	lsls	r1, r3, #19
 800c390:	6922      	ldr	r2, [r4, #16]
 800c392:	6022      	str	r2, [r4, #0]
 800c394:	d504      	bpl.n	800c3a0 <__sflush_r+0x78>
 800c396:	1c42      	adds	r2, r0, #1
 800c398:	d101      	bne.n	800c39e <__sflush_r+0x76>
 800c39a:	682b      	ldr	r3, [r5, #0]
 800c39c:	b903      	cbnz	r3, 800c3a0 <__sflush_r+0x78>
 800c39e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3a2:	602f      	str	r7, [r5, #0]
 800c3a4:	b1b9      	cbz	r1, 800c3d6 <__sflush_r+0xae>
 800c3a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3aa:	4299      	cmp	r1, r3
 800c3ac:	d002      	beq.n	800c3b4 <__sflush_r+0x8c>
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	f7fe fc8a 	bl	800acc8 <_free_r>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3b8:	e00d      	b.n	800c3d6 <__sflush_r+0xae>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	4628      	mov	r0, r5
 800c3be:	47b0      	blx	r6
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	1c50      	adds	r0, r2, #1
 800c3c4:	d1c9      	bne.n	800c35a <__sflush_r+0x32>
 800c3c6:	682b      	ldr	r3, [r5, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d0c6      	beq.n	800c35a <__sflush_r+0x32>
 800c3cc:	2b1d      	cmp	r3, #29
 800c3ce:	d001      	beq.n	800c3d4 <__sflush_r+0xac>
 800c3d0:	2b16      	cmp	r3, #22
 800c3d2:	d11e      	bne.n	800c412 <__sflush_r+0xea>
 800c3d4:	602f      	str	r7, [r5, #0]
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	e022      	b.n	800c420 <__sflush_r+0xf8>
 800c3da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3de:	b21b      	sxth	r3, r3
 800c3e0:	e01b      	b.n	800c41a <__sflush_r+0xf2>
 800c3e2:	690f      	ldr	r7, [r1, #16]
 800c3e4:	2f00      	cmp	r7, #0
 800c3e6:	d0f6      	beq.n	800c3d6 <__sflush_r+0xae>
 800c3e8:	0793      	lsls	r3, r2, #30
 800c3ea:	680e      	ldr	r6, [r1, #0]
 800c3ec:	bf08      	it	eq
 800c3ee:	694b      	ldreq	r3, [r1, #20]
 800c3f0:	600f      	str	r7, [r1, #0]
 800c3f2:	bf18      	it	ne
 800c3f4:	2300      	movne	r3, #0
 800c3f6:	eba6 0807 	sub.w	r8, r6, r7
 800c3fa:	608b      	str	r3, [r1, #8]
 800c3fc:	f1b8 0f00 	cmp.w	r8, #0
 800c400:	dde9      	ble.n	800c3d6 <__sflush_r+0xae>
 800c402:	6a21      	ldr	r1, [r4, #32]
 800c404:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c406:	4643      	mov	r3, r8
 800c408:	463a      	mov	r2, r7
 800c40a:	4628      	mov	r0, r5
 800c40c:	47b0      	blx	r6
 800c40e:	2800      	cmp	r0, #0
 800c410:	dc08      	bgt.n	800c424 <__sflush_r+0xfc>
 800c412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c41a:	81a3      	strh	r3, [r4, #12]
 800c41c:	f04f 30ff 	mov.w	r0, #4294967295
 800c420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c424:	4407      	add	r7, r0
 800c426:	eba8 0800 	sub.w	r8, r8, r0
 800c42a:	e7e7      	b.n	800c3fc <__sflush_r+0xd4>
 800c42c:	20400001 	.word	0x20400001

0800c430 <_fflush_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	690b      	ldr	r3, [r1, #16]
 800c434:	4605      	mov	r5, r0
 800c436:	460c      	mov	r4, r1
 800c438:	b913      	cbnz	r3, 800c440 <_fflush_r+0x10>
 800c43a:	2500      	movs	r5, #0
 800c43c:	4628      	mov	r0, r5
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	b118      	cbz	r0, 800c44a <_fflush_r+0x1a>
 800c442:	6a03      	ldr	r3, [r0, #32]
 800c444:	b90b      	cbnz	r3, 800c44a <_fflush_r+0x1a>
 800c446:	f7fe fa67 	bl	800a918 <__sinit>
 800c44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d0f3      	beq.n	800c43a <_fflush_r+0xa>
 800c452:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c454:	07d0      	lsls	r0, r2, #31
 800c456:	d404      	bmi.n	800c462 <_fflush_r+0x32>
 800c458:	0599      	lsls	r1, r3, #22
 800c45a:	d402      	bmi.n	800c462 <_fflush_r+0x32>
 800c45c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c45e:	f7fe fc1a 	bl	800ac96 <__retarget_lock_acquire_recursive>
 800c462:	4628      	mov	r0, r5
 800c464:	4621      	mov	r1, r4
 800c466:	f7ff ff5f 	bl	800c328 <__sflush_r>
 800c46a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c46c:	07da      	lsls	r2, r3, #31
 800c46e:	4605      	mov	r5, r0
 800c470:	d4e4      	bmi.n	800c43c <_fflush_r+0xc>
 800c472:	89a3      	ldrh	r3, [r4, #12]
 800c474:	059b      	lsls	r3, r3, #22
 800c476:	d4e1      	bmi.n	800c43c <_fflush_r+0xc>
 800c478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c47a:	f7fe fc0d 	bl	800ac98 <__retarget_lock_release_recursive>
 800c47e:	e7dd      	b.n	800c43c <_fflush_r+0xc>

0800c480 <memmove>:
 800c480:	4288      	cmp	r0, r1
 800c482:	b510      	push	{r4, lr}
 800c484:	eb01 0402 	add.w	r4, r1, r2
 800c488:	d902      	bls.n	800c490 <memmove+0x10>
 800c48a:	4284      	cmp	r4, r0
 800c48c:	4623      	mov	r3, r4
 800c48e:	d807      	bhi.n	800c4a0 <memmove+0x20>
 800c490:	1e43      	subs	r3, r0, #1
 800c492:	42a1      	cmp	r1, r4
 800c494:	d008      	beq.n	800c4a8 <memmove+0x28>
 800c496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c49a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c49e:	e7f8      	b.n	800c492 <memmove+0x12>
 800c4a0:	4402      	add	r2, r0
 800c4a2:	4601      	mov	r1, r0
 800c4a4:	428a      	cmp	r2, r1
 800c4a6:	d100      	bne.n	800c4aa <memmove+0x2a>
 800c4a8:	bd10      	pop	{r4, pc}
 800c4aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4b2:	e7f7      	b.n	800c4a4 <memmove+0x24>

0800c4b4 <__assert_func>:
 800c4b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4b6:	4614      	mov	r4, r2
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	4b09      	ldr	r3, [pc, #36]	@ (800c4e0 <__assert_func+0x2c>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4605      	mov	r5, r0
 800c4c0:	68d8      	ldr	r0, [r3, #12]
 800c4c2:	b14c      	cbz	r4, 800c4d8 <__assert_func+0x24>
 800c4c4:	4b07      	ldr	r3, [pc, #28]	@ (800c4e4 <__assert_func+0x30>)
 800c4c6:	9100      	str	r1, [sp, #0]
 800c4c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4cc:	4906      	ldr	r1, [pc, #24]	@ (800c4e8 <__assert_func+0x34>)
 800c4ce:	462b      	mov	r3, r5
 800c4d0:	f000 f83c 	bl	800c54c <fiprintf>
 800c4d4:	f000 f84c 	bl	800c570 <abort>
 800c4d8:	4b04      	ldr	r3, [pc, #16]	@ (800c4ec <__assert_func+0x38>)
 800c4da:	461c      	mov	r4, r3
 800c4dc:	e7f3      	b.n	800c4c6 <__assert_func+0x12>
 800c4de:	bf00      	nop
 800c4e0:	2000019c 	.word	0x2000019c
 800c4e4:	0800d116 	.word	0x0800d116
 800c4e8:	0800d123 	.word	0x0800d123
 800c4ec:	0800d151 	.word	0x0800d151

0800c4f0 <_realloc_r>:
 800c4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f4:	4607      	mov	r7, r0
 800c4f6:	4614      	mov	r4, r2
 800c4f8:	460d      	mov	r5, r1
 800c4fa:	b921      	cbnz	r1, 800c506 <_realloc_r+0x16>
 800c4fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c500:	4611      	mov	r1, r2
 800c502:	f7fd ba5f 	b.w	80099c4 <_malloc_r>
 800c506:	b92a      	cbnz	r2, 800c514 <_realloc_r+0x24>
 800c508:	f7fe fbde 	bl	800acc8 <_free_r>
 800c50c:	4625      	mov	r5, r4
 800c50e:	4628      	mov	r0, r5
 800c510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c514:	f000 f833 	bl	800c57e <_malloc_usable_size_r>
 800c518:	4284      	cmp	r4, r0
 800c51a:	4606      	mov	r6, r0
 800c51c:	d802      	bhi.n	800c524 <_realloc_r+0x34>
 800c51e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c522:	d8f4      	bhi.n	800c50e <_realloc_r+0x1e>
 800c524:	4621      	mov	r1, r4
 800c526:	4638      	mov	r0, r7
 800c528:	f7fd fa4c 	bl	80099c4 <_malloc_r>
 800c52c:	4680      	mov	r8, r0
 800c52e:	b908      	cbnz	r0, 800c534 <_realloc_r+0x44>
 800c530:	4645      	mov	r5, r8
 800c532:	e7ec      	b.n	800c50e <_realloc_r+0x1e>
 800c534:	42b4      	cmp	r4, r6
 800c536:	4622      	mov	r2, r4
 800c538:	4629      	mov	r1, r5
 800c53a:	bf28      	it	cs
 800c53c:	4632      	movcs	r2, r6
 800c53e:	f7fe fbac 	bl	800ac9a <memcpy>
 800c542:	4629      	mov	r1, r5
 800c544:	4638      	mov	r0, r7
 800c546:	f7fe fbbf 	bl	800acc8 <_free_r>
 800c54a:	e7f1      	b.n	800c530 <_realloc_r+0x40>

0800c54c <fiprintf>:
 800c54c:	b40e      	push	{r1, r2, r3}
 800c54e:	b503      	push	{r0, r1, lr}
 800c550:	4601      	mov	r1, r0
 800c552:	ab03      	add	r3, sp, #12
 800c554:	4805      	ldr	r0, [pc, #20]	@ (800c56c <fiprintf+0x20>)
 800c556:	f853 2b04 	ldr.w	r2, [r3], #4
 800c55a:	6800      	ldr	r0, [r0, #0]
 800c55c:	9301      	str	r3, [sp, #4]
 800c55e:	f000 f83f 	bl	800c5e0 <_vfiprintf_r>
 800c562:	b002      	add	sp, #8
 800c564:	f85d eb04 	ldr.w	lr, [sp], #4
 800c568:	b003      	add	sp, #12
 800c56a:	4770      	bx	lr
 800c56c:	2000019c 	.word	0x2000019c

0800c570 <abort>:
 800c570:	b508      	push	{r3, lr}
 800c572:	2006      	movs	r0, #6
 800c574:	f000 fa08 	bl	800c988 <raise>
 800c578:	2001      	movs	r0, #1
 800c57a:	f7f6 fa07 	bl	800298c <_exit>

0800c57e <_malloc_usable_size_r>:
 800c57e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c582:	1f18      	subs	r0, r3, #4
 800c584:	2b00      	cmp	r3, #0
 800c586:	bfbc      	itt	lt
 800c588:	580b      	ldrlt	r3, [r1, r0]
 800c58a:	18c0      	addlt	r0, r0, r3
 800c58c:	4770      	bx	lr

0800c58e <__sfputc_r>:
 800c58e:	6893      	ldr	r3, [r2, #8]
 800c590:	3b01      	subs	r3, #1
 800c592:	2b00      	cmp	r3, #0
 800c594:	b410      	push	{r4}
 800c596:	6093      	str	r3, [r2, #8]
 800c598:	da08      	bge.n	800c5ac <__sfputc_r+0x1e>
 800c59a:	6994      	ldr	r4, [r2, #24]
 800c59c:	42a3      	cmp	r3, r4
 800c59e:	db01      	blt.n	800c5a4 <__sfputc_r+0x16>
 800c5a0:	290a      	cmp	r1, #10
 800c5a2:	d103      	bne.n	800c5ac <__sfputc_r+0x1e>
 800c5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5a8:	f000 b932 	b.w	800c810 <__swbuf_r>
 800c5ac:	6813      	ldr	r3, [r2, #0]
 800c5ae:	1c58      	adds	r0, r3, #1
 800c5b0:	6010      	str	r0, [r2, #0]
 800c5b2:	7019      	strb	r1, [r3, #0]
 800c5b4:	4608      	mov	r0, r1
 800c5b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <__sfputs_r>:
 800c5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5be:	4606      	mov	r6, r0
 800c5c0:	460f      	mov	r7, r1
 800c5c2:	4614      	mov	r4, r2
 800c5c4:	18d5      	adds	r5, r2, r3
 800c5c6:	42ac      	cmp	r4, r5
 800c5c8:	d101      	bne.n	800c5ce <__sfputs_r+0x12>
 800c5ca:	2000      	movs	r0, #0
 800c5cc:	e007      	b.n	800c5de <__sfputs_r+0x22>
 800c5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5d2:	463a      	mov	r2, r7
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	f7ff ffda 	bl	800c58e <__sfputc_r>
 800c5da:	1c43      	adds	r3, r0, #1
 800c5dc:	d1f3      	bne.n	800c5c6 <__sfputs_r+0xa>
 800c5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5e0 <_vfiprintf_r>:
 800c5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e4:	460d      	mov	r5, r1
 800c5e6:	b09d      	sub	sp, #116	@ 0x74
 800c5e8:	4614      	mov	r4, r2
 800c5ea:	4698      	mov	r8, r3
 800c5ec:	4606      	mov	r6, r0
 800c5ee:	b118      	cbz	r0, 800c5f8 <_vfiprintf_r+0x18>
 800c5f0:	6a03      	ldr	r3, [r0, #32]
 800c5f2:	b90b      	cbnz	r3, 800c5f8 <_vfiprintf_r+0x18>
 800c5f4:	f7fe f990 	bl	800a918 <__sinit>
 800c5f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5fa:	07d9      	lsls	r1, r3, #31
 800c5fc:	d405      	bmi.n	800c60a <_vfiprintf_r+0x2a>
 800c5fe:	89ab      	ldrh	r3, [r5, #12]
 800c600:	059a      	lsls	r2, r3, #22
 800c602:	d402      	bmi.n	800c60a <_vfiprintf_r+0x2a>
 800c604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c606:	f7fe fb46 	bl	800ac96 <__retarget_lock_acquire_recursive>
 800c60a:	89ab      	ldrh	r3, [r5, #12]
 800c60c:	071b      	lsls	r3, r3, #28
 800c60e:	d501      	bpl.n	800c614 <_vfiprintf_r+0x34>
 800c610:	692b      	ldr	r3, [r5, #16]
 800c612:	b99b      	cbnz	r3, 800c63c <_vfiprintf_r+0x5c>
 800c614:	4629      	mov	r1, r5
 800c616:	4630      	mov	r0, r6
 800c618:	f000 f938 	bl	800c88c <__swsetup_r>
 800c61c:	b170      	cbz	r0, 800c63c <_vfiprintf_r+0x5c>
 800c61e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c620:	07dc      	lsls	r4, r3, #31
 800c622:	d504      	bpl.n	800c62e <_vfiprintf_r+0x4e>
 800c624:	f04f 30ff 	mov.w	r0, #4294967295
 800c628:	b01d      	add	sp, #116	@ 0x74
 800c62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62e:	89ab      	ldrh	r3, [r5, #12]
 800c630:	0598      	lsls	r0, r3, #22
 800c632:	d4f7      	bmi.n	800c624 <_vfiprintf_r+0x44>
 800c634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c636:	f7fe fb2f 	bl	800ac98 <__retarget_lock_release_recursive>
 800c63a:	e7f3      	b.n	800c624 <_vfiprintf_r+0x44>
 800c63c:	2300      	movs	r3, #0
 800c63e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c640:	2320      	movs	r3, #32
 800c642:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c646:	f8cd 800c 	str.w	r8, [sp, #12]
 800c64a:	2330      	movs	r3, #48	@ 0x30
 800c64c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c7fc <_vfiprintf_r+0x21c>
 800c650:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c654:	f04f 0901 	mov.w	r9, #1
 800c658:	4623      	mov	r3, r4
 800c65a:	469a      	mov	sl, r3
 800c65c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c660:	b10a      	cbz	r2, 800c666 <_vfiprintf_r+0x86>
 800c662:	2a25      	cmp	r2, #37	@ 0x25
 800c664:	d1f9      	bne.n	800c65a <_vfiprintf_r+0x7a>
 800c666:	ebba 0b04 	subs.w	fp, sl, r4
 800c66a:	d00b      	beq.n	800c684 <_vfiprintf_r+0xa4>
 800c66c:	465b      	mov	r3, fp
 800c66e:	4622      	mov	r2, r4
 800c670:	4629      	mov	r1, r5
 800c672:	4630      	mov	r0, r6
 800c674:	f7ff ffa2 	bl	800c5bc <__sfputs_r>
 800c678:	3001      	adds	r0, #1
 800c67a:	f000 80a7 	beq.w	800c7cc <_vfiprintf_r+0x1ec>
 800c67e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c680:	445a      	add	r2, fp
 800c682:	9209      	str	r2, [sp, #36]	@ 0x24
 800c684:	f89a 3000 	ldrb.w	r3, [sl]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	f000 809f 	beq.w	800c7cc <_vfiprintf_r+0x1ec>
 800c68e:	2300      	movs	r3, #0
 800c690:	f04f 32ff 	mov.w	r2, #4294967295
 800c694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c698:	f10a 0a01 	add.w	sl, sl, #1
 800c69c:	9304      	str	r3, [sp, #16]
 800c69e:	9307      	str	r3, [sp, #28]
 800c6a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6a6:	4654      	mov	r4, sl
 800c6a8:	2205      	movs	r2, #5
 800c6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ae:	4853      	ldr	r0, [pc, #332]	@ (800c7fc <_vfiprintf_r+0x21c>)
 800c6b0:	f7f3 fd96 	bl	80001e0 <memchr>
 800c6b4:	9a04      	ldr	r2, [sp, #16]
 800c6b6:	b9d8      	cbnz	r0, 800c6f0 <_vfiprintf_r+0x110>
 800c6b8:	06d1      	lsls	r1, r2, #27
 800c6ba:	bf44      	itt	mi
 800c6bc:	2320      	movmi	r3, #32
 800c6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6c2:	0713      	lsls	r3, r2, #28
 800c6c4:	bf44      	itt	mi
 800c6c6:	232b      	movmi	r3, #43	@ 0x2b
 800c6c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c6d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6d2:	d015      	beq.n	800c700 <_vfiprintf_r+0x120>
 800c6d4:	9a07      	ldr	r2, [sp, #28]
 800c6d6:	4654      	mov	r4, sl
 800c6d8:	2000      	movs	r0, #0
 800c6da:	f04f 0c0a 	mov.w	ip, #10
 800c6de:	4621      	mov	r1, r4
 800c6e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6e4:	3b30      	subs	r3, #48	@ 0x30
 800c6e6:	2b09      	cmp	r3, #9
 800c6e8:	d94b      	bls.n	800c782 <_vfiprintf_r+0x1a2>
 800c6ea:	b1b0      	cbz	r0, 800c71a <_vfiprintf_r+0x13a>
 800c6ec:	9207      	str	r2, [sp, #28]
 800c6ee:	e014      	b.n	800c71a <_vfiprintf_r+0x13a>
 800c6f0:	eba0 0308 	sub.w	r3, r0, r8
 800c6f4:	fa09 f303 	lsl.w	r3, r9, r3
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	9304      	str	r3, [sp, #16]
 800c6fc:	46a2      	mov	sl, r4
 800c6fe:	e7d2      	b.n	800c6a6 <_vfiprintf_r+0xc6>
 800c700:	9b03      	ldr	r3, [sp, #12]
 800c702:	1d19      	adds	r1, r3, #4
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	9103      	str	r1, [sp, #12]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	bfbb      	ittet	lt
 800c70c:	425b      	neglt	r3, r3
 800c70e:	f042 0202 	orrlt.w	r2, r2, #2
 800c712:	9307      	strge	r3, [sp, #28]
 800c714:	9307      	strlt	r3, [sp, #28]
 800c716:	bfb8      	it	lt
 800c718:	9204      	strlt	r2, [sp, #16]
 800c71a:	7823      	ldrb	r3, [r4, #0]
 800c71c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c71e:	d10a      	bne.n	800c736 <_vfiprintf_r+0x156>
 800c720:	7863      	ldrb	r3, [r4, #1]
 800c722:	2b2a      	cmp	r3, #42	@ 0x2a
 800c724:	d132      	bne.n	800c78c <_vfiprintf_r+0x1ac>
 800c726:	9b03      	ldr	r3, [sp, #12]
 800c728:	1d1a      	adds	r2, r3, #4
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	9203      	str	r2, [sp, #12]
 800c72e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c732:	3402      	adds	r4, #2
 800c734:	9305      	str	r3, [sp, #20]
 800c736:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c80c <_vfiprintf_r+0x22c>
 800c73a:	7821      	ldrb	r1, [r4, #0]
 800c73c:	2203      	movs	r2, #3
 800c73e:	4650      	mov	r0, sl
 800c740:	f7f3 fd4e 	bl	80001e0 <memchr>
 800c744:	b138      	cbz	r0, 800c756 <_vfiprintf_r+0x176>
 800c746:	9b04      	ldr	r3, [sp, #16]
 800c748:	eba0 000a 	sub.w	r0, r0, sl
 800c74c:	2240      	movs	r2, #64	@ 0x40
 800c74e:	4082      	lsls	r2, r0
 800c750:	4313      	orrs	r3, r2
 800c752:	3401      	adds	r4, #1
 800c754:	9304      	str	r3, [sp, #16]
 800c756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c75a:	4829      	ldr	r0, [pc, #164]	@ (800c800 <_vfiprintf_r+0x220>)
 800c75c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c760:	2206      	movs	r2, #6
 800c762:	f7f3 fd3d 	bl	80001e0 <memchr>
 800c766:	2800      	cmp	r0, #0
 800c768:	d03f      	beq.n	800c7ea <_vfiprintf_r+0x20a>
 800c76a:	4b26      	ldr	r3, [pc, #152]	@ (800c804 <_vfiprintf_r+0x224>)
 800c76c:	bb1b      	cbnz	r3, 800c7b6 <_vfiprintf_r+0x1d6>
 800c76e:	9b03      	ldr	r3, [sp, #12]
 800c770:	3307      	adds	r3, #7
 800c772:	f023 0307 	bic.w	r3, r3, #7
 800c776:	3308      	adds	r3, #8
 800c778:	9303      	str	r3, [sp, #12]
 800c77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c77c:	443b      	add	r3, r7
 800c77e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c780:	e76a      	b.n	800c658 <_vfiprintf_r+0x78>
 800c782:	fb0c 3202 	mla	r2, ip, r2, r3
 800c786:	460c      	mov	r4, r1
 800c788:	2001      	movs	r0, #1
 800c78a:	e7a8      	b.n	800c6de <_vfiprintf_r+0xfe>
 800c78c:	2300      	movs	r3, #0
 800c78e:	3401      	adds	r4, #1
 800c790:	9305      	str	r3, [sp, #20]
 800c792:	4619      	mov	r1, r3
 800c794:	f04f 0c0a 	mov.w	ip, #10
 800c798:	4620      	mov	r0, r4
 800c79a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c79e:	3a30      	subs	r2, #48	@ 0x30
 800c7a0:	2a09      	cmp	r2, #9
 800c7a2:	d903      	bls.n	800c7ac <_vfiprintf_r+0x1cc>
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d0c6      	beq.n	800c736 <_vfiprintf_r+0x156>
 800c7a8:	9105      	str	r1, [sp, #20]
 800c7aa:	e7c4      	b.n	800c736 <_vfiprintf_r+0x156>
 800c7ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7b0:	4604      	mov	r4, r0
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e7f0      	b.n	800c798 <_vfiprintf_r+0x1b8>
 800c7b6:	ab03      	add	r3, sp, #12
 800c7b8:	9300      	str	r3, [sp, #0]
 800c7ba:	462a      	mov	r2, r5
 800c7bc:	4b12      	ldr	r3, [pc, #72]	@ (800c808 <_vfiprintf_r+0x228>)
 800c7be:	a904      	add	r1, sp, #16
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	f3af 8000 	nop.w
 800c7c6:	4607      	mov	r7, r0
 800c7c8:	1c78      	adds	r0, r7, #1
 800c7ca:	d1d6      	bne.n	800c77a <_vfiprintf_r+0x19a>
 800c7cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7ce:	07d9      	lsls	r1, r3, #31
 800c7d0:	d405      	bmi.n	800c7de <_vfiprintf_r+0x1fe>
 800c7d2:	89ab      	ldrh	r3, [r5, #12]
 800c7d4:	059a      	lsls	r2, r3, #22
 800c7d6:	d402      	bmi.n	800c7de <_vfiprintf_r+0x1fe>
 800c7d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7da:	f7fe fa5d 	bl	800ac98 <__retarget_lock_release_recursive>
 800c7de:	89ab      	ldrh	r3, [r5, #12]
 800c7e0:	065b      	lsls	r3, r3, #25
 800c7e2:	f53f af1f 	bmi.w	800c624 <_vfiprintf_r+0x44>
 800c7e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7e8:	e71e      	b.n	800c628 <_vfiprintf_r+0x48>
 800c7ea:	ab03      	add	r3, sp, #12
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	462a      	mov	r2, r5
 800c7f0:	4b05      	ldr	r3, [pc, #20]	@ (800c808 <_vfiprintf_r+0x228>)
 800c7f2:	a904      	add	r1, sp, #16
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f7ff fc79 	bl	800c0ec <_printf_i>
 800c7fa:	e7e4      	b.n	800c7c6 <_vfiprintf_r+0x1e6>
 800c7fc:	0800d0e3 	.word	0x0800d0e3
 800c800:	0800d0ed 	.word	0x0800d0ed
 800c804:	00000000 	.word	0x00000000
 800c808:	0800c5bd 	.word	0x0800c5bd
 800c80c:	0800d0e9 	.word	0x0800d0e9

0800c810 <__swbuf_r>:
 800c810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c812:	460e      	mov	r6, r1
 800c814:	4614      	mov	r4, r2
 800c816:	4605      	mov	r5, r0
 800c818:	b118      	cbz	r0, 800c822 <__swbuf_r+0x12>
 800c81a:	6a03      	ldr	r3, [r0, #32]
 800c81c:	b90b      	cbnz	r3, 800c822 <__swbuf_r+0x12>
 800c81e:	f7fe f87b 	bl	800a918 <__sinit>
 800c822:	69a3      	ldr	r3, [r4, #24]
 800c824:	60a3      	str	r3, [r4, #8]
 800c826:	89a3      	ldrh	r3, [r4, #12]
 800c828:	071a      	lsls	r2, r3, #28
 800c82a:	d501      	bpl.n	800c830 <__swbuf_r+0x20>
 800c82c:	6923      	ldr	r3, [r4, #16]
 800c82e:	b943      	cbnz	r3, 800c842 <__swbuf_r+0x32>
 800c830:	4621      	mov	r1, r4
 800c832:	4628      	mov	r0, r5
 800c834:	f000 f82a 	bl	800c88c <__swsetup_r>
 800c838:	b118      	cbz	r0, 800c842 <__swbuf_r+0x32>
 800c83a:	f04f 37ff 	mov.w	r7, #4294967295
 800c83e:	4638      	mov	r0, r7
 800c840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c842:	6823      	ldr	r3, [r4, #0]
 800c844:	6922      	ldr	r2, [r4, #16]
 800c846:	1a98      	subs	r0, r3, r2
 800c848:	6963      	ldr	r3, [r4, #20]
 800c84a:	b2f6      	uxtb	r6, r6
 800c84c:	4283      	cmp	r3, r0
 800c84e:	4637      	mov	r7, r6
 800c850:	dc05      	bgt.n	800c85e <__swbuf_r+0x4e>
 800c852:	4621      	mov	r1, r4
 800c854:	4628      	mov	r0, r5
 800c856:	f7ff fdeb 	bl	800c430 <_fflush_r>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d1ed      	bne.n	800c83a <__swbuf_r+0x2a>
 800c85e:	68a3      	ldr	r3, [r4, #8]
 800c860:	3b01      	subs	r3, #1
 800c862:	60a3      	str	r3, [r4, #8]
 800c864:	6823      	ldr	r3, [r4, #0]
 800c866:	1c5a      	adds	r2, r3, #1
 800c868:	6022      	str	r2, [r4, #0]
 800c86a:	701e      	strb	r6, [r3, #0]
 800c86c:	6962      	ldr	r2, [r4, #20]
 800c86e:	1c43      	adds	r3, r0, #1
 800c870:	429a      	cmp	r2, r3
 800c872:	d004      	beq.n	800c87e <__swbuf_r+0x6e>
 800c874:	89a3      	ldrh	r3, [r4, #12]
 800c876:	07db      	lsls	r3, r3, #31
 800c878:	d5e1      	bpl.n	800c83e <__swbuf_r+0x2e>
 800c87a:	2e0a      	cmp	r6, #10
 800c87c:	d1df      	bne.n	800c83e <__swbuf_r+0x2e>
 800c87e:	4621      	mov	r1, r4
 800c880:	4628      	mov	r0, r5
 800c882:	f7ff fdd5 	bl	800c430 <_fflush_r>
 800c886:	2800      	cmp	r0, #0
 800c888:	d0d9      	beq.n	800c83e <__swbuf_r+0x2e>
 800c88a:	e7d6      	b.n	800c83a <__swbuf_r+0x2a>

0800c88c <__swsetup_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4b29      	ldr	r3, [pc, #164]	@ (800c934 <__swsetup_r+0xa8>)
 800c890:	4605      	mov	r5, r0
 800c892:	6818      	ldr	r0, [r3, #0]
 800c894:	460c      	mov	r4, r1
 800c896:	b118      	cbz	r0, 800c8a0 <__swsetup_r+0x14>
 800c898:	6a03      	ldr	r3, [r0, #32]
 800c89a:	b90b      	cbnz	r3, 800c8a0 <__swsetup_r+0x14>
 800c89c:	f7fe f83c 	bl	800a918 <__sinit>
 800c8a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8a4:	0719      	lsls	r1, r3, #28
 800c8a6:	d422      	bmi.n	800c8ee <__swsetup_r+0x62>
 800c8a8:	06da      	lsls	r2, r3, #27
 800c8aa:	d407      	bmi.n	800c8bc <__swsetup_r+0x30>
 800c8ac:	2209      	movs	r2, #9
 800c8ae:	602a      	str	r2, [r5, #0]
 800c8b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8b4:	81a3      	strh	r3, [r4, #12]
 800c8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ba:	e033      	b.n	800c924 <__swsetup_r+0x98>
 800c8bc:	0758      	lsls	r0, r3, #29
 800c8be:	d512      	bpl.n	800c8e6 <__swsetup_r+0x5a>
 800c8c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8c2:	b141      	cbz	r1, 800c8d6 <__swsetup_r+0x4a>
 800c8c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8c8:	4299      	cmp	r1, r3
 800c8ca:	d002      	beq.n	800c8d2 <__swsetup_r+0x46>
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	f7fe f9fb 	bl	800acc8 <_free_r>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8d6:	89a3      	ldrh	r3, [r4, #12]
 800c8d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c8dc:	81a3      	strh	r3, [r4, #12]
 800c8de:	2300      	movs	r3, #0
 800c8e0:	6063      	str	r3, [r4, #4]
 800c8e2:	6923      	ldr	r3, [r4, #16]
 800c8e4:	6023      	str	r3, [r4, #0]
 800c8e6:	89a3      	ldrh	r3, [r4, #12]
 800c8e8:	f043 0308 	orr.w	r3, r3, #8
 800c8ec:	81a3      	strh	r3, [r4, #12]
 800c8ee:	6923      	ldr	r3, [r4, #16]
 800c8f0:	b94b      	cbnz	r3, 800c906 <__swsetup_r+0x7a>
 800c8f2:	89a3      	ldrh	r3, [r4, #12]
 800c8f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c8f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8fc:	d003      	beq.n	800c906 <__swsetup_r+0x7a>
 800c8fe:	4621      	mov	r1, r4
 800c900:	4628      	mov	r0, r5
 800c902:	f000 f883 	bl	800ca0c <__smakebuf_r>
 800c906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c90a:	f013 0201 	ands.w	r2, r3, #1
 800c90e:	d00a      	beq.n	800c926 <__swsetup_r+0x9a>
 800c910:	2200      	movs	r2, #0
 800c912:	60a2      	str	r2, [r4, #8]
 800c914:	6962      	ldr	r2, [r4, #20]
 800c916:	4252      	negs	r2, r2
 800c918:	61a2      	str	r2, [r4, #24]
 800c91a:	6922      	ldr	r2, [r4, #16]
 800c91c:	b942      	cbnz	r2, 800c930 <__swsetup_r+0xa4>
 800c91e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c922:	d1c5      	bne.n	800c8b0 <__swsetup_r+0x24>
 800c924:	bd38      	pop	{r3, r4, r5, pc}
 800c926:	0799      	lsls	r1, r3, #30
 800c928:	bf58      	it	pl
 800c92a:	6962      	ldrpl	r2, [r4, #20]
 800c92c:	60a2      	str	r2, [r4, #8]
 800c92e:	e7f4      	b.n	800c91a <__swsetup_r+0x8e>
 800c930:	2000      	movs	r0, #0
 800c932:	e7f7      	b.n	800c924 <__swsetup_r+0x98>
 800c934:	2000019c 	.word	0x2000019c

0800c938 <_raise_r>:
 800c938:	291f      	cmp	r1, #31
 800c93a:	b538      	push	{r3, r4, r5, lr}
 800c93c:	4605      	mov	r5, r0
 800c93e:	460c      	mov	r4, r1
 800c940:	d904      	bls.n	800c94c <_raise_r+0x14>
 800c942:	2316      	movs	r3, #22
 800c944:	6003      	str	r3, [r0, #0]
 800c946:	f04f 30ff 	mov.w	r0, #4294967295
 800c94a:	bd38      	pop	{r3, r4, r5, pc}
 800c94c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c94e:	b112      	cbz	r2, 800c956 <_raise_r+0x1e>
 800c950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c954:	b94b      	cbnz	r3, 800c96a <_raise_r+0x32>
 800c956:	4628      	mov	r0, r5
 800c958:	f000 f830 	bl	800c9bc <_getpid_r>
 800c95c:	4622      	mov	r2, r4
 800c95e:	4601      	mov	r1, r0
 800c960:	4628      	mov	r0, r5
 800c962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c966:	f000 b817 	b.w	800c998 <_kill_r>
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d00a      	beq.n	800c984 <_raise_r+0x4c>
 800c96e:	1c59      	adds	r1, r3, #1
 800c970:	d103      	bne.n	800c97a <_raise_r+0x42>
 800c972:	2316      	movs	r3, #22
 800c974:	6003      	str	r3, [r0, #0]
 800c976:	2001      	movs	r0, #1
 800c978:	e7e7      	b.n	800c94a <_raise_r+0x12>
 800c97a:	2100      	movs	r1, #0
 800c97c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c980:	4620      	mov	r0, r4
 800c982:	4798      	blx	r3
 800c984:	2000      	movs	r0, #0
 800c986:	e7e0      	b.n	800c94a <_raise_r+0x12>

0800c988 <raise>:
 800c988:	4b02      	ldr	r3, [pc, #8]	@ (800c994 <raise+0xc>)
 800c98a:	4601      	mov	r1, r0
 800c98c:	6818      	ldr	r0, [r3, #0]
 800c98e:	f7ff bfd3 	b.w	800c938 <_raise_r>
 800c992:	bf00      	nop
 800c994:	2000019c 	.word	0x2000019c

0800c998 <_kill_r>:
 800c998:	b538      	push	{r3, r4, r5, lr}
 800c99a:	4d07      	ldr	r5, [pc, #28]	@ (800c9b8 <_kill_r+0x20>)
 800c99c:	2300      	movs	r3, #0
 800c99e:	4604      	mov	r4, r0
 800c9a0:	4608      	mov	r0, r1
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	602b      	str	r3, [r5, #0]
 800c9a6:	f7f5 ffe1 	bl	800296c <_kill>
 800c9aa:	1c43      	adds	r3, r0, #1
 800c9ac:	d102      	bne.n	800c9b4 <_kill_r+0x1c>
 800c9ae:	682b      	ldr	r3, [r5, #0]
 800c9b0:	b103      	cbz	r3, 800c9b4 <_kill_r+0x1c>
 800c9b2:	6023      	str	r3, [r4, #0]
 800c9b4:	bd38      	pop	{r3, r4, r5, pc}
 800c9b6:	bf00      	nop
 800c9b8:	20004fd0 	.word	0x20004fd0

0800c9bc <_getpid_r>:
 800c9bc:	f7f5 bfce 	b.w	800295c <_getpid>

0800c9c0 <__swhatbuf_r>:
 800c9c0:	b570      	push	{r4, r5, r6, lr}
 800c9c2:	460c      	mov	r4, r1
 800c9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9c8:	2900      	cmp	r1, #0
 800c9ca:	b096      	sub	sp, #88	@ 0x58
 800c9cc:	4615      	mov	r5, r2
 800c9ce:	461e      	mov	r6, r3
 800c9d0:	da0d      	bge.n	800c9ee <__swhatbuf_r+0x2e>
 800c9d2:	89a3      	ldrh	r3, [r4, #12]
 800c9d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c9d8:	f04f 0100 	mov.w	r1, #0
 800c9dc:	bf14      	ite	ne
 800c9de:	2340      	movne	r3, #64	@ 0x40
 800c9e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	6031      	str	r1, [r6, #0]
 800c9e8:	602b      	str	r3, [r5, #0]
 800c9ea:	b016      	add	sp, #88	@ 0x58
 800c9ec:	bd70      	pop	{r4, r5, r6, pc}
 800c9ee:	466a      	mov	r2, sp
 800c9f0:	f000 f848 	bl	800ca84 <_fstat_r>
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	dbec      	blt.n	800c9d2 <__swhatbuf_r+0x12>
 800c9f8:	9901      	ldr	r1, [sp, #4]
 800c9fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c9fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca02:	4259      	negs	r1, r3
 800ca04:	4159      	adcs	r1, r3
 800ca06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca0a:	e7eb      	b.n	800c9e4 <__swhatbuf_r+0x24>

0800ca0c <__smakebuf_r>:
 800ca0c:	898b      	ldrh	r3, [r1, #12]
 800ca0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca10:	079d      	lsls	r5, r3, #30
 800ca12:	4606      	mov	r6, r0
 800ca14:	460c      	mov	r4, r1
 800ca16:	d507      	bpl.n	800ca28 <__smakebuf_r+0x1c>
 800ca18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca1c:	6023      	str	r3, [r4, #0]
 800ca1e:	6123      	str	r3, [r4, #16]
 800ca20:	2301      	movs	r3, #1
 800ca22:	6163      	str	r3, [r4, #20]
 800ca24:	b003      	add	sp, #12
 800ca26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca28:	ab01      	add	r3, sp, #4
 800ca2a:	466a      	mov	r2, sp
 800ca2c:	f7ff ffc8 	bl	800c9c0 <__swhatbuf_r>
 800ca30:	9f00      	ldr	r7, [sp, #0]
 800ca32:	4605      	mov	r5, r0
 800ca34:	4639      	mov	r1, r7
 800ca36:	4630      	mov	r0, r6
 800ca38:	f7fc ffc4 	bl	80099c4 <_malloc_r>
 800ca3c:	b948      	cbnz	r0, 800ca52 <__smakebuf_r+0x46>
 800ca3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca42:	059a      	lsls	r2, r3, #22
 800ca44:	d4ee      	bmi.n	800ca24 <__smakebuf_r+0x18>
 800ca46:	f023 0303 	bic.w	r3, r3, #3
 800ca4a:	f043 0302 	orr.w	r3, r3, #2
 800ca4e:	81a3      	strh	r3, [r4, #12]
 800ca50:	e7e2      	b.n	800ca18 <__smakebuf_r+0xc>
 800ca52:	89a3      	ldrh	r3, [r4, #12]
 800ca54:	6020      	str	r0, [r4, #0]
 800ca56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca5a:	81a3      	strh	r3, [r4, #12]
 800ca5c:	9b01      	ldr	r3, [sp, #4]
 800ca5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca62:	b15b      	cbz	r3, 800ca7c <__smakebuf_r+0x70>
 800ca64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f000 f81d 	bl	800caa8 <_isatty_r>
 800ca6e:	b128      	cbz	r0, 800ca7c <__smakebuf_r+0x70>
 800ca70:	89a3      	ldrh	r3, [r4, #12]
 800ca72:	f023 0303 	bic.w	r3, r3, #3
 800ca76:	f043 0301 	orr.w	r3, r3, #1
 800ca7a:	81a3      	strh	r3, [r4, #12]
 800ca7c:	89a3      	ldrh	r3, [r4, #12]
 800ca7e:	431d      	orrs	r5, r3
 800ca80:	81a5      	strh	r5, [r4, #12]
 800ca82:	e7cf      	b.n	800ca24 <__smakebuf_r+0x18>

0800ca84 <_fstat_r>:
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	4d07      	ldr	r5, [pc, #28]	@ (800caa4 <_fstat_r+0x20>)
 800ca88:	2300      	movs	r3, #0
 800ca8a:	4604      	mov	r4, r0
 800ca8c:	4608      	mov	r0, r1
 800ca8e:	4611      	mov	r1, r2
 800ca90:	602b      	str	r3, [r5, #0]
 800ca92:	f7f5 ffcb 	bl	8002a2c <_fstat>
 800ca96:	1c43      	adds	r3, r0, #1
 800ca98:	d102      	bne.n	800caa0 <_fstat_r+0x1c>
 800ca9a:	682b      	ldr	r3, [r5, #0]
 800ca9c:	b103      	cbz	r3, 800caa0 <_fstat_r+0x1c>
 800ca9e:	6023      	str	r3, [r4, #0]
 800caa0:	bd38      	pop	{r3, r4, r5, pc}
 800caa2:	bf00      	nop
 800caa4:	20004fd0 	.word	0x20004fd0

0800caa8 <_isatty_r>:
 800caa8:	b538      	push	{r3, r4, r5, lr}
 800caaa:	4d06      	ldr	r5, [pc, #24]	@ (800cac4 <_isatty_r+0x1c>)
 800caac:	2300      	movs	r3, #0
 800caae:	4604      	mov	r4, r0
 800cab0:	4608      	mov	r0, r1
 800cab2:	602b      	str	r3, [r5, #0]
 800cab4:	f7f5 ffca 	bl	8002a4c <_isatty>
 800cab8:	1c43      	adds	r3, r0, #1
 800caba:	d102      	bne.n	800cac2 <_isatty_r+0x1a>
 800cabc:	682b      	ldr	r3, [r5, #0]
 800cabe:	b103      	cbz	r3, 800cac2 <_isatty_r+0x1a>
 800cac0:	6023      	str	r3, [r4, #0]
 800cac2:	bd38      	pop	{r3, r4, r5, pc}
 800cac4:	20004fd0 	.word	0x20004fd0

0800cac8 <_init>:
 800cac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caca:	bf00      	nop
 800cacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cace:	bc08      	pop	{r3}
 800cad0:	469e      	mov	lr, r3
 800cad2:	4770      	bx	lr

0800cad4 <_fini>:
 800cad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad6:	bf00      	nop
 800cad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cada:	bc08      	pop	{r3}
 800cadc:	469e      	mov	lr, r3
 800cade:	4770      	bx	lr
